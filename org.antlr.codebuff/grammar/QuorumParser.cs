//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Quorum.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class QuorumParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OUTPUT=1, ON=2, CREATE=3, CONSTANT=4, ELSE_IF=5, ME=6, UNTIL=7, PUBLIC=8, 
		PRIVATE=9, ALERT=10, DETECT=11, ALWAYS=12, CHECK=13, PARENT=14, BLUEPRINT=15, 
		NATIVE=16, INHERITS=17, CAST=18, INPUT=19, SAY=20, NOW=21, WHILE=22, PACKAGE_NAME=23, 
		TIMES=24, REPEAT=25, ELSE=26, RETURNS=27, RETURN=28, AND=29, OR=30, NULL=31, 
		ACTION=32, COLON=33, INTEGER_KEYWORD=34, NUMBER_KEYWORD=35, TEXT=36, BOOLEAN_KEYWORD=37, 
		USE=38, NOT=39, NOTEQUALS=40, PERIOD=41, COMMA=42, EQUALITY=43, GREATER=44, 
		GREATER_EQUAL=45, LESS=46, LESS_EQUAL=47, PLUS=48, MINUS=49, MULTIPLY=50, 
		DIVIDE=51, MODULO=52, LEFT_SQR_BRACE=53, RIGHT_SQR_BRACE=54, LEFT_PAREN=55, 
		RIGHT_PAREN=56, DOUBLE_QUOTE=57, IF=58, END=59, CLASS=60, BOOLEAN=61, 
		INT=62, DECIMAL=63, ID=64, STRING=65, NEWLINE=66, WS=67, COMMENTS=68;
	public const int
		RULE_start = 0, RULE_package_rule = 1, RULE_reference = 2, RULE_class_declaration = 3, 
		RULE_no_class_stmnts = 4, RULE_inherit_stmnts = 5, RULE_inherit_stmt = 6, 
		RULE_access_modifier = 7, RULE_class_stmnts = 8, RULE_method_declaration = 9, 
		RULE_method_shared = 10, RULE_formal_parameter = 11, RULE_qualified_name = 12, 
		RULE_block = 13, RULE_statement = 14, RULE_solo_method_call = 15, RULE_solo_method_required_method_part = 16, 
		RULE_alert_statement = 17, RULE_check_statement = 18, RULE_detect_statement = 19, 
		RULE_always_statement = 20, RULE_print_statement = 21, RULE_speak_statement = 22, 
		RULE_return_statement = 23, RULE_generic_declaration = 24, RULE_generic_statement = 25, 
		RULE_class_type = 26, RULE_assignment_declaration = 27, RULE_assignment_statement = 28, 
		RULE_if_statement = 29, RULE_elseif_statement = 30, RULE_else_statement = 31, 
		RULE_loop_statement = 32, RULE_initial_parent_action_call = 33, RULE_action_call = 34, 
		RULE_expression = 35, RULE_function_expression_list = 36;
	public static readonly string[] ruleNames = {
		"start", "package_rule", "reference", "class_declaration", "no_class_stmnts", 
		"inherit_stmnts", "inherit_stmt", "access_modifier", "class_stmnts", "method_declaration", 
		"method_shared", "formal_parameter", "qualified_name", "block", "statement", 
		"solo_method_call", "solo_method_required_method_part", "alert_statement", 
		"check_statement", "detect_statement", "always_statement", "print_statement", 
		"speak_statement", "return_statement", "generic_declaration", "generic_statement", 
		"class_type", "assignment_declaration", "assignment_statement", "if_statement", 
		"elseif_statement", "else_statement", "loop_statement", "initial_parent_action_call", 
		"action_call", "expression", "function_expression_list"
	};

	private static readonly string[] _LiteralNames = {
		null, "'output'", "'on'", "'create'", "'constant'", "'elseif'", "'me'", 
		"'until'", "'public'", "'private'", "'alert'", "'detect'", "'always'", 
		"'check'", "'parent'", "'blueprint'", "'system'", "'is'", "'cast'", "'input'", 
		"'say'", "'now'", "'while'", "'package'", "'times'", "'repeat'", "'else'", 
		"'returns'", "'return'", "'and'", "'or'", "'undefined'", "'action'", "':'", 
		"'integer'", "'number'", "'text'", "'boolean'", "'use'", null, null, "'.'", 
		"','", "'='", "'>'", "'>='", "'<'", "'<='", "'+'", "'-'", "'*'", "'/'", 
		"'mod'", "'['", "']'", "'('", "')'", "'\"'", "'if'", "'end'", "'class'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OUTPUT", "ON", "CREATE", "CONSTANT", "ELSE_IF", "ME", "UNTIL", 
		"PUBLIC", "PRIVATE", "ALERT", "DETECT", "ALWAYS", "CHECK", "PARENT", "BLUEPRINT", 
		"NATIVE", "INHERITS", "CAST", "INPUT", "SAY", "NOW", "WHILE", "PACKAGE_NAME", 
		"TIMES", "REPEAT", "ELSE", "RETURNS", "RETURN", "AND", "OR", "NULL", "ACTION", 
		"COLON", "INTEGER_KEYWORD", "NUMBER_KEYWORD", "TEXT", "BOOLEAN_KEYWORD", 
		"USE", "NOT", "NOTEQUALS", "PERIOD", "COMMA", "EQUALITY", "GREATER", "GREATER_EQUAL", 
		"LESS", "LESS_EQUAL", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MODULO", 
		"LEFT_SQR_BRACE", "RIGHT_SQR_BRACE", "LEFT_PAREN", "RIGHT_PAREN", "DOUBLE_QUOTE", 
		"IF", "END", "CLASS", "BOOLEAN", "INT", "DECIMAL", "ID", "STRING", "NEWLINE", 
		"WS", "COMMENTS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Quorum.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static QuorumParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

	public QuorumParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class StartContext : ParserRuleContext {
		public Class_declarationContext class_declaration() {
			return GetRuleContext<Class_declarationContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(QuorumParser.Eof, 0); }
		public Package_ruleContext package_rule() {
			return GetRuleContext<Package_ruleContext>(0);
		}
		public ReferenceContext[] reference() {
			return GetRuleContexts<ReferenceContext>();
		}
		public ReferenceContext reference(int i) {
			return GetRuleContext<ReferenceContext>(i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 74; package_rule();
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 75; reference();
					}
					}
					State = 78;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==USE );
				}
				break;
			case 2:
				{
				State = 81;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 80; reference();
					}
					}
					State = 83;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==USE );
				State = 85; package_rule();
				}
				break;
			case 3:
				{
				State = 87; package_rule();
				}
				break;
			case 4:
				{
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 88; reference();
					}
					}
					State = 91;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==USE );
				}
				break;
			case 5:
				{
				}
				break;
			}
			State = 96; class_declaration();
			State = 97; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Package_ruleContext : ParserRuleContext {
		public Qualified_nameContext name;
		public ITerminalNode PACKAGE_NAME() { return GetToken(QuorumParser.PACKAGE_NAME, 0); }
		public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		public Package_ruleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_package_rule; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterPackage_rule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitPackage_rule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackage_rule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Package_ruleContext package_rule() {
		Package_ruleContext _localctx = new Package_ruleContext(Context, State);
		EnterRule(_localctx, 2, RULE_package_rule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99; Match(PACKAGE_NAME);
			State = 100; _localctx.name = qualified_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceContext : ParserRuleContext {
		public Qualified_nameContext name;
		public ITerminalNode USE() { return GetToken(QuorumParser.USE, 0); }
		public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		public ReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceContext reference() {
		ReferenceContext _localctx = new ReferenceContext(Context, State);
		EnterRule(_localctx, 4, RULE_reference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102; Match(USE);
			State = 103; _localctx.name = qualified_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_declarationContext : ParserRuleContext {
		public Class_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_declaration; } }
	 
		public Class_declarationContext() { }
		public virtual void CopyFrom(Class_declarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FullClassDeclarationContext : Class_declarationContext {
		public ITerminalNode CLASS() { return GetToken(QuorumParser.CLASS, 0); }
		public ITerminalNode ID() { return GetToken(QuorumParser.ID, 0); }
		public ITerminalNode END() { return GetToken(QuorumParser.END, 0); }
		public Generic_declarationContext generic_declaration() {
			return GetRuleContext<Generic_declarationContext>(0);
		}
		public Inherit_stmntsContext inherit_stmnts() {
			return GetRuleContext<Inherit_stmntsContext>(0);
		}
		public Class_stmntsContext[] class_stmnts() {
			return GetRuleContexts<Class_stmntsContext>();
		}
		public Class_stmntsContext class_stmnts(int i) {
			return GetRuleContext<Class_stmntsContext>(i);
		}
		public FullClassDeclarationContext(Class_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterFullClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitFullClassDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFullClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NoClassDeclarationContext : Class_declarationContext {
		public No_class_stmntsContext no_class_stmnts() {
			return GetRuleContext<No_class_stmntsContext>(0);
		}
		public NoClassDeclarationContext(Class_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterNoClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitNoClassDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_declarationContext class_declaration() {
		Class_declarationContext _localctx = new Class_declarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_class_declaration);
		int _la;
		try {
			State = 121;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CLASS:
				_localctx = new FullClassDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 105; Match(CLASS);
				State = 106; Match(ID);
				State = 108;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LESS) {
					{
					State = 107; generic_declaration();
					}
				}

				State = 111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INHERITS) {
					{
					State = 110; inherit_stmnts();
					}
				}

				State = 116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 2)) & ~0x3f) == 0 && ((1L << (_la - 2)) & ((1L << (ON - 2)) | (1L << (CONSTANT - 2)) | (1L << (ME - 2)) | (1L << (PUBLIC - 2)) | (1L << (PRIVATE - 2)) | (1L << (PARENT - 2)) | (1L << (BLUEPRINT - 2)) | (1L << (NATIVE - 2)) | (1L << (ACTION - 2)) | (1L << (INTEGER_KEYWORD - 2)) | (1L << (NUMBER_KEYWORD - 2)) | (1L << (TEXT - 2)) | (1L << (BOOLEAN_KEYWORD - 2)) | (1L << (ID - 2)))) != 0)) {
					{
					{
					State = 113; class_stmnts();
					}
					}
					State = 118;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 119; Match(END);
				}
				}
				break;
			case OUTPUT:
			case ON:
			case CONSTANT:
			case ME:
			case PUBLIC:
			case PRIVATE:
			case ALERT:
			case CHECK:
			case PARENT:
			case BLUEPRINT:
			case NATIVE:
			case SAY:
			case REPEAT:
			case RETURN:
			case ACTION:
			case INTEGER_KEYWORD:
			case NUMBER_KEYWORD:
			case TEXT:
			case BOOLEAN_KEYWORD:
			case IF:
			case ID:
				_localctx = new NoClassDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 120; no_class_stmnts();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class No_class_stmntsContext : ParserRuleContext {
		public No_class_stmntsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_no_class_stmnts; } }
	 
		public No_class_stmntsContext() { }
		public virtual void CopyFrom(No_class_stmntsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ActionsNoClassContext : No_class_stmntsContext {
		public Method_declarationContext[] method_declaration() {
			return GetRuleContexts<Method_declarationContext>();
		}
		public Method_declarationContext method_declaration(int i) {
			return GetRuleContext<Method_declarationContext>(i);
		}
		public Access_modifierContext[] access_modifier() {
			return GetRuleContexts<Access_modifierContext>();
		}
		public Access_modifierContext access_modifier(int i) {
			return GetRuleContext<Access_modifierContext>(i);
		}
		public ActionsNoClassContext(No_class_stmntsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterActionsNoClass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitActionsNoClass(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionsNoClass(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NoActionsNoClassContext : No_class_stmntsContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public NoActionsNoClassContext(No_class_stmntsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterNoActionsNoClass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitNoActionsNoClass(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoActionsNoClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public No_class_stmntsContext no_class_stmnts() {
		No_class_stmntsContext _localctx = new No_class_stmntsContext(Context, State);
		EnterRule(_localctx, 8, RULE_no_class_stmnts);
		int _la;
		try {
			State = 136;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				_localctx = new NoActionsNoClassContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 124;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 123; statement();
					}
					}
					State = 126;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( ((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & ((1L << (OUTPUT - 1)) | (1L << (CONSTANT - 1)) | (1L << (ME - 1)) | (1L << (PUBLIC - 1)) | (1L << (PRIVATE - 1)) | (1L << (ALERT - 1)) | (1L << (CHECK - 1)) | (1L << (PARENT - 1)) | (1L << (SAY - 1)) | (1L << (REPEAT - 1)) | (1L << (RETURN - 1)) | (1L << (INTEGER_KEYWORD - 1)) | (1L << (NUMBER_KEYWORD - 1)) | (1L << (TEXT - 1)) | (1L << (BOOLEAN_KEYWORD - 1)) | (1L << (IF - 1)) | (1L << (ID - 1)))) != 0) );
				}
				break;
			case 2:
				_localctx = new ActionsNoClassContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 132;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 129;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
					case 1:
						{
						State = 128; access_modifier();
						}
						break;
					}
					State = 131; method_declaration();
					}
					}
					State = 134;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ON) | (1L << PUBLIC) | (1L << PRIVATE) | (1L << BLUEPRINT) | (1L << NATIVE) | (1L << ACTION))) != 0) );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inherit_stmntsContext : ParserRuleContext {
		public ITerminalNode INHERITS() { return GetToken(QuorumParser.INHERITS, 0); }
		public Inherit_stmtContext[] inherit_stmt() {
			return GetRuleContexts<Inherit_stmtContext>();
		}
		public Inherit_stmtContext inherit_stmt(int i) {
			return GetRuleContext<Inherit_stmtContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(QuorumParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(QuorumParser.COMMA, i);
		}
		public Inherit_stmntsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inherit_stmnts; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterInherit_stmnts(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitInherit_stmnts(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInherit_stmnts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inherit_stmntsContext inherit_stmnts() {
		Inherit_stmntsContext _localctx = new Inherit_stmntsContext(Context, State);
		EnterRule(_localctx, 10, RULE_inherit_stmnts);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138; Match(INHERITS);
			State = 139; inherit_stmt();
			State = 144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 140; Match(COMMA);
				State = 141; inherit_stmt();
				}
				}
				State = 146;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inherit_stmtContext : ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		public Generic_statementContext generic_statement() {
			return GetRuleContext<Generic_statementContext>(0);
		}
		public Inherit_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inherit_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterInherit_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitInherit_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInherit_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inherit_stmtContext inherit_stmt() {
		Inherit_stmtContext _localctx = new Inherit_stmtContext(Context, State);
		EnterRule(_localctx, 12, RULE_inherit_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147; qualified_name();
			State = 149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LESS) {
				{
				State = 148; generic_statement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Access_modifierContext : ParserRuleContext {
		public ITerminalNode PUBLIC() { return GetToken(QuorumParser.PUBLIC, 0); }
		public ITerminalNode PRIVATE() { return GetToken(QuorumParser.PRIVATE, 0); }
		public Access_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_access_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterAccess_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitAccess_modifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccess_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Access_modifierContext access_modifier() {
		Access_modifierContext _localctx = new Access_modifierContext(Context, State);
		EnterRule(_localctx, 14, RULE_access_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			_la = TokenStream.LA(1);
			if ( !(_la==PUBLIC || _la==PRIVATE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_stmntsContext : ParserRuleContext {
		public Assignment_statementContext assignment_statement() {
			return GetRuleContext<Assignment_statementContext>(0);
		}
		public Method_declarationContext method_declaration() {
			return GetRuleContext<Method_declarationContext>(0);
		}
		public Class_stmntsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_stmnts; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterClass_stmnts(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitClass_stmnts(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_stmnts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_stmntsContext class_stmnts() {
		Class_stmntsContext _localctx = new Class_stmntsContext(Context, State);
		EnterRule(_localctx, 16, RULE_class_stmnts);
		try {
			State = 155;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 153; assignment_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 154; method_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_declarationContext : ParserRuleContext {
		public Method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_declaration; } }
	 
		public Method_declarationContext() { }
		public virtual void CopyFrom(Method_declarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ActionContext : Method_declarationContext {
		public Access_modifierContext modifier;
		public Method_sharedContext method_shared() {
			return GetRuleContext<Method_sharedContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode END() { return GetToken(QuorumParser.END, 0); }
		public Access_modifierContext access_modifier() {
			return GetRuleContext<Access_modifierContext>(0);
		}
		public ActionContext(Method_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstructorContext : Method_declarationContext {
		public ITerminalNode ON() { return GetToken(QuorumParser.ON, 0); }
		public ITerminalNode CREATE() { return GetToken(QuorumParser.CREATE, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode END() { return GetToken(QuorumParser.END, 0); }
		public ConstructorContext(Method_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterConstructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitConstructor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NativeActionContext : Method_declarationContext {
		public Access_modifierContext modifier;
		public ITerminalNode NATIVE() { return GetToken(QuorumParser.NATIVE, 0); }
		public Method_sharedContext method_shared() {
			return GetRuleContext<Method_sharedContext>(0);
		}
		public Access_modifierContext access_modifier() {
			return GetRuleContext<Access_modifierContext>(0);
		}
		public NativeActionContext(Method_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterNativeAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitNativeAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNativeAction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlueprintActionContext : Method_declarationContext {
		public Access_modifierContext modifier;
		public ITerminalNode BLUEPRINT() { return GetToken(QuorumParser.BLUEPRINT, 0); }
		public Method_sharedContext method_shared() {
			return GetRuleContext<Method_sharedContext>(0);
		}
		public Access_modifierContext access_modifier() {
			return GetRuleContext<Access_modifierContext>(0);
		}
		public BlueprintActionContext(Method_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterBlueprintAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitBlueprintAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlueprintAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_declarationContext method_declaration() {
		Method_declarationContext _localctx = new Method_declarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_method_declaration);
		int _la;
		try {
			State = 179;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				_localctx = new ActionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 158;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PUBLIC || _la==PRIVATE) {
					{
					State = 157; ((ActionContext)_localctx).modifier = access_modifier();
					}
				}

				State = 160; method_shared();
				State = 161; block();
				State = 162; Match(END);
				}
				break;
			case 2:
				_localctx = new BlueprintActionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 165;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PUBLIC || _la==PRIVATE) {
					{
					State = 164; ((BlueprintActionContext)_localctx).modifier = access_modifier();
					}
				}

				State = 167; Match(BLUEPRINT);
				State = 168; method_shared();
				}
				break;
			case 3:
				_localctx = new NativeActionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PUBLIC || _la==PRIVATE) {
					{
					State = 169; ((NativeActionContext)_localctx).modifier = access_modifier();
					}
				}

				State = 172; Match(NATIVE);
				State = 173; method_shared();
				}
				break;
			case 4:
				_localctx = new ConstructorContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 174; Match(ON);
				State = 175; Match(CREATE);
				State = 176; block();
				State = 177; Match(END);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_sharedContext : ParserRuleContext {
		public Assignment_declarationContext return_type;
		public ITerminalNode ACTION() { return GetToken(QuorumParser.ACTION, 0); }
		public ITerminalNode ID() { return GetToken(QuorumParser.ID, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(QuorumParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(QuorumParser.RIGHT_PAREN, 0); }
		public ITerminalNode RETURNS() { return GetToken(QuorumParser.RETURNS, 0); }
		public Assignment_declarationContext assignment_declaration() {
			return GetRuleContext<Assignment_declarationContext>(0);
		}
		public Formal_parameterContext[] formal_parameter() {
			return GetRuleContexts<Formal_parameterContext>();
		}
		public Formal_parameterContext formal_parameter(int i) {
			return GetRuleContext<Formal_parameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(QuorumParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(QuorumParser.COMMA, i);
		}
		public Method_sharedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_shared; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterMethod_shared(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitMethod_shared(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_shared(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_sharedContext method_shared() {
		Method_sharedContext _localctx = new Method_sharedContext(Context, State);
		EnterRule(_localctx, 20, RULE_method_shared);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181; Match(ACTION);
			State = 182; Match(ID);
			State = 195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 183; Match(LEFT_PAREN);
				State = 192;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (INTEGER_KEYWORD - 34)) | (1L << (NUMBER_KEYWORD - 34)) | (1L << (TEXT - 34)) | (1L << (BOOLEAN_KEYWORD - 34)) | (1L << (ID - 34)))) != 0)) {
					{
					State = 184; formal_parameter();
					State = 189;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 185; Match(COMMA);
						State = 186; formal_parameter();
						}
						}
						State = 191;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 194; Match(RIGHT_PAREN);
				}
			}

			State = 199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURNS) {
				{
				State = 197; Match(RETURNS);
				State = 198; _localctx.return_type = assignment_declaration();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Formal_parameterContext : ParserRuleContext {
		public Assignment_declarationContext assignment_declaration() {
			return GetRuleContext<Assignment_declarationContext>(0);
		}
		public ITerminalNode ID() { return GetToken(QuorumParser.ID, 0); }
		public Formal_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formal_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterFormal_parameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitFormal_parameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormal_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Formal_parameterContext formal_parameter() {
		Formal_parameterContext _localctx = new Formal_parameterContext(Context, State);
		EnterRule(_localctx, 22, RULE_formal_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201; assignment_declaration();
			State = 202; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qualified_nameContext : ParserRuleContext {
		public IToken _ID;
		public IList<IToken> _ids = new List<IToken>();
		public ITerminalNode[] ID() { return GetTokens(QuorumParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(QuorumParser.ID, i);
		}
		public ITerminalNode[] PERIOD() { return GetTokens(QuorumParser.PERIOD); }
		public ITerminalNode PERIOD(int i) {
			return GetToken(QuorumParser.PERIOD, i);
		}
		public Qualified_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterQualified_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitQualified_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualified_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Qualified_nameContext qualified_name() {
		Qualified_nameContext _localctx = new Qualified_nameContext(Context, State);
		EnterRule(_localctx, 24, RULE_qualified_name);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 204; _localctx._ID = Match(ID);
			_localctx._ids.Add(_localctx._ID);
			State = 209;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 205; Match(PERIOD);
					State = 206; _localctx._ID = Match(ID);
					_localctx._ids.Add(_localctx._ID);
					}
					} 
				}
				State = 211;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 26, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & ((1L << (OUTPUT - 1)) | (1L << (CONSTANT - 1)) | (1L << (ME - 1)) | (1L << (PUBLIC - 1)) | (1L << (PRIVATE - 1)) | (1L << (ALERT - 1)) | (1L << (CHECK - 1)) | (1L << (PARENT - 1)) | (1L << (SAY - 1)) | (1L << (REPEAT - 1)) | (1L << (RETURN - 1)) | (1L << (INTEGER_KEYWORD - 1)) | (1L << (NUMBER_KEYWORD - 1)) | (1L << (TEXT - 1)) | (1L << (BOOLEAN_KEYWORD - 1)) | (1L << (IF - 1)) | (1L << (ID - 1)))) != 0)) {
				{
				{
				State = 212; statement();
				}
				}
				State = 217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public Solo_method_callContext solo_method_call() {
			return GetRuleContext<Solo_method_callContext>(0);
		}
		public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		public Assignment_statementContext assignment_statement() {
			return GetRuleContext<Assignment_statementContext>(0);
		}
		public Loop_statementContext loop_statement() {
			return GetRuleContext<Loop_statementContext>(0);
		}
		public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		public Print_statementContext print_statement() {
			return GetRuleContext<Print_statementContext>(0);
		}
		public Speak_statementContext speak_statement() {
			return GetRuleContext<Speak_statementContext>(0);
		}
		public Check_statementContext check_statement() {
			return GetRuleContext<Check_statementContext>(0);
		}
		public Alert_statementContext alert_statement() {
			return GetRuleContext<Alert_statementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_statement);
		try {
			State = 227;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 218; solo_method_call();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 219; if_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 220; assignment_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 221; loop_statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 222; return_statement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 223; print_statement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 224; speak_statement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 225; check_statement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 226; alert_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Solo_method_callContext : ParserRuleContext {
		public Solo_method_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_solo_method_call; } }
	 
		public Solo_method_callContext() { }
		public virtual void CopyFrom(Solo_method_callContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VariableSoloFunctionCallContext : Solo_method_callContext {
		public IToken @object;
		public Solo_method_required_method_partContext solo_method_required_method_part() {
			return GetRuleContext<Solo_method_required_method_partContext>(0);
		}
		public ITerminalNode ME() { return GetToken(QuorumParser.ME, 0); }
		public ITerminalNode[] COLON() { return GetTokens(QuorumParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(QuorumParser.COLON, i);
		}
		public Action_callContext[] action_call() {
			return GetRuleContexts<Action_callContext>();
		}
		public Action_callContext action_call(int i) {
			return GetRuleContext<Action_callContext>(i);
		}
		public ITerminalNode ID() { return GetToken(QuorumParser.ID, 0); }
		public VariableSoloFunctionCallContext(Solo_method_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterVariableSoloFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitVariableSoloFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableSoloFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParentVariableSoloFunctionCallContext : Solo_method_callContext {
		public IToken fieldName;
		public Qualified_nameContext parent;
		public ITerminalNode PARENT() { return GetToken(QuorumParser.PARENT, 0); }
		public ITerminalNode[] COLON() { return GetTokens(QuorumParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(QuorumParser.COLON, i);
		}
		public Initial_parent_action_callContext initial_parent_action_call() {
			return GetRuleContext<Initial_parent_action_callContext>(0);
		}
		public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		public Action_callContext[] action_call() {
			return GetRuleContexts<Action_callContext>();
		}
		public Action_callContext action_call(int i) {
			return GetRuleContext<Action_callContext>(i);
		}
		public ITerminalNode ME() { return GetToken(QuorumParser.ME, 0); }
		public ITerminalNode ID() { return GetToken(QuorumParser.ID, 0); }
		public ParentVariableSoloFunctionCallContext(Solo_method_callContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterParentVariableSoloFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitParentVariableSoloFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParentVariableSoloFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Solo_method_callContext solo_method_call() {
		Solo_method_callContext _localctx = new Solo_method_callContext(Context, State);
		EnterRule(_localctx, 30, RULE_solo_method_call);
		int _la;
		try {
			int _alt;
			State = 266;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				_localctx = new VariableSoloFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 231;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ME) {
					{
					State = 229; Match(ME);
					State = 230; Match(COLON);
					}
				}

				State = 235;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
				case 1:
					{
					State = 233; ((VariableSoloFunctionCallContext)_localctx).@object = Match(ID);
					State = 234; Match(COLON);
					}
					break;
				}
				State = 242;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 237; action_call();
						State = 238; Match(COLON);
						}
						} 
					}
					State = 244;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
				}
				State = 245; solo_method_required_method_part();
				}
				break;
			case 2:
				_localctx = new ParentVariableSoloFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 252;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ME || _la==ID) {
					{
					State = 248;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ME) {
						{
						State = 246; Match(ME);
						State = 247; Match(COLON);
						}
					}

					{
					State = 250; ((ParentVariableSoloFunctionCallContext)_localctx).fieldName = Match(ID);
					State = 251; Match(COLON);
					}
					}
				}

				State = 254; Match(PARENT);
				State = 255; Match(COLON);
				State = 256; ((ParentVariableSoloFunctionCallContext)_localctx).parent = qualified_name();
				State = 257; Match(COLON);
				State = 258; initial_parent_action_call();
				State = 263;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COLON) {
					{
					{
					State = 259; Match(COLON);
					{
					State = 260; action_call();
					}
					}
					}
					State = 265;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Solo_method_required_method_partContext : ParserRuleContext {
		public IToken var;
		public ITerminalNode LEFT_PAREN() { return GetToken(QuorumParser.LEFT_PAREN, 0); }
		public Function_expression_listContext function_expression_list() {
			return GetRuleContext<Function_expression_listContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(QuorumParser.RIGHT_PAREN, 0); }
		public ITerminalNode ID() { return GetToken(QuorumParser.ID, 0); }
		public Solo_method_required_method_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_solo_method_required_method_part; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterSolo_method_required_method_part(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitSolo_method_required_method_part(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSolo_method_required_method_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Solo_method_required_method_partContext solo_method_required_method_part() {
		Solo_method_required_method_partContext _localctx = new Solo_method_required_method_partContext(Context, State);
		EnterRule(_localctx, 32, RULE_solo_method_required_method_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268; _localctx.var = Match(ID);
			State = 269; Match(LEFT_PAREN);
			State = 270; function_expression_list();
			State = 271; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alert_statementContext : ParserRuleContext {
		public ITerminalNode ALERT() { return GetToken(QuorumParser.ALERT, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(QuorumParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(QuorumParser.RIGHT_PAREN, 0); }
		public Alert_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alert_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterAlert_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitAlert_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlert_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alert_statementContext alert_statement() {
		Alert_statementContext _localctx = new Alert_statementContext(Context, State);
		EnterRule(_localctx, 34, RULE_alert_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273; Match(ALERT);
			State = 274; Match(LEFT_PAREN);
			State = 275; expression(0);
			State = 276; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Check_statementContext : ParserRuleContext {
		public ITerminalNode CHECK() { return GetToken(QuorumParser.CHECK, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode END() { return GetToken(QuorumParser.END, 0); }
		public Always_statementContext always_statement() {
			return GetRuleContext<Always_statementContext>(0);
		}
		public Detect_statementContext[] detect_statement() {
			return GetRuleContexts<Detect_statementContext>();
		}
		public Detect_statementContext detect_statement(int i) {
			return GetRuleContext<Detect_statementContext>(i);
		}
		public Check_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_check_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterCheck_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitCheck_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheck_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Check_statementContext check_statement() {
		Check_statementContext _localctx = new Check_statementContext(Context, State);
		EnterRule(_localctx, 36, RULE_check_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278; Match(CHECK);
			State = 279; block();
			State = 289;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DETECT:
				{
				State = 281;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 280; detect_statement();
					}
					}
					State = 283;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DETECT );
				State = 286;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALWAYS) {
					{
					State = 285; always_statement();
					}
				}

				}
				break;
			case ALWAYS:
				{
				State = 288; always_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 291; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Detect_statementContext : ParserRuleContext {
		public IToken name;
		public ITerminalNode DETECT() { return GetToken(QuorumParser.DETECT, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode ID() { return GetToken(QuorumParser.ID, 0); }
		public ITerminalNode INHERITS() { return GetToken(QuorumParser.INHERITS, 0); }
		public Qualified_nameContext[] qualified_name() {
			return GetRuleContexts<Qualified_nameContext>();
		}
		public Qualified_nameContext qualified_name(int i) {
			return GetRuleContext<Qualified_nameContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(QuorumParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(QuorumParser.OR, i);
		}
		public Detect_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_detect_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterDetect_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitDetect_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDetect_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Detect_statementContext detect_statement() {
		Detect_statementContext _localctx = new Detect_statementContext(Context, State);
		EnterRule(_localctx, 38, RULE_detect_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293; Match(DETECT);
			State = 294; _localctx.name = Match(ID);
			State = 304;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INHERITS) {
				{
				State = 295; Match(INHERITS);
				State = 296; qualified_name();
				State = 301;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==OR) {
					{
					{
					State = 297; Match(OR);
					State = 298; qualified_name();
					}
					}
					State = 303;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 306; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Always_statementContext : ParserRuleContext {
		public ITerminalNode ALWAYS() { return GetToken(QuorumParser.ALWAYS, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Always_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_always_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterAlways_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitAlways_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlways_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Always_statementContext always_statement() {
		Always_statementContext _localctx = new Always_statementContext(Context, State);
		EnterRule(_localctx, 40, RULE_always_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308; Match(ALWAYS);
			State = 309; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Print_statementContext : ParserRuleContext {
		public ITerminalNode OUTPUT() { return GetToken(QuorumParser.OUTPUT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Print_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterPrint_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitPrint_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Print_statementContext print_statement() {
		Print_statementContext _localctx = new Print_statementContext(Context, State);
		EnterRule(_localctx, 42, RULE_print_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311; Match(OUTPUT);
			State = 312; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Speak_statementContext : ParserRuleContext {
		public ITerminalNode SAY() { return GetToken(QuorumParser.SAY, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Speak_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_speak_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterSpeak_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitSpeak_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpeak_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Speak_statementContext speak_statement() {
		Speak_statementContext _localctx = new Speak_statementContext(Context, State);
		EnterRule(_localctx, 44, RULE_speak_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314; Match(SAY);
			State = 315; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(QuorumParser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode NOW() { return GetToken(QuorumParser.NOW, 0); }
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 46, RULE_return_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317; Match(RETURN);
			State = 320;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ME:
			case PARENT:
			case CAST:
			case INPUT:
			case NULL:
			case NOT:
			case MINUS:
			case LEFT_PAREN:
			case BOOLEAN:
			case INT:
			case DECIMAL:
			case ID:
			case STRING:
				{
				State = 318; expression(0);
				}
				break;
			case NOW:
				{
				State = 319; Match(NOW);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_declarationContext : ParserRuleContext {
		public IToken _ID;
		public IList<IToken> _ids = new List<IToken>();
		public ITerminalNode LESS() { return GetToken(QuorumParser.LESS, 0); }
		public ITerminalNode GREATER() { return GetToken(QuorumParser.GREATER, 0); }
		public ITerminalNode[] ID() { return GetTokens(QuorumParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(QuorumParser.ID, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(QuorumParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(QuorumParser.COMMA, i);
		}
		public Generic_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterGeneric_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitGeneric_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneric_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Generic_declarationContext generic_declaration() {
		Generic_declarationContext _localctx = new Generic_declarationContext(Context, State);
		EnterRule(_localctx, 48, RULE_generic_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322; Match(LESS);
			State = 323; _localctx._ID = Match(ID);
			_localctx._ids.Add(_localctx._ID);
			State = 328;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 324; Match(COMMA);
				State = 325; _localctx._ID = Match(ID);
				_localctx._ids.Add(_localctx._ID);
				}
				}
				State = 330;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 331; Match(GREATER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_statementContext : ParserRuleContext {
		public ITerminalNode LESS() { return GetToken(QuorumParser.LESS, 0); }
		public Assignment_declarationContext[] assignment_declaration() {
			return GetRuleContexts<Assignment_declarationContext>();
		}
		public Assignment_declarationContext assignment_declaration(int i) {
			return GetRuleContext<Assignment_declarationContext>(i);
		}
		public ITerminalNode GREATER() { return GetToken(QuorumParser.GREATER, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(QuorumParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(QuorumParser.COMMA, i);
		}
		public Generic_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterGeneric_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitGeneric_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneric_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Generic_statementContext generic_statement() {
		Generic_statementContext _localctx = new Generic_statementContext(Context, State);
		EnterRule(_localctx, 50, RULE_generic_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333; Match(LESS);
			State = 334; assignment_declaration();
			State = 339;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 335; Match(COMMA);
				State = 336; assignment_declaration();
				}
				}
				State = 341;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 342; Match(GREATER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_typeContext : ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		public Class_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterClass_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitClass_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_typeContext class_type() {
		Class_typeContext _localctx = new Class_typeContext(Context, State);
		EnterRule(_localctx, 52, RULE_class_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 344; qualified_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_declarationContext : ParserRuleContext {
		public Assignment_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_declaration; } }
	 
		public Assignment_declarationContext() { }
		public virtual void CopyFrom(Assignment_declarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntegerAssignmentDeclarationContext : Assignment_declarationContext {
		public ITerminalNode INTEGER_KEYWORD() { return GetToken(QuorumParser.INTEGER_KEYWORD, 0); }
		public IntegerAssignmentDeclarationContext(Assignment_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterIntegerAssignmentDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitIntegerAssignmentDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerAssignmentDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberAssignmentDeclarationContext : Assignment_declarationContext {
		public ITerminalNode NUMBER_KEYWORD() { return GetToken(QuorumParser.NUMBER_KEYWORD, 0); }
		public NumberAssignmentDeclarationContext(Assignment_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterNumberAssignmentDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitNumberAssignmentDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberAssignmentDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TextAssignmentDeclarationContext : Assignment_declarationContext {
		public ITerminalNode TEXT() { return GetToken(QuorumParser.TEXT, 0); }
		public TextAssignmentDeclarationContext(Assignment_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterTextAssignmentDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitTextAssignmentDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextAssignmentDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanAssignmentDeclarationContext : Assignment_declarationContext {
		public ITerminalNode BOOLEAN_KEYWORD() { return GetToken(QuorumParser.BOOLEAN_KEYWORD, 0); }
		public BooleanAssignmentDeclarationContext(Assignment_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterBooleanAssignmentDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitBooleanAssignmentDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanAssignmentDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GenericAssignmentDeclarationContext : Assignment_declarationContext {
		public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		public Generic_statementContext generic_statement() {
			return GetRuleContext<Generic_statementContext>(0);
		}
		public GenericAssignmentDeclarationContext(Assignment_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterGenericAssignmentDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitGenericAssignmentDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericAssignmentDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_declarationContext assignment_declaration() {
		Assignment_declarationContext _localctx = new Assignment_declarationContext(Context, State);
		EnterRule(_localctx, 54, RULE_assignment_declaration);
		int _la;
		try {
			State = 354;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				_localctx = new GenericAssignmentDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 346; qualified_name();
				State = 348;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LESS) {
					{
					State = 347; generic_statement();
					}
				}

				}
				break;
			case INTEGER_KEYWORD:
				_localctx = new IntegerAssignmentDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 350; Match(INTEGER_KEYWORD);
				}
				break;
			case NUMBER_KEYWORD:
				_localctx = new NumberAssignmentDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 351; Match(NUMBER_KEYWORD);
				}
				break;
			case TEXT:
				_localctx = new TextAssignmentDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 352; Match(TEXT);
				}
				break;
			case BOOLEAN_KEYWORD:
				_localctx = new BooleanAssignmentDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 353; Match(BOOLEAN_KEYWORD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_statementContext : ParserRuleContext {
		public Assignment_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_statement; } }
	 
		public Assignment_statementContext() { }
		public virtual void CopyFrom(Assignment_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NoTypeAssignmentContext : Assignment_statementContext {
		public IToken name;
		public ExpressionContext rhs;
		public ITerminalNode EQUALITY() { return GetToken(QuorumParser.EQUALITY, 0); }
		public ITerminalNode ID() { return GetToken(QuorumParser.ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ME() { return GetToken(QuorumParser.ME, 0); }
		public ITerminalNode COLON() { return GetToken(QuorumParser.COLON, 0); }
		public NoTypeAssignmentContext(Assignment_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterNoTypeAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitNoTypeAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoTypeAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParentAssignmentContext : Assignment_statementContext {
		public Qualified_nameContext parent;
		public IToken name;
		public ExpressionContext rhs;
		public ITerminalNode PARENT() { return GetToken(QuorumParser.PARENT, 0); }
		public ITerminalNode[] COLON() { return GetTokens(QuorumParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(QuorumParser.COLON, i);
		}
		public ITerminalNode EQUALITY() { return GetToken(QuorumParser.EQUALITY, 0); }
		public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		public ITerminalNode ID() { return GetToken(QuorumParser.ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParentAssignmentContext(Assignment_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterParentAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitParentAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParentAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObjectAssignmentContext : Assignment_statementContext {
		public IToken @object;
		public Qualified_nameContext parent;
		public IToken name;
		public ExpressionContext rhs;
		public ITerminalNode[] COLON() { return GetTokens(QuorumParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(QuorumParser.COLON, i);
		}
		public ITerminalNode EQUALITY() { return GetToken(QuorumParser.EQUALITY, 0); }
		public ITerminalNode[] ID() { return GetTokens(QuorumParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(QuorumParser.ID, i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode PARENT() { return GetToken(QuorumParser.PARENT, 0); }
		public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		public ObjectAssignmentContext(Assignment_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterObjectAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitObjectAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NormalAssignmentContext : Assignment_statementContext {
		public Access_modifierContext modifier;
		public Assignment_declarationContext type;
		public IToken name;
		public ExpressionContext rhs;
		public Assignment_declarationContext assignment_declaration() {
			return GetRuleContext<Assignment_declarationContext>(0);
		}
		public ITerminalNode ID() { return GetToken(QuorumParser.ID, 0); }
		public ITerminalNode CONSTANT() { return GetToken(QuorumParser.CONSTANT, 0); }
		public ITerminalNode EQUALITY() { return GetToken(QuorumParser.EQUALITY, 0); }
		public Access_modifierContext access_modifier() {
			return GetRuleContext<Access_modifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NormalAssignmentContext(Assignment_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterNormalAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitNormalAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_statementContext assignment_statement() {
		Assignment_statementContext _localctx = new Assignment_statementContext(Context, State);
		EnterRule(_localctx, 56, RULE_assignment_statement);
		int _la;
		try {
			State = 394;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				_localctx = new NoTypeAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 358;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ME) {
					{
					State = 356; Match(ME);
					State = 357; Match(COLON);
					}
				}

				State = 360; ((NoTypeAssignmentContext)_localctx).name = Match(ID);
				State = 361; Match(EQUALITY);
				State = 362; ((NoTypeAssignmentContext)_localctx).rhs = expression(0);
				}
				break;
			case 2:
				_localctx = new ParentAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 363; Match(PARENT);
				State = 364; Match(COLON);
				State = 365; ((ParentAssignmentContext)_localctx).parent = qualified_name();
				State = 366; Match(COLON);
				State = 367; ((ParentAssignmentContext)_localctx).name = Match(ID);
				State = 368; Match(EQUALITY);
				State = 369; ((ParentAssignmentContext)_localctx).rhs = expression(0);
				}
				break;
			case 3:
				_localctx = new ObjectAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 371; ((ObjectAssignmentContext)_localctx).@object = Match(ID);
				State = 376;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
				case 1:
					{
					State = 372; Match(COLON);
					State = 373; Match(PARENT);
					State = 374; Match(COLON);
					State = 375; ((ObjectAssignmentContext)_localctx).parent = qualified_name();
					}
					break;
				}
				State = 378; Match(COLON);
				State = 379; ((ObjectAssignmentContext)_localctx).name = Match(ID);
				State = 380; Match(EQUALITY);
				State = 381; ((ObjectAssignmentContext)_localctx).rhs = expression(0);
				}
				break;
			case 4:
				_localctx = new NormalAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 383;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PUBLIC || _la==PRIVATE) {
					{
					State = 382; ((NormalAssignmentContext)_localctx).modifier = access_modifier();
					}
				}

				State = 386;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTANT) {
					{
					State = 385; Match(CONSTANT);
					}
				}

				State = 388; ((NormalAssignmentContext)_localctx).type = assignment_declaration();
				State = 389; ((NormalAssignmentContext)_localctx).name = Match(ID);
				State = 392;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUALITY) {
					{
					State = 390; Match(EQUALITY);
					State = 391; ((NormalAssignmentContext)_localctx).rhs = expression(0);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(QuorumParser.IF, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode END() { return GetToken(QuorumParser.END, 0); }
		public Elseif_statementContext[] elseif_statement() {
			return GetRuleContexts<Elseif_statementContext>();
		}
		public Elseif_statementContext elseif_statement(int i) {
			return GetRuleContext<Elseif_statementContext>(i);
		}
		public Else_statementContext else_statement() {
			return GetRuleContext<Else_statementContext>(0);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 58, RULE_if_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 396; Match(IF);
			State = 397; expression(0);
			State = 398; block();
			State = 402;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELSE_IF) {
				{
				{
				State = 399; elseif_statement();
				}
				}
				State = 404;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 406;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 405; else_statement();
				}
			}

			State = 408; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Elseif_statementContext : ParserRuleContext {
		public ITerminalNode ELSE_IF() { return GetToken(QuorumParser.ELSE_IF, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Elseif_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseif_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterElseif_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitElseif_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseif_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Elseif_statementContext elseif_statement() {
		Elseif_statementContext _localctx = new Elseif_statementContext(Context, State);
		EnterRule(_localctx, 60, RULE_elseif_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410; Match(ELSE_IF);
			State = 411; expression(0);
			State = 412; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_statementContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(QuorumParser.ELSE, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Else_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterElse_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitElse_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_statementContext else_statement() {
		Else_statementContext _localctx = new Else_statementContext(Context, State);
		EnterRule(_localctx, 62, RULE_else_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414; Match(ELSE);
			State = 415; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Loop_statementContext : ParserRuleContext {
		public ITerminalNode REPEAT() { return GetToken(QuorumParser.REPEAT, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode END() { return GetToken(QuorumParser.END, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TIMES() { return GetToken(QuorumParser.TIMES, 0); }
		public ITerminalNode WHILE() { return GetToken(QuorumParser.WHILE, 0); }
		public ITerminalNode UNTIL() { return GetToken(QuorumParser.UNTIL, 0); }
		public Loop_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterLoop_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitLoop_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Loop_statementContext loop_statement() {
		Loop_statementContext _localctx = new Loop_statementContext(Context, State);
		EnterRule(_localctx, 64, RULE_loop_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 417; Match(REPEAT);
			State = 423;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ME:
			case PARENT:
			case CAST:
			case INPUT:
			case NULL:
			case NOT:
			case MINUS:
			case LEFT_PAREN:
			case BOOLEAN:
			case INT:
			case DECIMAL:
			case ID:
			case STRING:
				{
				{
				State = 418; expression(0);
				State = 419; Match(TIMES);
				}
				}
				break;
			case UNTIL:
			case WHILE:
				{
				{
				State = 421;
				_la = TokenStream.LA(1);
				if ( !(_la==UNTIL || _la==WHILE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 422; expression(0);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 425; block();
			State = 426; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Initial_parent_action_callContext : ParserRuleContext {
		public IToken var;
		public ITerminalNode ID() { return GetToken(QuorumParser.ID, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(QuorumParser.LEFT_PAREN, 0); }
		public Function_expression_listContext function_expression_list() {
			return GetRuleContext<Function_expression_listContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(QuorumParser.RIGHT_PAREN, 0); }
		public Initial_parent_action_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initial_parent_action_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterInitial_parent_action_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitInitial_parent_action_call(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitial_parent_action_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Initial_parent_action_callContext initial_parent_action_call() {
		Initial_parent_action_callContext _localctx = new Initial_parent_action_callContext(Context, State);
		EnterRule(_localctx, 66, RULE_initial_parent_action_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 428; _localctx.var = Match(ID);
			State = 433;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				{
				State = 429; Match(LEFT_PAREN);
				State = 430; function_expression_list();
				State = 431; Match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Action_callContext : ParserRuleContext {
		public IToken var;
		public ITerminalNode ID() { return GetToken(QuorumParser.ID, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(QuorumParser.LEFT_PAREN, 0); }
		public Function_expression_listContext function_expression_list() {
			return GetRuleContext<Function_expression_listContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(QuorumParser.RIGHT_PAREN, 0); }
		public Action_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterAction_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitAction_call(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAction_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Action_callContext action_call() {
		Action_callContext _localctx = new Action_callContext(Context, State);
		EnterRule(_localctx, 68, RULE_action_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 435; _localctx.var = Match(ID);
			State = 440;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				{
				State = 436; Match(LEFT_PAREN);
				State = 437; function_expression_list();
				State = 438; Match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CastContext : ExpressionContext {
		public Assignment_declarationContext type;
		public ITerminalNode CAST() { return GetToken(QuorumParser.CAST, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(QuorumParser.LEFT_PAREN, 0); }
		public ITerminalNode COMMA() { return GetToken(QuorumParser.COMMA, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(QuorumParser.RIGHT_PAREN, 0); }
		public Assignment_declarationContext assignment_declaration() {
			return GetRuleContext<Assignment_declarationContext>(0);
		}
		public CastContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterCast(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitCast(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCast(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullContext : ExpressionContext {
		public ITerminalNode NULL() { return GetToken(QuorumParser.NULL, 0); }
		public NullContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterNull(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitNull(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNull(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicationContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode MULTIPLY() { return GetToken(QuorumParser.MULTIPLY, 0); }
		public ITerminalNode DIVIDE() { return GetToken(QuorumParser.DIVIDE, 0); }
		public ITerminalNode MODULO() { return GetToken(QuorumParser.MODULO, 0); }
		public MultiplicationContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterMultiplication(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitMultiplication(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplication(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(QuorumParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(QuorumParser.MINUS, 0); }
		public AdditionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterAddition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitAddition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode OR() { return GetToken(QuorumParser.OR, 0); }
		public OrContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisExpressionContext : ExpressionContext {
		public ITerminalNode LEFT_PAREN() { return GetToken(QuorumParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(QuorumParser.RIGHT_PAREN, 0); }
		public ParenthesisExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterParenthesisExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitParenthesisExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InheritsContext : ExpressionContext {
		public Class_typeContext name;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode INHERITS() { return GetToken(QuorumParser.INHERITS, 0); }
		public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		public InheritsContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterInherits(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitInherits(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInherits(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringContext : ExpressionContext {
		public ITerminalNode STRING() { return GetToken(QuorumParser.STRING, 0); }
		public StringContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntegerContext : ExpressionContext {
		public ITerminalNode INT() { return GetToken(QuorumParser.INT, 0); }
		public IntegerContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterInteger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitInteger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableFunctionCallContext : ExpressionContext {
		public Action_callContext[] action_call() {
			return GetRuleContexts<Action_callContext>();
		}
		public Action_callContext action_call(int i) {
			return GetRuleContext<Action_callContext>(i);
		}
		public ITerminalNode ME() { return GetToken(QuorumParser.ME, 0); }
		public ITerminalNode[] COLON() { return GetTokens(QuorumParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(QuorumParser.COLON, i);
		}
		public VariableFunctionCallContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterVariableFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitVariableFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InputContext : ExpressionContext {
		public ITerminalNode INPUT() { return GetToken(QuorumParser.INPUT, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(QuorumParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(QuorumParser.RIGHT_PAREN, 0); }
		public InputContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterInput(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitInput(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInput(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotContext : ExpressionContext {
		public ITerminalNode NOT() { return GetToken(QuorumParser.NOT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterNot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitNot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualsContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode EQUALITY() { return GetToken(QuorumParser.EQUALITY, 0); }
		public ITerminalNode NOTEQUALS() { return GetToken(QuorumParser.NOTEQUALS, 0); }
		public EqualsContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterEquals(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitEquals(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquals(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DecimalContext : ExpressionContext {
		public ITerminalNode DECIMAL() { return GetToken(QuorumParser.DECIMAL, 0); }
		public DecimalContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterDecimal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitDecimal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode AND() { return GetToken(QuorumParser.AND, 0); }
		public AndContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MeContext : ExpressionContext {
		public ITerminalNode ME() { return GetToken(QuorumParser.ME, 0); }
		public MeContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterMe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitMe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMe(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode GREATER() { return GetToken(QuorumParser.GREATER, 0); }
		public ITerminalNode GREATER_EQUAL() { return GetToken(QuorumParser.GREATER_EQUAL, 0); }
		public ITerminalNode LESS() { return GetToken(QuorumParser.LESS, 0); }
		public ITerminalNode LESS_EQUAL() { return GetToken(QuorumParser.LESS_EQUAL, 0); }
		public GreaterContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterGreater(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitGreater(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreater(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanContext : ExpressionContext {
		public ITerminalNode BOOLEAN() { return GetToken(QuorumParser.BOOLEAN, 0); }
		public BooleanContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InputNoParametersContext : ExpressionContext {
		public ITerminalNode INPUT() { return GetToken(QuorumParser.INPUT, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(QuorumParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(QuorumParser.RIGHT_PAREN, 0); }
		public InputNoParametersContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterInputNoParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitInputNoParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputNoParameters(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParentVariableFunctionCallContext : ExpressionContext {
		public IToken fieldName;
		public Qualified_nameContext parent;
		public ITerminalNode PARENT() { return GetToken(QuorumParser.PARENT, 0); }
		public ITerminalNode[] COLON() { return GetTokens(QuorumParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(QuorumParser.COLON, i);
		}
		public Initial_parent_action_callContext initial_parent_action_call() {
			return GetRuleContext<Initial_parent_action_callContext>(0);
		}
		public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		public Action_callContext[] action_call() {
			return GetRuleContexts<Action_callContext>();
		}
		public Action_callContext action_call(int i) {
			return GetRuleContext<Action_callContext>(i);
		}
		public ITerminalNode ME() { return GetToken(QuorumParser.ME, 0); }
		public ITerminalNode ID() { return GetToken(QuorumParser.ID, 0); }
		public ParentVariableFunctionCallContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterParentVariableFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitParentVariableFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParentVariableFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MinusContext : ExpressionContext {
		public ITerminalNode MINUS() { return GetToken(QuorumParser.MINUS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MinusContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterMinus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitMinus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinus(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 70;
		EnterRecursionRule(_localctx, 70, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 504;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				{
				_localctx = new ParenthesisExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 443; Match(LEFT_PAREN);
				State = 444; expression(0);
				State = 445; Match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				_localctx = new IntegerContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 447; Match(INT);
				}
				break;
			case 3:
				{
				_localctx = new BooleanContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 448; Match(BOOLEAN);
				}
				break;
			case 4:
				{
				_localctx = new DecimalContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 449; Match(DECIMAL);
				}
				break;
			case 5:
				{
				_localctx = new StringContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 450; Match(STRING);
				}
				break;
			case 6:
				{
				_localctx = new NullContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 451; Match(NULL);
				}
				break;
			case 7:
				{
				_localctx = new MeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 452; Match(ME);
				}
				break;
			case 8:
				{
				_localctx = new InputContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 453; Match(INPUT);
				State = 454; Match(LEFT_PAREN);
				State = 455; expression(0);
				State = 456; Match(RIGHT_PAREN);
				}
				break;
			case 9:
				{
				_localctx = new InputNoParametersContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 458; Match(INPUT);
				State = 459; Match(LEFT_PAREN);
				State = 460; Match(RIGHT_PAREN);
				}
				break;
			case 10:
				{
				_localctx = new VariableFunctionCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 463;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ME) {
					{
					State = 461; Match(ME);
					State = 462; Match(COLON);
					}
				}

				State = 465; action_call();
				State = 470;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 466; Match(COLON);
						{
						State = 467; action_call();
						}
						}
						} 
					}
					State = 472;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
				}
				}
				break;
			case 11:
				{
				_localctx = new ParentVariableFunctionCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 479;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ME || _la==ID) {
					{
					State = 475;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ME) {
						{
						State = 473; Match(ME);
						State = 474; Match(COLON);
						}
					}

					{
					State = 477; ((ParentVariableFunctionCallContext)_localctx).fieldName = Match(ID);
					State = 478; Match(COLON);
					}
					}
				}

				State = 481; Match(PARENT);
				State = 482; Match(COLON);
				State = 483; ((ParentVariableFunctionCallContext)_localctx).parent = qualified_name();
				State = 484; Match(COLON);
				State = 485; initial_parent_action_call();
				State = 490;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 486; Match(COLON);
						{
						State = 487; action_call();
						}
						}
						} 
					}
					State = 492;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
				}
				}
				break;
			case 12:
				{
				_localctx = new MinusContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 493; Match(MINUS);
				State = 494; expression(10);
				}
				break;
			case 13:
				{
				_localctx = new NotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 495; Match(NOT);
				State = 496; expression(9);
				}
				break;
			case 14:
				{
				_localctx = new CastContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 497; Match(CAST);
				State = 498; Match(LEFT_PAREN);
				State = 499; ((CastContext)_localctx).type = assignment_declaration();
				State = 500; Match(COMMA);
				State = 501; expression(0);
				State = 502; Match(RIGHT_PAREN);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 529;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 527;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
					case 1:
						{
						_localctx = new MultiplicationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 506;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 507;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MULTIPLY) | (1L << DIVIDE) | (1L << MODULO))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 508; expression(8);
						}
						break;
					case 2:
						{
						_localctx = new AdditionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 509;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 510;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 511; expression(7);
						}
						break;
					case 3:
						{
						_localctx = new GreaterContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 512;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 513;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GREATER) | (1L << GREATER_EQUAL) | (1L << LESS) | (1L << LESS_EQUAL))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 514; expression(6);
						}
						break;
					case 4:
						{
						_localctx = new EqualsContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 515;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 516;
						_la = TokenStream.LA(1);
						if ( !(_la==NOTEQUALS || _la==EQUALITY) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 517; expression(4);
						}
						break;
					case 5:
						{
						_localctx = new AndContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 518;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						{
						State = 519; Match(AND);
						}
						State = 520; expression(3);
						}
						break;
					case 6:
						{
						_localctx = new OrContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 521;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						{
						State = 522; Match(OR);
						}
						State = 523; expression(2);
						}
						break;
					case 7:
						{
						_localctx = new InheritsContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 524;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 525; Match(INHERITS);
						State = 526; ((InheritsContext)_localctx).name = class_type();
						}
						break;
					}
					} 
				}
				State = 531;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Function_expression_listContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(QuorumParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(QuorumParser.COMMA, i);
		}
		public Function_expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_expression_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.EnterFunction_expression_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuorumListener typedListener = listener as IQuorumListener;
			if (typedListener != null) typedListener.ExitFunction_expression_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuorumVisitor<TResult> typedVisitor = visitor as IQuorumVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_expression_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_expression_listContext function_expression_list() {
		Function_expression_listContext _localctx = new Function_expression_listContext(Context, State);
		EnterRule(_localctx, 72, RULE_function_expression_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 540;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (ME - 6)) | (1L << (PARENT - 6)) | (1L << (CAST - 6)) | (1L << (INPUT - 6)) | (1L << (NULL - 6)) | (1L << (NOT - 6)) | (1L << (MINUS - 6)) | (1L << (LEFT_PAREN - 6)) | (1L << (BOOLEAN - 6)) | (1L << (INT - 6)) | (1L << (DECIMAL - 6)) | (1L << (ID - 6)) | (1L << (STRING - 6)))) != 0)) {
				{
				State = 532; expression(0);
				State = 537;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 533; Match(COMMA);
					State = 534; expression(0);
					}
					}
					State = 539;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 35: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 7);
		case 1: return Precpred(Context, 6);
		case 2: return Precpred(Context, 5);
		case 3: return Precpred(Context, 3);
		case 4: return Precpred(Context, 2);
		case 5: return Precpred(Context, 1);
		case 6: return Precpred(Context, 4);
		}
		return true;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x46");
		sb.Append("\x221\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12");
		sb.Append("\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16\x4");
		sb.Append("\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B\t\x1B");
		sb.Append("\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t ");
		sb.Append("\x4!\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x3\x2\x3\x2\x6");
		sb.Append("\x2O\n\x2\r\x2\xE\x2P\x3\x2\x6\x2T\n\x2\r\x2\xE\x2U\x3\x2\x3");
		sb.Append("\x2\x3\x2\x3\x2\x6\x2\\\n\x2\r\x2\xE\x2]\x3\x2\x5\x2\x61\n\x2");
		sb.Append("\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x5");
		sb.Append("\x3\x5\x3\x5\x5\x5o\n\x5\x3\x5\x5\x5r\n\x5\x3\x5\a\x5u\n\x5");
		sb.Append("\f\x5\xE\x5x\v\x5\x3\x5\x3\x5\x5\x5|\n\x5\x3\x6\x6\x6\x7F\n");
		sb.Append("\x6\r\x6\xE\x6\x80\x3\x6\x5\x6\x84\n\x6\x3\x6\x6\x6\x87\n\x6");
		sb.Append("\r\x6\xE\x6\x88\x5\x6\x8B\n\x6\x3\a\x3\a\x3\a\x3\a\a\a\x91\n");
		sb.Append("\a\f\a\xE\a\x94\v\a\x3\b\x3\b\x5\b\x98\n\b\x3\t\x3\t\x3\n\x3");
		sb.Append("\n\x5\n\x9E\n\n\x3\v\x5\v\xA1\n\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5");
		sb.Append("\v\xA8\n\v\x3\v\x3\v\x3\v\x5\v\xAD\n\v\x3\v\x3\v\x3\v\x3\v\x3");
		sb.Append("\v\x3\v\x3\v\x5\v\xB6\n\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\a\f");
		sb.Append("\xBE\n\f\f\f\xE\f\xC1\v\f\x5\f\xC3\n\f\x3\f\x5\f\xC6\n\f\x3");
		sb.Append("\f\x3\f\x5\f\xCA\n\f\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\a\xE\xD2");
		sb.Append("\n\xE\f\xE\xE\xE\xD5\v\xE\x3\xF\a\xF\xD8\n\xF\f\xF\xE\xF\xDB");
		sb.Append("\v\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10");
		sb.Append("\x3\x10\x5\x10\xE6\n\x10\x3\x11\x3\x11\x5\x11\xEA\n\x11\x3\x11");
		sb.Append("\x3\x11\x5\x11\xEE\n\x11\x3\x11\x3\x11\x3\x11\a\x11\xF3\n\x11");
		sb.Append("\f\x11\xE\x11\xF6\v\x11\x3\x11\x3\x11\x3\x11\x5\x11\xFB\n\x11");
		sb.Append("\x3\x11\x3\x11\x5\x11\xFF\n\x11\x3\x11\x3\x11\x3\x11\x3\x11");
		sb.Append("\x3\x11\x3\x11\x3\x11\a\x11\x108\n\x11\f\x11\xE\x11\x10B\v\x11");
		sb.Append("\x5\x11\x10D\n\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x13");
		sb.Append("\x3\x13\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x6\x14\x11C");
		sb.Append("\n\x14\r\x14\xE\x14\x11D\x3\x14\x5\x14\x121\n\x14\x3\x14\x5");
		sb.Append("\x14\x124\n\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3");
		sb.Append("\x15\x3\x15\a\x15\x12E\n\x15\f\x15\xE\x15\x131\v\x15\x5\x15");
		sb.Append("\x133\n\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17");
		sb.Append("\x3\x17\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x5\x19\x143");
		sb.Append("\n\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\a\x1A\x149\n\x1A\f\x1A\xE");
		sb.Append("\x1A\x14C\v\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\a");
		sb.Append("\x1B\x154\n\x1B\f\x1B\xE\x1B\x157\v\x1B\x3\x1B\x3\x1B\x3\x1C");
		sb.Append("\x3\x1C\x3\x1D\x3\x1D\x5\x1D\x15F\n\x1D\x3\x1D\x3\x1D\x3\x1D");
		sb.Append("\x3\x1D\x5\x1D\x165\n\x1D\x3\x1E\x3\x1E\x5\x1E\x169\n\x1E\x3");
		sb.Append("\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E");
		sb.Append("\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x17B");
		sb.Append("\n\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x182\n\x1E");
		sb.Append("\x3\x1E\x5\x1E\x185\n\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E");
		sb.Append("\x18B\n\x1E\x5\x1E\x18D\n\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\a");
		sb.Append("\x1F\x193\n\x1F\f\x1F\xE\x1F\x196\v\x1F\x3\x1F\x5\x1F\x199\n");
		sb.Append("\x1F\x3\x1F\x3\x1F\x3 \x3 \x3 \x3 \x3!\x3!\x3!\x3\"\x3\"\x3");
		sb.Append("\"\x3\"\x3\"\x3\"\x5\"\x1AA\n\"\x3\"\x3\"\x3\"\x3#\x3#\x3#\x3");
		sb.Append("#\x3#\x5#\x1B4\n#\x3$\x3$\x3$\x3$\x3$\x5$\x1BB\n$\x3%\x3%\x3");
		sb.Append("%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3");
		sb.Append("%\x3%\x3%\x3%\x5%\x1D2\n%\x3%\x3%\x3%\a%\x1D7\n%\f%\xE%\x1DA");
		sb.Append("\v%\x3%\x3%\x5%\x1DE\n%\x3%\x3%\x5%\x1E2\n%\x3%\x3%\x3%\x3%");
		sb.Append("\x3%\x3%\x3%\a%\x1EB\n%\f%\xE%\x1EE\v%\x3%\x3%\x3%\x3%\x3%\x3");
		sb.Append("%\x3%\x3%\x3%\x3%\x3%\x5%\x1FB\n%\x3%\x3%\x3%\x3%\x3%\x3%\x3");
		sb.Append("%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\a");
		sb.Append("%\x212\n%\f%\xE%\x215\v%\x3&\x3&\x3&\a&\x21A\n&\f&\xE&\x21D");
		sb.Append("\v&\x5&\x21F\n&\x3&\x2\x3H\'\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16");
		sb.Append("\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42\x44\x46");
		sb.Append("HJ\x2\b\x3\x2\n\v\x4\x2\t\t\x18\x18\x3\x2\x34\x36\x3\x2\x32");
		sb.Append("\x33\x3\x2.\x31\x4\x2**--\x25D\x2`\x3\x2\x2\x2\x4\x65\x3\x2");
		sb.Append("\x2\x2\x6h\x3\x2\x2\x2\b{\x3\x2\x2\x2\n\x8A\x3\x2\x2\x2\f\x8C");
		sb.Append("\x3\x2\x2\x2\xE\x95\x3\x2\x2\x2\x10\x99\x3\x2\x2\x2\x12\x9D");
		sb.Append("\x3\x2\x2\x2\x14\xB5\x3\x2\x2\x2\x16\xB7\x3\x2\x2\x2\x18\xCB");
		sb.Append("\x3\x2\x2\x2\x1A\xCE\x3\x2\x2\x2\x1C\xD9\x3\x2\x2\x2\x1E\xE5");
		sb.Append("\x3\x2\x2\x2 \x10C\x3\x2\x2\x2\"\x10E\x3\x2\x2\x2$\x113\x3\x2");
		sb.Append("\x2\x2&\x118\x3\x2\x2\x2(\x127\x3\x2\x2\x2*\x136\x3\x2\x2\x2");
		sb.Append(",\x139\x3\x2\x2\x2.\x13C\x3\x2\x2\x2\x30\x13F\x3\x2\x2\x2\x32");
		sb.Append("\x144\x3\x2\x2\x2\x34\x14F\x3\x2\x2\x2\x36\x15A\x3\x2\x2\x2");
		sb.Append("\x38\x164\x3\x2\x2\x2:\x18C\x3\x2\x2\x2<\x18E\x3\x2\x2\x2>\x19C");
		sb.Append("\x3\x2\x2\x2@\x1A0\x3\x2\x2\x2\x42\x1A3\x3\x2\x2\x2\x44\x1AE");
		sb.Append("\x3\x2\x2\x2\x46\x1B5\x3\x2\x2\x2H\x1FA\x3\x2\x2\x2J\x21E\x3");
		sb.Append("\x2\x2\x2LN\x5\x4\x3\x2MO\x5\x6\x4\x2NM\x3\x2\x2\x2OP\x3\x2");
		sb.Append("\x2\x2PN\x3\x2\x2\x2PQ\x3\x2\x2\x2Q\x61\x3\x2\x2\x2RT\x5\x6");
		sb.Append("\x4\x2SR\x3\x2\x2\x2TU\x3\x2\x2\x2US\x3\x2\x2\x2UV\x3\x2\x2");
		sb.Append("\x2VW\x3\x2\x2\x2WX\x5\x4\x3\x2X\x61\x3\x2\x2\x2Y\x61\x5\x4");
		sb.Append("\x3\x2Z\\\x5\x6\x4\x2[Z\x3\x2\x2\x2\\]\x3\x2\x2\x2][\x3\x2\x2");
		sb.Append("\x2]^\x3\x2\x2\x2^\x61\x3\x2\x2\x2_\x61\x3\x2\x2\x2`L\x3\x2");
		sb.Append("\x2\x2`S\x3\x2\x2\x2`Y\x3\x2\x2\x2`[\x3\x2\x2\x2`_\x3\x2\x2");
		sb.Append("\x2\x61\x62\x3\x2\x2\x2\x62\x63\x5\b\x5\x2\x63\x64\a\x2\x2\x3");
		sb.Append("\x64\x3\x3\x2\x2\x2\x65\x66\a\x19\x2\x2\x66g\x5\x1A\xE\x2g\x5");
		sb.Append("\x3\x2\x2\x2hi\a(\x2\x2ij\x5\x1A\xE\x2j\a\x3\x2\x2\x2kl\a>\x2");
		sb.Append("\x2ln\a\x42\x2\x2mo\x5\x32\x1A\x2nm\x3\x2\x2\x2no\x3\x2\x2\x2");
		sb.Append("oq\x3\x2\x2\x2pr\x5\f\a\x2qp\x3\x2\x2\x2qr\x3\x2\x2\x2rv\x3");
		sb.Append("\x2\x2\x2su\x5\x12\n\x2ts\x3\x2\x2\x2ux\x3\x2\x2\x2vt\x3\x2");
		sb.Append("\x2\x2vw\x3\x2\x2\x2wy\x3\x2\x2\x2xv\x3\x2\x2\x2y|\a=\x2\x2");
		sb.Append("z|\x5\n\x6\x2{k\x3\x2\x2\x2{z\x3\x2\x2\x2|\t\x3\x2\x2\x2}\x7F");
		sb.Append("\x5\x1E\x10\x2~}\x3\x2\x2\x2\x7F\x80\x3\x2\x2\x2\x80~\x3\x2");
		sb.Append("\x2\x2\x80\x81\x3\x2\x2\x2\x81\x8B\x3\x2\x2\x2\x82\x84\x5\x10");
		sb.Append("\t\x2\x83\x82\x3\x2\x2\x2\x83\x84\x3\x2\x2\x2\x84\x85\x3\x2");
		sb.Append("\x2\x2\x85\x87\x5\x14\v\x2\x86\x83\x3\x2\x2\x2\x87\x88\x3\x2");
		sb.Append("\x2\x2\x88\x86\x3\x2\x2\x2\x88\x89\x3\x2\x2\x2\x89\x8B\x3\x2");
		sb.Append("\x2\x2\x8A~\x3\x2\x2\x2\x8A\x86\x3\x2\x2\x2\x8B\v\x3\x2\x2\x2");
		sb.Append("\x8C\x8D\a\x13\x2\x2\x8D\x92\x5\xE\b\x2\x8E\x8F\a,\x2\x2\x8F");
		sb.Append("\x91\x5\xE\b\x2\x90\x8E\x3\x2\x2\x2\x91\x94\x3\x2\x2\x2\x92");
		sb.Append("\x90\x3\x2\x2\x2\x92\x93\x3\x2\x2\x2\x93\r\x3\x2\x2\x2\x94\x92");
		sb.Append("\x3\x2\x2\x2\x95\x97\x5\x1A\xE\x2\x96\x98\x5\x34\x1B\x2\x97");
		sb.Append("\x96\x3\x2\x2\x2\x97\x98\x3\x2\x2\x2\x98\xF\x3\x2\x2\x2\x99");
		sb.Append("\x9A\t\x2\x2\x2\x9A\x11\x3\x2\x2\x2\x9B\x9E\x5:\x1E\x2\x9C\x9E");
		sb.Append("\x5\x14\v\x2\x9D\x9B\x3\x2\x2\x2\x9D\x9C\x3\x2\x2\x2\x9E\x13");
		sb.Append("\x3\x2\x2\x2\x9F\xA1\x5\x10\t\x2\xA0\x9F\x3\x2\x2\x2\xA0\xA1");
		sb.Append("\x3\x2\x2\x2\xA1\xA2\x3\x2\x2\x2\xA2\xA3\x5\x16\f\x2\xA3\xA4");
		sb.Append("\x5\x1C\xF\x2\xA4\xA5\a=\x2\x2\xA5\xB6\x3\x2\x2\x2\xA6\xA8\x5");
		sb.Append("\x10\t\x2\xA7\xA6\x3\x2\x2\x2\xA7\xA8\x3\x2\x2\x2\xA8\xA9\x3");
		sb.Append("\x2\x2\x2\xA9\xAA\a\x11\x2\x2\xAA\xB6\x5\x16\f\x2\xAB\xAD\x5");
		sb.Append("\x10\t\x2\xAC\xAB\x3\x2\x2\x2\xAC\xAD\x3\x2\x2\x2\xAD\xAE\x3");
		sb.Append("\x2\x2\x2\xAE\xAF\a\x12\x2\x2\xAF\xB6\x5\x16\f\x2\xB0\xB1\a");
		sb.Append("\x4\x2\x2\xB1\xB2\a\x5\x2\x2\xB2\xB3\x5\x1C\xF\x2\xB3\xB4\a");
		sb.Append("=\x2\x2\xB4\xB6\x3\x2\x2\x2\xB5\xA0\x3\x2\x2\x2\xB5\xA7\x3\x2");
		sb.Append("\x2\x2\xB5\xAC\x3\x2\x2\x2\xB5\xB0\x3\x2\x2\x2\xB6\x15\x3\x2");
		sb.Append("\x2\x2\xB7\xB8\a\"\x2\x2\xB8\xC5\a\x42\x2\x2\xB9\xC2\a\x39\x2");
		sb.Append("\x2\xBA\xBF\x5\x18\r\x2\xBB\xBC\a,\x2\x2\xBC\xBE\x5\x18\r\x2");
		sb.Append("\xBD\xBB\x3\x2\x2\x2\xBE\xC1\x3\x2\x2\x2\xBF\xBD\x3\x2\x2\x2");
		sb.Append("\xBF\xC0\x3\x2\x2\x2\xC0\xC3\x3\x2\x2\x2\xC1\xBF\x3\x2\x2\x2");
		sb.Append("\xC2\xBA\x3\x2\x2\x2\xC2\xC3\x3\x2\x2\x2\xC3\xC4\x3\x2\x2\x2");
		sb.Append("\xC4\xC6\a:\x2\x2\xC5\xB9\x3\x2\x2\x2\xC5\xC6\x3\x2\x2\x2\xC6");
		sb.Append("\xC9\x3\x2\x2\x2\xC7\xC8\a\x1D\x2\x2\xC8\xCA\x5\x38\x1D\x2\xC9");
		sb.Append("\xC7\x3\x2\x2\x2\xC9\xCA\x3\x2\x2\x2\xCA\x17\x3\x2\x2\x2\xCB");
		sb.Append("\xCC\x5\x38\x1D\x2\xCC\xCD\a\x42\x2\x2\xCD\x19\x3\x2\x2\x2\xCE");
		sb.Append("\xD3\a\x42\x2\x2\xCF\xD0\a+\x2\x2\xD0\xD2\a\x42\x2\x2\xD1\xCF");
		sb.Append("\x3\x2\x2\x2\xD2\xD5\x3\x2\x2\x2\xD3\xD1\x3\x2\x2\x2\xD3\xD4");
		sb.Append("\x3\x2\x2\x2\xD4\x1B\x3\x2\x2\x2\xD5\xD3\x3\x2\x2\x2\xD6\xD8");
		sb.Append("\x5\x1E\x10\x2\xD7\xD6\x3\x2\x2\x2\xD8\xDB\x3\x2\x2\x2\xD9\xD7");
		sb.Append("\x3\x2\x2\x2\xD9\xDA\x3\x2\x2\x2\xDA\x1D\x3\x2\x2\x2\xDB\xD9");
		sb.Append("\x3\x2\x2\x2\xDC\xE6\x5 \x11\x2\xDD\xE6\x5<\x1F\x2\xDE\xE6\x5");
		sb.Append(":\x1E\x2\xDF\xE6\x5\x42\"\x2\xE0\xE6\x5\x30\x19\x2\xE1\xE6\x5");
		sb.Append(",\x17\x2\xE2\xE6\x5.\x18\x2\xE3\xE6\x5&\x14\x2\xE4\xE6\x5$\x13");
		sb.Append("\x2\xE5\xDC\x3\x2\x2\x2\xE5\xDD\x3\x2\x2\x2\xE5\xDE\x3\x2\x2");
		sb.Append("\x2\xE5\xDF\x3\x2\x2\x2\xE5\xE0\x3\x2\x2\x2\xE5\xE1\x3\x2\x2");
		sb.Append("\x2\xE5\xE2\x3\x2\x2\x2\xE5\xE3\x3\x2\x2\x2\xE5\xE4\x3\x2\x2");
		sb.Append("\x2\xE6\x1F\x3\x2\x2\x2\xE7\xE8\a\b\x2\x2\xE8\xEA\a#\x2\x2\xE9");
		sb.Append("\xE7\x3\x2\x2\x2\xE9\xEA\x3\x2\x2\x2\xEA\xED\x3\x2\x2\x2\xEB");
		sb.Append("\xEC\a\x42\x2\x2\xEC\xEE\a#\x2\x2\xED\xEB\x3\x2\x2\x2\xED\xEE");
		sb.Append("\x3\x2\x2\x2\xEE\xF4\x3\x2\x2\x2\xEF\xF0\x5\x46$\x2\xF0\xF1");
		sb.Append("\a#\x2\x2\xF1\xF3\x3\x2\x2\x2\xF2\xEF\x3\x2\x2\x2\xF3\xF6\x3");
		sb.Append("\x2\x2\x2\xF4\xF2\x3\x2\x2\x2\xF4\xF5\x3\x2\x2\x2\xF5\xF7\x3");
		sb.Append("\x2\x2\x2\xF6\xF4\x3\x2\x2\x2\xF7\x10D\x5\"\x12\x2\xF8\xF9\a");
		sb.Append("\b\x2\x2\xF9\xFB\a#\x2\x2\xFA\xF8\x3\x2\x2\x2\xFA\xFB\x3\x2");
		sb.Append("\x2\x2\xFB\xFC\x3\x2\x2\x2\xFC\xFD\a\x42\x2\x2\xFD\xFF\a#\x2");
		sb.Append("\x2\xFE\xFA\x3\x2\x2\x2\xFE\xFF\x3\x2\x2\x2\xFF\x100\x3\x2\x2");
		sb.Append("\x2\x100\x101\a\x10\x2\x2\x101\x102\a#\x2\x2\x102\x103\x5\x1A");
		sb.Append("\xE\x2\x103\x104\a#\x2\x2\x104\x109\x5\x44#\x2\x105\x106\a#");
		sb.Append("\x2\x2\x106\x108\x5\x46$\x2\x107\x105\x3\x2\x2\x2\x108\x10B");
		sb.Append("\x3\x2\x2\x2\x109\x107\x3\x2\x2\x2\x109\x10A\x3\x2\x2\x2\x10A");
		sb.Append("\x10D\x3\x2\x2\x2\x10B\x109\x3\x2\x2\x2\x10C\xE9\x3\x2\x2\x2");
		sb.Append("\x10C\xFE\x3\x2\x2\x2\x10D!\x3\x2\x2\x2\x10E\x10F\a\x42\x2\x2");
		sb.Append("\x10F\x110\a\x39\x2\x2\x110\x111\x5J&\x2\x111\x112\a:\x2\x2");
		sb.Append("\x112#\x3\x2\x2\x2\x113\x114\a\f\x2\x2\x114\x115\a\x39\x2\x2");
		sb.Append("\x115\x116\x5H%\x2\x116\x117\a:\x2\x2\x117%\x3\x2\x2\x2\x118");
		sb.Append("\x119\a\xF\x2\x2\x119\x123\x5\x1C\xF\x2\x11A\x11C\x5(\x15\x2");
		sb.Append("\x11B\x11A\x3\x2\x2\x2\x11C\x11D\x3\x2\x2\x2\x11D\x11B\x3\x2");
		sb.Append("\x2\x2\x11D\x11E\x3\x2\x2\x2\x11E\x120\x3\x2\x2\x2\x11F\x121");
		sb.Append("\x5*\x16\x2\x120\x11F\x3\x2\x2\x2\x120\x121\x3\x2\x2\x2\x121");
		sb.Append("\x124\x3\x2\x2\x2\x122\x124\x5*\x16\x2\x123\x11B\x3\x2\x2\x2");
		sb.Append("\x123\x122\x3\x2\x2\x2\x124\x125\x3\x2\x2\x2\x125\x126\a=\x2");
		sb.Append("\x2\x126\'\x3\x2\x2\x2\x127\x128\a\r\x2\x2\x128\x132\a\x42\x2");
		sb.Append("\x2\x129\x12A\a\x13\x2\x2\x12A\x12F\x5\x1A\xE\x2\x12B\x12C\a");
		sb.Append(" \x2\x2\x12C\x12E\x5\x1A\xE\x2\x12D\x12B\x3\x2\x2\x2\x12E\x131");
		sb.Append("\x3\x2\x2\x2\x12F\x12D\x3\x2\x2\x2\x12F\x130\x3\x2\x2\x2\x130");
		sb.Append("\x133\x3\x2\x2\x2\x131\x12F\x3\x2\x2\x2\x132\x129\x3\x2\x2\x2");
		sb.Append("\x132\x133\x3\x2\x2\x2\x133\x134\x3\x2\x2\x2\x134\x135\x5\x1C");
		sb.Append("\xF\x2\x135)\x3\x2\x2\x2\x136\x137\a\xE\x2\x2\x137\x138\x5\x1C");
		sb.Append("\xF\x2\x138+\x3\x2\x2\x2\x139\x13A\a\x3\x2\x2\x13A\x13B\x5H");
		sb.Append("%\x2\x13B-\x3\x2\x2\x2\x13C\x13D\a\x16\x2\x2\x13D\x13E\x5H%");
		sb.Append("\x2\x13E/\x3\x2\x2\x2\x13F\x142\a\x1E\x2\x2\x140\x143\x5H%\x2");
		sb.Append("\x141\x143\a\x17\x2\x2\x142\x140\x3\x2\x2\x2\x142\x141\x3\x2");
		sb.Append("\x2\x2\x143\x31\x3\x2\x2\x2\x144\x145\a\x30\x2\x2\x145\x14A");
		sb.Append("\a\x42\x2\x2\x146\x147\a,\x2\x2\x147\x149\a\x42\x2\x2\x148\x146");
		sb.Append("\x3\x2\x2\x2\x149\x14C\x3\x2\x2\x2\x14A\x148\x3\x2\x2\x2\x14A");
		sb.Append("\x14B\x3\x2\x2\x2\x14B\x14D\x3\x2\x2\x2\x14C\x14A\x3\x2\x2\x2");
		sb.Append("\x14D\x14E\a.\x2\x2\x14E\x33\x3\x2\x2\x2\x14F\x150\a\x30\x2");
		sb.Append("\x2\x150\x155\x5\x38\x1D\x2\x151\x152\a,\x2\x2\x152\x154\x5");
		sb.Append("\x38\x1D\x2\x153\x151\x3\x2\x2\x2\x154\x157\x3\x2\x2\x2\x155");
		sb.Append("\x153\x3\x2\x2\x2\x155\x156\x3\x2\x2\x2\x156\x158\x3\x2\x2\x2");
		sb.Append("\x157\x155\x3\x2\x2\x2\x158\x159\a.\x2\x2\x159\x35\x3\x2\x2");
		sb.Append("\x2\x15A\x15B\x5\x1A\xE\x2\x15B\x37\x3\x2\x2\x2\x15C\x15E\x5");
		sb.Append("\x1A\xE\x2\x15D\x15F\x5\x34\x1B\x2\x15E\x15D\x3\x2\x2\x2\x15E");
		sb.Append("\x15F\x3\x2\x2\x2\x15F\x165\x3\x2\x2\x2\x160\x165\a$\x2\x2\x161");
		sb.Append("\x165\a%\x2\x2\x162\x165\a&\x2\x2\x163\x165\a\'\x2\x2\x164\x15C");
		sb.Append("\x3\x2\x2\x2\x164\x160\x3\x2\x2\x2\x164\x161\x3\x2\x2\x2\x164");
		sb.Append("\x162\x3\x2\x2\x2\x164\x163\x3\x2\x2\x2\x165\x39\x3\x2\x2\x2");
		sb.Append("\x166\x167\a\b\x2\x2\x167\x169\a#\x2\x2\x168\x166\x3\x2\x2\x2");
		sb.Append("\x168\x169\x3\x2\x2\x2\x169\x16A\x3\x2\x2\x2\x16A\x16B\a\x42");
		sb.Append("\x2\x2\x16B\x16C\a-\x2\x2\x16C\x18D\x5H%\x2\x16D\x16E\a\x10");
		sb.Append("\x2\x2\x16E\x16F\a#\x2\x2\x16F\x170\x5\x1A\xE\x2\x170\x171\a");
		sb.Append("#\x2\x2\x171\x172\a\x42\x2\x2\x172\x173\a-\x2\x2\x173\x174\x5");
		sb.Append("H%\x2\x174\x18D\x3\x2\x2\x2\x175\x17A\a\x42\x2\x2\x176\x177");
		sb.Append("\a#\x2\x2\x177\x178\a\x10\x2\x2\x178\x179\a#\x2\x2\x179\x17B");
		sb.Append("\x5\x1A\xE\x2\x17A\x176\x3\x2\x2\x2\x17A\x17B\x3\x2\x2\x2\x17B");
		sb.Append("\x17C\x3\x2\x2\x2\x17C\x17D\a#\x2\x2\x17D\x17E\a\x42\x2\x2\x17E");
		sb.Append("\x17F\a-\x2\x2\x17F\x18D\x5H%\x2\x180\x182\x5\x10\t\x2\x181");
		sb.Append("\x180\x3\x2\x2\x2\x181\x182\x3\x2\x2\x2\x182\x184\x3\x2\x2\x2");
		sb.Append("\x183\x185\a\x6\x2\x2\x184\x183\x3\x2\x2\x2\x184\x185\x3\x2");
		sb.Append("\x2\x2\x185\x186\x3\x2\x2\x2\x186\x187\x5\x38\x1D\x2\x187\x18A");
		sb.Append("\a\x42\x2\x2\x188\x189\a-\x2\x2\x189\x18B\x5H%\x2\x18A\x188");
		sb.Append("\x3\x2\x2\x2\x18A\x18B\x3\x2\x2\x2\x18B\x18D\x3\x2\x2\x2\x18C");
		sb.Append("\x168\x3\x2\x2\x2\x18C\x16D\x3\x2\x2\x2\x18C\x175\x3\x2\x2\x2");
		sb.Append("\x18C\x181\x3\x2\x2\x2\x18D;\x3\x2\x2\x2\x18E\x18F\a<\x2\x2");
		sb.Append("\x18F\x190\x5H%\x2\x190\x194\x5\x1C\xF\x2\x191\x193\x5> \x2");
		sb.Append("\x192\x191\x3\x2\x2\x2\x193\x196\x3\x2\x2\x2\x194\x192\x3\x2");
		sb.Append("\x2\x2\x194\x195\x3\x2\x2\x2\x195\x198\x3\x2\x2\x2\x196\x194");
		sb.Append("\x3\x2\x2\x2\x197\x199\x5@!\x2\x198\x197\x3\x2\x2\x2\x198\x199");
		sb.Append("\x3\x2\x2\x2\x199\x19A\x3\x2\x2\x2\x19A\x19B\a=\x2\x2\x19B=");
		sb.Append("\x3\x2\x2\x2\x19C\x19D\a\a\x2\x2\x19D\x19E\x5H%\x2\x19E\x19F");
		sb.Append("\x5\x1C\xF\x2\x19F?\x3\x2\x2\x2\x1A0\x1A1\a\x1C\x2\x2\x1A1\x1A2");
		sb.Append("\x5\x1C\xF\x2\x1A2\x41\x3\x2\x2\x2\x1A3\x1A9\a\x1B\x2\x2\x1A4");
		sb.Append("\x1A5\x5H%\x2\x1A5\x1A6\a\x1A\x2\x2\x1A6\x1AA\x3\x2\x2\x2\x1A7");
		sb.Append("\x1A8\t\x3\x2\x2\x1A8\x1AA\x5H%\x2\x1A9\x1A4\x3\x2\x2\x2\x1A9");
		sb.Append("\x1A7\x3\x2\x2\x2\x1AA\x1AB\x3\x2\x2\x2\x1AB\x1AC\x5\x1C\xF");
		sb.Append("\x2\x1AC\x1AD\a=\x2\x2\x1AD\x43\x3\x2\x2\x2\x1AE\x1B3\a\x42");
		sb.Append("\x2\x2\x1AF\x1B0\a\x39\x2\x2\x1B0\x1B1\x5J&\x2\x1B1\x1B2\a:");
		sb.Append("\x2\x2\x1B2\x1B4\x3\x2\x2\x2\x1B3\x1AF\x3\x2\x2\x2\x1B3\x1B4");
		sb.Append("\x3\x2\x2\x2\x1B4\x45\x3\x2\x2\x2\x1B5\x1BA\a\x42\x2\x2\x1B6");
		sb.Append("\x1B7\a\x39\x2\x2\x1B7\x1B8\x5J&\x2\x1B8\x1B9\a:\x2\x2\x1B9");
		sb.Append("\x1BB\x3\x2\x2\x2\x1BA\x1B6\x3\x2\x2\x2\x1BA\x1BB\x3\x2\x2\x2");
		sb.Append("\x1BBG\x3\x2\x2\x2\x1BC\x1BD\b%\x1\x2\x1BD\x1BE\a\x39\x2\x2");
		sb.Append("\x1BE\x1BF\x5H%\x2\x1BF\x1C0\a:\x2\x2\x1C0\x1FB\x3\x2\x2\x2");
		sb.Append("\x1C1\x1FB\a@\x2\x2\x1C2\x1FB\a?\x2\x2\x1C3\x1FB\a\x41\x2\x2");
		sb.Append("\x1C4\x1FB\a\x43\x2\x2\x1C5\x1FB\a!\x2\x2\x1C6\x1FB\a\b\x2\x2");
		sb.Append("\x1C7\x1C8\a\x15\x2\x2\x1C8\x1C9\a\x39\x2\x2\x1C9\x1CA\x5H%");
		sb.Append("\x2\x1CA\x1CB\a:\x2\x2\x1CB\x1FB\x3\x2\x2\x2\x1CC\x1CD\a\x15");
		sb.Append("\x2\x2\x1CD\x1CE\a\x39\x2\x2\x1CE\x1FB\a:\x2\x2\x1CF\x1D0\a");
		sb.Append("\b\x2\x2\x1D0\x1D2\a#\x2\x2\x1D1\x1CF\x3\x2\x2\x2\x1D1\x1D2");
		sb.Append("\x3\x2\x2\x2\x1D2\x1D3\x3\x2\x2\x2\x1D3\x1D8\x5\x46$\x2\x1D4");
		sb.Append("\x1D5\a#\x2\x2\x1D5\x1D7\x5\x46$\x2\x1D6\x1D4\x3\x2\x2\x2\x1D7");
		sb.Append("\x1DA\x3\x2\x2\x2\x1D8\x1D6\x3\x2\x2\x2\x1D8\x1D9\x3\x2\x2\x2");
		sb.Append("\x1D9\x1FB\x3\x2\x2\x2\x1DA\x1D8\x3\x2\x2\x2\x1DB\x1DC\a\b\x2");
		sb.Append("\x2\x1DC\x1DE\a#\x2\x2\x1DD\x1DB\x3\x2\x2\x2\x1DD\x1DE\x3\x2");
		sb.Append("\x2\x2\x1DE\x1DF\x3\x2\x2\x2\x1DF\x1E0\a\x42\x2\x2\x1E0\x1E2");
		sb.Append("\a#\x2\x2\x1E1\x1DD\x3\x2\x2\x2\x1E1\x1E2\x3\x2\x2\x2\x1E2\x1E3");
		sb.Append("\x3\x2\x2\x2\x1E3\x1E4\a\x10\x2\x2\x1E4\x1E5\a#\x2\x2\x1E5\x1E6");
		sb.Append("\x5\x1A\xE\x2\x1E6\x1E7\a#\x2\x2\x1E7\x1EC\x5\x44#\x2\x1E8\x1E9");
		sb.Append("\a#\x2\x2\x1E9\x1EB\x5\x46$\x2\x1EA\x1E8\x3\x2\x2\x2\x1EB\x1EE");
		sb.Append("\x3\x2\x2\x2\x1EC\x1EA\x3\x2\x2\x2\x1EC\x1ED\x3\x2\x2\x2\x1ED");
		sb.Append("\x1FB\x3\x2\x2\x2\x1EE\x1EC\x3\x2\x2\x2\x1EF\x1F0\a\x33\x2\x2");
		sb.Append("\x1F0\x1FB\x5H%\f\x1F1\x1F2\a)\x2\x2\x1F2\x1FB\x5H%\v\x1F3\x1F4");
		sb.Append("\a\x14\x2\x2\x1F4\x1F5\a\x39\x2\x2\x1F5\x1F6\x5\x38\x1D\x2\x1F6");
		sb.Append("\x1F7\a,\x2\x2\x1F7\x1F8\x5H%\x2\x1F8\x1F9\a:\x2\x2\x1F9\x1FB");
		sb.Append("\x3\x2\x2\x2\x1FA\x1BC\x3\x2\x2\x2\x1FA\x1C1\x3\x2\x2\x2\x1FA");
		sb.Append("\x1C2\x3\x2\x2\x2\x1FA\x1C3\x3\x2\x2\x2\x1FA\x1C4\x3\x2\x2\x2");
		sb.Append("\x1FA\x1C5\x3\x2\x2\x2\x1FA\x1C6\x3\x2\x2\x2\x1FA\x1C7\x3\x2");
		sb.Append("\x2\x2\x1FA\x1CC\x3\x2\x2\x2\x1FA\x1D1\x3\x2\x2\x2\x1FA\x1E1");
		sb.Append("\x3\x2\x2\x2\x1FA\x1EF\x3\x2\x2\x2\x1FA\x1F1\x3\x2\x2\x2\x1FA");
		sb.Append("\x1F3\x3\x2\x2\x2\x1FB\x213\x3\x2\x2\x2\x1FC\x1FD\f\t\x2\x2");
		sb.Append("\x1FD\x1FE\t\x4\x2\x2\x1FE\x212\x5H%\n\x1FF\x200\f\b\x2\x2\x200");
		sb.Append("\x201\t\x5\x2\x2\x201\x212\x5H%\t\x202\x203\f\a\x2\x2\x203\x204");
		sb.Append("\t\x6\x2\x2\x204\x212\x5H%\b\x205\x206\f\x5\x2\x2\x206\x207");
		sb.Append("\t\a\x2\x2\x207\x212\x5H%\x6\x208\x209\f\x4\x2\x2\x209\x20A");
		sb.Append("\a\x1F\x2\x2\x20A\x212\x5H%\x5\x20B\x20C\f\x3\x2\x2\x20C\x20D");
		sb.Append("\a \x2\x2\x20D\x212\x5H%\x4\x20E\x20F\f\x6\x2\x2\x20F\x210\a");
		sb.Append("\x13\x2\x2\x210\x212\x5\x36\x1C\x2\x211\x1FC\x3\x2\x2\x2\x211");
		sb.Append("\x1FF\x3\x2\x2\x2\x211\x202\x3\x2\x2\x2\x211\x205\x3\x2\x2\x2");
		sb.Append("\x211\x208\x3\x2\x2\x2\x211\x20B\x3\x2\x2\x2\x211\x20E\x3\x2");
		sb.Append("\x2\x2\x212\x215\x3\x2\x2\x2\x213\x211\x3\x2\x2\x2\x213\x214");
		sb.Append("\x3\x2\x2\x2\x214I\x3\x2\x2\x2\x215\x213\x3\x2\x2\x2\x216\x21B");
		sb.Append("\x5H%\x2\x217\x218\a,\x2\x2\x218\x21A\x5H%\x2\x219\x217\x3\x2");
		sb.Append("\x2\x2\x21A\x21D\x3\x2\x2\x2\x21B\x219\x3\x2\x2\x2\x21B\x21C");
		sb.Append("\x3\x2\x2\x2\x21C\x21F\x3\x2\x2\x2\x21D\x21B\x3\x2\x2\x2\x21E");
		sb.Append("\x216\x3\x2\x2\x2\x21E\x21F\x3\x2\x2\x2\x21FK\x3\x2\x2\x2\x42");
		sb.Append("PU]`nqv{\x80\x83\x88\x8A\x92\x97\x9D\xA0\xA7\xAC\xB5\xBF\xC2");
		sb.Append("\xC5\xC9\xD3\xD9\xE5\xE9\xED\xF4\xFA\xFE\x109\x10C\x11D\x120");
		sb.Append("\x123\x12F\x132\x142\x14A\x155\x15E\x164\x168\x17A\x181\x184");
		sb.Append("\x18A\x18C\x194\x198\x1A9\x1B3\x1BA\x1D1\x1D8\x1DD\x1E1\x1EC");
		sb.Append("\x1FA\x211\x213\x21B\x21E");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
