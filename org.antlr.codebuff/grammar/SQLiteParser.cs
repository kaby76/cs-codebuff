//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SQLite.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class SQLiteParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SCOL=1, DOT=2, OPEN_PAR=3, CLOSE_PAR=4, COMMA=5, ASSIGN=6, STAR=7, PLUS=8, 
		MINUS=9, TILDE=10, PIPE2=11, DIV=12, MOD=13, LT2=14, GT2=15, AMP=16, PIPE=17, 
		LT=18, LT_EQ=19, GT=20, GT_EQ=21, EQ=22, NOT_EQ1=23, NOT_EQ2=24, K_ABORT=25, 
		K_ACTION=26, K_ADD=27, K_AFTER=28, K_ALL=29, K_ALTER=30, K_ANALYZE=31, 
		K_AND=32, K_AS=33, K_ASC=34, K_ATTACH=35, K_AUTOINCREMENT=36, K_BEFORE=37, 
		K_BEGIN=38, K_BETWEEN=39, K_BY=40, K_CASCADE=41, K_CASE=42, K_CAST=43, 
		K_CHECK=44, K_COLLATE=45, K_COLUMN=46, K_COMMIT=47, K_CONFLICT=48, K_CONSTRAINT=49, 
		K_CREATE=50, K_CROSS=51, K_CURRENT_DATE=52, K_CURRENT_TIME=53, K_CURRENT_TIMESTAMP=54, 
		K_DATABASE=55, K_DEFAULT=56, K_DEFERRABLE=57, K_DEFERRED=58, K_DELETE=59, 
		K_DESC=60, K_DETACH=61, K_DISTINCT=62, K_DROP=63, K_EACH=64, K_ELSE=65, 
		K_END=66, K_ESCAPE=67, K_EXCEPT=68, K_EXCLUSIVE=69, K_EXISTS=70, K_EXPLAIN=71, 
		K_FAIL=72, K_FOR=73, K_FOREIGN=74, K_FROM=75, K_FULL=76, K_GLOB=77, K_GROUP=78, 
		K_HAVING=79, K_IF=80, K_IGNORE=81, K_IMMEDIATE=82, K_IN=83, K_INDEX=84, 
		K_INDEXED=85, K_INITIALLY=86, K_INNER=87, K_INSERT=88, K_INSTEAD=89, K_INTERSECT=90, 
		K_INTO=91, K_IS=92, K_ISNULL=93, K_JOIN=94, K_KEY=95, K_LEFT=96, K_LIKE=97, 
		K_LIMIT=98, K_MATCH=99, K_NATURAL=100, K_NO=101, K_NOT=102, K_NOTNULL=103, 
		K_NULL=104, K_OF=105, K_OFFSET=106, K_ON=107, K_OR=108, K_ORDER=109, K_OUTER=110, 
		K_PLAN=111, K_PRAGMA=112, K_PRIMARY=113, K_QUERY=114, K_RAISE=115, K_RECURSIVE=116, 
		K_REFERENCES=117, K_REGEXP=118, K_REINDEX=119, K_RELEASE=120, K_RENAME=121, 
		K_REPLACE=122, K_RESTRICT=123, K_RIGHT=124, K_ROLLBACK=125, K_ROW=126, 
		K_SAVEPOINT=127, K_SELECT=128, K_SET=129, K_TABLE=130, K_TEMP=131, K_TEMPORARY=132, 
		K_THEN=133, K_TO=134, K_TRANSACTION=135, K_TRIGGER=136, K_UNION=137, K_UNIQUE=138, 
		K_UPDATE=139, K_USING=140, K_VACUUM=141, K_VALUES=142, K_VIEW=143, K_VIRTUAL=144, 
		K_WHEN=145, K_WHERE=146, K_WITH=147, K_WITHOUT=148, IDENTIFIER=149, NUMERIC_LITERAL=150, 
		BIND_PARAMETER=151, STRING_LITERAL=152, BLOB_LITERAL=153, SINGLE_LINE_COMMENT=154, 
		MULTILINE_COMMENT=155, SPACES=156, UNEXPECTED_CHAR=157;
	public const int
		RULE_parse = 0, RULE_error = 1, RULE_sql_stmt_list = 2, RULE_sql_stmt = 3, 
		RULE_alter_table_stmt = 4, RULE_analyze_stmt = 5, RULE_attach_stmt = 6, 
		RULE_begin_stmt = 7, RULE_commit_stmt = 8, RULE_compound_select_stmt = 9, 
		RULE_create_index_stmt = 10, RULE_create_table_stmt = 11, RULE_create_trigger_stmt = 12, 
		RULE_create_view_stmt = 13, RULE_create_virtual_table_stmt = 14, RULE_delete_stmt = 15, 
		RULE_delete_stmt_limited = 16, RULE_detach_stmt = 17, RULE_drop_index_stmt = 18, 
		RULE_drop_table_stmt = 19, RULE_drop_trigger_stmt = 20, RULE_drop_view_stmt = 21, 
		RULE_factored_select_stmt = 22, RULE_insert_stmt = 23, RULE_pragma_stmt = 24, 
		RULE_reindex_stmt = 25, RULE_release_stmt = 26, RULE_rollback_stmt = 27, 
		RULE_savepoint_stmt = 28, RULE_simple_select_stmt = 29, RULE_select_stmt = 30, 
		RULE_select_or_values = 31, RULE_update_stmt = 32, RULE_update_stmt_limited = 33, 
		RULE_vacuum_stmt = 34, RULE_column_def = 35, RULE_type_name = 36, RULE_column_constraint = 37, 
		RULE_conflict_clause = 38, RULE_expr = 39, RULE_foreign_key_clause = 40, 
		RULE_raise_function = 41, RULE_indexed_column = 42, RULE_table_constraint = 43, 
		RULE_with_clause = 44, RULE_qualified_table_name = 45, RULE_ordering_term = 46, 
		RULE_pragma_value = 47, RULE_common_table_expression = 48, RULE_result_column = 49, 
		RULE_table_or_subquery = 50, RULE_join_clause = 51, RULE_join_operator = 52, 
		RULE_join_constraint = 53, RULE_select_core = 54, RULE_compound_operator = 55, 
		RULE_cte_table_name = 56, RULE_signed_number = 57, RULE_literal_value = 58, 
		RULE_unary_operator = 59, RULE_error_message = 60, RULE_module_argument = 61, 
		RULE_column_alias = 62, RULE_keyword = 63, RULE_name = 64, RULE_function_name = 65, 
		RULE_database_name = 66, RULE_table_name = 67, RULE_table_or_index_name = 68, 
		RULE_new_table_name = 69, RULE_column_name = 70, RULE_collation_name = 71, 
		RULE_foreign_table = 72, RULE_index_name = 73, RULE_trigger_name = 74, 
		RULE_view_name = 75, RULE_module_name = 76, RULE_pragma_name = 77, RULE_savepoint_name = 78, 
		RULE_table_alias = 79, RULE_transaction_name = 80, RULE_any_name = 81;
	public static readonly string[] ruleNames = {
		"parse", "error", "sql_stmt_list", "sql_stmt", "alter_table_stmt", "analyze_stmt", 
		"attach_stmt", "begin_stmt", "commit_stmt", "compound_select_stmt", "create_index_stmt", 
		"create_table_stmt", "create_trigger_stmt", "create_view_stmt", "create_virtual_table_stmt", 
		"delete_stmt", "delete_stmt_limited", "detach_stmt", "drop_index_stmt", 
		"drop_table_stmt", "drop_trigger_stmt", "drop_view_stmt", "factored_select_stmt", 
		"insert_stmt", "pragma_stmt", "reindex_stmt", "release_stmt", "rollback_stmt", 
		"savepoint_stmt", "simple_select_stmt", "select_stmt", "select_or_values", 
		"update_stmt", "update_stmt_limited", "vacuum_stmt", "column_def", "type_name", 
		"column_constraint", "conflict_clause", "expr", "foreign_key_clause", 
		"raise_function", "indexed_column", "table_constraint", "with_clause", 
		"qualified_table_name", "ordering_term", "pragma_value", "common_table_expression", 
		"result_column", "table_or_subquery", "join_clause", "join_operator", 
		"join_constraint", "select_core", "compound_operator", "cte_table_name", 
		"signed_number", "literal_value", "unary_operator", "error_message", "module_argument", 
		"column_alias", "keyword", "name", "function_name", "database_name", "table_name", 
		"table_or_index_name", "new_table_name", "column_name", "collation_name", 
		"foreign_table", "index_name", "trigger_name", "view_name", "module_name", 
		"pragma_name", "savepoint_name", "table_alias", "transaction_name", "any_name"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'.'", "'('", "')'", "','", "'='", "'*'", "'+'", "'-'", "'~'", 
		"'||'", "'/'", "'%'", "'<<'", "'>>'", "'&'", "'|'", "'<'", "'<='", "'>'", 
		"'>='", "'=='", "'!='", "'<>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SCOL", "DOT", "OPEN_PAR", "CLOSE_PAR", "COMMA", "ASSIGN", "STAR", 
		"PLUS", "MINUS", "TILDE", "PIPE2", "DIV", "MOD", "LT2", "GT2", "AMP", 
		"PIPE", "LT", "LT_EQ", "GT", "GT_EQ", "EQ", "NOT_EQ1", "NOT_EQ2", "K_ABORT", 
		"K_ACTION", "K_ADD", "K_AFTER", "K_ALL", "K_ALTER", "K_ANALYZE", "K_AND", 
		"K_AS", "K_ASC", "K_ATTACH", "K_AUTOINCREMENT", "K_BEFORE", "K_BEGIN", 
		"K_BETWEEN", "K_BY", "K_CASCADE", "K_CASE", "K_CAST", "K_CHECK", "K_COLLATE", 
		"K_COLUMN", "K_COMMIT", "K_CONFLICT", "K_CONSTRAINT", "K_CREATE", "K_CROSS", 
		"K_CURRENT_DATE", "K_CURRENT_TIME", "K_CURRENT_TIMESTAMP", "K_DATABASE", 
		"K_DEFAULT", "K_DEFERRABLE", "K_DEFERRED", "K_DELETE", "K_DESC", "K_DETACH", 
		"K_DISTINCT", "K_DROP", "K_EACH", "K_ELSE", "K_END", "K_ESCAPE", "K_EXCEPT", 
		"K_EXCLUSIVE", "K_EXISTS", "K_EXPLAIN", "K_FAIL", "K_FOR", "K_FOREIGN", 
		"K_FROM", "K_FULL", "K_GLOB", "K_GROUP", "K_HAVING", "K_IF", "K_IGNORE", 
		"K_IMMEDIATE", "K_IN", "K_INDEX", "K_INDEXED", "K_INITIALLY", "K_INNER", 
		"K_INSERT", "K_INSTEAD", "K_INTERSECT", "K_INTO", "K_IS", "K_ISNULL", 
		"K_JOIN", "K_KEY", "K_LEFT", "K_LIKE", "K_LIMIT", "K_MATCH", "K_NATURAL", 
		"K_NO", "K_NOT", "K_NOTNULL", "K_NULL", "K_OF", "K_OFFSET", "K_ON", "K_OR", 
		"K_ORDER", "K_OUTER", "K_PLAN", "K_PRAGMA", "K_PRIMARY", "K_QUERY", "K_RAISE", 
		"K_RECURSIVE", "K_REFERENCES", "K_REGEXP", "K_REINDEX", "K_RELEASE", "K_RENAME", 
		"K_REPLACE", "K_RESTRICT", "K_RIGHT", "K_ROLLBACK", "K_ROW", "K_SAVEPOINT", 
		"K_SELECT", "K_SET", "K_TABLE", "K_TEMP", "K_TEMPORARY", "K_THEN", "K_TO", 
		"K_TRANSACTION", "K_TRIGGER", "K_UNION", "K_UNIQUE", "K_UPDATE", "K_USING", 
		"K_VACUUM", "K_VALUES", "K_VIEW", "K_VIRTUAL", "K_WHEN", "K_WHERE", "K_WITH", 
		"K_WITHOUT", "IDENTIFIER", "NUMERIC_LITERAL", "BIND_PARAMETER", "STRING_LITERAL", 
		"BLOB_LITERAL", "SINGLE_LINE_COMMENT", "MULTILINE_COMMENT", "SPACES", 
		"UNEXPECTED_CHAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SQLite.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static SQLiteParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

	public SQLiteParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ParseContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(SQLiteParser.Eof, 0); }
		public Sql_stmt_listContext[] sql_stmt_list() {
			return GetRuleContexts<Sql_stmt_listContext>();
		}
		public Sql_stmt_listContext sql_stmt_list(int i) {
			return GetRuleContext<Sql_stmt_listContext>(i);
		}
		public ErrorContext[] error() {
			return GetRuleContexts<ErrorContext>();
		}
		public ErrorContext error(int i) {
			return GetRuleContext<ErrorContext>(i);
		}
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterParse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitParse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(Context, State);
		EnterRule(_localctx, 0, RULE_parse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SCOL) | (1L << K_ALTER) | (1L << K_ANALYZE) | (1L << K_ATTACH) | (1L << K_BEGIN) | (1L << K_COMMIT) | (1L << K_CREATE) | (1L << K_DELETE) | (1L << K_DETACH) | (1L << K_DROP))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (K_END - 66)) | (1L << (K_EXPLAIN - 66)) | (1L << (K_INSERT - 66)) | (1L << (K_PRAGMA - 66)) | (1L << (K_REINDEX - 66)) | (1L << (K_RELEASE - 66)) | (1L << (K_REPLACE - 66)) | (1L << (K_ROLLBACK - 66)) | (1L << (K_SAVEPOINT - 66)) | (1L << (K_SELECT - 66)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (K_UPDATE - 139)) | (1L << (K_VACUUM - 139)) | (1L << (K_VALUES - 139)) | (1L << (K_WITH - 139)) | (1L << (UNEXPECTED_CHAR - 139)))) != 0)) {
				{
				State = 166;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SCOL:
				case K_ALTER:
				case K_ANALYZE:
				case K_ATTACH:
				case K_BEGIN:
				case K_COMMIT:
				case K_CREATE:
				case K_DELETE:
				case K_DETACH:
				case K_DROP:
				case K_END:
				case K_EXPLAIN:
				case K_INSERT:
				case K_PRAGMA:
				case K_REINDEX:
				case K_RELEASE:
				case K_REPLACE:
				case K_ROLLBACK:
				case K_SAVEPOINT:
				case K_SELECT:
				case K_UPDATE:
				case K_VACUUM:
				case K_VALUES:
				case K_WITH:
					{
					State = 164; sql_stmt_list();
					}
					break;
				case UNEXPECTED_CHAR:
					{
					State = 165; error();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 171; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorContext : ParserRuleContext {
		public IToken _UNEXPECTED_CHAR;
		public ITerminalNode UNEXPECTED_CHAR() { return GetToken(SQLiteParser.UNEXPECTED_CHAR, 0); }
		public ErrorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_error; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterError(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitError(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitError(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorContext error() {
		ErrorContext _localctx = new ErrorContext(Context, State);
		EnterRule(_localctx, 2, RULE_error);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173; _localctx._UNEXPECTED_CHAR = Match(UNEXPECTED_CHAR);
			 
			     throw new RuntimeException("UNEXPECTED_CHAR=" + (_localctx._UNEXPECTED_CHAR!=null?_localctx._UNEXPECTED_CHAR.Text:null)); 
			   
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_stmt_listContext : ParserRuleContext {
		public Sql_stmtContext[] sql_stmt() {
			return GetRuleContexts<Sql_stmtContext>();
		}
		public Sql_stmtContext sql_stmt(int i) {
			return GetRuleContext<Sql_stmtContext>(i);
		}
		public Sql_stmt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_stmt_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterSql_stmt_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitSql_stmt_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql_stmt_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sql_stmt_listContext sql_stmt_list() {
		Sql_stmt_listContext _localctx = new Sql_stmt_listContext(Context, State);
		EnterRule(_localctx, 4, RULE_sql_stmt_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SCOL) {
				{
				{
				State = 176; Match(SCOL);
				}
				}
				State = 181;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 182; sql_stmt();
			State = 191;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 184;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 183; Match(SCOL);
						}
						}
						State = 186;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==SCOL );
					State = 188; sql_stmt();
					}
					} 
				}
				State = 193;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			State = 197;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 194; Match(SCOL);
					}
					} 
				}
				State = 199;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_stmtContext : ParserRuleContext {
		public Alter_table_stmtContext alter_table_stmt() {
			return GetRuleContext<Alter_table_stmtContext>(0);
		}
		public Analyze_stmtContext analyze_stmt() {
			return GetRuleContext<Analyze_stmtContext>(0);
		}
		public Attach_stmtContext attach_stmt() {
			return GetRuleContext<Attach_stmtContext>(0);
		}
		public Begin_stmtContext begin_stmt() {
			return GetRuleContext<Begin_stmtContext>(0);
		}
		public Commit_stmtContext commit_stmt() {
			return GetRuleContext<Commit_stmtContext>(0);
		}
		public Compound_select_stmtContext compound_select_stmt() {
			return GetRuleContext<Compound_select_stmtContext>(0);
		}
		public Create_index_stmtContext create_index_stmt() {
			return GetRuleContext<Create_index_stmtContext>(0);
		}
		public Create_table_stmtContext create_table_stmt() {
			return GetRuleContext<Create_table_stmtContext>(0);
		}
		public Create_trigger_stmtContext create_trigger_stmt() {
			return GetRuleContext<Create_trigger_stmtContext>(0);
		}
		public Create_view_stmtContext create_view_stmt() {
			return GetRuleContext<Create_view_stmtContext>(0);
		}
		public Create_virtual_table_stmtContext create_virtual_table_stmt() {
			return GetRuleContext<Create_virtual_table_stmtContext>(0);
		}
		public Delete_stmtContext delete_stmt() {
			return GetRuleContext<Delete_stmtContext>(0);
		}
		public Delete_stmt_limitedContext delete_stmt_limited() {
			return GetRuleContext<Delete_stmt_limitedContext>(0);
		}
		public Detach_stmtContext detach_stmt() {
			return GetRuleContext<Detach_stmtContext>(0);
		}
		public Drop_index_stmtContext drop_index_stmt() {
			return GetRuleContext<Drop_index_stmtContext>(0);
		}
		public Drop_table_stmtContext drop_table_stmt() {
			return GetRuleContext<Drop_table_stmtContext>(0);
		}
		public Drop_trigger_stmtContext drop_trigger_stmt() {
			return GetRuleContext<Drop_trigger_stmtContext>(0);
		}
		public Drop_view_stmtContext drop_view_stmt() {
			return GetRuleContext<Drop_view_stmtContext>(0);
		}
		public Factored_select_stmtContext factored_select_stmt() {
			return GetRuleContext<Factored_select_stmtContext>(0);
		}
		public Insert_stmtContext insert_stmt() {
			return GetRuleContext<Insert_stmtContext>(0);
		}
		public Pragma_stmtContext pragma_stmt() {
			return GetRuleContext<Pragma_stmtContext>(0);
		}
		public Reindex_stmtContext reindex_stmt() {
			return GetRuleContext<Reindex_stmtContext>(0);
		}
		public Release_stmtContext release_stmt() {
			return GetRuleContext<Release_stmtContext>(0);
		}
		public Rollback_stmtContext rollback_stmt() {
			return GetRuleContext<Rollback_stmtContext>(0);
		}
		public Savepoint_stmtContext savepoint_stmt() {
			return GetRuleContext<Savepoint_stmtContext>(0);
		}
		public Simple_select_stmtContext simple_select_stmt() {
			return GetRuleContext<Simple_select_stmtContext>(0);
		}
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Update_stmtContext update_stmt() {
			return GetRuleContext<Update_stmtContext>(0);
		}
		public Update_stmt_limitedContext update_stmt_limited() {
			return GetRuleContext<Update_stmt_limitedContext>(0);
		}
		public Vacuum_stmtContext vacuum_stmt() {
			return GetRuleContext<Vacuum_stmtContext>(0);
		}
		public ITerminalNode K_EXPLAIN() { return GetToken(SQLiteParser.K_EXPLAIN, 0); }
		public ITerminalNode K_QUERY() { return GetToken(SQLiteParser.K_QUERY, 0); }
		public ITerminalNode K_PLAN() { return GetToken(SQLiteParser.K_PLAN, 0); }
		public Sql_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterSql_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitSql_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sql_stmtContext sql_stmt() {
		Sql_stmtContext _localctx = new Sql_stmtContext(Context, State);
		EnterRule(_localctx, 6, RULE_sql_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_EXPLAIN) {
				{
				State = 200; Match(K_EXPLAIN);
				State = 203;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_QUERY) {
					{
					State = 201; Match(K_QUERY);
					State = 202; Match(K_PLAN);
					}
				}

				}
			}

			State = 237;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 207; alter_table_stmt();
				}
				break;
			case 2:
				{
				State = 208; analyze_stmt();
				}
				break;
			case 3:
				{
				State = 209; attach_stmt();
				}
				break;
			case 4:
				{
				State = 210; begin_stmt();
				}
				break;
			case 5:
				{
				State = 211; commit_stmt();
				}
				break;
			case 6:
				{
				State = 212; compound_select_stmt();
				}
				break;
			case 7:
				{
				State = 213; create_index_stmt();
				}
				break;
			case 8:
				{
				State = 214; create_table_stmt();
				}
				break;
			case 9:
				{
				State = 215; create_trigger_stmt();
				}
				break;
			case 10:
				{
				State = 216; create_view_stmt();
				}
				break;
			case 11:
				{
				State = 217; create_virtual_table_stmt();
				}
				break;
			case 12:
				{
				State = 218; delete_stmt();
				}
				break;
			case 13:
				{
				State = 219; delete_stmt_limited();
				}
				break;
			case 14:
				{
				State = 220; detach_stmt();
				}
				break;
			case 15:
				{
				State = 221; drop_index_stmt();
				}
				break;
			case 16:
				{
				State = 222; drop_table_stmt();
				}
				break;
			case 17:
				{
				State = 223; drop_trigger_stmt();
				}
				break;
			case 18:
				{
				State = 224; drop_view_stmt();
				}
				break;
			case 19:
				{
				State = 225; factored_select_stmt();
				}
				break;
			case 20:
				{
				State = 226; insert_stmt();
				}
				break;
			case 21:
				{
				State = 227; pragma_stmt();
				}
				break;
			case 22:
				{
				State = 228; reindex_stmt();
				}
				break;
			case 23:
				{
				State = 229; release_stmt();
				}
				break;
			case 24:
				{
				State = 230; rollback_stmt();
				}
				break;
			case 25:
				{
				State = 231; savepoint_stmt();
				}
				break;
			case 26:
				{
				State = 232; simple_select_stmt();
				}
				break;
			case 27:
				{
				State = 233; select_stmt();
				}
				break;
			case 28:
				{
				State = 234; update_stmt();
				}
				break;
			case 29:
				{
				State = 235; update_stmt_limited();
				}
				break;
			case 30:
				{
				State = 236; vacuum_stmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_stmtContext : ParserRuleContext {
		public ITerminalNode K_ALTER() { return GetToken(SQLiteParser.K_ALTER, 0); }
		public ITerminalNode K_TABLE() { return GetToken(SQLiteParser.K_TABLE, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode K_RENAME() { return GetToken(SQLiteParser.K_RENAME, 0); }
		public ITerminalNode K_TO() { return GetToken(SQLiteParser.K_TO, 0); }
		public New_table_nameContext new_table_name() {
			return GetRuleContext<New_table_nameContext>(0);
		}
		public ITerminalNode K_ADD() { return GetToken(SQLiteParser.K_ADD, 0); }
		public Column_defContext column_def() {
			return GetRuleContext<Column_defContext>(0);
		}
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public ITerminalNode K_COLUMN() { return GetToken(SQLiteParser.K_COLUMN, 0); }
		public Alter_table_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterAlter_table_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitAlter_table_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_stmtContext alter_table_stmt() {
		Alter_table_stmtContext _localctx = new Alter_table_stmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_alter_table_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239; Match(K_ALTER);
			State = 240; Match(K_TABLE);
			State = 244;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 241; database_name();
				State = 242; Match(DOT);
				}
				break;
			}
			State = 246; table_name();
			State = 255;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case K_RENAME:
				{
				State = 247; Match(K_RENAME);
				State = 248; Match(K_TO);
				State = 249; new_table_name();
				}
				break;
			case K_ADD:
				{
				State = 250; Match(K_ADD);
				State = 252;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
				case 1:
					{
					State = 251; Match(K_COLUMN);
					}
					break;
				}
				State = 254; column_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Analyze_stmtContext : ParserRuleContext {
		public ITerminalNode K_ANALYZE() { return GetToken(SQLiteParser.K_ANALYZE, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Table_or_index_nameContext table_or_index_name() {
			return GetRuleContext<Table_or_index_nameContext>(0);
		}
		public Analyze_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_analyze_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterAnalyze_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitAnalyze_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnalyze_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Analyze_stmtContext analyze_stmt() {
		Analyze_stmtContext _localctx = new Analyze_stmtContext(Context, State);
		EnterRule(_localctx, 10, RULE_analyze_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257; Match(K_ANALYZE);
			State = 264;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 258; database_name();
				}
				break;
			case 2:
				{
				State = 259; table_or_index_name();
				}
				break;
			case 3:
				{
				State = 260; database_name();
				State = 261; Match(DOT);
				State = 262; table_or_index_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attach_stmtContext : ParserRuleContext {
		public ITerminalNode K_ATTACH() { return GetToken(SQLiteParser.K_ATTACH, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode K_AS() { return GetToken(SQLiteParser.K_AS, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public ITerminalNode K_DATABASE() { return GetToken(SQLiteParser.K_DATABASE, 0); }
		public Attach_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attach_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterAttach_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitAttach_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttach_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attach_stmtContext attach_stmt() {
		Attach_stmtContext _localctx = new Attach_stmtContext(Context, State);
		EnterRule(_localctx, 12, RULE_attach_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266; Match(K_ATTACH);
			State = 268;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 267; Match(K_DATABASE);
				}
				break;
			}
			State = 270; expr(0);
			State = 271; Match(K_AS);
			State = 272; database_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Begin_stmtContext : ParserRuleContext {
		public ITerminalNode K_BEGIN() { return GetToken(SQLiteParser.K_BEGIN, 0); }
		public ITerminalNode K_TRANSACTION() { return GetToken(SQLiteParser.K_TRANSACTION, 0); }
		public ITerminalNode K_DEFERRED() { return GetToken(SQLiteParser.K_DEFERRED, 0); }
		public ITerminalNode K_IMMEDIATE() { return GetToken(SQLiteParser.K_IMMEDIATE, 0); }
		public ITerminalNode K_EXCLUSIVE() { return GetToken(SQLiteParser.K_EXCLUSIVE, 0); }
		public Transaction_nameContext transaction_name() {
			return GetRuleContext<Transaction_nameContext>(0);
		}
		public Begin_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_begin_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterBegin_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitBegin_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBegin_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Begin_stmtContext begin_stmt() {
		Begin_stmtContext _localctx = new Begin_stmtContext(Context, State);
		EnterRule(_localctx, 14, RULE_begin_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274; Match(K_BEGIN);
			State = 276;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 58)) & ~0x3f) == 0 && ((1L << (_la - 58)) & ((1L << (K_DEFERRED - 58)) | (1L << (K_EXCLUSIVE - 58)) | (1L << (K_IMMEDIATE - 58)))) != 0)) {
				{
				State = 275;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 58)) & ~0x3f) == 0 && ((1L << (_la - 58)) & ((1L << (K_DEFERRED - 58)) | (1L << (K_EXCLUSIVE - 58)) | (1L << (K_IMMEDIATE - 58)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 282;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_TRANSACTION) {
				{
				State = 278; Match(K_TRANSACTION);
				State = 280;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
				case 1:
					{
					State = 279; transaction_name();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Commit_stmtContext : ParserRuleContext {
		public ITerminalNode K_COMMIT() { return GetToken(SQLiteParser.K_COMMIT, 0); }
		public ITerminalNode K_END() { return GetToken(SQLiteParser.K_END, 0); }
		public ITerminalNode K_TRANSACTION() { return GetToken(SQLiteParser.K_TRANSACTION, 0); }
		public Transaction_nameContext transaction_name() {
			return GetRuleContext<Transaction_nameContext>(0);
		}
		public Commit_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commit_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterCommit_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitCommit_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommit_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Commit_stmtContext commit_stmt() {
		Commit_stmtContext _localctx = new Commit_stmtContext(Context, State);
		EnterRule(_localctx, 16, RULE_commit_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284;
			_la = TokenStream.LA(1);
			if ( !(_la==K_COMMIT || _la==K_END) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 289;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_TRANSACTION) {
				{
				State = 285; Match(K_TRANSACTION);
				State = 287;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
				case 1:
					{
					State = 286; transaction_name();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compound_select_stmtContext : ParserRuleContext {
		public Select_coreContext[] select_core() {
			return GetRuleContexts<Select_coreContext>();
		}
		public Select_coreContext select_core(int i) {
			return GetRuleContext<Select_coreContext>(i);
		}
		public ITerminalNode K_WITH() { return GetToken(SQLiteParser.K_WITH, 0); }
		public Common_table_expressionContext[] common_table_expression() {
			return GetRuleContexts<Common_table_expressionContext>();
		}
		public Common_table_expressionContext common_table_expression(int i) {
			return GetRuleContext<Common_table_expressionContext>(i);
		}
		public ITerminalNode K_ORDER() { return GetToken(SQLiteParser.K_ORDER, 0); }
		public ITerminalNode K_BY() { return GetToken(SQLiteParser.K_BY, 0); }
		public Ordering_termContext[] ordering_term() {
			return GetRuleContexts<Ordering_termContext>();
		}
		public Ordering_termContext ordering_term(int i) {
			return GetRuleContext<Ordering_termContext>(i);
		}
		public ITerminalNode K_LIMIT() { return GetToken(SQLiteParser.K_LIMIT, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] K_UNION() { return GetTokens(SQLiteParser.K_UNION); }
		public ITerminalNode K_UNION(int i) {
			return GetToken(SQLiteParser.K_UNION, i);
		}
		public ITerminalNode[] K_INTERSECT() { return GetTokens(SQLiteParser.K_INTERSECT); }
		public ITerminalNode K_INTERSECT(int i) {
			return GetToken(SQLiteParser.K_INTERSECT, i);
		}
		public ITerminalNode[] K_EXCEPT() { return GetTokens(SQLiteParser.K_EXCEPT); }
		public ITerminalNode K_EXCEPT(int i) {
			return GetToken(SQLiteParser.K_EXCEPT, i);
		}
		public ITerminalNode K_RECURSIVE() { return GetToken(SQLiteParser.K_RECURSIVE, 0); }
		public ITerminalNode K_OFFSET() { return GetToken(SQLiteParser.K_OFFSET, 0); }
		public ITerminalNode[] K_ALL() { return GetTokens(SQLiteParser.K_ALL); }
		public ITerminalNode K_ALL(int i) {
			return GetToken(SQLiteParser.K_ALL, i);
		}
		public Compound_select_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_select_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterCompound_select_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitCompound_select_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompound_select_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compound_select_stmtContext compound_select_stmt() {
		Compound_select_stmtContext _localctx = new Compound_select_stmtContext(Context, State);
		EnterRule(_localctx, 18, RULE_compound_select_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_WITH) {
				{
				State = 291; Match(K_WITH);
				State = 293;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
				case 1:
					{
					State = 292; Match(K_RECURSIVE);
					}
					break;
				}
				State = 295; common_table_expression();
				State = 300;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 296; Match(COMMA);
					State = 297; common_table_expression();
					}
					}
					State = 302;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 305; select_core();
			State = 315;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 312;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case K_UNION:
					{
					State = 306; Match(K_UNION);
					State = 308;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==K_ALL) {
						{
						State = 307; Match(K_ALL);
						}
					}

					}
					break;
				case K_INTERSECT:
					{
					State = 310; Match(K_INTERSECT);
					}
					break;
				case K_EXCEPT:
					{
					State = 311; Match(K_EXCEPT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 314; select_core();
				}
				}
				State = 317;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==K_EXCEPT || _la==K_INTERSECT || _la==K_UNION );
			State = 329;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_ORDER) {
				{
				State = 319; Match(K_ORDER);
				State = 320; Match(K_BY);
				State = 321; ordering_term();
				State = 326;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 322; Match(COMMA);
					State = 323; ordering_term();
					}
					}
					State = 328;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 337;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_LIMIT) {
				{
				State = 331; Match(K_LIMIT);
				State = 332; expr(0);
				State = 335;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA || _la==K_OFFSET) {
					{
					State = 333;
					_la = TokenStream.LA(1);
					if ( !(_la==COMMA || _la==K_OFFSET) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 334; expr(0);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_index_stmtContext : ParserRuleContext {
		public ITerminalNode K_CREATE() { return GetToken(SQLiteParser.K_CREATE, 0); }
		public ITerminalNode K_INDEX() { return GetToken(SQLiteParser.K_INDEX, 0); }
		public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		public ITerminalNode K_ON() { return GetToken(SQLiteParser.K_ON, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Indexed_columnContext[] indexed_column() {
			return GetRuleContexts<Indexed_columnContext>();
		}
		public Indexed_columnContext indexed_column(int i) {
			return GetRuleContext<Indexed_columnContext>(i);
		}
		public ITerminalNode K_UNIQUE() { return GetToken(SQLiteParser.K_UNIQUE, 0); }
		public ITerminalNode K_IF() { return GetToken(SQLiteParser.K_IF, 0); }
		public ITerminalNode K_NOT() { return GetToken(SQLiteParser.K_NOT, 0); }
		public ITerminalNode K_EXISTS() { return GetToken(SQLiteParser.K_EXISTS, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public ITerminalNode K_WHERE() { return GetToken(SQLiteParser.K_WHERE, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Create_index_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_index_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterCreate_index_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitCreate_index_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_index_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_index_stmtContext create_index_stmt() {
		Create_index_stmtContext _localctx = new Create_index_stmtContext(Context, State);
		EnterRule(_localctx, 20, RULE_create_index_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339; Match(K_CREATE);
			State = 341;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_UNIQUE) {
				{
				State = 340; Match(K_UNIQUE);
				}
			}

			State = 343; Match(K_INDEX);
			State = 347;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 344; Match(K_IF);
				State = 345; Match(K_NOT);
				State = 346; Match(K_EXISTS);
				}
				break;
			}
			State = 352;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				{
				State = 349; database_name();
				State = 350; Match(DOT);
				}
				break;
			}
			State = 354; index_name();
			State = 355; Match(K_ON);
			State = 356; table_name();
			State = 357; Match(OPEN_PAR);
			State = 358; indexed_column();
			State = 363;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 359; Match(COMMA);
				State = 360; indexed_column();
				}
				}
				State = 365;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 366; Match(CLOSE_PAR);
			State = 369;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_WHERE) {
				{
				State = 367; Match(K_WHERE);
				State = 368; expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_table_stmtContext : ParserRuleContext {
		public ITerminalNode K_CREATE() { return GetToken(SQLiteParser.K_CREATE, 0); }
		public ITerminalNode K_TABLE() { return GetToken(SQLiteParser.K_TABLE, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Column_defContext[] column_def() {
			return GetRuleContexts<Column_defContext>();
		}
		public Column_defContext column_def(int i) {
			return GetRuleContext<Column_defContext>(i);
		}
		public ITerminalNode K_AS() { return GetToken(SQLiteParser.K_AS, 0); }
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public ITerminalNode K_IF() { return GetToken(SQLiteParser.K_IF, 0); }
		public ITerminalNode K_NOT() { return GetToken(SQLiteParser.K_NOT, 0); }
		public ITerminalNode K_EXISTS() { return GetToken(SQLiteParser.K_EXISTS, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public ITerminalNode K_TEMP() { return GetToken(SQLiteParser.K_TEMP, 0); }
		public ITerminalNode K_TEMPORARY() { return GetToken(SQLiteParser.K_TEMPORARY, 0); }
		public Table_constraintContext[] table_constraint() {
			return GetRuleContexts<Table_constraintContext>();
		}
		public Table_constraintContext table_constraint(int i) {
			return GetRuleContext<Table_constraintContext>(i);
		}
		public ITerminalNode K_WITHOUT() { return GetToken(SQLiteParser.K_WITHOUT, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(SQLiteParser.IDENTIFIER, 0); }
		public Create_table_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterCreate_table_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitCreate_table_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_table_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_table_stmtContext create_table_stmt() {
		Create_table_stmtContext _localctx = new Create_table_stmtContext(Context, State);
		EnterRule(_localctx, 22, RULE_create_table_stmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 371; Match(K_CREATE);
			State = 373;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_TEMP || _la==K_TEMPORARY) {
				{
				State = 372;
				_la = TokenStream.LA(1);
				if ( !(_la==K_TEMP || _la==K_TEMPORARY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 375; Match(K_TABLE);
			State = 379;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				State = 376; Match(K_IF);
				State = 377; Match(K_NOT);
				State = 378; Match(K_EXISTS);
				}
				break;
			}
			State = 384;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				{
				State = 381; database_name();
				State = 382; Match(DOT);
				}
				break;
			}
			State = 386; table_name();
			State = 410;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAR:
				{
				State = 387; Match(OPEN_PAR);
				State = 388; column_def();
				State = 393;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 389; Match(COMMA);
						State = 390; column_def();
						}
						} 
					}
					State = 395;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
				}
				State = 400;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 396; Match(COMMA);
					State = 397; table_constraint();
					}
					}
					State = 402;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 403; Match(CLOSE_PAR);
				State = 406;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_WITHOUT) {
					{
					State = 404; Match(K_WITHOUT);
					State = 405; Match(IDENTIFIER);
					}
				}

				}
				break;
			case K_AS:
				{
				State = 408; Match(K_AS);
				State = 409; select_stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_trigger_stmtContext : ParserRuleContext {
		public ITerminalNode K_CREATE() { return GetToken(SQLiteParser.K_CREATE, 0); }
		public ITerminalNode K_TRIGGER() { return GetToken(SQLiteParser.K_TRIGGER, 0); }
		public Trigger_nameContext trigger_name() {
			return GetRuleContext<Trigger_nameContext>(0);
		}
		public ITerminalNode K_ON() { return GetToken(SQLiteParser.K_ON, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode K_BEGIN() { return GetToken(SQLiteParser.K_BEGIN, 0); }
		public ITerminalNode K_END() { return GetToken(SQLiteParser.K_END, 0); }
		public ITerminalNode K_DELETE() { return GetToken(SQLiteParser.K_DELETE, 0); }
		public ITerminalNode K_INSERT() { return GetToken(SQLiteParser.K_INSERT, 0); }
		public ITerminalNode K_UPDATE() { return GetToken(SQLiteParser.K_UPDATE, 0); }
		public ITerminalNode K_IF() { return GetToken(SQLiteParser.K_IF, 0); }
		public ITerminalNode K_NOT() { return GetToken(SQLiteParser.K_NOT, 0); }
		public ITerminalNode K_EXISTS() { return GetToken(SQLiteParser.K_EXISTS, 0); }
		public Database_nameContext[] database_name() {
			return GetRuleContexts<Database_nameContext>();
		}
		public Database_nameContext database_name(int i) {
			return GetRuleContext<Database_nameContext>(i);
		}
		public ITerminalNode K_BEFORE() { return GetToken(SQLiteParser.K_BEFORE, 0); }
		public ITerminalNode K_AFTER() { return GetToken(SQLiteParser.K_AFTER, 0); }
		public ITerminalNode K_INSTEAD() { return GetToken(SQLiteParser.K_INSTEAD, 0); }
		public ITerminalNode[] K_OF() { return GetTokens(SQLiteParser.K_OF); }
		public ITerminalNode K_OF(int i) {
			return GetToken(SQLiteParser.K_OF, i);
		}
		public ITerminalNode K_FOR() { return GetToken(SQLiteParser.K_FOR, 0); }
		public ITerminalNode K_EACH() { return GetToken(SQLiteParser.K_EACH, 0); }
		public ITerminalNode K_ROW() { return GetToken(SQLiteParser.K_ROW, 0); }
		public ITerminalNode K_WHEN() { return GetToken(SQLiteParser.K_WHEN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode K_TEMP() { return GetToken(SQLiteParser.K_TEMP, 0); }
		public ITerminalNode K_TEMPORARY() { return GetToken(SQLiteParser.K_TEMPORARY, 0); }
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public Update_stmtContext[] update_stmt() {
			return GetRuleContexts<Update_stmtContext>();
		}
		public Update_stmtContext update_stmt(int i) {
			return GetRuleContext<Update_stmtContext>(i);
		}
		public Insert_stmtContext[] insert_stmt() {
			return GetRuleContexts<Insert_stmtContext>();
		}
		public Insert_stmtContext insert_stmt(int i) {
			return GetRuleContext<Insert_stmtContext>(i);
		}
		public Delete_stmtContext[] delete_stmt() {
			return GetRuleContexts<Delete_stmtContext>();
		}
		public Delete_stmtContext delete_stmt(int i) {
			return GetRuleContext<Delete_stmtContext>(i);
		}
		public Select_stmtContext[] select_stmt() {
			return GetRuleContexts<Select_stmtContext>();
		}
		public Select_stmtContext select_stmt(int i) {
			return GetRuleContext<Select_stmtContext>(i);
		}
		public Create_trigger_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_trigger_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterCreate_trigger_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitCreate_trigger_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_trigger_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_trigger_stmtContext create_trigger_stmt() {
		Create_trigger_stmtContext _localctx = new Create_trigger_stmtContext(Context, State);
		EnterRule(_localctx, 24, RULE_create_trigger_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412; Match(K_CREATE);
			State = 414;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_TEMP || _la==K_TEMPORARY) {
				{
				State = 413;
				_la = TokenStream.LA(1);
				if ( !(_la==K_TEMP || _la==K_TEMPORARY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 416; Match(K_TRIGGER);
			State = 420;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				{
				State = 417; Match(K_IF);
				State = 418; Match(K_NOT);
				State = 419; Match(K_EXISTS);
				}
				break;
			}
			State = 425;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				{
				State = 422; database_name();
				State = 423; Match(DOT);
				}
				break;
			}
			State = 427; trigger_name();
			State = 432;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case K_BEFORE:
				{
				State = 428; Match(K_BEFORE);
				}
				break;
			case K_AFTER:
				{
				State = 429; Match(K_AFTER);
				}
				break;
			case K_INSTEAD:
				{
				State = 430; Match(K_INSTEAD);
				State = 431; Match(K_OF);
				}
				break;
			case K_DELETE:
			case K_INSERT:
			case K_UPDATE:
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 448;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case K_DELETE:
				{
				State = 434; Match(K_DELETE);
				}
				break;
			case K_INSERT:
				{
				State = 435; Match(K_INSERT);
				}
				break;
			case K_UPDATE:
				{
				State = 436; Match(K_UPDATE);
				State = 446;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_OF) {
					{
					State = 437; Match(K_OF);
					State = 438; column_name();
					State = 443;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 439; Match(COMMA);
						State = 440; column_name();
						}
						}
						State = 445;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 450; Match(K_ON);
			State = 454;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				{
				State = 451; database_name();
				State = 452; Match(DOT);
				}
				break;
			}
			State = 456; table_name();
			State = 460;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_FOR) {
				{
				State = 457; Match(K_FOR);
				State = 458; Match(K_EACH);
				State = 459; Match(K_ROW);
				}
			}

			State = 464;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_WHEN) {
				{
				State = 462; Match(K_WHEN);
				State = 463; expr(0);
				}
			}

			State = 466; Match(K_BEGIN);
			State = 475;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 471;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
				case 1:
					{
					State = 467; update_stmt();
					}
					break;
				case 2:
					{
					State = 468; insert_stmt();
					}
					break;
				case 3:
					{
					State = 469; delete_stmt();
					}
					break;
				case 4:
					{
					State = 470; select_stmt();
					}
					break;
				}
				State = 473; Match(SCOL);
				}
				}
				State = 477;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==K_DELETE || ((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & ((1L << (K_INSERT - 88)) | (1L << (K_REPLACE - 88)) | (1L << (K_SELECT - 88)) | (1L << (K_UPDATE - 88)) | (1L << (K_VALUES - 88)) | (1L << (K_WITH - 88)))) != 0) );
			State = 479; Match(K_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_view_stmtContext : ParserRuleContext {
		public ITerminalNode K_CREATE() { return GetToken(SQLiteParser.K_CREATE, 0); }
		public ITerminalNode K_VIEW() { return GetToken(SQLiteParser.K_VIEW, 0); }
		public View_nameContext view_name() {
			return GetRuleContext<View_nameContext>(0);
		}
		public ITerminalNode K_AS() { return GetToken(SQLiteParser.K_AS, 0); }
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public ITerminalNode K_IF() { return GetToken(SQLiteParser.K_IF, 0); }
		public ITerminalNode K_NOT() { return GetToken(SQLiteParser.K_NOT, 0); }
		public ITerminalNode K_EXISTS() { return GetToken(SQLiteParser.K_EXISTS, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public ITerminalNode K_TEMP() { return GetToken(SQLiteParser.K_TEMP, 0); }
		public ITerminalNode K_TEMPORARY() { return GetToken(SQLiteParser.K_TEMPORARY, 0); }
		public Create_view_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_view_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterCreate_view_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitCreate_view_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_view_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_view_stmtContext create_view_stmt() {
		Create_view_stmtContext _localctx = new Create_view_stmtContext(Context, State);
		EnterRule(_localctx, 26, RULE_create_view_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 481; Match(K_CREATE);
			State = 483;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_TEMP || _la==K_TEMPORARY) {
				{
				State = 482;
				_la = TokenStream.LA(1);
				if ( !(_la==K_TEMP || _la==K_TEMPORARY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 485; Match(K_VIEW);
			State = 489;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				{
				State = 486; Match(K_IF);
				State = 487; Match(K_NOT);
				State = 488; Match(K_EXISTS);
				}
				break;
			}
			State = 494;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				{
				State = 491; database_name();
				State = 492; Match(DOT);
				}
				break;
			}
			State = 496; view_name();
			State = 497; Match(K_AS);
			State = 498; select_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_virtual_table_stmtContext : ParserRuleContext {
		public ITerminalNode K_CREATE() { return GetToken(SQLiteParser.K_CREATE, 0); }
		public ITerminalNode K_VIRTUAL() { return GetToken(SQLiteParser.K_VIRTUAL, 0); }
		public ITerminalNode K_TABLE() { return GetToken(SQLiteParser.K_TABLE, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode K_USING() { return GetToken(SQLiteParser.K_USING, 0); }
		public Module_nameContext module_name() {
			return GetRuleContext<Module_nameContext>(0);
		}
		public ITerminalNode K_IF() { return GetToken(SQLiteParser.K_IF, 0); }
		public ITerminalNode K_NOT() { return GetToken(SQLiteParser.K_NOT, 0); }
		public ITerminalNode K_EXISTS() { return GetToken(SQLiteParser.K_EXISTS, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Module_argumentContext[] module_argument() {
			return GetRuleContexts<Module_argumentContext>();
		}
		public Module_argumentContext module_argument(int i) {
			return GetRuleContext<Module_argumentContext>(i);
		}
		public Create_virtual_table_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_virtual_table_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterCreate_virtual_table_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitCreate_virtual_table_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_virtual_table_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_virtual_table_stmtContext create_virtual_table_stmt() {
		Create_virtual_table_stmtContext _localctx = new Create_virtual_table_stmtContext(Context, State);
		EnterRule(_localctx, 28, RULE_create_virtual_table_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 500; Match(K_CREATE);
			State = 501; Match(K_VIRTUAL);
			State = 502; Match(K_TABLE);
			State = 506;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				{
				State = 503; Match(K_IF);
				State = 504; Match(K_NOT);
				State = 505; Match(K_EXISTS);
				}
				break;
			}
			State = 511;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				{
				State = 508; database_name();
				State = 509; Match(DOT);
				}
				break;
			}
			State = 513; table_name();
			State = 514; Match(K_USING);
			State = 515; module_name();
			State = 527;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR) {
				{
				State = 516; Match(OPEN_PAR);
				State = 517; module_argument();
				State = 522;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 518; Match(COMMA);
					State = 519; module_argument();
					}
					}
					State = 524;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 525; Match(CLOSE_PAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_stmtContext : ParserRuleContext {
		public ITerminalNode K_DELETE() { return GetToken(SQLiteParser.K_DELETE, 0); }
		public ITerminalNode K_FROM() { return GetToken(SQLiteParser.K_FROM, 0); }
		public Qualified_table_nameContext qualified_table_name() {
			return GetRuleContext<Qualified_table_nameContext>(0);
		}
		public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		public ITerminalNode K_WHERE() { return GetToken(SQLiteParser.K_WHERE, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Delete_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterDelete_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitDelete_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelete_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delete_stmtContext delete_stmt() {
		Delete_stmtContext _localctx = new Delete_stmtContext(Context, State);
		EnterRule(_localctx, 30, RULE_delete_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 530;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_WITH) {
				{
				State = 529; with_clause();
				}
			}

			State = 532; Match(K_DELETE);
			State = 533; Match(K_FROM);
			State = 534; qualified_table_name();
			State = 537;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_WHERE) {
				{
				State = 535; Match(K_WHERE);
				State = 536; expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_stmt_limitedContext : ParserRuleContext {
		public ITerminalNode K_DELETE() { return GetToken(SQLiteParser.K_DELETE, 0); }
		public ITerminalNode K_FROM() { return GetToken(SQLiteParser.K_FROM, 0); }
		public Qualified_table_nameContext qualified_table_name() {
			return GetRuleContext<Qualified_table_nameContext>(0);
		}
		public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		public ITerminalNode K_WHERE() { return GetToken(SQLiteParser.K_WHERE, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_LIMIT() { return GetToken(SQLiteParser.K_LIMIT, 0); }
		public ITerminalNode K_ORDER() { return GetToken(SQLiteParser.K_ORDER, 0); }
		public ITerminalNode K_BY() { return GetToken(SQLiteParser.K_BY, 0); }
		public Ordering_termContext[] ordering_term() {
			return GetRuleContexts<Ordering_termContext>();
		}
		public Ordering_termContext ordering_term(int i) {
			return GetRuleContext<Ordering_termContext>(i);
		}
		public ITerminalNode K_OFFSET() { return GetToken(SQLiteParser.K_OFFSET, 0); }
		public Delete_stmt_limitedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_stmt_limited; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterDelete_stmt_limited(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitDelete_stmt_limited(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelete_stmt_limited(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delete_stmt_limitedContext delete_stmt_limited() {
		Delete_stmt_limitedContext _localctx = new Delete_stmt_limitedContext(Context, State);
		EnterRule(_localctx, 32, RULE_delete_stmt_limited);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 540;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_WITH) {
				{
				State = 539; with_clause();
				}
			}

			State = 542; Match(K_DELETE);
			State = 543; Match(K_FROM);
			State = 544; qualified_table_name();
			State = 547;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_WHERE) {
				{
				State = 545; Match(K_WHERE);
				State = 546; expr(0);
				}
			}

			State = 567;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_LIMIT || _la==K_ORDER) {
				{
				State = 559;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_ORDER) {
					{
					State = 549; Match(K_ORDER);
					State = 550; Match(K_BY);
					State = 551; ordering_term();
					State = 556;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 552; Match(COMMA);
						State = 553; ordering_term();
						}
						}
						State = 558;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 561; Match(K_LIMIT);
				State = 562; expr(0);
				State = 565;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA || _la==K_OFFSET) {
					{
					State = 563;
					_la = TokenStream.LA(1);
					if ( !(_la==COMMA || _la==K_OFFSET) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 564; expr(0);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Detach_stmtContext : ParserRuleContext {
		public ITerminalNode K_DETACH() { return GetToken(SQLiteParser.K_DETACH, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public ITerminalNode K_DATABASE() { return GetToken(SQLiteParser.K_DATABASE, 0); }
		public Detach_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_detach_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterDetach_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitDetach_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDetach_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Detach_stmtContext detach_stmt() {
		Detach_stmtContext _localctx = new Detach_stmtContext(Context, State);
		EnterRule(_localctx, 34, RULE_detach_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 569; Match(K_DETACH);
			State = 571;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
			case 1:
				{
				State = 570; Match(K_DATABASE);
				}
				break;
			}
			State = 573; database_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_index_stmtContext : ParserRuleContext {
		public ITerminalNode K_DROP() { return GetToken(SQLiteParser.K_DROP, 0); }
		public ITerminalNode K_INDEX() { return GetToken(SQLiteParser.K_INDEX, 0); }
		public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		public ITerminalNode K_IF() { return GetToken(SQLiteParser.K_IF, 0); }
		public ITerminalNode K_EXISTS() { return GetToken(SQLiteParser.K_EXISTS, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Drop_index_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_index_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterDrop_index_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitDrop_index_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_index_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_index_stmtContext drop_index_stmt() {
		Drop_index_stmtContext _localctx = new Drop_index_stmtContext(Context, State);
		EnterRule(_localctx, 36, RULE_drop_index_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 575; Match(K_DROP);
			State = 576; Match(K_INDEX);
			State = 579;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				{
				State = 577; Match(K_IF);
				State = 578; Match(K_EXISTS);
				}
				break;
			}
			State = 584;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				{
				State = 581; database_name();
				State = 582; Match(DOT);
				}
				break;
			}
			State = 586; index_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_table_stmtContext : ParserRuleContext {
		public ITerminalNode K_DROP() { return GetToken(SQLiteParser.K_DROP, 0); }
		public ITerminalNode K_TABLE() { return GetToken(SQLiteParser.K_TABLE, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode K_IF() { return GetToken(SQLiteParser.K_IF, 0); }
		public ITerminalNode K_EXISTS() { return GetToken(SQLiteParser.K_EXISTS, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Drop_table_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_table_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterDrop_table_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitDrop_table_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_table_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_table_stmtContext drop_table_stmt() {
		Drop_table_stmtContext _localctx = new Drop_table_stmtContext(Context, State);
		EnterRule(_localctx, 38, RULE_drop_table_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 588; Match(K_DROP);
			State = 589; Match(K_TABLE);
			State = 592;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				{
				State = 590; Match(K_IF);
				State = 591; Match(K_EXISTS);
				}
				break;
			}
			State = 597;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				{
				State = 594; database_name();
				State = 595; Match(DOT);
				}
				break;
			}
			State = 599; table_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_trigger_stmtContext : ParserRuleContext {
		public ITerminalNode K_DROP() { return GetToken(SQLiteParser.K_DROP, 0); }
		public ITerminalNode K_TRIGGER() { return GetToken(SQLiteParser.K_TRIGGER, 0); }
		public Trigger_nameContext trigger_name() {
			return GetRuleContext<Trigger_nameContext>(0);
		}
		public ITerminalNode K_IF() { return GetToken(SQLiteParser.K_IF, 0); }
		public ITerminalNode K_EXISTS() { return GetToken(SQLiteParser.K_EXISTS, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Drop_trigger_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_trigger_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterDrop_trigger_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitDrop_trigger_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_trigger_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_trigger_stmtContext drop_trigger_stmt() {
		Drop_trigger_stmtContext _localctx = new Drop_trigger_stmtContext(Context, State);
		EnterRule(_localctx, 40, RULE_drop_trigger_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 601; Match(K_DROP);
			State = 602; Match(K_TRIGGER);
			State = 605;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				{
				State = 603; Match(K_IF);
				State = 604; Match(K_EXISTS);
				}
				break;
			}
			State = 610;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				{
				State = 607; database_name();
				State = 608; Match(DOT);
				}
				break;
			}
			State = 612; trigger_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_view_stmtContext : ParserRuleContext {
		public ITerminalNode K_DROP() { return GetToken(SQLiteParser.K_DROP, 0); }
		public ITerminalNode K_VIEW() { return GetToken(SQLiteParser.K_VIEW, 0); }
		public View_nameContext view_name() {
			return GetRuleContext<View_nameContext>(0);
		}
		public ITerminalNode K_IF() { return GetToken(SQLiteParser.K_IF, 0); }
		public ITerminalNode K_EXISTS() { return GetToken(SQLiteParser.K_EXISTS, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Drop_view_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_view_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterDrop_view_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitDrop_view_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_view_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_view_stmtContext drop_view_stmt() {
		Drop_view_stmtContext _localctx = new Drop_view_stmtContext(Context, State);
		EnterRule(_localctx, 42, RULE_drop_view_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 614; Match(K_DROP);
			State = 615; Match(K_VIEW);
			State = 618;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				{
				State = 616; Match(K_IF);
				State = 617; Match(K_EXISTS);
				}
				break;
			}
			State = 623;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
			case 1:
				{
				State = 620; database_name();
				State = 621; Match(DOT);
				}
				break;
			}
			State = 625; view_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Factored_select_stmtContext : ParserRuleContext {
		public Select_coreContext[] select_core() {
			return GetRuleContexts<Select_coreContext>();
		}
		public Select_coreContext select_core(int i) {
			return GetRuleContext<Select_coreContext>(i);
		}
		public ITerminalNode K_WITH() { return GetToken(SQLiteParser.K_WITH, 0); }
		public Common_table_expressionContext[] common_table_expression() {
			return GetRuleContexts<Common_table_expressionContext>();
		}
		public Common_table_expressionContext common_table_expression(int i) {
			return GetRuleContext<Common_table_expressionContext>(i);
		}
		public Compound_operatorContext[] compound_operator() {
			return GetRuleContexts<Compound_operatorContext>();
		}
		public Compound_operatorContext compound_operator(int i) {
			return GetRuleContext<Compound_operatorContext>(i);
		}
		public ITerminalNode K_ORDER() { return GetToken(SQLiteParser.K_ORDER, 0); }
		public ITerminalNode K_BY() { return GetToken(SQLiteParser.K_BY, 0); }
		public Ordering_termContext[] ordering_term() {
			return GetRuleContexts<Ordering_termContext>();
		}
		public Ordering_termContext ordering_term(int i) {
			return GetRuleContext<Ordering_termContext>(i);
		}
		public ITerminalNode K_LIMIT() { return GetToken(SQLiteParser.K_LIMIT, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_RECURSIVE() { return GetToken(SQLiteParser.K_RECURSIVE, 0); }
		public ITerminalNode K_OFFSET() { return GetToken(SQLiteParser.K_OFFSET, 0); }
		public Factored_select_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factored_select_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterFactored_select_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitFactored_select_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactored_select_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Factored_select_stmtContext factored_select_stmt() {
		Factored_select_stmtContext _localctx = new Factored_select_stmtContext(Context, State);
		EnterRule(_localctx, 44, RULE_factored_select_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 639;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_WITH) {
				{
				State = 627; Match(K_WITH);
				State = 629;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
				case 1:
					{
					State = 628; Match(K_RECURSIVE);
					}
					break;
				}
				State = 631; common_table_expression();
				State = 636;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 632; Match(COMMA);
					State = 633; common_table_expression();
					}
					}
					State = 638;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 641; select_core();
			State = 647;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==K_EXCEPT || _la==K_INTERSECT || _la==K_UNION) {
				{
				{
				State = 642; compound_operator();
				State = 643; select_core();
				}
				}
				State = 649;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 660;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_ORDER) {
				{
				State = 650; Match(K_ORDER);
				State = 651; Match(K_BY);
				State = 652; ordering_term();
				State = 657;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 653; Match(COMMA);
					State = 654; ordering_term();
					}
					}
					State = 659;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 668;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_LIMIT) {
				{
				State = 662; Match(K_LIMIT);
				State = 663; expr(0);
				State = 666;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA || _la==K_OFFSET) {
					{
					State = 664;
					_la = TokenStream.LA(1);
					if ( !(_la==COMMA || _la==K_OFFSET) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 665; expr(0);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_stmtContext : ParserRuleContext {
		public ITerminalNode K_INTO() { return GetToken(SQLiteParser.K_INTO, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode K_INSERT() { return GetToken(SQLiteParser.K_INSERT, 0); }
		public ITerminalNode K_REPLACE() { return GetToken(SQLiteParser.K_REPLACE, 0); }
		public ITerminalNode K_OR() { return GetToken(SQLiteParser.K_OR, 0); }
		public ITerminalNode K_ROLLBACK() { return GetToken(SQLiteParser.K_ROLLBACK, 0); }
		public ITerminalNode K_ABORT() { return GetToken(SQLiteParser.K_ABORT, 0); }
		public ITerminalNode K_FAIL() { return GetToken(SQLiteParser.K_FAIL, 0); }
		public ITerminalNode K_IGNORE() { return GetToken(SQLiteParser.K_IGNORE, 0); }
		public ITerminalNode K_VALUES() { return GetToken(SQLiteParser.K_VALUES, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public ITerminalNode K_DEFAULT() { return GetToken(SQLiteParser.K_DEFAULT, 0); }
		public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public Insert_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterInsert_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitInsert_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsert_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Insert_stmtContext insert_stmt() {
		Insert_stmtContext _localctx = new Insert_stmtContext(Context, State);
		EnterRule(_localctx, 46, RULE_insert_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 671;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_WITH) {
				{
				State = 670; with_clause();
				}
			}

			State = 690;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
			case 1:
				{
				State = 673; Match(K_INSERT);
				}
				break;
			case 2:
				{
				State = 674; Match(K_REPLACE);
				}
				break;
			case 3:
				{
				State = 675; Match(K_INSERT);
				State = 676; Match(K_OR);
				State = 677; Match(K_REPLACE);
				}
				break;
			case 4:
				{
				State = 678; Match(K_INSERT);
				State = 679; Match(K_OR);
				State = 680; Match(K_ROLLBACK);
				}
				break;
			case 5:
				{
				State = 681; Match(K_INSERT);
				State = 682; Match(K_OR);
				State = 683; Match(K_ABORT);
				}
				break;
			case 6:
				{
				State = 684; Match(K_INSERT);
				State = 685; Match(K_OR);
				State = 686; Match(K_FAIL);
				}
				break;
			case 7:
				{
				State = 687; Match(K_INSERT);
				State = 688; Match(K_OR);
				State = 689; Match(K_IGNORE);
				}
				break;
			}
			State = 692; Match(K_INTO);
			State = 696;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
			case 1:
				{
				State = 693; database_name();
				State = 694; Match(DOT);
				}
				break;
			}
			State = 698; table_name();
			State = 710;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR) {
				{
				State = 699; Match(OPEN_PAR);
				State = 700; column_name();
				State = 705;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 701; Match(COMMA);
					State = 702; column_name();
					}
					}
					State = 707;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 708; Match(CLOSE_PAR);
				}
			}

			State = 743;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
			case 1:
				{
				State = 712; Match(K_VALUES);
				State = 713; Match(OPEN_PAR);
				State = 714; expr(0);
				State = 719;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 715; Match(COMMA);
					State = 716; expr(0);
					}
					}
					State = 721;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 722; Match(CLOSE_PAR);
				State = 737;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 723; Match(COMMA);
					State = 724; Match(OPEN_PAR);
					State = 725; expr(0);
					State = 730;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 726; Match(COMMA);
						State = 727; expr(0);
						}
						}
						State = 732;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 733; Match(CLOSE_PAR);
					}
					}
					State = 739;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				{
				State = 740; select_stmt();
				}
				break;
			case 3:
				{
				State = 741; Match(K_DEFAULT);
				State = 742; Match(K_VALUES);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pragma_stmtContext : ParserRuleContext {
		public ITerminalNode K_PRAGMA() { return GetToken(SQLiteParser.K_PRAGMA, 0); }
		public Pragma_nameContext pragma_name() {
			return GetRuleContext<Pragma_nameContext>(0);
		}
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Pragma_valueContext pragma_value() {
			return GetRuleContext<Pragma_valueContext>(0);
		}
		public Pragma_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterPragma_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitPragma_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragma_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pragma_stmtContext pragma_stmt() {
		Pragma_stmtContext _localctx = new Pragma_stmtContext(Context, State);
		EnterRule(_localctx, 48, RULE_pragma_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 745; Match(K_PRAGMA);
			State = 749;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
			case 1:
				{
				State = 746; database_name();
				State = 747; Match(DOT);
				}
				break;
			}
			State = 751; pragma_name();
			State = 758;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASSIGN:
				{
				State = 752; Match(ASSIGN);
				State = 753; pragma_value();
				}
				break;
			case OPEN_PAR:
				{
				State = 754; Match(OPEN_PAR);
				State = 755; pragma_value();
				State = 756; Match(CLOSE_PAR);
				}
				break;
			case Eof:
			case SCOL:
			case K_ALTER:
			case K_ANALYZE:
			case K_ATTACH:
			case K_BEGIN:
			case K_COMMIT:
			case K_CREATE:
			case K_DELETE:
			case K_DETACH:
			case K_DROP:
			case K_END:
			case K_EXPLAIN:
			case K_INSERT:
			case K_PRAGMA:
			case K_REINDEX:
			case K_RELEASE:
			case K_REPLACE:
			case K_ROLLBACK:
			case K_SAVEPOINT:
			case K_SELECT:
			case K_UPDATE:
			case K_VACUUM:
			case K_VALUES:
			case K_WITH:
			case UNEXPECTED_CHAR:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reindex_stmtContext : ParserRuleContext {
		public ITerminalNode K_REINDEX() { return GetToken(SQLiteParser.K_REINDEX, 0); }
		public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Reindex_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reindex_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterReindex_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitReindex_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReindex_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reindex_stmtContext reindex_stmt() {
		Reindex_stmtContext _localctx = new Reindex_stmtContext(Context, State);
		EnterRule(_localctx, 50, RULE_reindex_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 760; Match(K_REINDEX);
			State = 771;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
			case 1:
				{
				State = 761; collation_name();
				}
				break;
			case 2:
				{
				State = 765;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
				case 1:
					{
					State = 762; database_name();
					State = 763; Match(DOT);
					}
					break;
				}
				State = 769;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,97,Context) ) {
				case 1:
					{
					State = 767; table_name();
					}
					break;
				case 2:
					{
					State = 768; index_name();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Release_stmtContext : ParserRuleContext {
		public ITerminalNode K_RELEASE() { return GetToken(SQLiteParser.K_RELEASE, 0); }
		public Savepoint_nameContext savepoint_name() {
			return GetRuleContext<Savepoint_nameContext>(0);
		}
		public ITerminalNode K_SAVEPOINT() { return GetToken(SQLiteParser.K_SAVEPOINT, 0); }
		public Release_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_release_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterRelease_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitRelease_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelease_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Release_stmtContext release_stmt() {
		Release_stmtContext _localctx = new Release_stmtContext(Context, State);
		EnterRule(_localctx, 52, RULE_release_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 773; Match(K_RELEASE);
			State = 775;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
			case 1:
				{
				State = 774; Match(K_SAVEPOINT);
				}
				break;
			}
			State = 777; savepoint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rollback_stmtContext : ParserRuleContext {
		public ITerminalNode K_ROLLBACK() { return GetToken(SQLiteParser.K_ROLLBACK, 0); }
		public ITerminalNode K_TRANSACTION() { return GetToken(SQLiteParser.K_TRANSACTION, 0); }
		public ITerminalNode K_TO() { return GetToken(SQLiteParser.K_TO, 0); }
		public Savepoint_nameContext savepoint_name() {
			return GetRuleContext<Savepoint_nameContext>(0);
		}
		public Transaction_nameContext transaction_name() {
			return GetRuleContext<Transaction_nameContext>(0);
		}
		public ITerminalNode K_SAVEPOINT() { return GetToken(SQLiteParser.K_SAVEPOINT, 0); }
		public Rollback_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollback_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterRollback_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitRollback_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRollback_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rollback_stmtContext rollback_stmt() {
		Rollback_stmtContext _localctx = new Rollback_stmtContext(Context, State);
		EnterRule(_localctx, 54, RULE_rollback_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 779; Match(K_ROLLBACK);
			State = 784;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_TRANSACTION) {
				{
				State = 780; Match(K_TRANSACTION);
				State = 782;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,100,Context) ) {
				case 1:
					{
					State = 781; transaction_name();
					}
					break;
				}
				}
			}

			State = 791;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_TO) {
				{
				State = 786; Match(K_TO);
				State = 788;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
				case 1:
					{
					State = 787; Match(K_SAVEPOINT);
					}
					break;
				}
				State = 790; savepoint_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Savepoint_stmtContext : ParserRuleContext {
		public ITerminalNode K_SAVEPOINT() { return GetToken(SQLiteParser.K_SAVEPOINT, 0); }
		public Savepoint_nameContext savepoint_name() {
			return GetRuleContext<Savepoint_nameContext>(0);
		}
		public Savepoint_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savepoint_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterSavepoint_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitSavepoint_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSavepoint_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Savepoint_stmtContext savepoint_stmt() {
		Savepoint_stmtContext _localctx = new Savepoint_stmtContext(Context, State);
		EnterRule(_localctx, 56, RULE_savepoint_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 793; Match(K_SAVEPOINT);
			State = 794; savepoint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_select_stmtContext : ParserRuleContext {
		public Select_coreContext select_core() {
			return GetRuleContext<Select_coreContext>(0);
		}
		public ITerminalNode K_WITH() { return GetToken(SQLiteParser.K_WITH, 0); }
		public Common_table_expressionContext[] common_table_expression() {
			return GetRuleContexts<Common_table_expressionContext>();
		}
		public Common_table_expressionContext common_table_expression(int i) {
			return GetRuleContext<Common_table_expressionContext>(i);
		}
		public ITerminalNode K_ORDER() { return GetToken(SQLiteParser.K_ORDER, 0); }
		public ITerminalNode K_BY() { return GetToken(SQLiteParser.K_BY, 0); }
		public Ordering_termContext[] ordering_term() {
			return GetRuleContexts<Ordering_termContext>();
		}
		public Ordering_termContext ordering_term(int i) {
			return GetRuleContext<Ordering_termContext>(i);
		}
		public ITerminalNode K_LIMIT() { return GetToken(SQLiteParser.K_LIMIT, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_RECURSIVE() { return GetToken(SQLiteParser.K_RECURSIVE, 0); }
		public ITerminalNode K_OFFSET() { return GetToken(SQLiteParser.K_OFFSET, 0); }
		public Simple_select_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_select_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterSimple_select_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitSimple_select_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_select_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_select_stmtContext simple_select_stmt() {
		Simple_select_stmtContext _localctx = new Simple_select_stmtContext(Context, State);
		EnterRule(_localctx, 58, RULE_simple_select_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 808;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_WITH) {
				{
				State = 796; Match(K_WITH);
				State = 798;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
				case 1:
					{
					State = 797; Match(K_RECURSIVE);
					}
					break;
				}
				State = 800; common_table_expression();
				State = 805;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 801; Match(COMMA);
					State = 802; common_table_expression();
					}
					}
					State = 807;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 810; select_core();
			State = 821;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_ORDER) {
				{
				State = 811; Match(K_ORDER);
				State = 812; Match(K_BY);
				State = 813; ordering_term();
				State = 818;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 814; Match(COMMA);
					State = 815; ordering_term();
					}
					}
					State = 820;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 829;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_LIMIT) {
				{
				State = 823; Match(K_LIMIT);
				State = 824; expr(0);
				State = 827;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA || _la==K_OFFSET) {
					{
					State = 825;
					_la = TokenStream.LA(1);
					if ( !(_la==COMMA || _la==K_OFFSET) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 826; expr(0);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_stmtContext : ParserRuleContext {
		public Select_or_valuesContext[] select_or_values() {
			return GetRuleContexts<Select_or_valuesContext>();
		}
		public Select_or_valuesContext select_or_values(int i) {
			return GetRuleContext<Select_or_valuesContext>(i);
		}
		public ITerminalNode K_WITH() { return GetToken(SQLiteParser.K_WITH, 0); }
		public Common_table_expressionContext[] common_table_expression() {
			return GetRuleContexts<Common_table_expressionContext>();
		}
		public Common_table_expressionContext common_table_expression(int i) {
			return GetRuleContext<Common_table_expressionContext>(i);
		}
		public Compound_operatorContext[] compound_operator() {
			return GetRuleContexts<Compound_operatorContext>();
		}
		public Compound_operatorContext compound_operator(int i) {
			return GetRuleContext<Compound_operatorContext>(i);
		}
		public ITerminalNode K_ORDER() { return GetToken(SQLiteParser.K_ORDER, 0); }
		public ITerminalNode K_BY() { return GetToken(SQLiteParser.K_BY, 0); }
		public Ordering_termContext[] ordering_term() {
			return GetRuleContexts<Ordering_termContext>();
		}
		public Ordering_termContext ordering_term(int i) {
			return GetRuleContext<Ordering_termContext>(i);
		}
		public ITerminalNode K_LIMIT() { return GetToken(SQLiteParser.K_LIMIT, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_RECURSIVE() { return GetToken(SQLiteParser.K_RECURSIVE, 0); }
		public ITerminalNode K_OFFSET() { return GetToken(SQLiteParser.K_OFFSET, 0); }
		public Select_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterSelect_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitSelect_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_stmtContext select_stmt() {
		Select_stmtContext _localctx = new Select_stmtContext(Context, State);
		EnterRule(_localctx, 60, RULE_select_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 843;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_WITH) {
				{
				State = 831; Match(K_WITH);
				State = 833;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,111,Context) ) {
				case 1:
					{
					State = 832; Match(K_RECURSIVE);
					}
					break;
				}
				State = 835; common_table_expression();
				State = 840;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 836; Match(COMMA);
					State = 837; common_table_expression();
					}
					}
					State = 842;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 845; select_or_values();
			State = 851;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==K_EXCEPT || _la==K_INTERSECT || _la==K_UNION) {
				{
				{
				State = 846; compound_operator();
				State = 847; select_or_values();
				}
				}
				State = 853;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 864;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_ORDER) {
				{
				State = 854; Match(K_ORDER);
				State = 855; Match(K_BY);
				State = 856; ordering_term();
				State = 861;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 857; Match(COMMA);
					State = 858; ordering_term();
					}
					}
					State = 863;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 872;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_LIMIT) {
				{
				State = 866; Match(K_LIMIT);
				State = 867; expr(0);
				State = 870;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA || _la==K_OFFSET) {
					{
					State = 868;
					_la = TokenStream.LA(1);
					if ( !(_la==COMMA || _la==K_OFFSET) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 869; expr(0);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_or_valuesContext : ParserRuleContext {
		public ITerminalNode K_SELECT() { return GetToken(SQLiteParser.K_SELECT, 0); }
		public Result_columnContext[] result_column() {
			return GetRuleContexts<Result_columnContext>();
		}
		public Result_columnContext result_column(int i) {
			return GetRuleContext<Result_columnContext>(i);
		}
		public ITerminalNode K_FROM() { return GetToken(SQLiteParser.K_FROM, 0); }
		public ITerminalNode K_WHERE() { return GetToken(SQLiteParser.K_WHERE, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_GROUP() { return GetToken(SQLiteParser.K_GROUP, 0); }
		public ITerminalNode K_BY() { return GetToken(SQLiteParser.K_BY, 0); }
		public ITerminalNode K_DISTINCT() { return GetToken(SQLiteParser.K_DISTINCT, 0); }
		public ITerminalNode K_ALL() { return GetToken(SQLiteParser.K_ALL, 0); }
		public Table_or_subqueryContext[] table_or_subquery() {
			return GetRuleContexts<Table_or_subqueryContext>();
		}
		public Table_or_subqueryContext table_or_subquery(int i) {
			return GetRuleContext<Table_or_subqueryContext>(i);
		}
		public Join_clauseContext join_clause() {
			return GetRuleContext<Join_clauseContext>(0);
		}
		public ITerminalNode K_HAVING() { return GetToken(SQLiteParser.K_HAVING, 0); }
		public ITerminalNode K_VALUES() { return GetToken(SQLiteParser.K_VALUES, 0); }
		public Select_or_valuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_or_values; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterSelect_or_values(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitSelect_or_values(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_or_values(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_or_valuesContext select_or_values() {
		Select_or_valuesContext _localctx = new Select_or_valuesContext(Context, State);
		EnterRule(_localctx, 62, RULE_select_or_values);
		int _la;
		try {
			State = 948;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case K_SELECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 874; Match(K_SELECT);
				State = 876;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,119,Context) ) {
				case 1:
					{
					State = 875;
					_la = TokenStream.LA(1);
					if ( !(_la==K_ALL || _la==K_DISTINCT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 878; result_column();
				State = 883;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 879; Match(COMMA);
					State = 880; result_column();
					}
					}
					State = 885;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 898;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_FROM) {
					{
					State = 886; Match(K_FROM);
					State = 896;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,122,Context) ) {
					case 1:
						{
						State = 887; table_or_subquery();
						State = 892;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==COMMA) {
							{
							{
							State = 888; Match(COMMA);
							State = 889; table_or_subquery();
							}
							}
							State = 894;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						break;
					case 2:
						{
						State = 895; join_clause();
						}
						break;
					}
					}
				}

				State = 902;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_WHERE) {
					{
					State = 900; Match(K_WHERE);
					State = 901; expr(0);
					}
				}

				State = 918;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_GROUP) {
					{
					State = 904; Match(K_GROUP);
					State = 905; Match(K_BY);
					State = 906; expr(0);
					State = 911;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 907; Match(COMMA);
						State = 908; expr(0);
						}
						}
						State = 913;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 916;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==K_HAVING) {
						{
						State = 914; Match(K_HAVING);
						State = 915; expr(0);
						}
					}

					}
				}

				}
				break;
			case K_VALUES:
				EnterOuterAlt(_localctx, 2);
				{
				State = 920; Match(K_VALUES);
				State = 921; Match(OPEN_PAR);
				State = 922; expr(0);
				State = 927;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 923; Match(COMMA);
					State = 924; expr(0);
					}
					}
					State = 929;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 930; Match(CLOSE_PAR);
				State = 945;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 931; Match(COMMA);
					State = 932; Match(OPEN_PAR);
					State = 933; expr(0);
					State = 938;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 934; Match(COMMA);
						State = 935; expr(0);
						}
						}
						State = 940;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 941; Match(CLOSE_PAR);
					}
					}
					State = 947;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_stmtContext : ParserRuleContext {
		public ITerminalNode K_UPDATE() { return GetToken(SQLiteParser.K_UPDATE, 0); }
		public Qualified_table_nameContext qualified_table_name() {
			return GetRuleContext<Qualified_table_nameContext>(0);
		}
		public ITerminalNode K_SET() { return GetToken(SQLiteParser.K_SET, 0); }
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		public ITerminalNode K_OR() { return GetToken(SQLiteParser.K_OR, 0); }
		public ITerminalNode K_ROLLBACK() { return GetToken(SQLiteParser.K_ROLLBACK, 0); }
		public ITerminalNode K_ABORT() { return GetToken(SQLiteParser.K_ABORT, 0); }
		public ITerminalNode K_REPLACE() { return GetToken(SQLiteParser.K_REPLACE, 0); }
		public ITerminalNode K_FAIL() { return GetToken(SQLiteParser.K_FAIL, 0); }
		public ITerminalNode K_IGNORE() { return GetToken(SQLiteParser.K_IGNORE, 0); }
		public ITerminalNode K_WHERE() { return GetToken(SQLiteParser.K_WHERE, 0); }
		public Update_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterUpdate_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitUpdate_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Update_stmtContext update_stmt() {
		Update_stmtContext _localctx = new Update_stmtContext(Context, State);
		EnterRule(_localctx, 64, RULE_update_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 951;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_WITH) {
				{
				State = 950; with_clause();
				}
			}

			State = 953; Match(K_UPDATE);
			State = 964;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,133,Context) ) {
			case 1:
				{
				State = 954; Match(K_OR);
				State = 955; Match(K_ROLLBACK);
				}
				break;
			case 2:
				{
				State = 956; Match(K_OR);
				State = 957; Match(K_ABORT);
				}
				break;
			case 3:
				{
				State = 958; Match(K_OR);
				State = 959; Match(K_REPLACE);
				}
				break;
			case 4:
				{
				State = 960; Match(K_OR);
				State = 961; Match(K_FAIL);
				}
				break;
			case 5:
				{
				State = 962; Match(K_OR);
				State = 963; Match(K_IGNORE);
				}
				break;
			}
			State = 966; qualified_table_name();
			State = 967; Match(K_SET);
			State = 968; column_name();
			State = 969; Match(ASSIGN);
			State = 970; expr(0);
			State = 978;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 971; Match(COMMA);
				State = 972; column_name();
				State = 973; Match(ASSIGN);
				State = 974; expr(0);
				}
				}
				State = 980;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 983;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_WHERE) {
				{
				State = 981; Match(K_WHERE);
				State = 982; expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_stmt_limitedContext : ParserRuleContext {
		public ITerminalNode K_UPDATE() { return GetToken(SQLiteParser.K_UPDATE, 0); }
		public Qualified_table_nameContext qualified_table_name() {
			return GetRuleContext<Qualified_table_nameContext>(0);
		}
		public ITerminalNode K_SET() { return GetToken(SQLiteParser.K_SET, 0); }
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		public ITerminalNode K_OR() { return GetToken(SQLiteParser.K_OR, 0); }
		public ITerminalNode K_ROLLBACK() { return GetToken(SQLiteParser.K_ROLLBACK, 0); }
		public ITerminalNode K_ABORT() { return GetToken(SQLiteParser.K_ABORT, 0); }
		public ITerminalNode K_REPLACE() { return GetToken(SQLiteParser.K_REPLACE, 0); }
		public ITerminalNode K_FAIL() { return GetToken(SQLiteParser.K_FAIL, 0); }
		public ITerminalNode K_IGNORE() { return GetToken(SQLiteParser.K_IGNORE, 0); }
		public ITerminalNode K_WHERE() { return GetToken(SQLiteParser.K_WHERE, 0); }
		public ITerminalNode K_LIMIT() { return GetToken(SQLiteParser.K_LIMIT, 0); }
		public ITerminalNode K_ORDER() { return GetToken(SQLiteParser.K_ORDER, 0); }
		public ITerminalNode K_BY() { return GetToken(SQLiteParser.K_BY, 0); }
		public Ordering_termContext[] ordering_term() {
			return GetRuleContexts<Ordering_termContext>();
		}
		public Ordering_termContext ordering_term(int i) {
			return GetRuleContext<Ordering_termContext>(i);
		}
		public ITerminalNode K_OFFSET() { return GetToken(SQLiteParser.K_OFFSET, 0); }
		public Update_stmt_limitedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_stmt_limited; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterUpdate_stmt_limited(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitUpdate_stmt_limited(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate_stmt_limited(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Update_stmt_limitedContext update_stmt_limited() {
		Update_stmt_limitedContext _localctx = new Update_stmt_limitedContext(Context, State);
		EnterRule(_localctx, 66, RULE_update_stmt_limited);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 986;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_WITH) {
				{
				State = 985; with_clause();
				}
			}

			State = 988; Match(K_UPDATE);
			State = 999;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,137,Context) ) {
			case 1:
				{
				State = 989; Match(K_OR);
				State = 990; Match(K_ROLLBACK);
				}
				break;
			case 2:
				{
				State = 991; Match(K_OR);
				State = 992; Match(K_ABORT);
				}
				break;
			case 3:
				{
				State = 993; Match(K_OR);
				State = 994; Match(K_REPLACE);
				}
				break;
			case 4:
				{
				State = 995; Match(K_OR);
				State = 996; Match(K_FAIL);
				}
				break;
			case 5:
				{
				State = 997; Match(K_OR);
				State = 998; Match(K_IGNORE);
				}
				break;
			}
			State = 1001; qualified_table_name();
			State = 1002; Match(K_SET);
			State = 1003; column_name();
			State = 1004; Match(ASSIGN);
			State = 1005; expr(0);
			State = 1013;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1006; Match(COMMA);
				State = 1007; column_name();
				State = 1008; Match(ASSIGN);
				State = 1009; expr(0);
				}
				}
				State = 1015;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1018;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_WHERE) {
				{
				State = 1016; Match(K_WHERE);
				State = 1017; expr(0);
				}
			}

			State = 1038;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_LIMIT || _la==K_ORDER) {
				{
				State = 1030;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_ORDER) {
					{
					State = 1020; Match(K_ORDER);
					State = 1021; Match(K_BY);
					State = 1022; ordering_term();
					State = 1027;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 1023; Match(COMMA);
						State = 1024; ordering_term();
						}
						}
						State = 1029;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 1032; Match(K_LIMIT);
				State = 1033; expr(0);
				State = 1036;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA || _la==K_OFFSET) {
					{
					State = 1034;
					_la = TokenStream.LA(1);
					if ( !(_la==COMMA || _la==K_OFFSET) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1035; expr(0);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vacuum_stmtContext : ParserRuleContext {
		public ITerminalNode K_VACUUM() { return GetToken(SQLiteParser.K_VACUUM, 0); }
		public Vacuum_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vacuum_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterVacuum_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitVacuum_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVacuum_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Vacuum_stmtContext vacuum_stmt() {
		Vacuum_stmtContext _localctx = new Vacuum_stmtContext(Context, State);
		EnterRule(_localctx, 68, RULE_vacuum_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1040; Match(K_VACUUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_defContext : ParserRuleContext {
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Column_constraintContext[] column_constraint() {
			return GetRuleContexts<Column_constraintContext>();
		}
		public Column_constraintContext column_constraint(int i) {
			return GetRuleContext<Column_constraintContext>(i);
		}
		public Column_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterColumn_def(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitColumn_def(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_defContext column_def() {
		Column_defContext _localctx = new Column_defContext(Context, State);
		EnterRule(_localctx, 70, RULE_column_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1042; column_name();
			State = 1044;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,144,Context) ) {
			case 1:
				{
				State = 1043; type_name();
				}
				break;
			}
			State = 1049;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << K_CHECK) | (1L << K_COLLATE) | (1L << K_CONSTRAINT) | (1L << K_DEFAULT))) != 0) || ((((_la - 102)) & ~0x3f) == 0 && ((1L << (_la - 102)) & ((1L << (K_NOT - 102)) | (1L << (K_NULL - 102)) | (1L << (K_PRIMARY - 102)) | (1L << (K_REFERENCES - 102)) | (1L << (K_UNIQUE - 102)))) != 0)) {
				{
				{
				State = 1046; column_constraint();
				}
				}
				State = 1051;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_nameContext : ParserRuleContext {
		public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		public Signed_numberContext[] signed_number() {
			return GetRuleContexts<Signed_numberContext>();
		}
		public Signed_numberContext signed_number(int i) {
			return GetRuleContext<Signed_numberContext>(i);
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterType_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitType_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_nameContext type_name() {
		Type_nameContext _localctx = new Type_nameContext(Context, State);
		EnterRule(_localctx, 72, RULE_type_name);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1053;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1052; name();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1055;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,146,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 1067;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,147,Context) ) {
			case 1:
				{
				State = 1057; Match(OPEN_PAR);
				State = 1058; signed_number();
				State = 1059; Match(CLOSE_PAR);
				}
				break;
			case 2:
				{
				State = 1061; Match(OPEN_PAR);
				State = 1062; signed_number();
				State = 1063; Match(COMMA);
				State = 1064; signed_number();
				State = 1065; Match(CLOSE_PAR);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_constraintContext : ParserRuleContext {
		public ITerminalNode K_PRIMARY() { return GetToken(SQLiteParser.K_PRIMARY, 0); }
		public ITerminalNode K_KEY() { return GetToken(SQLiteParser.K_KEY, 0); }
		public Conflict_clauseContext conflict_clause() {
			return GetRuleContext<Conflict_clauseContext>(0);
		}
		public ITerminalNode K_NULL() { return GetToken(SQLiteParser.K_NULL, 0); }
		public ITerminalNode K_UNIQUE() { return GetToken(SQLiteParser.K_UNIQUE, 0); }
		public ITerminalNode K_CHECK() { return GetToken(SQLiteParser.K_CHECK, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode K_DEFAULT() { return GetToken(SQLiteParser.K_DEFAULT, 0); }
		public ITerminalNode K_COLLATE() { return GetToken(SQLiteParser.K_COLLATE, 0); }
		public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		public Foreign_key_clauseContext foreign_key_clause() {
			return GetRuleContext<Foreign_key_clauseContext>(0);
		}
		public ITerminalNode K_CONSTRAINT() { return GetToken(SQLiteParser.K_CONSTRAINT, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Signed_numberContext signed_number() {
			return GetRuleContext<Signed_numberContext>(0);
		}
		public Literal_valueContext literal_value() {
			return GetRuleContext<Literal_valueContext>(0);
		}
		public ITerminalNode K_AUTOINCREMENT() { return GetToken(SQLiteParser.K_AUTOINCREMENT, 0); }
		public ITerminalNode K_NOT() { return GetToken(SQLiteParser.K_NOT, 0); }
		public ITerminalNode K_ASC() { return GetToken(SQLiteParser.K_ASC, 0); }
		public ITerminalNode K_DESC() { return GetToken(SQLiteParser.K_DESC, 0); }
		public Column_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterColumn_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitColumn_constraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_constraintContext column_constraint() {
		Column_constraintContext _localctx = new Column_constraintContext(Context, State);
		EnterRule(_localctx, 74, RULE_column_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1071;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_CONSTRAINT) {
				{
				State = 1069; Match(K_CONSTRAINT);
				State = 1070; name();
				}
			}

			State = 1106;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case K_PRIMARY:
				{
				State = 1073; Match(K_PRIMARY);
				State = 1074; Match(K_KEY);
				State = 1076;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_ASC || _la==K_DESC) {
					{
					State = 1075;
					_la = TokenStream.LA(1);
					if ( !(_la==K_ASC || _la==K_DESC) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 1078; conflict_clause();
				State = 1080;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_AUTOINCREMENT) {
					{
					State = 1079; Match(K_AUTOINCREMENT);
					}
				}

				}
				break;
			case K_NOT:
			case K_NULL:
				{
				State = 1083;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_NOT) {
					{
					State = 1082; Match(K_NOT);
					}
				}

				State = 1085; Match(K_NULL);
				State = 1086; conflict_clause();
				}
				break;
			case K_UNIQUE:
				{
				State = 1087; Match(K_UNIQUE);
				State = 1088; conflict_clause();
				}
				break;
			case K_CHECK:
				{
				State = 1089; Match(K_CHECK);
				State = 1090; Match(OPEN_PAR);
				State = 1091; expr(0);
				State = 1092; Match(CLOSE_PAR);
				}
				break;
			case K_DEFAULT:
				{
				State = 1094; Match(K_DEFAULT);
				State = 1101;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,152,Context) ) {
				case 1:
					{
					State = 1095; signed_number();
					}
					break;
				case 2:
					{
					State = 1096; literal_value();
					}
					break;
				case 3:
					{
					State = 1097; Match(OPEN_PAR);
					State = 1098; expr(0);
					State = 1099; Match(CLOSE_PAR);
					}
					break;
				}
				}
				break;
			case K_COLLATE:
				{
				State = 1103; Match(K_COLLATE);
				State = 1104; collation_name();
				}
				break;
			case K_REFERENCES:
				{
				State = 1105; foreign_key_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conflict_clauseContext : ParserRuleContext {
		public ITerminalNode K_ON() { return GetToken(SQLiteParser.K_ON, 0); }
		public ITerminalNode K_CONFLICT() { return GetToken(SQLiteParser.K_CONFLICT, 0); }
		public ITerminalNode K_ROLLBACK() { return GetToken(SQLiteParser.K_ROLLBACK, 0); }
		public ITerminalNode K_ABORT() { return GetToken(SQLiteParser.K_ABORT, 0); }
		public ITerminalNode K_FAIL() { return GetToken(SQLiteParser.K_FAIL, 0); }
		public ITerminalNode K_IGNORE() { return GetToken(SQLiteParser.K_IGNORE, 0); }
		public ITerminalNode K_REPLACE() { return GetToken(SQLiteParser.K_REPLACE, 0); }
		public Conflict_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conflict_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterConflict_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitConflict_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConflict_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conflict_clauseContext conflict_clause() {
		Conflict_clauseContext _localctx = new Conflict_clauseContext(Context, State);
		EnterRule(_localctx, 76, RULE_conflict_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_ON) {
				{
				State = 1108; Match(K_ON);
				State = 1109; Match(K_CONFLICT);
				State = 1110;
				_la = TokenStream.LA(1);
				if ( !(_la==K_ABORT || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (K_FAIL - 72)) | (1L << (K_IGNORE - 72)) | (1L << (K_REPLACE - 72)) | (1L << (K_ROLLBACK - 72)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public Literal_valueContext literal_value() {
			return GetRuleContext<Literal_valueContext>(0);
		}
		public ITerminalNode BIND_PARAMETER() { return GetToken(SQLiteParser.BIND_PARAMETER, 0); }
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Unary_operatorContext unary_operator() {
			return GetRuleContext<Unary_operatorContext>(0);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public ITerminalNode K_DISTINCT() { return GetToken(SQLiteParser.K_DISTINCT, 0); }
		public ITerminalNode K_CAST() { return GetToken(SQLiteParser.K_CAST, 0); }
		public ITerminalNode K_AS() { return GetToken(SQLiteParser.K_AS, 0); }
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public ITerminalNode K_EXISTS() { return GetToken(SQLiteParser.K_EXISTS, 0); }
		public ITerminalNode K_NOT() { return GetToken(SQLiteParser.K_NOT, 0); }
		public ITerminalNode K_CASE() { return GetToken(SQLiteParser.K_CASE, 0); }
		public ITerminalNode K_END() { return GetToken(SQLiteParser.K_END, 0); }
		public ITerminalNode[] K_WHEN() { return GetTokens(SQLiteParser.K_WHEN); }
		public ITerminalNode K_WHEN(int i) {
			return GetToken(SQLiteParser.K_WHEN, i);
		}
		public ITerminalNode[] K_THEN() { return GetTokens(SQLiteParser.K_THEN); }
		public ITerminalNode K_THEN(int i) {
			return GetToken(SQLiteParser.K_THEN, i);
		}
		public ITerminalNode K_ELSE() { return GetToken(SQLiteParser.K_ELSE, 0); }
		public Raise_functionContext raise_function() {
			return GetRuleContext<Raise_functionContext>(0);
		}
		public ITerminalNode K_IS() { return GetToken(SQLiteParser.K_IS, 0); }
		public ITerminalNode K_IN() { return GetToken(SQLiteParser.K_IN, 0); }
		public ITerminalNode K_LIKE() { return GetToken(SQLiteParser.K_LIKE, 0); }
		public ITerminalNode K_GLOB() { return GetToken(SQLiteParser.K_GLOB, 0); }
		public ITerminalNode K_MATCH() { return GetToken(SQLiteParser.K_MATCH, 0); }
		public ITerminalNode K_REGEXP() { return GetToken(SQLiteParser.K_REGEXP, 0); }
		public ITerminalNode K_AND() { return GetToken(SQLiteParser.K_AND, 0); }
		public ITerminalNode K_OR() { return GetToken(SQLiteParser.K_OR, 0); }
		public ITerminalNode K_BETWEEN() { return GetToken(SQLiteParser.K_BETWEEN, 0); }
		public ITerminalNode K_COLLATE() { return GetToken(SQLiteParser.K_COLLATE, 0); }
		public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		public ITerminalNode K_ESCAPE() { return GetToken(SQLiteParser.K_ESCAPE, 0); }
		public ITerminalNode K_ISNULL() { return GetToken(SQLiteParser.K_ISNULL, 0); }
		public ITerminalNode K_NOTNULL() { return GetToken(SQLiteParser.K_NOTNULL, 0); }
		public ITerminalNode K_NULL() { return GetToken(SQLiteParser.K_NULL, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 78;
		EnterRecursionRule(_localctx, 78, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1189;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,165,Context) ) {
			case 1:
				{
				State = 1114; literal_value();
				}
				break;
			case 2:
				{
				State = 1115; Match(BIND_PARAMETER);
				}
				break;
			case 3:
				{
				State = 1124;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,156,Context) ) {
				case 1:
					{
					State = 1119;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,155,Context) ) {
					case 1:
						{
						State = 1116; database_name();
						State = 1117; Match(DOT);
						}
						break;
					}
					State = 1121; table_name();
					State = 1122; Match(DOT);
					}
					break;
				}
				State = 1126; column_name();
				}
				break;
			case 4:
				{
				State = 1127; unary_operator();
				State = 1128; expr(21);
				}
				break;
			case 5:
				{
				State = 1130; function_name();
				State = 1131; Match(OPEN_PAR);
				State = 1144;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OPEN_PAR:
				case PLUS:
				case MINUS:
				case TILDE:
				case K_ABORT:
				case K_ACTION:
				case K_ADD:
				case K_AFTER:
				case K_ALL:
				case K_ALTER:
				case K_ANALYZE:
				case K_AND:
				case K_AS:
				case K_ASC:
				case K_ATTACH:
				case K_AUTOINCREMENT:
				case K_BEFORE:
				case K_BEGIN:
				case K_BETWEEN:
				case K_BY:
				case K_CASCADE:
				case K_CASE:
				case K_CAST:
				case K_CHECK:
				case K_COLLATE:
				case K_COLUMN:
				case K_COMMIT:
				case K_CONFLICT:
				case K_CONSTRAINT:
				case K_CREATE:
				case K_CROSS:
				case K_CURRENT_DATE:
				case K_CURRENT_TIME:
				case K_CURRENT_TIMESTAMP:
				case K_DATABASE:
				case K_DEFAULT:
				case K_DEFERRABLE:
				case K_DEFERRED:
				case K_DELETE:
				case K_DESC:
				case K_DETACH:
				case K_DISTINCT:
				case K_DROP:
				case K_EACH:
				case K_ELSE:
				case K_END:
				case K_ESCAPE:
				case K_EXCEPT:
				case K_EXCLUSIVE:
				case K_EXISTS:
				case K_EXPLAIN:
				case K_FAIL:
				case K_FOR:
				case K_FOREIGN:
				case K_FROM:
				case K_FULL:
				case K_GLOB:
				case K_GROUP:
				case K_HAVING:
				case K_IF:
				case K_IGNORE:
				case K_IMMEDIATE:
				case K_IN:
				case K_INDEX:
				case K_INDEXED:
				case K_INITIALLY:
				case K_INNER:
				case K_INSERT:
				case K_INSTEAD:
				case K_INTERSECT:
				case K_INTO:
				case K_IS:
				case K_ISNULL:
				case K_JOIN:
				case K_KEY:
				case K_LEFT:
				case K_LIKE:
				case K_LIMIT:
				case K_MATCH:
				case K_NATURAL:
				case K_NO:
				case K_NOT:
				case K_NOTNULL:
				case K_NULL:
				case K_OF:
				case K_OFFSET:
				case K_ON:
				case K_OR:
				case K_ORDER:
				case K_OUTER:
				case K_PLAN:
				case K_PRAGMA:
				case K_PRIMARY:
				case K_QUERY:
				case K_RAISE:
				case K_RECURSIVE:
				case K_REFERENCES:
				case K_REGEXP:
				case K_REINDEX:
				case K_RELEASE:
				case K_RENAME:
				case K_REPLACE:
				case K_RESTRICT:
				case K_RIGHT:
				case K_ROLLBACK:
				case K_ROW:
				case K_SAVEPOINT:
				case K_SELECT:
				case K_SET:
				case K_TABLE:
				case K_TEMP:
				case K_TEMPORARY:
				case K_THEN:
				case K_TO:
				case K_TRANSACTION:
				case K_TRIGGER:
				case K_UNION:
				case K_UNIQUE:
				case K_UPDATE:
				case K_USING:
				case K_VACUUM:
				case K_VALUES:
				case K_VIEW:
				case K_VIRTUAL:
				case K_WHEN:
				case K_WHERE:
				case K_WITH:
				case K_WITHOUT:
				case IDENTIFIER:
				case NUMERIC_LITERAL:
				case BIND_PARAMETER:
				case STRING_LITERAL:
				case BLOB_LITERAL:
					{
					State = 1133;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,157,Context) ) {
					case 1:
						{
						State = 1132; Match(K_DISTINCT);
						}
						break;
					}
					State = 1135; expr(0);
					State = 1140;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 1136; Match(COMMA);
						State = 1137; expr(0);
						}
						}
						State = 1142;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				case STAR:
					{
					State = 1143; Match(STAR);
					}
					break;
				case CLOSE_PAR:
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1146; Match(CLOSE_PAR);
				}
				break;
			case 6:
				{
				State = 1148; Match(OPEN_PAR);
				State = 1149; expr(0);
				State = 1150; Match(CLOSE_PAR);
				}
				break;
			case 7:
				{
				State = 1152; Match(K_CAST);
				State = 1153; Match(OPEN_PAR);
				State = 1154; expr(0);
				State = 1155; Match(K_AS);
				State = 1156; type_name();
				State = 1157; Match(CLOSE_PAR);
				}
				break;
			case 8:
				{
				State = 1163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_EXISTS || _la==K_NOT) {
					{
					State = 1160;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==K_NOT) {
						{
						State = 1159; Match(K_NOT);
						}
					}

					State = 1162; Match(K_EXISTS);
					}
				}

				State = 1165; Match(OPEN_PAR);
				State = 1166; select_stmt();
				State = 1167; Match(CLOSE_PAR);
				}
				break;
			case 9:
				{
				State = 1169; Match(K_CASE);
				State = 1171;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,162,Context) ) {
				case 1:
					{
					State = 1170; expr(0);
					}
					break;
				}
				State = 1178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1173; Match(K_WHEN);
					State = 1174; expr(0);
					State = 1175; Match(K_THEN);
					State = 1176; expr(0);
					}
					}
					State = 1180;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==K_WHEN );
				State = 1184;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_ELSE) {
					{
					State = 1182; Match(K_ELSE);
					State = 1183; expr(0);
					}
				}

				State = 1186; Match(K_END);
				}
				break;
			case 10:
				{
				State = 1188; raise_function();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1291;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,178,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1289;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,177,Context) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1191;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 1192; Match(PIPE2);
						State = 1193; expr(21);
						}
						break;
					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1194;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 1195;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STAR) | (1L << DIV) | (1L << MOD))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1196; expr(20);
						}
						break;
					case 3:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1197;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 1198;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1199; expr(19);
						}
						break;
					case 4:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1200;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 1201;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT2) | (1L << GT2) | (1L << AMP) | (1L << PIPE))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1202; expr(18);
						}
						break;
					case 5:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1203;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 1204;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT) | (1L << LT_EQ) | (1L << GT) | (1L << GT_EQ))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1205; expr(17);
						}
						break;
					case 6:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1206;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 1219;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,166,Context) ) {
						case 1:
							{
							State = 1207; Match(ASSIGN);
							}
							break;
						case 2:
							{
							State = 1208; Match(EQ);
							}
							break;
						case 3:
							{
							State = 1209; Match(NOT_EQ1);
							}
							break;
						case 4:
							{
							State = 1210; Match(NOT_EQ2);
							}
							break;
						case 5:
							{
							State = 1211; Match(K_IS);
							}
							break;
						case 6:
							{
							State = 1212; Match(K_IS);
							State = 1213; Match(K_NOT);
							}
							break;
						case 7:
							{
							State = 1214; Match(K_IN);
							}
							break;
						case 8:
							{
							State = 1215; Match(K_LIKE);
							}
							break;
						case 9:
							{
							State = 1216; Match(K_GLOB);
							}
							break;
						case 10:
							{
							State = 1217; Match(K_MATCH);
							}
							break;
						case 11:
							{
							State = 1218; Match(K_REGEXP);
							}
							break;
						}
						State = 1221; expr(16);
						}
						break;
					case 7:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1222;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 1223; Match(K_AND);
						State = 1224; expr(15);
						}
						break;
					case 8:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1225;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 1226; Match(K_OR);
						State = 1227; expr(14);
						}
						break;
					case 9:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1228;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 1229; Match(K_IS);
						State = 1231;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,167,Context) ) {
						case 1:
							{
							State = 1230; Match(K_NOT);
							}
							break;
						}
						State = 1233; expr(7);
						}
						break;
					case 10:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1234;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 1236;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==K_NOT) {
							{
							State = 1235; Match(K_NOT);
							}
						}

						State = 1238; Match(K_BETWEEN);
						State = 1239; expr(0);
						State = 1240; Match(K_AND);
						State = 1241; expr(6);
						}
						break;
					case 11:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1243;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 1244; Match(K_COLLATE);
						State = 1245; collation_name();
						}
						break;
					case 12:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1246;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 1248;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==K_NOT) {
							{
							State = 1247; Match(K_NOT);
							}
						}

						State = 1250;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (K_GLOB - 77)) | (1L << (K_LIKE - 77)) | (1L << (K_MATCH - 77)) | (1L << (K_REGEXP - 77)))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1251; expr(0);
						State = 1254;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,170,Context) ) {
						case 1:
							{
							State = 1252; Match(K_ESCAPE);
							State = 1253; expr(0);
							}
							break;
						}
						}
						break;
					case 13:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1256;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 1261;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case K_ISNULL:
							{
							State = 1257; Match(K_ISNULL);
							}
							break;
						case K_NOTNULL:
							{
							State = 1258; Match(K_NOTNULL);
							}
							break;
						case K_NOT:
							{
							State = 1259; Match(K_NOT);
							State = 1260; Match(K_NULL);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 14:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1263;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 1265;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==K_NOT) {
							{
							State = 1264; Match(K_NOT);
							}
						}

						State = 1267; Match(K_IN);
						State = 1287;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,176,Context) ) {
						case 1:
							{
							State = 1268; Match(OPEN_PAR);
							State = 1278;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,174,Context) ) {
							case 1:
								{
								State = 1269; select_stmt();
								}
								break;
							case 2:
								{
								State = 1270; expr(0);
								State = 1275;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								while (_la==COMMA) {
									{
									{
									State = 1271; Match(COMMA);
									State = 1272; expr(0);
									}
									}
									State = 1277;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
								}
								}
								break;
							}
							State = 1280; Match(CLOSE_PAR);
							}
							break;
						case 2:
							{
							State = 1284;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,175,Context) ) {
							case 1:
								{
								State = 1281; database_name();
								State = 1282; Match(DOT);
								}
								break;
							}
							State = 1286; table_name();
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 1293;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,178,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Foreign_key_clauseContext : ParserRuleContext {
		public ITerminalNode K_REFERENCES() { return GetToken(SQLiteParser.K_REFERENCES, 0); }
		public Foreign_tableContext foreign_table() {
			return GetRuleContext<Foreign_tableContext>(0);
		}
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public ITerminalNode K_DEFERRABLE() { return GetToken(SQLiteParser.K_DEFERRABLE, 0); }
		public ITerminalNode[] K_ON() { return GetTokens(SQLiteParser.K_ON); }
		public ITerminalNode K_ON(int i) {
			return GetToken(SQLiteParser.K_ON, i);
		}
		public ITerminalNode[] K_MATCH() { return GetTokens(SQLiteParser.K_MATCH); }
		public ITerminalNode K_MATCH(int i) {
			return GetToken(SQLiteParser.K_MATCH, i);
		}
		public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		public ITerminalNode[] K_DELETE() { return GetTokens(SQLiteParser.K_DELETE); }
		public ITerminalNode K_DELETE(int i) {
			return GetToken(SQLiteParser.K_DELETE, i);
		}
		public ITerminalNode[] K_UPDATE() { return GetTokens(SQLiteParser.K_UPDATE); }
		public ITerminalNode K_UPDATE(int i) {
			return GetToken(SQLiteParser.K_UPDATE, i);
		}
		public ITerminalNode K_NOT() { return GetToken(SQLiteParser.K_NOT, 0); }
		public ITerminalNode K_INITIALLY() { return GetToken(SQLiteParser.K_INITIALLY, 0); }
		public ITerminalNode K_DEFERRED() { return GetToken(SQLiteParser.K_DEFERRED, 0); }
		public ITerminalNode K_IMMEDIATE() { return GetToken(SQLiteParser.K_IMMEDIATE, 0); }
		public ITerminalNode[] K_SET() { return GetTokens(SQLiteParser.K_SET); }
		public ITerminalNode K_SET(int i) {
			return GetToken(SQLiteParser.K_SET, i);
		}
		public ITerminalNode[] K_NULL() { return GetTokens(SQLiteParser.K_NULL); }
		public ITerminalNode K_NULL(int i) {
			return GetToken(SQLiteParser.K_NULL, i);
		}
		public ITerminalNode[] K_DEFAULT() { return GetTokens(SQLiteParser.K_DEFAULT); }
		public ITerminalNode K_DEFAULT(int i) {
			return GetToken(SQLiteParser.K_DEFAULT, i);
		}
		public ITerminalNode[] K_CASCADE() { return GetTokens(SQLiteParser.K_CASCADE); }
		public ITerminalNode K_CASCADE(int i) {
			return GetToken(SQLiteParser.K_CASCADE, i);
		}
		public ITerminalNode[] K_RESTRICT() { return GetTokens(SQLiteParser.K_RESTRICT); }
		public ITerminalNode K_RESTRICT(int i) {
			return GetToken(SQLiteParser.K_RESTRICT, i);
		}
		public ITerminalNode[] K_NO() { return GetTokens(SQLiteParser.K_NO); }
		public ITerminalNode K_NO(int i) {
			return GetToken(SQLiteParser.K_NO, i);
		}
		public ITerminalNode[] K_ACTION() { return GetTokens(SQLiteParser.K_ACTION); }
		public ITerminalNode K_ACTION(int i) {
			return GetToken(SQLiteParser.K_ACTION, i);
		}
		public Foreign_key_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreign_key_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterForeign_key_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitForeign_key_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeign_key_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Foreign_key_clauseContext foreign_key_clause() {
		Foreign_key_clauseContext _localctx = new Foreign_key_clauseContext(Context, State);
		EnterRule(_localctx, 80, RULE_foreign_key_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1294; Match(K_REFERENCES);
			State = 1295; foreign_table();
			State = 1307;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR) {
				{
				State = 1296; Match(OPEN_PAR);
				State = 1297; column_name();
				State = 1302;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1298; Match(COMMA);
					State = 1299; column_name();
					}
					}
					State = 1304;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1305; Match(CLOSE_PAR);
				}
			}

			State = 1327;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==K_MATCH || _la==K_ON) {
				{
				{
				State = 1323;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case K_ON:
					{
					State = 1309; Match(K_ON);
					State = 1310;
					_la = TokenStream.LA(1);
					if ( !(_la==K_DELETE || _la==K_UPDATE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1319;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,181,Context) ) {
					case 1:
						{
						State = 1311; Match(K_SET);
						State = 1312; Match(K_NULL);
						}
						break;
					case 2:
						{
						State = 1313; Match(K_SET);
						State = 1314; Match(K_DEFAULT);
						}
						break;
					case 3:
						{
						State = 1315; Match(K_CASCADE);
						}
						break;
					case 4:
						{
						State = 1316; Match(K_RESTRICT);
						}
						break;
					case 5:
						{
						State = 1317; Match(K_NO);
						State = 1318; Match(K_ACTION);
						}
						break;
					}
					}
					break;
				case K_MATCH:
					{
					State = 1321; Match(K_MATCH);
					State = 1322; name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				State = 1329;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1340;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,186,Context) ) {
			case 1:
				{
				State = 1331;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_NOT) {
					{
					State = 1330; Match(K_NOT);
					}
				}

				State = 1333; Match(K_DEFERRABLE);
				State = 1338;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,185,Context) ) {
				case 1:
					{
					State = 1334; Match(K_INITIALLY);
					State = 1335; Match(K_DEFERRED);
					}
					break;
				case 2:
					{
					State = 1336; Match(K_INITIALLY);
					State = 1337; Match(K_IMMEDIATE);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Raise_functionContext : ParserRuleContext {
		public ITerminalNode K_RAISE() { return GetToken(SQLiteParser.K_RAISE, 0); }
		public ITerminalNode K_IGNORE() { return GetToken(SQLiteParser.K_IGNORE, 0); }
		public Error_messageContext error_message() {
			return GetRuleContext<Error_messageContext>(0);
		}
		public ITerminalNode K_ROLLBACK() { return GetToken(SQLiteParser.K_ROLLBACK, 0); }
		public ITerminalNode K_ABORT() { return GetToken(SQLiteParser.K_ABORT, 0); }
		public ITerminalNode K_FAIL() { return GetToken(SQLiteParser.K_FAIL, 0); }
		public Raise_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raise_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterRaise_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitRaise_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaise_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Raise_functionContext raise_function() {
		Raise_functionContext _localctx = new Raise_functionContext(Context, State);
		EnterRule(_localctx, 82, RULE_raise_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1342; Match(K_RAISE);
			State = 1343; Match(OPEN_PAR);
			State = 1348;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case K_IGNORE:
				{
				State = 1344; Match(K_IGNORE);
				}
				break;
			case K_ABORT:
			case K_FAIL:
			case K_ROLLBACK:
				{
				State = 1345;
				_la = TokenStream.LA(1);
				if ( !(_la==K_ABORT || _la==K_FAIL || _la==K_ROLLBACK) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1346; Match(COMMA);
				State = 1347; error_message();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1350; Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indexed_columnContext : ParserRuleContext {
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public ITerminalNode K_COLLATE() { return GetToken(SQLiteParser.K_COLLATE, 0); }
		public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		public ITerminalNode K_ASC() { return GetToken(SQLiteParser.K_ASC, 0); }
		public ITerminalNode K_DESC() { return GetToken(SQLiteParser.K_DESC, 0); }
		public Indexed_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexed_column; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterIndexed_column(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitIndexed_column(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexed_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Indexed_columnContext indexed_column() {
		Indexed_columnContext _localctx = new Indexed_columnContext(Context, State);
		EnterRule(_localctx, 84, RULE_indexed_column);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1352; column_name();
			State = 1355;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_COLLATE) {
				{
				State = 1353; Match(K_COLLATE);
				State = 1354; collation_name();
				}
			}

			State = 1358;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_ASC || _la==K_DESC) {
				{
				State = 1357;
				_la = TokenStream.LA(1);
				if ( !(_la==K_ASC || _la==K_DESC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_constraintContext : ParserRuleContext {
		public Indexed_columnContext[] indexed_column() {
			return GetRuleContexts<Indexed_columnContext>();
		}
		public Indexed_columnContext indexed_column(int i) {
			return GetRuleContext<Indexed_columnContext>(i);
		}
		public Conflict_clauseContext conflict_clause() {
			return GetRuleContext<Conflict_clauseContext>(0);
		}
		public ITerminalNode K_CHECK() { return GetToken(SQLiteParser.K_CHECK, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode K_FOREIGN() { return GetToken(SQLiteParser.K_FOREIGN, 0); }
		public ITerminalNode K_KEY() { return GetToken(SQLiteParser.K_KEY, 0); }
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public Foreign_key_clauseContext foreign_key_clause() {
			return GetRuleContext<Foreign_key_clauseContext>(0);
		}
		public ITerminalNode K_CONSTRAINT() { return GetToken(SQLiteParser.K_CONSTRAINT, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode K_PRIMARY() { return GetToken(SQLiteParser.K_PRIMARY, 0); }
		public ITerminalNode K_UNIQUE() { return GetToken(SQLiteParser.K_UNIQUE, 0); }
		public Table_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterTable_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitTable_constraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_constraintContext table_constraint() {
		Table_constraintContext _localctx = new Table_constraintContext(Context, State);
		EnterRule(_localctx, 86, RULE_table_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1362;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_CONSTRAINT) {
				{
				State = 1360; Match(K_CONSTRAINT);
				State = 1361; name();
				}
			}

			State = 1400;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case K_PRIMARY:
			case K_UNIQUE:
				{
				State = 1367;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case K_PRIMARY:
					{
					State = 1364; Match(K_PRIMARY);
					State = 1365; Match(K_KEY);
					}
					break;
				case K_UNIQUE:
					{
					State = 1366; Match(K_UNIQUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1369; Match(OPEN_PAR);
				State = 1370; indexed_column();
				State = 1375;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1371; Match(COMMA);
					State = 1372; indexed_column();
					}
					}
					State = 1377;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1378; Match(CLOSE_PAR);
				State = 1379; conflict_clause();
				}
				break;
			case K_CHECK:
				{
				State = 1381; Match(K_CHECK);
				State = 1382; Match(OPEN_PAR);
				State = 1383; expr(0);
				State = 1384; Match(CLOSE_PAR);
				}
				break;
			case K_FOREIGN:
				{
				State = 1386; Match(K_FOREIGN);
				State = 1387; Match(K_KEY);
				State = 1388; Match(OPEN_PAR);
				State = 1389; column_name();
				State = 1394;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1390; Match(COMMA);
					State = 1391; column_name();
					}
					}
					State = 1396;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1397; Match(CLOSE_PAR);
				State = 1398; foreign_key_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_clauseContext : ParserRuleContext {
		public ITerminalNode K_WITH() { return GetToken(SQLiteParser.K_WITH, 0); }
		public Cte_table_nameContext[] cte_table_name() {
			return GetRuleContexts<Cte_table_nameContext>();
		}
		public Cte_table_nameContext cte_table_name(int i) {
			return GetRuleContext<Cte_table_nameContext>(i);
		}
		public ITerminalNode[] K_AS() { return GetTokens(SQLiteParser.K_AS); }
		public ITerminalNode K_AS(int i) {
			return GetToken(SQLiteParser.K_AS, i);
		}
		public Select_stmtContext[] select_stmt() {
			return GetRuleContexts<Select_stmtContext>();
		}
		public Select_stmtContext select_stmt(int i) {
			return GetRuleContext<Select_stmtContext>(i);
		}
		public ITerminalNode K_RECURSIVE() { return GetToken(SQLiteParser.K_RECURSIVE, 0); }
		public With_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterWith_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitWith_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWith_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public With_clauseContext with_clause() {
		With_clauseContext _localctx = new With_clauseContext(Context, State);
		EnterRule(_localctx, 88, RULE_with_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1402; Match(K_WITH);
			State = 1404;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,195,Context) ) {
			case 1:
				{
				State = 1403; Match(K_RECURSIVE);
				}
				break;
			}
			State = 1406; cte_table_name();
			State = 1407; Match(K_AS);
			State = 1408; Match(OPEN_PAR);
			State = 1409; select_stmt();
			State = 1410; Match(CLOSE_PAR);
			State = 1420;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1411; Match(COMMA);
				State = 1412; cte_table_name();
				State = 1413; Match(K_AS);
				State = 1414; Match(OPEN_PAR);
				State = 1415; select_stmt();
				State = 1416; Match(CLOSE_PAR);
				}
				}
				State = 1422;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qualified_table_nameContext : ParserRuleContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public ITerminalNode K_INDEXED() { return GetToken(SQLiteParser.K_INDEXED, 0); }
		public ITerminalNode K_BY() { return GetToken(SQLiteParser.K_BY, 0); }
		public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		public ITerminalNode K_NOT() { return GetToken(SQLiteParser.K_NOT, 0); }
		public Qualified_table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified_table_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterQualified_table_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitQualified_table_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualified_table_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Qualified_table_nameContext qualified_table_name() {
		Qualified_table_nameContext _localctx = new Qualified_table_nameContext(Context, State);
		EnterRule(_localctx, 90, RULE_qualified_table_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1426;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,197,Context) ) {
			case 1:
				{
				State = 1423; database_name();
				State = 1424; Match(DOT);
				}
				break;
			}
			State = 1428; table_name();
			State = 1434;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case K_INDEXED:
				{
				State = 1429; Match(K_INDEXED);
				State = 1430; Match(K_BY);
				State = 1431; index_name();
				}
				break;
			case K_NOT:
				{
				State = 1432; Match(K_NOT);
				State = 1433; Match(K_INDEXED);
				}
				break;
			case Eof:
			case SCOL:
			case K_ALTER:
			case K_ANALYZE:
			case K_ATTACH:
			case K_BEGIN:
			case K_COMMIT:
			case K_CREATE:
			case K_DELETE:
			case K_DETACH:
			case K_DROP:
			case K_END:
			case K_EXPLAIN:
			case K_INSERT:
			case K_LIMIT:
			case K_ORDER:
			case K_PRAGMA:
			case K_REINDEX:
			case K_RELEASE:
			case K_REPLACE:
			case K_ROLLBACK:
			case K_SAVEPOINT:
			case K_SELECT:
			case K_SET:
			case K_UPDATE:
			case K_VACUUM:
			case K_VALUES:
			case K_WHERE:
			case K_WITH:
			case UNEXPECTED_CHAR:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ordering_termContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode K_COLLATE() { return GetToken(SQLiteParser.K_COLLATE, 0); }
		public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		public ITerminalNode K_ASC() { return GetToken(SQLiteParser.K_ASC, 0); }
		public ITerminalNode K_DESC() { return GetToken(SQLiteParser.K_DESC, 0); }
		public Ordering_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ordering_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterOrdering_term(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitOrdering_term(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrdering_term(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ordering_termContext ordering_term() {
		Ordering_termContext _localctx = new Ordering_termContext(Context, State);
		EnterRule(_localctx, 92, RULE_ordering_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1436; expr(0);
			State = 1439;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_COLLATE) {
				{
				State = 1437; Match(K_COLLATE);
				State = 1438; collation_name();
				}
			}

			State = 1442;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==K_ASC || _la==K_DESC) {
				{
				State = 1441;
				_la = TokenStream.LA(1);
				if ( !(_la==K_ASC || _la==K_DESC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pragma_valueContext : ParserRuleContext {
		public Signed_numberContext signed_number() {
			return GetRuleContext<Signed_numberContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode STRING_LITERAL() { return GetToken(SQLiteParser.STRING_LITERAL, 0); }
		public Pragma_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterPragma_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitPragma_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragma_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pragma_valueContext pragma_value() {
		Pragma_valueContext _localctx = new Pragma_valueContext(Context, State);
		EnterRule(_localctx, 94, RULE_pragma_value);
		try {
			State = 1447;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,201,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1444; signed_number();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1445; name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1446; Match(STRING_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Common_table_expressionContext : ParserRuleContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode K_AS() { return GetToken(SQLiteParser.K_AS, 0); }
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public Common_table_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_common_table_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterCommon_table_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitCommon_table_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommon_table_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Common_table_expressionContext common_table_expression() {
		Common_table_expressionContext _localctx = new Common_table_expressionContext(Context, State);
		EnterRule(_localctx, 96, RULE_common_table_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1449; table_name();
			State = 1461;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR) {
				{
				State = 1450; Match(OPEN_PAR);
				State = 1451; column_name();
				State = 1456;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1452; Match(COMMA);
					State = 1453; column_name();
					}
					}
					State = 1458;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1459; Match(CLOSE_PAR);
				}
			}

			State = 1463; Match(K_AS);
			State = 1464; Match(OPEN_PAR);
			State = 1465; select_stmt();
			State = 1466; Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Result_columnContext : ParserRuleContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		public ITerminalNode K_AS() { return GetToken(SQLiteParser.K_AS, 0); }
		public Result_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_result_column; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterResult_column(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitResult_column(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResult_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Result_columnContext result_column() {
		Result_columnContext _localctx = new Result_columnContext(Context, State);
		EnterRule(_localctx, 98, RULE_result_column);
		int _la;
		try {
			State = 1480;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,206,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1468; Match(STAR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1469; table_name();
				State = 1470; Match(DOT);
				State = 1471; Match(STAR);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1473; expr(0);
				State = 1478;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_AS || _la==IDENTIFIER || _la==STRING_LITERAL) {
					{
					State = 1475;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==K_AS) {
						{
						State = 1474; Match(K_AS);
						}
					}

					State = 1477; column_alias();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_or_subqueryContext : ParserRuleContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		public ITerminalNode K_INDEXED() { return GetToken(SQLiteParser.K_INDEXED, 0); }
		public ITerminalNode K_BY() { return GetToken(SQLiteParser.K_BY, 0); }
		public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		public ITerminalNode K_NOT() { return GetToken(SQLiteParser.K_NOT, 0); }
		public ITerminalNode K_AS() { return GetToken(SQLiteParser.K_AS, 0); }
		public Table_or_subqueryContext[] table_or_subquery() {
			return GetRuleContexts<Table_or_subqueryContext>();
		}
		public Table_or_subqueryContext table_or_subquery(int i) {
			return GetRuleContext<Table_or_subqueryContext>(i);
		}
		public Join_clauseContext join_clause() {
			return GetRuleContext<Join_clauseContext>(0);
		}
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Table_or_subqueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_or_subquery; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterTable_or_subquery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitTable_or_subquery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_or_subquery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_or_subqueryContext table_or_subquery() {
		Table_or_subqueryContext _localctx = new Table_or_subqueryContext(Context, State);
		EnterRule(_localctx, 100, RULE_table_or_subquery);
		int _la;
		try {
			State = 1529;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,217,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1485;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,207,Context) ) {
				case 1:
					{
					State = 1482; database_name();
					State = 1483; Match(DOT);
					}
					break;
				}
				State = 1487; table_name();
				State = 1492;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,209,Context) ) {
				case 1:
					{
					State = 1489;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,208,Context) ) {
					case 1:
						{
						State = 1488; Match(K_AS);
						}
						break;
					}
					State = 1491; table_alias();
					}
					break;
				}
				State = 1499;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case K_INDEXED:
					{
					State = 1494; Match(K_INDEXED);
					State = 1495; Match(K_BY);
					State = 1496; index_name();
					}
					break;
				case K_NOT:
					{
					State = 1497; Match(K_NOT);
					State = 1498; Match(K_INDEXED);
					}
					break;
				case Eof:
				case SCOL:
				case CLOSE_PAR:
				case COMMA:
				case K_ALTER:
				case K_ANALYZE:
				case K_ATTACH:
				case K_BEGIN:
				case K_COMMIT:
				case K_CREATE:
				case K_CROSS:
				case K_DELETE:
				case K_DETACH:
				case K_DROP:
				case K_END:
				case K_EXCEPT:
				case K_EXPLAIN:
				case K_GROUP:
				case K_INNER:
				case K_INSERT:
				case K_INTERSECT:
				case K_JOIN:
				case K_LEFT:
				case K_LIMIT:
				case K_NATURAL:
				case K_ON:
				case K_ORDER:
				case K_PRAGMA:
				case K_REINDEX:
				case K_RELEASE:
				case K_REPLACE:
				case K_ROLLBACK:
				case K_SAVEPOINT:
				case K_SELECT:
				case K_UNION:
				case K_UPDATE:
				case K_USING:
				case K_VACUUM:
				case K_VALUES:
				case K_WHERE:
				case K_WITH:
				case UNEXPECTED_CHAR:
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1501; Match(OPEN_PAR);
				State = 1511;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,212,Context) ) {
				case 1:
					{
					State = 1502; table_or_subquery();
					State = 1507;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 1503; Match(COMMA);
						State = 1504; table_or_subquery();
						}
						}
						State = 1509;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				case 2:
					{
					State = 1510; join_clause();
					}
					break;
				}
				State = 1513; Match(CLOSE_PAR);
				State = 1518;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,214,Context) ) {
				case 1:
					{
					State = 1515;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,213,Context) ) {
					case 1:
						{
						State = 1514; Match(K_AS);
						}
						break;
					}
					State = 1517; table_alias();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1520; Match(OPEN_PAR);
				State = 1521; select_stmt();
				State = 1522; Match(CLOSE_PAR);
				State = 1527;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,216,Context) ) {
				case 1:
					{
					State = 1524;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,215,Context) ) {
					case 1:
						{
						State = 1523; Match(K_AS);
						}
						break;
					}
					State = 1526; table_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_clauseContext : ParserRuleContext {
		public Table_or_subqueryContext[] table_or_subquery() {
			return GetRuleContexts<Table_or_subqueryContext>();
		}
		public Table_or_subqueryContext table_or_subquery(int i) {
			return GetRuleContext<Table_or_subqueryContext>(i);
		}
		public Join_operatorContext[] join_operator() {
			return GetRuleContexts<Join_operatorContext>();
		}
		public Join_operatorContext join_operator(int i) {
			return GetRuleContext<Join_operatorContext>(i);
		}
		public Join_constraintContext[] join_constraint() {
			return GetRuleContexts<Join_constraintContext>();
		}
		public Join_constraintContext join_constraint(int i) {
			return GetRuleContext<Join_constraintContext>(i);
		}
		public Join_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterJoin_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitJoin_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_clauseContext join_clause() {
		Join_clauseContext _localctx = new Join_clauseContext(Context, State);
		EnterRule(_localctx, 102, RULE_join_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1531; table_or_subquery();
			State = 1538;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA || _la==K_CROSS || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (K_INNER - 87)) | (1L << (K_JOIN - 87)) | (1L << (K_LEFT - 87)) | (1L << (K_NATURAL - 87)))) != 0)) {
				{
				{
				State = 1532; join_operator();
				State = 1533; table_or_subquery();
				State = 1534; join_constraint();
				}
				}
				State = 1540;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_operatorContext : ParserRuleContext {
		public ITerminalNode K_JOIN() { return GetToken(SQLiteParser.K_JOIN, 0); }
		public ITerminalNode K_NATURAL() { return GetToken(SQLiteParser.K_NATURAL, 0); }
		public ITerminalNode K_LEFT() { return GetToken(SQLiteParser.K_LEFT, 0); }
		public ITerminalNode K_INNER() { return GetToken(SQLiteParser.K_INNER, 0); }
		public ITerminalNode K_CROSS() { return GetToken(SQLiteParser.K_CROSS, 0); }
		public ITerminalNode K_OUTER() { return GetToken(SQLiteParser.K_OUTER, 0); }
		public Join_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterJoin_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitJoin_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_operatorContext join_operator() {
		Join_operatorContext _localctx = new Join_operatorContext(Context, State);
		EnterRule(_localctx, 104, RULE_join_operator);
		int _la;
		try {
			State = 1554;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMMA:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1541; Match(COMMA);
				}
				break;
			case K_CROSS:
			case K_INNER:
			case K_JOIN:
			case K_LEFT:
			case K_NATURAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1543;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_NATURAL) {
					{
					State = 1542; Match(K_NATURAL);
					}
				}

				State = 1551;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case K_LEFT:
					{
					State = 1545; Match(K_LEFT);
					State = 1547;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==K_OUTER) {
						{
						State = 1546; Match(K_OUTER);
						}
					}

					}
					break;
				case K_INNER:
					{
					State = 1549; Match(K_INNER);
					}
					break;
				case K_CROSS:
					{
					State = 1550; Match(K_CROSS);
					}
					break;
				case K_JOIN:
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1553; Match(K_JOIN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_constraintContext : ParserRuleContext {
		public ITerminalNode K_ON() { return GetToken(SQLiteParser.K_ON, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode K_USING() { return GetToken(SQLiteParser.K_USING, 0); }
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public Join_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterJoin_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitJoin_constraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_constraintContext join_constraint() {
		Join_constraintContext _localctx = new Join_constraintContext(Context, State);
		EnterRule(_localctx, 106, RULE_join_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1570;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case K_ON:
				{
				State = 1556; Match(K_ON);
				State = 1557; expr(0);
				}
				break;
			case K_USING:
				{
				State = 1558; Match(K_USING);
				State = 1559; Match(OPEN_PAR);
				State = 1560; column_name();
				State = 1565;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1561; Match(COMMA);
					State = 1562; column_name();
					}
					}
					State = 1567;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1568; Match(CLOSE_PAR);
				}
				break;
			case Eof:
			case SCOL:
			case CLOSE_PAR:
			case COMMA:
			case K_ALTER:
			case K_ANALYZE:
			case K_ATTACH:
			case K_BEGIN:
			case K_COMMIT:
			case K_CREATE:
			case K_CROSS:
			case K_DELETE:
			case K_DETACH:
			case K_DROP:
			case K_END:
			case K_EXCEPT:
			case K_EXPLAIN:
			case K_GROUP:
			case K_INNER:
			case K_INSERT:
			case K_INTERSECT:
			case K_JOIN:
			case K_LEFT:
			case K_LIMIT:
			case K_NATURAL:
			case K_ORDER:
			case K_PRAGMA:
			case K_REINDEX:
			case K_RELEASE:
			case K_REPLACE:
			case K_ROLLBACK:
			case K_SAVEPOINT:
			case K_SELECT:
			case K_UNION:
			case K_UPDATE:
			case K_VACUUM:
			case K_VALUES:
			case K_WHERE:
			case K_WITH:
			case UNEXPECTED_CHAR:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_coreContext : ParserRuleContext {
		public ITerminalNode K_SELECT() { return GetToken(SQLiteParser.K_SELECT, 0); }
		public Result_columnContext[] result_column() {
			return GetRuleContexts<Result_columnContext>();
		}
		public Result_columnContext result_column(int i) {
			return GetRuleContext<Result_columnContext>(i);
		}
		public ITerminalNode K_FROM() { return GetToken(SQLiteParser.K_FROM, 0); }
		public ITerminalNode K_WHERE() { return GetToken(SQLiteParser.K_WHERE, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_GROUP() { return GetToken(SQLiteParser.K_GROUP, 0); }
		public ITerminalNode K_BY() { return GetToken(SQLiteParser.K_BY, 0); }
		public ITerminalNode K_DISTINCT() { return GetToken(SQLiteParser.K_DISTINCT, 0); }
		public ITerminalNode K_ALL() { return GetToken(SQLiteParser.K_ALL, 0); }
		public Table_or_subqueryContext[] table_or_subquery() {
			return GetRuleContexts<Table_or_subqueryContext>();
		}
		public Table_or_subqueryContext table_or_subquery(int i) {
			return GetRuleContext<Table_or_subqueryContext>(i);
		}
		public Join_clauseContext join_clause() {
			return GetRuleContext<Join_clauseContext>(0);
		}
		public ITerminalNode K_HAVING() { return GetToken(SQLiteParser.K_HAVING, 0); }
		public ITerminalNode K_VALUES() { return GetToken(SQLiteParser.K_VALUES, 0); }
		public Select_coreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_core; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterSelect_core(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitSelect_core(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_core(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_coreContext select_core() {
		Select_coreContext _localctx = new Select_coreContext(Context, State);
		EnterRule(_localctx, 108, RULE_select_core);
		int _la;
		try {
			State = 1646;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case K_SELECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1572; Match(K_SELECT);
				State = 1574;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,225,Context) ) {
				case 1:
					{
					State = 1573;
					_la = TokenStream.LA(1);
					if ( !(_la==K_ALL || _la==K_DISTINCT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 1576; result_column();
				State = 1581;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1577; Match(COMMA);
					State = 1578; result_column();
					}
					}
					State = 1583;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1596;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_FROM) {
					{
					State = 1584; Match(K_FROM);
					State = 1594;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,228,Context) ) {
					case 1:
						{
						State = 1585; table_or_subquery();
						State = 1590;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==COMMA) {
							{
							{
							State = 1586; Match(COMMA);
							State = 1587; table_or_subquery();
							}
							}
							State = 1592;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						break;
					case 2:
						{
						State = 1593; join_clause();
						}
						break;
					}
					}
				}

				State = 1600;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_WHERE) {
					{
					State = 1598; Match(K_WHERE);
					State = 1599; expr(0);
					}
				}

				State = 1616;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_GROUP) {
					{
					State = 1602; Match(K_GROUP);
					State = 1603; Match(K_BY);
					State = 1604; expr(0);
					State = 1609;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 1605; Match(COMMA);
						State = 1606; expr(0);
						}
						}
						State = 1611;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1614;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==K_HAVING) {
						{
						State = 1612; Match(K_HAVING);
						State = 1613; expr(0);
						}
					}

					}
				}

				}
				break;
			case K_VALUES:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1618; Match(K_VALUES);
				State = 1619; Match(OPEN_PAR);
				State = 1620; expr(0);
				State = 1625;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1621; Match(COMMA);
					State = 1622; expr(0);
					}
					}
					State = 1627;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1628; Match(CLOSE_PAR);
				State = 1643;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1629; Match(COMMA);
					State = 1630; Match(OPEN_PAR);
					State = 1631; expr(0);
					State = 1636;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 1632; Match(COMMA);
						State = 1633; expr(0);
						}
						}
						State = 1638;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1639; Match(CLOSE_PAR);
					}
					}
					State = 1645;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compound_operatorContext : ParserRuleContext {
		public ITerminalNode K_UNION() { return GetToken(SQLiteParser.K_UNION, 0); }
		public ITerminalNode K_ALL() { return GetToken(SQLiteParser.K_ALL, 0); }
		public ITerminalNode K_INTERSECT() { return GetToken(SQLiteParser.K_INTERSECT, 0); }
		public ITerminalNode K_EXCEPT() { return GetToken(SQLiteParser.K_EXCEPT, 0); }
		public Compound_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterCompound_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitCompound_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompound_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compound_operatorContext compound_operator() {
		Compound_operatorContext _localctx = new Compound_operatorContext(Context, State);
		EnterRule(_localctx, 110, RULE_compound_operator);
		try {
			State = 1653;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,238,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1648; Match(K_UNION);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1649; Match(K_UNION);
				State = 1650; Match(K_ALL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1651; Match(K_INTERSECT);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1652; Match(K_EXCEPT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cte_table_nameContext : ParserRuleContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public Cte_table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cte_table_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterCte_table_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitCte_table_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCte_table_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cte_table_nameContext cte_table_name() {
		Cte_table_nameContext _localctx = new Cte_table_nameContext(Context, State);
		EnterRule(_localctx, 112, RULE_cte_table_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1655; table_name();
			State = 1667;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR) {
				{
				State = 1656; Match(OPEN_PAR);
				State = 1657; column_name();
				State = 1662;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1658; Match(COMMA);
					State = 1659; column_name();
					}
					}
					State = 1664;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1665; Match(CLOSE_PAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Signed_numberContext : ParserRuleContext {
		public ITerminalNode NUMERIC_LITERAL() { return GetToken(SQLiteParser.NUMERIC_LITERAL, 0); }
		public Signed_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signed_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterSigned_number(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitSigned_number(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSigned_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Signed_numberContext signed_number() {
		Signed_numberContext _localctx = new Signed_numberContext(Context, State);
		EnterRule(_localctx, 114, RULE_signed_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1670;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 1669;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1672; Match(NUMERIC_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_valueContext : ParserRuleContext {
		public ITerminalNode NUMERIC_LITERAL() { return GetToken(SQLiteParser.NUMERIC_LITERAL, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(SQLiteParser.STRING_LITERAL, 0); }
		public ITerminalNode BLOB_LITERAL() { return GetToken(SQLiteParser.BLOB_LITERAL, 0); }
		public ITerminalNode K_NULL() { return GetToken(SQLiteParser.K_NULL, 0); }
		public ITerminalNode K_CURRENT_TIME() { return GetToken(SQLiteParser.K_CURRENT_TIME, 0); }
		public ITerminalNode K_CURRENT_DATE() { return GetToken(SQLiteParser.K_CURRENT_DATE, 0); }
		public ITerminalNode K_CURRENT_TIMESTAMP() { return GetToken(SQLiteParser.K_CURRENT_TIMESTAMP, 0); }
		public Literal_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterLiteral_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitLiteral_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Literal_valueContext literal_value() {
		Literal_valueContext _localctx = new Literal_valueContext(Context, State);
		EnterRule(_localctx, 116, RULE_literal_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1674;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << K_CURRENT_DATE) | (1L << K_CURRENT_TIME) | (1L << K_CURRENT_TIMESTAMP))) != 0) || ((((_la - 104)) & ~0x3f) == 0 && ((1L << (_la - 104)) & ((1L << (K_NULL - 104)) | (1L << (NUMERIC_LITERAL - 104)) | (1L << (STRING_LITERAL - 104)) | (1L << (BLOB_LITERAL - 104)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_operatorContext : ParserRuleContext {
		public ITerminalNode K_NOT() { return GetToken(SQLiteParser.K_NOT, 0); }
		public Unary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterUnary_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitUnary_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_operatorContext unary_operator() {
		Unary_operatorContext _localctx = new Unary_operatorContext(Context, State);
		EnterRule(_localctx, 118, RULE_unary_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1676;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << TILDE))) != 0) || _la==K_NOT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Error_messageContext : ParserRuleContext {
		public ITerminalNode STRING_LITERAL() { return GetToken(SQLiteParser.STRING_LITERAL, 0); }
		public Error_messageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_error_message; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterError_message(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitError_message(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitError_message(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Error_messageContext error_message() {
		Error_messageContext _localctx = new Error_messageContext(Context, State);
		EnterRule(_localctx, 120, RULE_error_message);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1678; Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_argumentContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Column_defContext column_def() {
			return GetRuleContext<Column_defContext>(0);
		}
		public Module_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterModule_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitModule_argument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule_argument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Module_argumentContext module_argument() {
		Module_argumentContext _localctx = new Module_argumentContext(Context, State);
		EnterRule(_localctx, 122, RULE_module_argument);
		try {
			State = 1682;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,242,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1680; expr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1681; column_def();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_aliasContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(SQLiteParser.IDENTIFIER, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(SQLiteParser.STRING_LITERAL, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterColumn_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitColumn_alias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_aliasContext column_alias() {
		Column_aliasContext _localctx = new Column_aliasContext(Context, State);
		EnterRule(_localctx, 124, RULE_column_alias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1684;
			_la = TokenStream.LA(1);
			if ( !(_la==IDENTIFIER || _la==STRING_LITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		public ITerminalNode K_ABORT() { return GetToken(SQLiteParser.K_ABORT, 0); }
		public ITerminalNode K_ACTION() { return GetToken(SQLiteParser.K_ACTION, 0); }
		public ITerminalNode K_ADD() { return GetToken(SQLiteParser.K_ADD, 0); }
		public ITerminalNode K_AFTER() { return GetToken(SQLiteParser.K_AFTER, 0); }
		public ITerminalNode K_ALL() { return GetToken(SQLiteParser.K_ALL, 0); }
		public ITerminalNode K_ALTER() { return GetToken(SQLiteParser.K_ALTER, 0); }
		public ITerminalNode K_ANALYZE() { return GetToken(SQLiteParser.K_ANALYZE, 0); }
		public ITerminalNode K_AND() { return GetToken(SQLiteParser.K_AND, 0); }
		public ITerminalNode K_AS() { return GetToken(SQLiteParser.K_AS, 0); }
		public ITerminalNode K_ASC() { return GetToken(SQLiteParser.K_ASC, 0); }
		public ITerminalNode K_ATTACH() { return GetToken(SQLiteParser.K_ATTACH, 0); }
		public ITerminalNode K_AUTOINCREMENT() { return GetToken(SQLiteParser.K_AUTOINCREMENT, 0); }
		public ITerminalNode K_BEFORE() { return GetToken(SQLiteParser.K_BEFORE, 0); }
		public ITerminalNode K_BEGIN() { return GetToken(SQLiteParser.K_BEGIN, 0); }
		public ITerminalNode K_BETWEEN() { return GetToken(SQLiteParser.K_BETWEEN, 0); }
		public ITerminalNode K_BY() { return GetToken(SQLiteParser.K_BY, 0); }
		public ITerminalNode K_CASCADE() { return GetToken(SQLiteParser.K_CASCADE, 0); }
		public ITerminalNode K_CASE() { return GetToken(SQLiteParser.K_CASE, 0); }
		public ITerminalNode K_CAST() { return GetToken(SQLiteParser.K_CAST, 0); }
		public ITerminalNode K_CHECK() { return GetToken(SQLiteParser.K_CHECK, 0); }
		public ITerminalNode K_COLLATE() { return GetToken(SQLiteParser.K_COLLATE, 0); }
		public ITerminalNode K_COLUMN() { return GetToken(SQLiteParser.K_COLUMN, 0); }
		public ITerminalNode K_COMMIT() { return GetToken(SQLiteParser.K_COMMIT, 0); }
		public ITerminalNode K_CONFLICT() { return GetToken(SQLiteParser.K_CONFLICT, 0); }
		public ITerminalNode K_CONSTRAINT() { return GetToken(SQLiteParser.K_CONSTRAINT, 0); }
		public ITerminalNode K_CREATE() { return GetToken(SQLiteParser.K_CREATE, 0); }
		public ITerminalNode K_CROSS() { return GetToken(SQLiteParser.K_CROSS, 0); }
		public ITerminalNode K_CURRENT_DATE() { return GetToken(SQLiteParser.K_CURRENT_DATE, 0); }
		public ITerminalNode K_CURRENT_TIME() { return GetToken(SQLiteParser.K_CURRENT_TIME, 0); }
		public ITerminalNode K_CURRENT_TIMESTAMP() { return GetToken(SQLiteParser.K_CURRENT_TIMESTAMP, 0); }
		public ITerminalNode K_DATABASE() { return GetToken(SQLiteParser.K_DATABASE, 0); }
		public ITerminalNode K_DEFAULT() { return GetToken(SQLiteParser.K_DEFAULT, 0); }
		public ITerminalNode K_DEFERRABLE() { return GetToken(SQLiteParser.K_DEFERRABLE, 0); }
		public ITerminalNode K_DEFERRED() { return GetToken(SQLiteParser.K_DEFERRED, 0); }
		public ITerminalNode K_DELETE() { return GetToken(SQLiteParser.K_DELETE, 0); }
		public ITerminalNode K_DESC() { return GetToken(SQLiteParser.K_DESC, 0); }
		public ITerminalNode K_DETACH() { return GetToken(SQLiteParser.K_DETACH, 0); }
		public ITerminalNode K_DISTINCT() { return GetToken(SQLiteParser.K_DISTINCT, 0); }
		public ITerminalNode K_DROP() { return GetToken(SQLiteParser.K_DROP, 0); }
		public ITerminalNode K_EACH() { return GetToken(SQLiteParser.K_EACH, 0); }
		public ITerminalNode K_ELSE() { return GetToken(SQLiteParser.K_ELSE, 0); }
		public ITerminalNode K_END() { return GetToken(SQLiteParser.K_END, 0); }
		public ITerminalNode K_ESCAPE() { return GetToken(SQLiteParser.K_ESCAPE, 0); }
		public ITerminalNode K_EXCEPT() { return GetToken(SQLiteParser.K_EXCEPT, 0); }
		public ITerminalNode K_EXCLUSIVE() { return GetToken(SQLiteParser.K_EXCLUSIVE, 0); }
		public ITerminalNode K_EXISTS() { return GetToken(SQLiteParser.K_EXISTS, 0); }
		public ITerminalNode K_EXPLAIN() { return GetToken(SQLiteParser.K_EXPLAIN, 0); }
		public ITerminalNode K_FAIL() { return GetToken(SQLiteParser.K_FAIL, 0); }
		public ITerminalNode K_FOR() { return GetToken(SQLiteParser.K_FOR, 0); }
		public ITerminalNode K_FOREIGN() { return GetToken(SQLiteParser.K_FOREIGN, 0); }
		public ITerminalNode K_FROM() { return GetToken(SQLiteParser.K_FROM, 0); }
		public ITerminalNode K_FULL() { return GetToken(SQLiteParser.K_FULL, 0); }
		public ITerminalNode K_GLOB() { return GetToken(SQLiteParser.K_GLOB, 0); }
		public ITerminalNode K_GROUP() { return GetToken(SQLiteParser.K_GROUP, 0); }
		public ITerminalNode K_HAVING() { return GetToken(SQLiteParser.K_HAVING, 0); }
		public ITerminalNode K_IF() { return GetToken(SQLiteParser.K_IF, 0); }
		public ITerminalNode K_IGNORE() { return GetToken(SQLiteParser.K_IGNORE, 0); }
		public ITerminalNode K_IMMEDIATE() { return GetToken(SQLiteParser.K_IMMEDIATE, 0); }
		public ITerminalNode K_IN() { return GetToken(SQLiteParser.K_IN, 0); }
		public ITerminalNode K_INDEX() { return GetToken(SQLiteParser.K_INDEX, 0); }
		public ITerminalNode K_INDEXED() { return GetToken(SQLiteParser.K_INDEXED, 0); }
		public ITerminalNode K_INITIALLY() { return GetToken(SQLiteParser.K_INITIALLY, 0); }
		public ITerminalNode K_INNER() { return GetToken(SQLiteParser.K_INNER, 0); }
		public ITerminalNode K_INSERT() { return GetToken(SQLiteParser.K_INSERT, 0); }
		public ITerminalNode K_INSTEAD() { return GetToken(SQLiteParser.K_INSTEAD, 0); }
		public ITerminalNode K_INTERSECT() { return GetToken(SQLiteParser.K_INTERSECT, 0); }
		public ITerminalNode K_INTO() { return GetToken(SQLiteParser.K_INTO, 0); }
		public ITerminalNode K_IS() { return GetToken(SQLiteParser.K_IS, 0); }
		public ITerminalNode K_ISNULL() { return GetToken(SQLiteParser.K_ISNULL, 0); }
		public ITerminalNode K_JOIN() { return GetToken(SQLiteParser.K_JOIN, 0); }
		public ITerminalNode K_KEY() { return GetToken(SQLiteParser.K_KEY, 0); }
		public ITerminalNode K_LEFT() { return GetToken(SQLiteParser.K_LEFT, 0); }
		public ITerminalNode K_LIKE() { return GetToken(SQLiteParser.K_LIKE, 0); }
		public ITerminalNode K_LIMIT() { return GetToken(SQLiteParser.K_LIMIT, 0); }
		public ITerminalNode K_MATCH() { return GetToken(SQLiteParser.K_MATCH, 0); }
		public ITerminalNode K_NATURAL() { return GetToken(SQLiteParser.K_NATURAL, 0); }
		public ITerminalNode K_NO() { return GetToken(SQLiteParser.K_NO, 0); }
		public ITerminalNode K_NOT() { return GetToken(SQLiteParser.K_NOT, 0); }
		public ITerminalNode K_NOTNULL() { return GetToken(SQLiteParser.K_NOTNULL, 0); }
		public ITerminalNode K_NULL() { return GetToken(SQLiteParser.K_NULL, 0); }
		public ITerminalNode K_OF() { return GetToken(SQLiteParser.K_OF, 0); }
		public ITerminalNode K_OFFSET() { return GetToken(SQLiteParser.K_OFFSET, 0); }
		public ITerminalNode K_ON() { return GetToken(SQLiteParser.K_ON, 0); }
		public ITerminalNode K_OR() { return GetToken(SQLiteParser.K_OR, 0); }
		public ITerminalNode K_ORDER() { return GetToken(SQLiteParser.K_ORDER, 0); }
		public ITerminalNode K_OUTER() { return GetToken(SQLiteParser.K_OUTER, 0); }
		public ITerminalNode K_PLAN() { return GetToken(SQLiteParser.K_PLAN, 0); }
		public ITerminalNode K_PRAGMA() { return GetToken(SQLiteParser.K_PRAGMA, 0); }
		public ITerminalNode K_PRIMARY() { return GetToken(SQLiteParser.K_PRIMARY, 0); }
		public ITerminalNode K_QUERY() { return GetToken(SQLiteParser.K_QUERY, 0); }
		public ITerminalNode K_RAISE() { return GetToken(SQLiteParser.K_RAISE, 0); }
		public ITerminalNode K_RECURSIVE() { return GetToken(SQLiteParser.K_RECURSIVE, 0); }
		public ITerminalNode K_REFERENCES() { return GetToken(SQLiteParser.K_REFERENCES, 0); }
		public ITerminalNode K_REGEXP() { return GetToken(SQLiteParser.K_REGEXP, 0); }
		public ITerminalNode K_REINDEX() { return GetToken(SQLiteParser.K_REINDEX, 0); }
		public ITerminalNode K_RELEASE() { return GetToken(SQLiteParser.K_RELEASE, 0); }
		public ITerminalNode K_RENAME() { return GetToken(SQLiteParser.K_RENAME, 0); }
		public ITerminalNode K_REPLACE() { return GetToken(SQLiteParser.K_REPLACE, 0); }
		public ITerminalNode K_RESTRICT() { return GetToken(SQLiteParser.K_RESTRICT, 0); }
		public ITerminalNode K_RIGHT() { return GetToken(SQLiteParser.K_RIGHT, 0); }
		public ITerminalNode K_ROLLBACK() { return GetToken(SQLiteParser.K_ROLLBACK, 0); }
		public ITerminalNode K_ROW() { return GetToken(SQLiteParser.K_ROW, 0); }
		public ITerminalNode K_SAVEPOINT() { return GetToken(SQLiteParser.K_SAVEPOINT, 0); }
		public ITerminalNode K_SELECT() { return GetToken(SQLiteParser.K_SELECT, 0); }
		public ITerminalNode K_SET() { return GetToken(SQLiteParser.K_SET, 0); }
		public ITerminalNode K_TABLE() { return GetToken(SQLiteParser.K_TABLE, 0); }
		public ITerminalNode K_TEMP() { return GetToken(SQLiteParser.K_TEMP, 0); }
		public ITerminalNode K_TEMPORARY() { return GetToken(SQLiteParser.K_TEMPORARY, 0); }
		public ITerminalNode K_THEN() { return GetToken(SQLiteParser.K_THEN, 0); }
		public ITerminalNode K_TO() { return GetToken(SQLiteParser.K_TO, 0); }
		public ITerminalNode K_TRANSACTION() { return GetToken(SQLiteParser.K_TRANSACTION, 0); }
		public ITerminalNode K_TRIGGER() { return GetToken(SQLiteParser.K_TRIGGER, 0); }
		public ITerminalNode K_UNION() { return GetToken(SQLiteParser.K_UNION, 0); }
		public ITerminalNode K_UNIQUE() { return GetToken(SQLiteParser.K_UNIQUE, 0); }
		public ITerminalNode K_UPDATE() { return GetToken(SQLiteParser.K_UPDATE, 0); }
		public ITerminalNode K_USING() { return GetToken(SQLiteParser.K_USING, 0); }
		public ITerminalNode K_VACUUM() { return GetToken(SQLiteParser.K_VACUUM, 0); }
		public ITerminalNode K_VALUES() { return GetToken(SQLiteParser.K_VALUES, 0); }
		public ITerminalNode K_VIEW() { return GetToken(SQLiteParser.K_VIEW, 0); }
		public ITerminalNode K_VIRTUAL() { return GetToken(SQLiteParser.K_VIRTUAL, 0); }
		public ITerminalNode K_WHEN() { return GetToken(SQLiteParser.K_WHEN, 0); }
		public ITerminalNode K_WHERE() { return GetToken(SQLiteParser.K_WHERE, 0); }
		public ITerminalNode K_WITH() { return GetToken(SQLiteParser.K_WITH, 0); }
		public ITerminalNode K_WITHOUT() { return GetToken(SQLiteParser.K_WITHOUT, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 126, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1686;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 25)) & ~0x3f) == 0 && ((1L << (_la - 25)) & ((1L << (K_ABORT - 25)) | (1L << (K_ACTION - 25)) | (1L << (K_ADD - 25)) | (1L << (K_AFTER - 25)) | (1L << (K_ALL - 25)) | (1L << (K_ALTER - 25)) | (1L << (K_ANALYZE - 25)) | (1L << (K_AND - 25)) | (1L << (K_AS - 25)) | (1L << (K_ASC - 25)) | (1L << (K_ATTACH - 25)) | (1L << (K_AUTOINCREMENT - 25)) | (1L << (K_BEFORE - 25)) | (1L << (K_BEGIN - 25)) | (1L << (K_BETWEEN - 25)) | (1L << (K_BY - 25)) | (1L << (K_CASCADE - 25)) | (1L << (K_CASE - 25)) | (1L << (K_CAST - 25)) | (1L << (K_CHECK - 25)) | (1L << (K_COLLATE - 25)) | (1L << (K_COLUMN - 25)) | (1L << (K_COMMIT - 25)) | (1L << (K_CONFLICT - 25)) | (1L << (K_CONSTRAINT - 25)) | (1L << (K_CREATE - 25)) | (1L << (K_CROSS - 25)) | (1L << (K_CURRENT_DATE - 25)) | (1L << (K_CURRENT_TIME - 25)) | (1L << (K_CURRENT_TIMESTAMP - 25)) | (1L << (K_DATABASE - 25)) | (1L << (K_DEFAULT - 25)) | (1L << (K_DEFERRABLE - 25)) | (1L << (K_DEFERRED - 25)) | (1L << (K_DELETE - 25)) | (1L << (K_DESC - 25)) | (1L << (K_DETACH - 25)) | (1L << (K_DISTINCT - 25)) | (1L << (K_DROP - 25)) | (1L << (K_EACH - 25)) | (1L << (K_ELSE - 25)) | (1L << (K_END - 25)) | (1L << (K_ESCAPE - 25)) | (1L << (K_EXCEPT - 25)) | (1L << (K_EXCLUSIVE - 25)) | (1L << (K_EXISTS - 25)) | (1L << (K_EXPLAIN - 25)) | (1L << (K_FAIL - 25)) | (1L << (K_FOR - 25)) | (1L << (K_FOREIGN - 25)) | (1L << (K_FROM - 25)) | (1L << (K_FULL - 25)) | (1L << (K_GLOB - 25)) | (1L << (K_GROUP - 25)) | (1L << (K_HAVING - 25)) | (1L << (K_IF - 25)) | (1L << (K_IGNORE - 25)) | (1L << (K_IMMEDIATE - 25)) | (1L << (K_IN - 25)) | (1L << (K_INDEX - 25)) | (1L << (K_INDEXED - 25)) | (1L << (K_INITIALLY - 25)) | (1L << (K_INNER - 25)) | (1L << (K_INSERT - 25)))) != 0) || ((((_la - 89)) & ~0x3f) == 0 && ((1L << (_la - 89)) & ((1L << (K_INSTEAD - 89)) | (1L << (K_INTERSECT - 89)) | (1L << (K_INTO - 89)) | (1L << (K_IS - 89)) | (1L << (K_ISNULL - 89)) | (1L << (K_JOIN - 89)) | (1L << (K_KEY - 89)) | (1L << (K_LEFT - 89)) | (1L << (K_LIKE - 89)) | (1L << (K_LIMIT - 89)) | (1L << (K_MATCH - 89)) | (1L << (K_NATURAL - 89)) | (1L << (K_NO - 89)) | (1L << (K_NOT - 89)) | (1L << (K_NOTNULL - 89)) | (1L << (K_NULL - 89)) | (1L << (K_OF - 89)) | (1L << (K_OFFSET - 89)) | (1L << (K_ON - 89)) | (1L << (K_OR - 89)) | (1L << (K_ORDER - 89)) | (1L << (K_OUTER - 89)) | (1L << (K_PLAN - 89)) | (1L << (K_PRAGMA - 89)) | (1L << (K_PRIMARY - 89)) | (1L << (K_QUERY - 89)) | (1L << (K_RAISE - 89)) | (1L << (K_RECURSIVE - 89)) | (1L << (K_REFERENCES - 89)) | (1L << (K_REGEXP - 89)) | (1L << (K_REINDEX - 89)) | (1L << (K_RELEASE - 89)) | (1L << (K_RENAME - 89)) | (1L << (K_REPLACE - 89)) | (1L << (K_RESTRICT - 89)) | (1L << (K_RIGHT - 89)) | (1L << (K_ROLLBACK - 89)) | (1L << (K_ROW - 89)) | (1L << (K_SAVEPOINT - 89)) | (1L << (K_SELECT - 89)) | (1L << (K_SET - 89)) | (1L << (K_TABLE - 89)) | (1L << (K_TEMP - 89)) | (1L << (K_TEMPORARY - 89)) | (1L << (K_THEN - 89)) | (1L << (K_TO - 89)) | (1L << (K_TRANSACTION - 89)) | (1L << (K_TRIGGER - 89)) | (1L << (K_UNION - 89)) | (1L << (K_UNIQUE - 89)) | (1L << (K_UPDATE - 89)) | (1L << (K_USING - 89)) | (1L << (K_VACUUM - 89)) | (1L << (K_VALUES - 89)) | (1L << (K_VIEW - 89)) | (1L << (K_VIRTUAL - 89)) | (1L << (K_WHEN - 89)) | (1L << (K_WHERE - 89)) | (1L << (K_WITH - 89)) | (1L << (K_WITHOUT - 89)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 128, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1688; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterFunction_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitFunction_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_nameContext function_name() {
		Function_nameContext _localctx = new Function_nameContext(Context, State);
		EnterRule(_localctx, 130, RULE_function_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1690; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Database_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Database_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_database_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterDatabase_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitDatabase_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatabase_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Database_nameContext database_name() {
		Database_nameContext _localctx = new Database_nameContext(Context, State);
		EnterRule(_localctx, 132, RULE_database_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1692; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterTable_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitTable_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_nameContext table_name() {
		Table_nameContext _localctx = new Table_nameContext(Context, State);
		EnterRule(_localctx, 134, RULE_table_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1694; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_or_index_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Table_or_index_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_or_index_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterTable_or_index_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitTable_or_index_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_or_index_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_or_index_nameContext table_or_index_name() {
		Table_or_index_nameContext _localctx = new Table_or_index_nameContext(Context, State);
		EnterRule(_localctx, 136, RULE_table_or_index_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1696; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class New_table_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public New_table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_new_table_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterNew_table_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitNew_table_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNew_table_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public New_table_nameContext new_table_name() {
		New_table_nameContext _localctx = new New_table_nameContext(Context, State);
		EnterRule(_localctx, 138, RULE_new_table_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1698; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterColumn_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitColumn_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_nameContext column_name() {
		Column_nameContext _localctx = new Column_nameContext(Context, State);
		EnterRule(_localctx, 140, RULE_column_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1700; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Collation_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Collation_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collation_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterCollation_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitCollation_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollation_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Collation_nameContext collation_name() {
		Collation_nameContext _localctx = new Collation_nameContext(Context, State);
		EnterRule(_localctx, 142, RULE_collation_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1702; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Foreign_tableContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Foreign_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreign_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterForeign_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitForeign_table(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeign_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Foreign_tableContext foreign_table() {
		Foreign_tableContext _localctx = new Foreign_tableContext(Context, State);
		EnterRule(_localctx, 144, RULE_foreign_table);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1704; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Index_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterIndex_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitIndex_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_nameContext index_name() {
		Index_nameContext _localctx = new Index_nameContext(Context, State);
		EnterRule(_localctx, 146, RULE_index_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1706; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Trigger_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Trigger_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trigger_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterTrigger_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitTrigger_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrigger_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Trigger_nameContext trigger_name() {
		Trigger_nameContext _localctx = new Trigger_nameContext(Context, State);
		EnterRule(_localctx, 148, RULE_trigger_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1708; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class View_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public View_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_view_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterView_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitView_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitView_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public View_nameContext view_name() {
		View_nameContext _localctx = new View_nameContext(Context, State);
		EnterRule(_localctx, 150, RULE_view_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1710; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Module_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterModule_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitModule_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Module_nameContext module_name() {
		Module_nameContext _localctx = new Module_nameContext(Context, State);
		EnterRule(_localctx, 152, RULE_module_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1712; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pragma_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Pragma_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterPragma_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitPragma_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragma_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pragma_nameContext pragma_name() {
		Pragma_nameContext _localctx = new Pragma_nameContext(Context, State);
		EnterRule(_localctx, 154, RULE_pragma_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1714; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Savepoint_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Savepoint_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savepoint_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterSavepoint_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitSavepoint_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSavepoint_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Savepoint_nameContext savepoint_name() {
		Savepoint_nameContext _localctx = new Savepoint_nameContext(Context, State);
		EnterRule(_localctx, 156, RULE_savepoint_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1716; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_aliasContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Table_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterTable_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitTable_alias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_aliasContext table_alias() {
		Table_aliasContext _localctx = new Table_aliasContext(Context, State);
		EnterRule(_localctx, 158, RULE_table_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1718; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transaction_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Transaction_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transaction_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterTransaction_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitTransaction_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransaction_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Transaction_nameContext transaction_name() {
		Transaction_nameContext _localctx = new Transaction_nameContext(Context, State);
		EnterRule(_localctx, 160, RULE_transaction_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1720; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_nameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(SQLiteParser.IDENTIFIER, 0); }
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public ITerminalNode STRING_LITERAL() { return GetToken(SQLiteParser.STRING_LITERAL, 0); }
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Any_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.EnterAny_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISQLiteListener typedListener = listener as ISQLiteListener;
			if (typedListener != null) typedListener.ExitAny_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISQLiteVisitor<TResult> typedVisitor = visitor as ISQLiteVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAny_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Any_nameContext any_name() {
		Any_nameContext _localctx = new Any_nameContext(Context, State);
		EnterRule(_localctx, 162, RULE_any_name);
		try {
			State = 1729;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1722; Match(IDENTIFIER);
				}
				break;
			case K_ABORT:
			case K_ACTION:
			case K_ADD:
			case K_AFTER:
			case K_ALL:
			case K_ALTER:
			case K_ANALYZE:
			case K_AND:
			case K_AS:
			case K_ASC:
			case K_ATTACH:
			case K_AUTOINCREMENT:
			case K_BEFORE:
			case K_BEGIN:
			case K_BETWEEN:
			case K_BY:
			case K_CASCADE:
			case K_CASE:
			case K_CAST:
			case K_CHECK:
			case K_COLLATE:
			case K_COLUMN:
			case K_COMMIT:
			case K_CONFLICT:
			case K_CONSTRAINT:
			case K_CREATE:
			case K_CROSS:
			case K_CURRENT_DATE:
			case K_CURRENT_TIME:
			case K_CURRENT_TIMESTAMP:
			case K_DATABASE:
			case K_DEFAULT:
			case K_DEFERRABLE:
			case K_DEFERRED:
			case K_DELETE:
			case K_DESC:
			case K_DETACH:
			case K_DISTINCT:
			case K_DROP:
			case K_EACH:
			case K_ELSE:
			case K_END:
			case K_ESCAPE:
			case K_EXCEPT:
			case K_EXCLUSIVE:
			case K_EXISTS:
			case K_EXPLAIN:
			case K_FAIL:
			case K_FOR:
			case K_FOREIGN:
			case K_FROM:
			case K_FULL:
			case K_GLOB:
			case K_GROUP:
			case K_HAVING:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IN:
			case K_INDEX:
			case K_INDEXED:
			case K_INITIALLY:
			case K_INNER:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERSECT:
			case K_INTO:
			case K_IS:
			case K_ISNULL:
			case K_JOIN:
			case K_KEY:
			case K_LEFT:
			case K_LIKE:
			case K_LIMIT:
			case K_MATCH:
			case K_NATURAL:
			case K_NO:
			case K_NOT:
			case K_NOTNULL:
			case K_NULL:
			case K_OF:
			case K_OFFSET:
			case K_ON:
			case K_OR:
			case K_ORDER:
			case K_OUTER:
			case K_PLAN:
			case K_PRAGMA:
			case K_PRIMARY:
			case K_QUERY:
			case K_RAISE:
			case K_RECURSIVE:
			case K_REFERENCES:
			case K_REGEXP:
			case K_REINDEX:
			case K_RELEASE:
			case K_RENAME:
			case K_REPLACE:
			case K_RESTRICT:
			case K_RIGHT:
			case K_ROLLBACK:
			case K_ROW:
			case K_SAVEPOINT:
			case K_SELECT:
			case K_SET:
			case K_TABLE:
			case K_TEMP:
			case K_TEMPORARY:
			case K_THEN:
			case K_TO:
			case K_TRANSACTION:
			case K_TRIGGER:
			case K_UNION:
			case K_UNIQUE:
			case K_UPDATE:
			case K_USING:
			case K_VACUUM:
			case K_VALUES:
			case K_VIEW:
			case K_VIRTUAL:
			case K_WHEN:
			case K_WHERE:
			case K_WITH:
			case K_WITHOUT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1723; keyword();
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1724; Match(STRING_LITERAL);
				}
				break;
			case OPEN_PAR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1725; Match(OPEN_PAR);
				State = 1726; any_name();
				State = 1727; Match(CLOSE_PAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 39: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 20);
		case 1: return Precpred(Context, 19);
		case 2: return Precpred(Context, 18);
		case 3: return Precpred(Context, 17);
		case 4: return Precpred(Context, 16);
		case 5: return Precpred(Context, 15);
		case 6: return Precpred(Context, 14);
		case 7: return Precpred(Context, 13);
		case 8: return Precpred(Context, 6);
		case 9: return Precpred(Context, 5);
		case 10: return Precpred(Context, 9);
		case 11: return Precpred(Context, 8);
		case 12: return Precpred(Context, 7);
		case 13: return Precpred(Context, 4);
		}
		return true;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x9F");
		sb.Append("\x6C6\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12");
		sb.Append("\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16\x4");
		sb.Append("\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B\t\x1B");
		sb.Append("\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t ");
		sb.Append("\x4!\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t");
		sb.Append("(\x4)\t)\x4*\t*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t");
		sb.Append("\x30\x4\x31\t\x31\x4\x32\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4");
		sb.Append("\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37\x4\x38\t\x38\x4\x39\t\x39");
		sb.Append("\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4@\t@\x4\x41\t\x41");
		sb.Append("\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45\x4\x46");
		sb.Append("\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N");
		sb.Append("\tN\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x3\x2\x3\x2\a\x2\xA9");
		sb.Append("\n\x2\f\x2\xE\x2\xAC\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x4");
		sb.Append("\a\x4\xB4\n\x4\f\x4\xE\x4\xB7\v\x4\x3\x4\x3\x4\x6\x4\xBB\n\x4");
		sb.Append("\r\x4\xE\x4\xBC\x3\x4\a\x4\xC0\n\x4\f\x4\xE\x4\xC3\v\x4\x3\x4");
		sb.Append("\a\x4\xC6\n\x4\f\x4\xE\x4\xC9\v\x4\x3\x5\x3\x5\x3\x5\x5\x5\xCE");
		sb.Append("\n\x5\x5\x5\xD0\n\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3");
		sb.Append("\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3");
		sb.Append("\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3");
		sb.Append("\x5\x3\x5\x3\x5\x3\x5\x5\x5\xF0\n\x5\x3\x6\x3\x6\x3\x6\x3\x6");
		sb.Append("\x3\x6\x5\x6\xF7\n\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5");
		sb.Append("\x6\xFF\n\x6\x3\x6\x5\x6\x102\n\x6\x3\a\x3\a\x3\a\x3\a\x3\a");
		sb.Append("\x3\a\x3\a\x5\a\x10B\n\a\x3\b\x3\b\x5\b\x10F\n\b\x3\b\x3\b\x3");
		sb.Append("\b\x3\b\x3\t\x3\t\x5\t\x117\n\t\x3\t\x3\t\x5\t\x11B\n\t\x5\t");
		sb.Append("\x11D\n\t\x3\n\x3\n\x3\n\x5\n\x122\n\n\x5\n\x124\n\n\x3\v\x3");
		sb.Append("\v\x5\v\x128\n\v\x3\v\x3\v\x3\v\a\v\x12D\n\v\f\v\xE\v\x130\v");
		sb.Append("\v\x5\v\x132\n\v\x3\v\x3\v\x3\v\x5\v\x137\n\v\x3\v\x3\v\x5\v");
		sb.Append("\x13B\n\v\x3\v\x6\v\x13E\n\v\r\v\xE\v\x13F\x3\v\x3\v\x3\v\x3");
		sb.Append("\v\x3\v\a\v\x147\n\v\f\v\xE\v\x14A\v\v\x5\v\x14C\n\v\x3\v\x3");
		sb.Append("\v\x3\v\x3\v\x5\v\x152\n\v\x5\v\x154\n\v\x3\f\x3\f\x5\f\x158");
		sb.Append("\n\f\x3\f\x3\f\x3\f\x3\f\x5\f\x15E\n\f\x3\f\x3\f\x3\f\x5\f\x163");
		sb.Append("\n\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\a\f\x16C\n\f\f\f\xE");
		sb.Append("\f\x16F\v\f\x3\f\x3\f\x3\f\x5\f\x174\n\f\x3\r\x3\r\x5\r\x178");
		sb.Append("\n\r\x3\r\x3\r\x3\r\x3\r\x5\r\x17E\n\r\x3\r\x3\r\x3\r\x5\r\x183");
		sb.Append("\n\r\x3\r\x3\r\x3\r\x3\r\x3\r\a\r\x18A\n\r\f\r\xE\r\x18D\v\r");
		sb.Append("\x3\r\x3\r\a\r\x191\n\r\f\r\xE\r\x194\v\r\x3\r\x3\r\x3\r\x5");
		sb.Append("\r\x199\n\r\x3\r\x3\r\x5\r\x19D\n\r\x3\xE\x3\xE\x5\xE\x1A1\n");
		sb.Append("\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x1A7\n\xE\x3\xE\x3\xE\x3\xE");
		sb.Append("\x5\xE\x1AC\n\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x1B3\n");
		sb.Append("\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\a\xE\x1BC\n\xE");
		sb.Append("\f\xE\xE\xE\x1BF\v\xE\x5\xE\x1C1\n\xE\x5\xE\x1C3\n\xE\x3\xE");
		sb.Append("\x3\xE\x3\xE\x3\xE\x5\xE\x1C9\n\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5");
		sb.Append("\xE\x1CF\n\xE\x3\xE\x3\xE\x5\xE\x1D3\n\xE\x3\xE\x3\xE\x3\xE");
		sb.Append("\x3\xE\x3\xE\x5\xE\x1DA\n\xE\x3\xE\x3\xE\x6\xE\x1DE\n\xE\r\xE");
		sb.Append("\xE\xE\x1DF\x3\xE\x3\xE\x3\xF\x3\xF\x5\xF\x1E6\n\xF\x3\xF\x3");
		sb.Append("\xF\x3\xF\x3\xF\x5\xF\x1EC\n\xF\x3\xF\x3\xF\x3\xF\x5\xF\x1F1");
		sb.Append("\n\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3");
		sb.Append("\x10\x3\x10\x5\x10\x1FD\n\x10\x3\x10\x3\x10\x3\x10\x5\x10\x202");
		sb.Append("\n\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\a\x10");
		sb.Append("\x20B\n\x10\f\x10\xE\x10\x20E\v\x10\x3\x10\x3\x10\x5\x10\x212");
		sb.Append("\n\x10\x3\x11\x5\x11\x215\n\x11\x3\x11\x3\x11\x3\x11\x3\x11");
		sb.Append("\x3\x11\x5\x11\x21C\n\x11\x3\x12\x5\x12\x21F\n\x12\x3\x12\x3");
		sb.Append("\x12\x3\x12\x3\x12\x3\x12\x5\x12\x226\n\x12\x3\x12\x3\x12\x3");
		sb.Append("\x12\x3\x12\x3\x12\a\x12\x22D\n\x12\f\x12\xE\x12\x230\v\x12");
		sb.Append("\x5\x12\x232\n\x12\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\x238\n");
		sb.Append("\x12\x5\x12\x23A\n\x12\x3\x13\x3\x13\x5\x13\x23E\n\x13\x3\x13");
		sb.Append("\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\x246\n\x14\x3\x14");
		sb.Append("\x3\x14\x3\x14\x5\x14\x24B\n\x14\x3\x14\x3\x14\x3\x15\x3\x15");
		sb.Append("\x3\x15\x3\x15\x5\x15\x253\n\x15\x3\x15\x3\x15\x3\x15\x5\x15");
		sb.Append("\x258\n\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16");
		sb.Append("\x260\n\x16\x3\x16\x3\x16\x3\x16\x5\x16\x265\n\x16\x3\x16\x3");
		sb.Append("\x16\x3\x17\x3\x17\x3\x17\x3\x17\x5\x17\x26D\n\x17\x3\x17\x3");
		sb.Append("\x17\x3\x17\x5\x17\x272\n\x17\x3\x17\x3\x17\x3\x18\x3\x18\x5");
		sb.Append("\x18\x278\n\x18\x3\x18\x3\x18\x3\x18\a\x18\x27D\n\x18\f\x18");
		sb.Append("\xE\x18\x280\v\x18\x5\x18\x282\n\x18\x3\x18\x3\x18\x3\x18\x3");
		sb.Append("\x18\a\x18\x288\n\x18\f\x18\xE\x18\x28B\v\x18\x3\x18\x3\x18");
		sb.Append("\x3\x18\x3\x18\x3\x18\a\x18\x292\n\x18\f\x18\xE\x18\x295\v\x18");
		sb.Append("\x5\x18\x297\n\x18\x3\x18\x3\x18\x3\x18\x3\x18\x5\x18\x29D\n");
		sb.Append("\x18\x5\x18\x29F\n\x18\x3\x19\x5\x19\x2A2\n\x19\x3\x19\x3\x19");
		sb.Append("\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3");
		sb.Append("\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\x2B5\n");
		sb.Append("\x19\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\x2BB\n\x19\x3\x19\x3");
		sb.Append("\x19\x3\x19\x3\x19\x3\x19\a\x19\x2C2\n\x19\f\x19\xE\x19\x2C5");
		sb.Append("\v\x19\x3\x19\x3\x19\x5\x19\x2C9\n\x19\x3\x19\x3\x19\x3\x19");
		sb.Append("\x3\x19\x3\x19\a\x19\x2D0\n\x19\f\x19\xE\x19\x2D3\v\x19\x3\x19");
		sb.Append("\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\a\x19\x2DB\n\x19\f\x19\xE");
		sb.Append("\x19\x2DE\v\x19\x3\x19\x3\x19\a\x19\x2E2\n\x19\f\x19\xE\x19");
		sb.Append("\x2E5\v\x19\x3\x19\x3\x19\x3\x19\x5\x19\x2EA\n\x19\x3\x1A\x3");
		sb.Append("\x1A\x3\x1A\x3\x1A\x5\x1A\x2F0\n\x1A\x3\x1A\x3\x1A\x3\x1A\x3");
		sb.Append("\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x2F9\n\x1A\x3\x1B\x3\x1B\x3");
		sb.Append("\x1B\x3\x1B\x3\x1B\x5\x1B\x300\n\x1B\x3\x1B\x3\x1B\x5\x1B\x304");
		sb.Append("\n\x1B\x5\x1B\x306\n\x1B\x3\x1C\x3\x1C\x5\x1C\x30A\n\x1C\x3");
		sb.Append("\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x311\n\x1D\x5\x1D\x313");
		sb.Append("\n\x1D\x3\x1D\x3\x1D\x5\x1D\x317\n\x1D\x3\x1D\x5\x1D\x31A\n");
		sb.Append("\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x5\x1F\x321\n\x1F\x3");
		sb.Append("\x1F\x3\x1F\x3\x1F\a\x1F\x326\n\x1F\f\x1F\xE\x1F\x329\v\x1F");
		sb.Append("\x5\x1F\x32B\n\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F");
		sb.Append("\a\x1F\x333\n\x1F\f\x1F\xE\x1F\x336\v\x1F\x5\x1F\x338\n\x1F");
		sb.Append("\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x33E\n\x1F\x5\x1F\x340\n");
		sb.Append("\x1F\x3 \x3 \x5 \x344\n \x3 \x3 \x3 \a \x349\n \f \xE \x34C");
		sb.Append("\v \x5 \x34E\n \x3 \x3 \x3 \x3 \a \x354\n \f \xE \x357\v \x3");
		sb.Append(" \x3 \x3 \x3 \x3 \a \x35E\n \f \xE \x361\v \x5 \x363\n \x3 ");
		sb.Append("\x3 \x3 \x3 \x5 \x369\n \x5 \x36B\n \x3!\x3!\x5!\x36F\n!\x3");
		sb.Append("!\x3!\x3!\a!\x374\n!\f!\xE!\x377\v!\x3!\x3!\x3!\x3!\a!\x37D");
		sb.Append("\n!\f!\xE!\x380\v!\x3!\x5!\x383\n!\x5!\x385\n!\x3!\x3!\x5!\x389");
		sb.Append("\n!\x3!\x3!\x3!\x3!\x3!\a!\x390\n!\f!\xE!\x393\v!\x3!\x3!\x5");
		sb.Append("!\x397\n!\x5!\x399\n!\x3!\x3!\x3!\x3!\x3!\a!\x3A0\n!\f!\xE!");
		sb.Append("\x3A3\v!\x3!\x3!\x3!\x3!\x3!\x3!\a!\x3AB\n!\f!\xE!\x3AE\v!\x3");
		sb.Append("!\x3!\a!\x3B2\n!\f!\xE!\x3B5\v!\x5!\x3B7\n!\x3\"\x5\"\x3BA\n");
		sb.Append("\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x5");
		sb.Append("\"\x3C7\n\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3");
		sb.Append("\"\a\"\x3D3\n\"\f\"\xE\"\x3D6\v\"\x3\"\x3\"\x5\"\x3DA\n\"\x3");
		sb.Append("#\x5#\x3DD\n#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x5");
		sb.Append("#\x3EA\n#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\a#\x3F6\n");
		sb.Append("#\f#\xE#\x3F9\v#\x3#\x3#\x5#\x3FD\n#\x3#\x3#\x3#\x3#\x3#\a#");
		sb.Append("\x404\n#\f#\xE#\x407\v#\x5#\x409\n#\x3#\x3#\x3#\x3#\x5#\x40F");
		sb.Append("\n#\x5#\x411\n#\x3$\x3$\x3%\x3%\x5%\x417\n%\x3%\a%\x41A\n%\f");
		sb.Append("%\xE%\x41D\v%\x3&\x6&\x420\n&\r&\xE&\x421\x3&\x3&\x3&\x3&\x3");
		sb.Append("&\x3&\x3&\x3&\x3&\x3&\x5&\x42E\n&\x3\'\x3\'\x5\'\x432\n\'\x3");
		sb.Append("\'\x3\'\x3\'\x5\'\x437\n\'\x3\'\x3\'\x5\'\x43B\n\'\x3\'\x5\'");
		sb.Append("\x43E\n\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'");
		sb.Append("\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x5\'\x450\n\'\x3\'\x3\'\x3\'");
		sb.Append("\x5\'\x455\n\'\x3(\x3(\x3(\x5(\x45A\n(\x3)\x3)\x3)\x3)\x3)\x3");
		sb.Append(")\x5)\x462\n)\x3)\x3)\x3)\x5)\x467\n)\x3)\x3)\x3)\x3)\x3)\x3");
		sb.Append(")\x3)\x5)\x470\n)\x3)\x3)\x3)\a)\x475\n)\f)\xE)\x478\v)\x3)");
		sb.Append("\x5)\x47B\n)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3");
		sb.Append(")\x3)\x3)\x5)\x48B\n)\x3)\x5)\x48E\n)\x3)\x3)\x3)\x3)\x3)\x3");
		sb.Append(")\x5)\x496\n)\x3)\x3)\x3)\x3)\x3)\x6)\x49D\n)\r)\xE)\x49E\x3");
		sb.Append(")\x3)\x5)\x4A3\n)\x3)\x3)\x3)\x5)\x4A8\n)\x3)\x3)\x3)\x3)\x3");
		sb.Append(")\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3");
		sb.Append(")\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x5)\x4C6\n)\x3)\x3)\x3)\x3");
		sb.Append(")\x3)\x3)\x3)\x3)\x3)\x3)\x5)\x4D2\n)\x3)\x3)\x3)\x5)\x4D7\n");
		sb.Append(")\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x5)\x4E3\n)\x3)\x3");
		sb.Append(")\x3)\x3)\x5)\x4E9\n)\x3)\x3)\x3)\x3)\x3)\x5)\x4F0\n)\x3)\x3");
		sb.Append(")\x5)\x4F4\n)\x3)\x3)\x3)\x3)\x3)\x3)\a)\x4FC\n)\f)\xE)\x4FF");
		sb.Append("\v)\x5)\x501\n)\x3)\x3)\x3)\x3)\x5)\x507\n)\x3)\x5)\x50A\n)");
		sb.Append("\a)\x50C\n)\f)\xE)\x50F\v)\x3*\x3*\x3*\x3*\x3*\x3*\a*\x517\n");
		sb.Append("*\f*\xE*\x51A\v*\x3*\x3*\x5*\x51E\n*\x3*\x3*\x3*\x3*\x3*\x3");
		sb.Append("*\x3*\x3*\x3*\x3*\x5*\x52A\n*\x3*\x3*\x5*\x52E\n*\a*\x530\n");
		sb.Append("*\f*\xE*\x533\v*\x3*\x5*\x536\n*\x3*\x3*\x3*\x3*\x3*\x5*\x53D");
		sb.Append("\n*\x5*\x53F\n*\x3+\x3+\x3+\x3+\x3+\x3+\x5+\x547\n+\x3+\x3+");
		sb.Append("\x3,\x3,\x3,\x5,\x54E\n,\x3,\x5,\x551\n,\x3-\x3-\x5-\x555\n");
		sb.Append("-\x3-\x3-\x3-\x5-\x55A\n-\x3-\x3-\x3-\x3-\a-\x560\n-\f-\xE-");
		sb.Append("\x563\v-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3");
		sb.Append("-\x3-\a-\x573\n-\f-\xE-\x576\v-\x3-\x3-\x3-\x5-\x57B\n-\x3.");
		sb.Append("\x3.\x5.\x57F\n.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3.\x3");
		sb.Append(".\x3.\a.\x58D\n.\f.\xE.\x590\v.\x3/\x3/\x3/\x5/\x595\n/\x3/");
		sb.Append("\x3/\x3/\x3/\x3/\x3/\x5/\x59D\n/\x3\x30\x3\x30\x3\x30\x5\x30");
		sb.Append("\x5A2\n\x30\x3\x30\x5\x30\x5A5\n\x30\x3\x31\x3\x31\x3\x31\x5");
		sb.Append("\x31\x5AA\n\x31\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\a\x32\x5B1");
		sb.Append("\n\x32\f\x32\xE\x32\x5B4\v\x32\x3\x32\x3\x32\x5\x32\x5B8\n\x32");
		sb.Append("\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x33\x3\x33\x3\x33\x3");
		sb.Append("\x33\x3\x33\x3\x33\x3\x33\x5\x33\x5C6\n\x33\x3\x33\x5\x33\x5C9");
		sb.Append("\n\x33\x5\x33\x5CB\n\x33\x3\x34\x3\x34\x3\x34\x5\x34\x5D0\n");
		sb.Append("\x34\x3\x34\x3\x34\x5\x34\x5D4\n\x34\x3\x34\x5\x34\x5D7\n\x34");
		sb.Append("\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x5\x34\x5DE\n\x34\x3\x34");
		sb.Append("\x3\x34\x3\x34\x3\x34\a\x34\x5E4\n\x34\f\x34\xE\x34\x5E7\v\x34");
		sb.Append("\x3\x34\x5\x34\x5EA\n\x34\x3\x34\x3\x34\x5\x34\x5EE\n\x34\x3");
		sb.Append("\x34\x5\x34\x5F1\n\x34\x3\x34\x3\x34\x3\x34\x3\x34\x5\x34\x5F7");
		sb.Append("\n\x34\x3\x34\x5\x34\x5FA\n\x34\x5\x34\x5FC\n\x34\x3\x35\x3");
		sb.Append("\x35\x3\x35\x3\x35\x3\x35\a\x35\x603\n\x35\f\x35\xE\x35\x606");
		sb.Append("\v\x35\x3\x36\x3\x36\x5\x36\x60A\n\x36\x3\x36\x3\x36\x5\x36");
		sb.Append("\x60E\n\x36\x3\x36\x3\x36\x5\x36\x612\n\x36\x3\x36\x5\x36\x615");
		sb.Append("\n\x36\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\a\x37");
		sb.Append("\x61E\n\x37\f\x37\xE\x37\x621\v\x37\x3\x37\x3\x37\x5\x37\x625");
		sb.Append("\n\x37\x3\x38\x3\x38\x5\x38\x629\n\x38\x3\x38\x3\x38\x3\x38");
		sb.Append("\a\x38\x62E\n\x38\f\x38\xE\x38\x631\v\x38\x3\x38\x3\x38\x3\x38");
		sb.Append("\x3\x38\a\x38\x637\n\x38\f\x38\xE\x38\x63A\v\x38\x3\x38\x5\x38");
		sb.Append("\x63D\n\x38\x5\x38\x63F\n\x38\x3\x38\x3\x38\x5\x38\x643\n\x38");
		sb.Append("\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\a\x38\x64A\n\x38\f\x38\xE");
		sb.Append("\x38\x64D\v\x38\x3\x38\x3\x38\x5\x38\x651\n\x38\x5\x38\x653");
		sb.Append("\n\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\a\x38\x65A\n\x38\f");
		sb.Append("\x38\xE\x38\x65D\v\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3");
		sb.Append("\x38\a\x38\x665\n\x38\f\x38\xE\x38\x668\v\x38\x3\x38\x3\x38");
		sb.Append("\a\x38\x66C\n\x38\f\x38\xE\x38\x66F\v\x38\x5\x38\x671\n\x38");
		sb.Append("\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x5\x39\x678\n\x39\x3:\x3");
		sb.Append(":\x3:\x3:\x3:\a:\x67F\n:\f:\xE:\x682\v:\x3:\x3:\x5:\x686\n:");
		sb.Append("\x3;\x5;\x689\n;\x3;\x3;\x3<\x3<\x3=\x3=\x3>\x3>\x3?\x3?\x5");
		sb.Append("?\x695\n?\x3@\x3@\x3\x41\x3\x41\x3\x42\x3\x42\x3\x43\x3\x43");
		sb.Append("\x3\x44\x3\x44\x3\x45\x3\x45\x3\x46\x3\x46\x3G\x3G\x3H\x3H\x3");
		sb.Append("I\x3I\x3J\x3J\x3K\x3K\x3L\x3L\x3M\x3M\x3N\x3N\x3O\x3O\x3P\x3");
		sb.Append("P\x3Q\x3Q\x3R\x3R\x3S\x3S\x3S\x3S\x3S\x3S\x3S\x5S\x6C4\nS\x3");
		sb.Append("S\x2\x3PT\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E");
		sb.Append(" \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42\x44\x46HJLNPRTVXZ\\^`");
		sb.Append("\x62\x64\x66hjlnprtvxz|~\x80\x82\x84\x86\x88\x8A\x8C\x8E\x90");
		sb.Append("\x92\x94\x96\x98\x9A\x9C\x9E\xA0\xA2\xA4\x2\x14\x5\x2<<GGTT");
		sb.Append("\x4\x2\x31\x31\x44\x44\x4\x2\a\all\x3\x2\x85\x86\x4\x2\x1F\x1F");
		sb.Append("@@\x4\x2$$>>\a\x2\x1B\x1BJJSS||\x7F\x7F\x4\x2\t\t\xE\xF\x3\x2");
		sb.Append("\n\v\x3\x2\x10\x13\x3\x2\x14\x17\x6\x2OO\x63\x63\x65\x65xx\x4");
		sb.Append("\x2==\x8D\x8D\x5\x2\x1B\x1BJJ\x7F\x7F\x6\x2\x36\x38jj\x98\x98");
		sb.Append("\x9A\x9B\x4\x2\n\fhh\x4\x2\x97\x97\x9A\x9A\x3\x2\x1B\x96\x7D3");
		sb.Append("\x2\xAA\x3\x2\x2\x2\x4\xAF\x3\x2\x2\x2\x6\xB5\x3\x2\x2\x2\b");
		sb.Append("\xCF\x3\x2\x2\x2\n\xF1\x3\x2\x2\x2\f\x103\x3\x2\x2\x2\xE\x10C");
		sb.Append("\x3\x2\x2\x2\x10\x114\x3\x2\x2\x2\x12\x11E\x3\x2\x2\x2\x14\x131");
		sb.Append("\x3\x2\x2\x2\x16\x155\x3\x2\x2\x2\x18\x175\x3\x2\x2\x2\x1A\x19E");
		sb.Append("\x3\x2\x2\x2\x1C\x1E3\x3\x2\x2\x2\x1E\x1F6\x3\x2\x2\x2 \x214");
		sb.Append("\x3\x2\x2\x2\"\x21E\x3\x2\x2\x2$\x23B\x3\x2\x2\x2&\x241\x3\x2");
		sb.Append("\x2\x2(\x24E\x3\x2\x2\x2*\x25B\x3\x2\x2\x2,\x268\x3\x2\x2\x2");
		sb.Append(".\x281\x3\x2\x2\x2\x30\x2A1\x3\x2\x2\x2\x32\x2EB\x3\x2\x2\x2");
		sb.Append("\x34\x2FA\x3\x2\x2\x2\x36\x307\x3\x2\x2\x2\x38\x30D\x3\x2\x2");
		sb.Append("\x2:\x31B\x3\x2\x2\x2<\x32A\x3\x2\x2\x2>\x34D\x3\x2\x2\x2@\x3B6");
		sb.Append("\x3\x2\x2\x2\x42\x3B9\x3\x2\x2\x2\x44\x3DC\x3\x2\x2\x2\x46\x412");
		sb.Append("\x3\x2\x2\x2H\x414\x3\x2\x2\x2J\x41F\x3\x2\x2\x2L\x431\x3\x2");
		sb.Append("\x2\x2N\x459\x3\x2\x2\x2P\x4A7\x3\x2\x2\x2R\x510\x3\x2\x2\x2");
		sb.Append("T\x540\x3\x2\x2\x2V\x54A\x3\x2\x2\x2X\x554\x3\x2\x2\x2Z\x57C");
		sb.Append("\x3\x2\x2\x2\\\x594\x3\x2\x2\x2^\x59E\x3\x2\x2\x2`\x5A9\x3\x2");
		sb.Append("\x2\x2\x62\x5AB\x3\x2\x2\x2\x64\x5CA\x3\x2\x2\x2\x66\x5FB\x3");
		sb.Append("\x2\x2\x2h\x5FD\x3\x2\x2\x2j\x614\x3\x2\x2\x2l\x624\x3\x2\x2");
		sb.Append("\x2n\x670\x3\x2\x2\x2p\x677\x3\x2\x2\x2r\x679\x3\x2\x2\x2t\x688");
		sb.Append("\x3\x2\x2\x2v\x68C\x3\x2\x2\x2x\x68E\x3\x2\x2\x2z\x690\x3\x2");
		sb.Append("\x2\x2|\x694\x3\x2\x2\x2~\x696\x3\x2\x2\x2\x80\x698\x3\x2\x2");
		sb.Append("\x2\x82\x69A\x3\x2\x2\x2\x84\x69C\x3\x2\x2\x2\x86\x69E\x3\x2");
		sb.Append("\x2\x2\x88\x6A0\x3\x2\x2\x2\x8A\x6A2\x3\x2\x2\x2\x8C\x6A4\x3");
		sb.Append("\x2\x2\x2\x8E\x6A6\x3\x2\x2\x2\x90\x6A8\x3\x2\x2\x2\x92\x6AA");
		sb.Append("\x3\x2\x2\x2\x94\x6AC\x3\x2\x2\x2\x96\x6AE\x3\x2\x2\x2\x98\x6B0");
		sb.Append("\x3\x2\x2\x2\x9A\x6B2\x3\x2\x2\x2\x9C\x6B4\x3\x2\x2\x2\x9E\x6B6");
		sb.Append("\x3\x2\x2\x2\xA0\x6B8\x3\x2\x2\x2\xA2\x6BA\x3\x2\x2\x2\xA4\x6C3");
		sb.Append("\x3\x2\x2\x2\xA6\xA9\x5\x6\x4\x2\xA7\xA9\x5\x4\x3\x2\xA8\xA6");
		sb.Append("\x3\x2\x2\x2\xA8\xA7\x3\x2\x2\x2\xA9\xAC\x3\x2\x2\x2\xAA\xA8");
		sb.Append("\x3\x2\x2\x2\xAA\xAB\x3\x2\x2\x2\xAB\xAD\x3\x2\x2\x2\xAC\xAA");
		sb.Append("\x3\x2\x2\x2\xAD\xAE\a\x2\x2\x3\xAE\x3\x3\x2\x2\x2\xAF\xB0\a");
		sb.Append("\x9F\x2\x2\xB0\xB1\b\x3\x1\x2\xB1\x5\x3\x2\x2\x2\xB2\xB4\a\x3");
		sb.Append("\x2\x2\xB3\xB2\x3\x2\x2\x2\xB4\xB7\x3\x2\x2\x2\xB5\xB3\x3\x2");
		sb.Append("\x2\x2\xB5\xB6\x3\x2\x2\x2\xB6\xB8\x3\x2\x2\x2\xB7\xB5\x3\x2");
		sb.Append("\x2\x2\xB8\xC1\x5\b\x5\x2\xB9\xBB\a\x3\x2\x2\xBA\xB9\x3\x2\x2");
		sb.Append("\x2\xBB\xBC\x3\x2\x2\x2\xBC\xBA\x3\x2\x2\x2\xBC\xBD\x3\x2\x2");
		sb.Append("\x2\xBD\xBE\x3\x2\x2\x2\xBE\xC0\x5\b\x5\x2\xBF\xBA\x3\x2\x2");
		sb.Append("\x2\xC0\xC3\x3\x2\x2\x2\xC1\xBF\x3\x2\x2\x2\xC1\xC2\x3\x2\x2");
		sb.Append("\x2\xC2\xC7\x3\x2\x2\x2\xC3\xC1\x3\x2\x2\x2\xC4\xC6\a\x3\x2");
		sb.Append("\x2\xC5\xC4\x3\x2\x2\x2\xC6\xC9\x3\x2\x2\x2\xC7\xC5\x3\x2\x2");
		sb.Append("\x2\xC7\xC8\x3\x2\x2\x2\xC8\a\x3\x2\x2\x2\xC9\xC7\x3\x2\x2\x2");
		sb.Append("\xCA\xCD\aI\x2\x2\xCB\xCC\at\x2\x2\xCC\xCE\aq\x2\x2\xCD\xCB");
		sb.Append("\x3\x2\x2\x2\xCD\xCE\x3\x2\x2\x2\xCE\xD0\x3\x2\x2\x2\xCF\xCA");
		sb.Append("\x3\x2\x2\x2\xCF\xD0\x3\x2\x2\x2\xD0\xEF\x3\x2\x2\x2\xD1\xF0");
		sb.Append("\x5\n\x6\x2\xD2\xF0\x5\f\a\x2\xD3\xF0\x5\xE\b\x2\xD4\xF0\x5");
		sb.Append("\x10\t\x2\xD5\xF0\x5\x12\n\x2\xD6\xF0\x5\x14\v\x2\xD7\xF0\x5");
		sb.Append("\x16\f\x2\xD8\xF0\x5\x18\r\x2\xD9\xF0\x5\x1A\xE\x2\xDA\xF0\x5");
		sb.Append("\x1C\xF\x2\xDB\xF0\x5\x1E\x10\x2\xDC\xF0\x5 \x11\x2\xDD\xF0");
		sb.Append("\x5\"\x12\x2\xDE\xF0\x5$\x13\x2\xDF\xF0\x5&\x14\x2\xE0\xF0\x5");
		sb.Append("(\x15\x2\xE1\xF0\x5*\x16\x2\xE2\xF0\x5,\x17\x2\xE3\xF0\x5.\x18");
		sb.Append("\x2\xE4\xF0\x5\x30\x19\x2\xE5\xF0\x5\x32\x1A\x2\xE6\xF0\x5\x34");
		sb.Append("\x1B\x2\xE7\xF0\x5\x36\x1C\x2\xE8\xF0\x5\x38\x1D\x2\xE9\xF0");
		sb.Append("\x5:\x1E\x2\xEA\xF0\x5<\x1F\x2\xEB\xF0\x5> \x2\xEC\xF0\x5\x42");
		sb.Append("\"\x2\xED\xF0\x5\x44#\x2\xEE\xF0\x5\x46$\x2\xEF\xD1\x3\x2\x2");
		sb.Append("\x2\xEF\xD2\x3\x2\x2\x2\xEF\xD3\x3\x2\x2\x2\xEF\xD4\x3\x2\x2");
		sb.Append("\x2\xEF\xD5\x3\x2\x2\x2\xEF\xD6\x3\x2\x2\x2\xEF\xD7\x3\x2\x2");
		sb.Append("\x2\xEF\xD8\x3\x2\x2\x2\xEF\xD9\x3\x2\x2\x2\xEF\xDA\x3\x2\x2");
		sb.Append("\x2\xEF\xDB\x3\x2\x2\x2\xEF\xDC\x3\x2\x2\x2\xEF\xDD\x3\x2\x2");
		sb.Append("\x2\xEF\xDE\x3\x2\x2\x2\xEF\xDF\x3\x2\x2\x2\xEF\xE0\x3\x2\x2");
		sb.Append("\x2\xEF\xE1\x3\x2\x2\x2\xEF\xE2\x3\x2\x2\x2\xEF\xE3\x3\x2\x2");
		sb.Append("\x2\xEF\xE4\x3\x2\x2\x2\xEF\xE5\x3\x2\x2\x2\xEF\xE6\x3\x2\x2");
		sb.Append("\x2\xEF\xE7\x3\x2\x2\x2\xEF\xE8\x3\x2\x2\x2\xEF\xE9\x3\x2\x2");
		sb.Append("\x2\xEF\xEA\x3\x2\x2\x2\xEF\xEB\x3\x2\x2\x2\xEF\xEC\x3\x2\x2");
		sb.Append("\x2\xEF\xED\x3\x2\x2\x2\xEF\xEE\x3\x2\x2\x2\xF0\t\x3\x2\x2\x2");
		sb.Append("\xF1\xF2\a \x2\x2\xF2\xF6\a\x84\x2\x2\xF3\xF4\x5\x86\x44\x2");
		sb.Append("\xF4\xF5\a\x4\x2\x2\xF5\xF7\x3\x2\x2\x2\xF6\xF3\x3\x2\x2\x2");
		sb.Append("\xF6\xF7\x3\x2\x2\x2\xF7\xF8\x3\x2\x2\x2\xF8\x101\x5\x88\x45");
		sb.Append("\x2\xF9\xFA\a{\x2\x2\xFA\xFB\a\x88\x2\x2\xFB\x102\x5\x8CG\x2");
		sb.Append("\xFC\xFE\a\x1D\x2\x2\xFD\xFF\a\x30\x2\x2\xFE\xFD\x3\x2\x2\x2");
		sb.Append("\xFE\xFF\x3\x2\x2\x2\xFF\x100\x3\x2\x2\x2\x100\x102\x5H%\x2");
		sb.Append("\x101\xF9\x3\x2\x2\x2\x101\xFC\x3\x2\x2\x2\x102\v\x3\x2\x2\x2");
		sb.Append("\x103\x10A\a!\x2\x2\x104\x10B\x5\x86\x44\x2\x105\x10B\x5\x8A");
		sb.Append("\x46\x2\x106\x107\x5\x86\x44\x2\x107\x108\a\x4\x2\x2\x108\x109");
		sb.Append("\x5\x8A\x46\x2\x109\x10B\x3\x2\x2\x2\x10A\x104\x3\x2\x2\x2\x10A");
		sb.Append("\x105\x3\x2\x2\x2\x10A\x106\x3\x2\x2\x2\x10A\x10B\x3\x2\x2\x2");
		sb.Append("\x10B\r\x3\x2\x2\x2\x10C\x10E\a%\x2\x2\x10D\x10F\a\x39\x2\x2");
		sb.Append("\x10E\x10D\x3\x2\x2\x2\x10E\x10F\x3\x2\x2\x2\x10F\x110\x3\x2");
		sb.Append("\x2\x2\x110\x111\x5P)\x2\x111\x112\a#\x2\x2\x112\x113\x5\x86");
		sb.Append("\x44\x2\x113\xF\x3\x2\x2\x2\x114\x116\a(\x2\x2\x115\x117\t\x2");
		sb.Append("\x2\x2\x116\x115\x3\x2\x2\x2\x116\x117\x3\x2\x2\x2\x117\x11C");
		sb.Append("\x3\x2\x2\x2\x118\x11A\a\x89\x2\x2\x119\x11B\x5\xA2R\x2\x11A");
		sb.Append("\x119\x3\x2\x2\x2\x11A\x11B\x3\x2\x2\x2\x11B\x11D\x3\x2\x2\x2");
		sb.Append("\x11C\x118\x3\x2\x2\x2\x11C\x11D\x3\x2\x2\x2\x11D\x11\x3\x2");
		sb.Append("\x2\x2\x11E\x123\t\x3\x2\x2\x11F\x121\a\x89\x2\x2\x120\x122");
		sb.Append("\x5\xA2R\x2\x121\x120\x3\x2\x2\x2\x121\x122\x3\x2\x2\x2\x122");
		sb.Append("\x124\x3\x2\x2\x2\x123\x11F\x3\x2\x2\x2\x123\x124\x3\x2\x2\x2");
		sb.Append("\x124\x13\x3\x2\x2\x2\x125\x127\a\x95\x2\x2\x126\x128\av\x2");
		sb.Append("\x2\x127\x126\x3\x2\x2\x2\x127\x128\x3\x2\x2\x2\x128\x129\x3");
		sb.Append("\x2\x2\x2\x129\x12E\x5\x62\x32\x2\x12A\x12B\a\a\x2\x2\x12B\x12D");
		sb.Append("\x5\x62\x32\x2\x12C\x12A\x3\x2\x2\x2\x12D\x130\x3\x2\x2\x2\x12E");
		sb.Append("\x12C\x3\x2\x2\x2\x12E\x12F\x3\x2\x2\x2\x12F\x132\x3\x2\x2\x2");
		sb.Append("\x130\x12E\x3\x2\x2\x2\x131\x125\x3\x2\x2\x2\x131\x132\x3\x2");
		sb.Append("\x2\x2\x132\x133\x3\x2\x2\x2\x133\x13D\x5n\x38\x2\x134\x136");
		sb.Append("\a\x8B\x2\x2\x135\x137\a\x1F\x2\x2\x136\x135\x3\x2\x2\x2\x136");
		sb.Append("\x137\x3\x2\x2\x2\x137\x13B\x3\x2\x2\x2\x138\x13B\a\\\x2\x2");
		sb.Append("\x139\x13B\a\x46\x2\x2\x13A\x134\x3\x2\x2\x2\x13A\x138\x3\x2");
		sb.Append("\x2\x2\x13A\x139\x3\x2\x2\x2\x13B\x13C\x3\x2\x2\x2\x13C\x13E");
		sb.Append("\x5n\x38\x2\x13D\x13A\x3\x2\x2\x2\x13E\x13F\x3\x2\x2\x2\x13F");
		sb.Append("\x13D\x3\x2\x2\x2\x13F\x140\x3\x2\x2\x2\x140\x14B\x3\x2\x2\x2");
		sb.Append("\x141\x142\ao\x2\x2\x142\x143\a*\x2\x2\x143\x148\x5^\x30\x2");
		sb.Append("\x144\x145\a\a\x2\x2\x145\x147\x5^\x30\x2\x146\x144\x3\x2\x2");
		sb.Append("\x2\x147\x14A\x3\x2\x2\x2\x148\x146\x3\x2\x2\x2\x148\x149\x3");
		sb.Append("\x2\x2\x2\x149\x14C\x3\x2\x2\x2\x14A\x148\x3\x2\x2\x2\x14B\x141");
		sb.Append("\x3\x2\x2\x2\x14B\x14C\x3\x2\x2\x2\x14C\x153\x3\x2\x2\x2\x14D");
		sb.Append("\x14E\a\x64\x2\x2\x14E\x151\x5P)\x2\x14F\x150\t\x4\x2\x2\x150");
		sb.Append("\x152\x5P)\x2\x151\x14F\x3\x2\x2\x2\x151\x152\x3\x2\x2\x2\x152");
		sb.Append("\x154\x3\x2\x2\x2\x153\x14D\x3\x2\x2\x2\x153\x154\x3\x2\x2\x2");
		sb.Append("\x154\x15\x3\x2\x2\x2\x155\x157\a\x34\x2\x2\x156\x158\a\x8C");
		sb.Append("\x2\x2\x157\x156\x3\x2\x2\x2\x157\x158\x3\x2\x2\x2\x158\x159");
		sb.Append("\x3\x2\x2\x2\x159\x15D\aV\x2\x2\x15A\x15B\aR\x2\x2\x15B\x15C");
		sb.Append("\ah\x2\x2\x15C\x15E\aH\x2\x2\x15D\x15A\x3\x2\x2\x2\x15D\x15E");
		sb.Append("\x3\x2\x2\x2\x15E\x162\x3\x2\x2\x2\x15F\x160\x5\x86\x44\x2\x160");
		sb.Append("\x161\a\x4\x2\x2\x161\x163\x3\x2\x2\x2\x162\x15F\x3\x2\x2\x2");
		sb.Append("\x162\x163\x3\x2\x2\x2\x163\x164\x3\x2\x2\x2\x164\x165\x5\x94");
		sb.Append("K\x2\x165\x166\am\x2\x2\x166\x167\x5\x88\x45\x2\x167\x168\a");
		sb.Append("\x5\x2\x2\x168\x16D\x5V,\x2\x169\x16A\a\a\x2\x2\x16A\x16C\x5");
		sb.Append("V,\x2\x16B\x169\x3\x2\x2\x2\x16C\x16F\x3\x2\x2\x2\x16D\x16B");
		sb.Append("\x3\x2\x2\x2\x16D\x16E\x3\x2\x2\x2\x16E\x170\x3\x2\x2\x2\x16F");
		sb.Append("\x16D\x3\x2\x2\x2\x170\x173\a\x6\x2\x2\x171\x172\a\x94\x2\x2");
		sb.Append("\x172\x174\x5P)\x2\x173\x171\x3\x2\x2\x2\x173\x174\x3\x2\x2");
		sb.Append("\x2\x174\x17\x3\x2\x2\x2\x175\x177\a\x34\x2\x2\x176\x178\t\x5");
		sb.Append("\x2\x2\x177\x176\x3\x2\x2\x2\x177\x178\x3\x2\x2\x2\x178\x179");
		sb.Append("\x3\x2\x2\x2\x179\x17D\a\x84\x2\x2\x17A\x17B\aR\x2\x2\x17B\x17C");
		sb.Append("\ah\x2\x2\x17C\x17E\aH\x2\x2\x17D\x17A\x3\x2\x2\x2\x17D\x17E");
		sb.Append("\x3\x2\x2\x2\x17E\x182\x3\x2\x2\x2\x17F\x180\x5\x86\x44\x2\x180");
		sb.Append("\x181\a\x4\x2\x2\x181\x183\x3\x2\x2\x2\x182\x17F\x3\x2\x2\x2");
		sb.Append("\x182\x183\x3\x2\x2\x2\x183\x184\x3\x2\x2\x2\x184\x19C\x5\x88");
		sb.Append("\x45\x2\x185\x186\a\x5\x2\x2\x186\x18B\x5H%\x2\x187\x188\a\a");
		sb.Append("\x2\x2\x188\x18A\x5H%\x2\x189\x187\x3\x2\x2\x2\x18A\x18D\x3");
		sb.Append("\x2\x2\x2\x18B\x189\x3\x2\x2\x2\x18B\x18C\x3\x2\x2\x2\x18C\x192");
		sb.Append("\x3\x2\x2\x2\x18D\x18B\x3\x2\x2\x2\x18E\x18F\a\a\x2\x2\x18F");
		sb.Append("\x191\x5X-\x2\x190\x18E\x3\x2\x2\x2\x191\x194\x3\x2\x2\x2\x192");
		sb.Append("\x190\x3\x2\x2\x2\x192\x193\x3\x2\x2\x2\x193\x195\x3\x2\x2\x2");
		sb.Append("\x194\x192\x3\x2\x2\x2\x195\x198\a\x6\x2\x2\x196\x197\a\x96");
		sb.Append("\x2\x2\x197\x199\a\x97\x2\x2\x198\x196\x3\x2\x2\x2\x198\x199");
		sb.Append("\x3\x2\x2\x2\x199\x19D\x3\x2\x2\x2\x19A\x19B\a#\x2\x2\x19B\x19D");
		sb.Append("\x5> \x2\x19C\x185\x3\x2\x2\x2\x19C\x19A\x3\x2\x2\x2\x19D\x19");
		sb.Append("\x3\x2\x2\x2\x19E\x1A0\a\x34\x2\x2\x19F\x1A1\t\x5\x2\x2\x1A0");
		sb.Append("\x19F\x3\x2\x2\x2\x1A0\x1A1\x3\x2\x2\x2\x1A1\x1A2\x3\x2\x2\x2");
		sb.Append("\x1A2\x1A6\a\x8A\x2\x2\x1A3\x1A4\aR\x2\x2\x1A4\x1A5\ah\x2\x2");
		sb.Append("\x1A5\x1A7\aH\x2\x2\x1A6\x1A3\x3\x2\x2\x2\x1A6\x1A7\x3\x2\x2");
		sb.Append("\x2\x1A7\x1AB\x3\x2\x2\x2\x1A8\x1A9\x5\x86\x44\x2\x1A9\x1AA");
		sb.Append("\a\x4\x2\x2\x1AA\x1AC\x3\x2\x2\x2\x1AB\x1A8\x3\x2\x2\x2\x1AB");
		sb.Append("\x1AC\x3\x2\x2\x2\x1AC\x1AD\x3\x2\x2\x2\x1AD\x1B2\x5\x96L\x2");
		sb.Append("\x1AE\x1B3\a\'\x2\x2\x1AF\x1B3\a\x1E\x2\x2\x1B0\x1B1\a[\x2\x2");
		sb.Append("\x1B1\x1B3\ak\x2\x2\x1B2\x1AE\x3\x2\x2\x2\x1B2\x1AF\x3\x2\x2");
		sb.Append("\x2\x1B2\x1B0\x3\x2\x2\x2\x1B2\x1B3\x3\x2\x2\x2\x1B3\x1C2\x3");
		sb.Append("\x2\x2\x2\x1B4\x1C3\a=\x2\x2\x1B5\x1C3\aZ\x2\x2\x1B6\x1C0\a");
		sb.Append("\x8D\x2\x2\x1B7\x1B8\ak\x2\x2\x1B8\x1BD\x5\x8EH\x2\x1B9\x1BA");
		sb.Append("\a\a\x2\x2\x1BA\x1BC\x5\x8EH\x2\x1BB\x1B9\x3\x2\x2\x2\x1BC\x1BF");
		sb.Append("\x3\x2\x2\x2\x1BD\x1BB\x3\x2\x2\x2\x1BD\x1BE\x3\x2\x2\x2\x1BE");
		sb.Append("\x1C1\x3\x2\x2\x2\x1BF\x1BD\x3\x2\x2\x2\x1C0\x1B7\x3\x2\x2\x2");
		sb.Append("\x1C0\x1C1\x3\x2\x2\x2\x1C1\x1C3\x3\x2\x2\x2\x1C2\x1B4\x3\x2");
		sb.Append("\x2\x2\x1C2\x1B5\x3\x2\x2\x2\x1C2\x1B6\x3\x2\x2\x2\x1C3\x1C4");
		sb.Append("\x3\x2\x2\x2\x1C4\x1C8\am\x2\x2\x1C5\x1C6\x5\x86\x44\x2\x1C6");
		sb.Append("\x1C7\a\x4\x2\x2\x1C7\x1C9\x3\x2\x2\x2\x1C8\x1C5\x3\x2\x2\x2");
		sb.Append("\x1C8\x1C9\x3\x2\x2\x2\x1C9\x1CA\x3\x2\x2\x2\x1CA\x1CE\x5\x88");
		sb.Append("\x45\x2\x1CB\x1CC\aK\x2\x2\x1CC\x1CD\a\x42\x2\x2\x1CD\x1CF\a");
		sb.Append("\x80\x2\x2\x1CE\x1CB\x3\x2\x2\x2\x1CE\x1CF\x3\x2\x2\x2\x1CF");
		sb.Append("\x1D2\x3\x2\x2\x2\x1D0\x1D1\a\x93\x2\x2\x1D1\x1D3\x5P)\x2\x1D2");
		sb.Append("\x1D0\x3\x2\x2\x2\x1D2\x1D3\x3\x2\x2\x2\x1D3\x1D4\x3\x2\x2\x2");
		sb.Append("\x1D4\x1DD\a(\x2\x2\x1D5\x1DA\x5\x42\"\x2\x1D6\x1DA\x5\x30\x19");
		sb.Append("\x2\x1D7\x1DA\x5 \x11\x2\x1D8\x1DA\x5> \x2\x1D9\x1D5\x3\x2\x2");
		sb.Append("\x2\x1D9\x1D6\x3\x2\x2\x2\x1D9\x1D7\x3\x2\x2\x2\x1D9\x1D8\x3");
		sb.Append("\x2\x2\x2\x1DA\x1DB\x3\x2\x2\x2\x1DB\x1DC\a\x3\x2\x2\x1DC\x1DE");
		sb.Append("\x3\x2\x2\x2\x1DD\x1D9\x3\x2\x2\x2\x1DE\x1DF\x3\x2\x2\x2\x1DF");
		sb.Append("\x1DD\x3\x2\x2\x2\x1DF\x1E0\x3\x2\x2\x2\x1E0\x1E1\x3\x2\x2\x2");
		sb.Append("\x1E1\x1E2\a\x44\x2\x2\x1E2\x1B\x3\x2\x2\x2\x1E3\x1E5\a\x34");
		sb.Append("\x2\x2\x1E4\x1E6\t\x5\x2\x2\x1E5\x1E4\x3\x2\x2\x2\x1E5\x1E6");
		sb.Append("\x3\x2\x2\x2\x1E6\x1E7\x3\x2\x2\x2\x1E7\x1EB\a\x91\x2\x2\x1E8");
		sb.Append("\x1E9\aR\x2\x2\x1E9\x1EA\ah\x2\x2\x1EA\x1EC\aH\x2\x2\x1EB\x1E8");
		sb.Append("\x3\x2\x2\x2\x1EB\x1EC\x3\x2\x2\x2\x1EC\x1F0\x3\x2\x2\x2\x1ED");
		sb.Append("\x1EE\x5\x86\x44\x2\x1EE\x1EF\a\x4\x2\x2\x1EF\x1F1\x3\x2\x2");
		sb.Append("\x2\x1F0\x1ED\x3\x2\x2\x2\x1F0\x1F1\x3\x2\x2\x2\x1F1\x1F2\x3");
		sb.Append("\x2\x2\x2\x1F2\x1F3\x5\x98M\x2\x1F3\x1F4\a#\x2\x2\x1F4\x1F5");
		sb.Append("\x5> \x2\x1F5\x1D\x3\x2\x2\x2\x1F6\x1F7\a\x34\x2\x2\x1F7\x1F8");
		sb.Append("\a\x92\x2\x2\x1F8\x1FC\a\x84\x2\x2\x1F9\x1FA\aR\x2\x2\x1FA\x1FB");
		sb.Append("\ah\x2\x2\x1FB\x1FD\aH\x2\x2\x1FC\x1F9\x3\x2\x2\x2\x1FC\x1FD");
		sb.Append("\x3\x2\x2\x2\x1FD\x201\x3\x2\x2\x2\x1FE\x1FF\x5\x86\x44\x2\x1FF");
		sb.Append("\x200\a\x4\x2\x2\x200\x202\x3\x2\x2\x2\x201\x1FE\x3\x2\x2\x2");
		sb.Append("\x201\x202\x3\x2\x2\x2\x202\x203\x3\x2\x2\x2\x203\x204\x5\x88");
		sb.Append("\x45\x2\x204\x205\a\x8E\x2\x2\x205\x211\x5\x9AN\x2\x206\x207");
		sb.Append("\a\x5\x2\x2\x207\x20C\x5|?\x2\x208\x209\a\a\x2\x2\x209\x20B");
		sb.Append("\x5|?\x2\x20A\x208\x3\x2\x2\x2\x20B\x20E\x3\x2\x2\x2\x20C\x20A");
		sb.Append("\x3\x2\x2\x2\x20C\x20D\x3\x2\x2\x2\x20D\x20F\x3\x2\x2\x2\x20E");
		sb.Append("\x20C\x3\x2\x2\x2\x20F\x210\a\x6\x2\x2\x210\x212\x3\x2\x2\x2");
		sb.Append("\x211\x206\x3\x2\x2\x2\x211\x212\x3\x2\x2\x2\x212\x1F\x3\x2");
		sb.Append("\x2\x2\x213\x215\x5Z.\x2\x214\x213\x3\x2\x2\x2\x214\x215\x3");
		sb.Append("\x2\x2\x2\x215\x216\x3\x2\x2\x2\x216\x217\a=\x2\x2\x217\x218");
		sb.Append("\aM\x2\x2\x218\x21B\x5\\/\x2\x219\x21A\a\x94\x2\x2\x21A\x21C");
		sb.Append("\x5P)\x2\x21B\x219\x3\x2\x2\x2\x21B\x21C\x3\x2\x2\x2\x21C!\x3");
		sb.Append("\x2\x2\x2\x21D\x21F\x5Z.\x2\x21E\x21D\x3\x2\x2\x2\x21E\x21F");
		sb.Append("\x3\x2\x2\x2\x21F\x220\x3\x2\x2\x2\x220\x221\a=\x2\x2\x221\x222");
		sb.Append("\aM\x2\x2\x222\x225\x5\\/\x2\x223\x224\a\x94\x2\x2\x224\x226");
		sb.Append("\x5P)\x2\x225\x223\x3\x2\x2\x2\x225\x226\x3\x2\x2\x2\x226\x239");
		sb.Append("\x3\x2\x2\x2\x227\x228\ao\x2\x2\x228\x229\a*\x2\x2\x229\x22E");
		sb.Append("\x5^\x30\x2\x22A\x22B\a\a\x2\x2\x22B\x22D\x5^\x30\x2\x22C\x22A");
		sb.Append("\x3\x2\x2\x2\x22D\x230\x3\x2\x2\x2\x22E\x22C\x3\x2\x2\x2\x22E");
		sb.Append("\x22F\x3\x2\x2\x2\x22F\x232\x3\x2\x2\x2\x230\x22E\x3\x2\x2\x2");
		sb.Append("\x231\x227\x3\x2\x2\x2\x231\x232\x3\x2\x2\x2\x232\x233\x3\x2");
		sb.Append("\x2\x2\x233\x234\a\x64\x2\x2\x234\x237\x5P)\x2\x235\x236\t\x4");
		sb.Append("\x2\x2\x236\x238\x5P)\x2\x237\x235\x3\x2\x2\x2\x237\x238\x3");
		sb.Append("\x2\x2\x2\x238\x23A\x3\x2\x2\x2\x239\x231\x3\x2\x2\x2\x239\x23A");
		sb.Append("\x3\x2\x2\x2\x23A#\x3\x2\x2\x2\x23B\x23D\a?\x2\x2\x23C\x23E");
		sb.Append("\a\x39\x2\x2\x23D\x23C\x3\x2\x2\x2\x23D\x23E\x3\x2\x2\x2\x23E");
		sb.Append("\x23F\x3\x2\x2\x2\x23F\x240\x5\x86\x44\x2\x240%\x3\x2\x2\x2");
		sb.Append("\x241\x242\a\x41\x2\x2\x242\x245\aV\x2\x2\x243\x244\aR\x2\x2");
		sb.Append("\x244\x246\aH\x2\x2\x245\x243\x3\x2\x2\x2\x245\x246\x3\x2\x2");
		sb.Append("\x2\x246\x24A\x3\x2\x2\x2\x247\x248\x5\x86\x44\x2\x248\x249");
		sb.Append("\a\x4\x2\x2\x249\x24B\x3\x2\x2\x2\x24A\x247\x3\x2\x2\x2\x24A");
		sb.Append("\x24B\x3\x2\x2\x2\x24B\x24C\x3\x2\x2\x2\x24C\x24D\x5\x94K\x2");
		sb.Append("\x24D\'\x3\x2\x2\x2\x24E\x24F\a\x41\x2\x2\x24F\x252\a\x84\x2");
		sb.Append("\x2\x250\x251\aR\x2\x2\x251\x253\aH\x2\x2\x252\x250\x3\x2\x2");
		sb.Append("\x2\x252\x253\x3\x2\x2\x2\x253\x257\x3\x2\x2\x2\x254\x255\x5");
		sb.Append("\x86\x44\x2\x255\x256\a\x4\x2\x2\x256\x258\x3\x2\x2\x2\x257");
		sb.Append("\x254\x3\x2\x2\x2\x257\x258\x3\x2\x2\x2\x258\x259\x3\x2\x2\x2");
		sb.Append("\x259\x25A\x5\x88\x45\x2\x25A)\x3\x2\x2\x2\x25B\x25C\a\x41\x2");
		sb.Append("\x2\x25C\x25F\a\x8A\x2\x2\x25D\x25E\aR\x2\x2\x25E\x260\aH\x2");
		sb.Append("\x2\x25F\x25D\x3\x2\x2\x2\x25F\x260\x3\x2\x2\x2\x260\x264\x3");
		sb.Append("\x2\x2\x2\x261\x262\x5\x86\x44\x2\x262\x263\a\x4\x2\x2\x263");
		sb.Append("\x265\x3\x2\x2\x2\x264\x261\x3\x2\x2\x2\x264\x265\x3\x2\x2\x2");
		sb.Append("\x265\x266\x3\x2\x2\x2\x266\x267\x5\x96L\x2\x267+\x3\x2\x2\x2");
		sb.Append("\x268\x269\a\x41\x2\x2\x269\x26C\a\x91\x2\x2\x26A\x26B\aR\x2");
		sb.Append("\x2\x26B\x26D\aH\x2\x2\x26C\x26A\x3\x2\x2\x2\x26C\x26D\x3\x2");
		sb.Append("\x2\x2\x26D\x271\x3\x2\x2\x2\x26E\x26F\x5\x86\x44\x2\x26F\x270");
		sb.Append("\a\x4\x2\x2\x270\x272\x3\x2\x2\x2\x271\x26E\x3\x2\x2\x2\x271");
		sb.Append("\x272\x3\x2\x2\x2\x272\x273\x3\x2\x2\x2\x273\x274\x5\x98M\x2");
		sb.Append("\x274-\x3\x2\x2\x2\x275\x277\a\x95\x2\x2\x276\x278\av\x2\x2");
		sb.Append("\x277\x276\x3\x2\x2\x2\x277\x278\x3\x2\x2\x2\x278\x279\x3\x2");
		sb.Append("\x2\x2\x279\x27E\x5\x62\x32\x2\x27A\x27B\a\a\x2\x2\x27B\x27D");
		sb.Append("\x5\x62\x32\x2\x27C\x27A\x3\x2\x2\x2\x27D\x280\x3\x2\x2\x2\x27E");
		sb.Append("\x27C\x3\x2\x2\x2\x27E\x27F\x3\x2\x2\x2\x27F\x282\x3\x2\x2\x2");
		sb.Append("\x280\x27E\x3\x2\x2\x2\x281\x275\x3\x2\x2\x2\x281\x282\x3\x2");
		sb.Append("\x2\x2\x282\x283\x3\x2\x2\x2\x283\x289\x5n\x38\x2\x284\x285");
		sb.Append("\x5p\x39\x2\x285\x286\x5n\x38\x2\x286\x288\x3\x2\x2\x2\x287");
		sb.Append("\x284\x3\x2\x2\x2\x288\x28B\x3\x2\x2\x2\x289\x287\x3\x2\x2\x2");
		sb.Append("\x289\x28A\x3\x2\x2\x2\x28A\x296\x3\x2\x2\x2\x28B\x289\x3\x2");
		sb.Append("\x2\x2\x28C\x28D\ao\x2\x2\x28D\x28E\a*\x2\x2\x28E\x293\x5^\x30");
		sb.Append("\x2\x28F\x290\a\a\x2\x2\x290\x292\x5^\x30\x2\x291\x28F\x3\x2");
		sb.Append("\x2\x2\x292\x295\x3\x2\x2\x2\x293\x291\x3\x2\x2\x2\x293\x294");
		sb.Append("\x3\x2\x2\x2\x294\x297\x3\x2\x2\x2\x295\x293\x3\x2\x2\x2\x296");
		sb.Append("\x28C\x3\x2\x2\x2\x296\x297\x3\x2\x2\x2\x297\x29E\x3\x2\x2\x2");
		sb.Append("\x298\x299\a\x64\x2\x2\x299\x29C\x5P)\x2\x29A\x29B\t\x4\x2\x2");
		sb.Append("\x29B\x29D\x5P)\x2\x29C\x29A\x3\x2\x2\x2\x29C\x29D\x3\x2\x2");
		sb.Append("\x2\x29D\x29F\x3\x2\x2\x2\x29E\x298\x3\x2\x2\x2\x29E\x29F\x3");
		sb.Append("\x2\x2\x2\x29F/\x3\x2\x2\x2\x2A0\x2A2\x5Z.\x2\x2A1\x2A0\x3\x2");
		sb.Append("\x2\x2\x2A1\x2A2\x3\x2\x2\x2\x2A2\x2B4\x3\x2\x2\x2\x2A3\x2B5");
		sb.Append("\aZ\x2\x2\x2A4\x2B5\a|\x2\x2\x2A5\x2A6\aZ\x2\x2\x2A6\x2A7\a");
		sb.Append("n\x2\x2\x2A7\x2B5\a|\x2\x2\x2A8\x2A9\aZ\x2\x2\x2A9\x2AA\an\x2");
		sb.Append("\x2\x2AA\x2B5\a\x7F\x2\x2\x2AB\x2AC\aZ\x2\x2\x2AC\x2AD\an\x2");
		sb.Append("\x2\x2AD\x2B5\a\x1B\x2\x2\x2AE\x2AF\aZ\x2\x2\x2AF\x2B0\an\x2");
		sb.Append("\x2\x2B0\x2B5\aJ\x2\x2\x2B1\x2B2\aZ\x2\x2\x2B2\x2B3\an\x2\x2");
		sb.Append("\x2B3\x2B5\aS\x2\x2\x2B4\x2A3\x3\x2\x2\x2\x2B4\x2A4\x3\x2\x2");
		sb.Append("\x2\x2B4\x2A5\x3\x2\x2\x2\x2B4\x2A8\x3\x2\x2\x2\x2B4\x2AB\x3");
		sb.Append("\x2\x2\x2\x2B4\x2AE\x3\x2\x2\x2\x2B4\x2B1\x3\x2\x2\x2\x2B5\x2B6");
		sb.Append("\x3\x2\x2\x2\x2B6\x2BA\a]\x2\x2\x2B7\x2B8\x5\x86\x44\x2\x2B8");
		sb.Append("\x2B9\a\x4\x2\x2\x2B9\x2BB\x3\x2\x2\x2\x2BA\x2B7\x3\x2\x2\x2");
		sb.Append("\x2BA\x2BB\x3\x2\x2\x2\x2BB\x2BC\x3\x2\x2\x2\x2BC\x2C8\x5\x88");
		sb.Append("\x45\x2\x2BD\x2BE\a\x5\x2\x2\x2BE\x2C3\x5\x8EH\x2\x2BF\x2C0");
		sb.Append("\a\a\x2\x2\x2C0\x2C2\x5\x8EH\x2\x2C1\x2BF\x3\x2\x2\x2\x2C2\x2C5");
		sb.Append("\x3\x2\x2\x2\x2C3\x2C1\x3\x2\x2\x2\x2C3\x2C4\x3\x2\x2\x2\x2C4");
		sb.Append("\x2C6\x3\x2\x2\x2\x2C5\x2C3\x3\x2\x2\x2\x2C6\x2C7\a\x6\x2\x2");
		sb.Append("\x2C7\x2C9\x3\x2\x2\x2\x2C8\x2BD\x3\x2\x2\x2\x2C8\x2C9\x3\x2");
		sb.Append("\x2\x2\x2C9\x2E9\x3\x2\x2\x2\x2CA\x2CB\a\x90\x2\x2\x2CB\x2CC");
		sb.Append("\a\x5\x2\x2\x2CC\x2D1\x5P)\x2\x2CD\x2CE\a\a\x2\x2\x2CE\x2D0");
		sb.Append("\x5P)\x2\x2CF\x2CD\x3\x2\x2\x2\x2D0\x2D3\x3\x2\x2\x2\x2D1\x2CF");
		sb.Append("\x3\x2\x2\x2\x2D1\x2D2\x3\x2\x2\x2\x2D2\x2D4\x3\x2\x2\x2\x2D3");
		sb.Append("\x2D1\x3\x2\x2\x2\x2D4\x2E3\a\x6\x2\x2\x2D5\x2D6\a\a\x2\x2\x2D6");
		sb.Append("\x2D7\a\x5\x2\x2\x2D7\x2DC\x5P)\x2\x2D8\x2D9\a\a\x2\x2\x2D9");
		sb.Append("\x2DB\x5P)\x2\x2DA\x2D8\x3\x2\x2\x2\x2DB\x2DE\x3\x2\x2\x2\x2DC");
		sb.Append("\x2DA\x3\x2\x2\x2\x2DC\x2DD\x3\x2\x2\x2\x2DD\x2DF\x3\x2\x2\x2");
		sb.Append("\x2DE\x2DC\x3\x2\x2\x2\x2DF\x2E0\a\x6\x2\x2\x2E0\x2E2\x3\x2");
		sb.Append("\x2\x2\x2E1\x2D5\x3\x2\x2\x2\x2E2\x2E5\x3\x2\x2\x2\x2E3\x2E1");
		sb.Append("\x3\x2\x2\x2\x2E3\x2E4\x3\x2\x2\x2\x2E4\x2EA\x3\x2\x2\x2\x2E5");
		sb.Append("\x2E3\x3\x2\x2\x2\x2E6\x2EA\x5> \x2\x2E7\x2E8\a:\x2\x2\x2E8");
		sb.Append("\x2EA\a\x90\x2\x2\x2E9\x2CA\x3\x2\x2\x2\x2E9\x2E6\x3\x2\x2\x2");
		sb.Append("\x2E9\x2E7\x3\x2\x2\x2\x2EA\x31\x3\x2\x2\x2\x2EB\x2EF\ar\x2");
		sb.Append("\x2\x2EC\x2ED\x5\x86\x44\x2\x2ED\x2EE\a\x4\x2\x2\x2EE\x2F0\x3");
		sb.Append("\x2\x2\x2\x2EF\x2EC\x3\x2\x2\x2\x2EF\x2F0\x3\x2\x2\x2\x2F0\x2F1");
		sb.Append("\x3\x2\x2\x2\x2F1\x2F8\x5\x9CO\x2\x2F2\x2F3\a\b\x2\x2\x2F3\x2F9");
		sb.Append("\x5`\x31\x2\x2F4\x2F5\a\x5\x2\x2\x2F5\x2F6\x5`\x31\x2\x2F6\x2F7");
		sb.Append("\a\x6\x2\x2\x2F7\x2F9\x3\x2\x2\x2\x2F8\x2F2\x3\x2\x2\x2\x2F8");
		sb.Append("\x2F4\x3\x2\x2\x2\x2F8\x2F9\x3\x2\x2\x2\x2F9\x33\x3\x2\x2\x2");
		sb.Append("\x2FA\x305\ay\x2\x2\x2FB\x306\x5\x90I\x2\x2FC\x2FD\x5\x86\x44");
		sb.Append("\x2\x2FD\x2FE\a\x4\x2\x2\x2FE\x300\x3\x2\x2\x2\x2FF\x2FC\x3");
		sb.Append("\x2\x2\x2\x2FF\x300\x3\x2\x2\x2\x300\x303\x3\x2\x2\x2\x301\x304");
		sb.Append("\x5\x88\x45\x2\x302\x304\x5\x94K\x2\x303\x301\x3\x2\x2\x2\x303");
		sb.Append("\x302\x3\x2\x2\x2\x304\x306\x3\x2\x2\x2\x305\x2FB\x3\x2\x2\x2");
		sb.Append("\x305\x2FF\x3\x2\x2\x2\x305\x306\x3\x2\x2\x2\x306\x35\x3\x2");
		sb.Append("\x2\x2\x307\x309\az\x2\x2\x308\x30A\a\x81\x2\x2\x309\x308\x3");
		sb.Append("\x2\x2\x2\x309\x30A\x3\x2\x2\x2\x30A\x30B\x3\x2\x2\x2\x30B\x30C");
		sb.Append("\x5\x9EP\x2\x30C\x37\x3\x2\x2\x2\x30D\x312\a\x7F\x2\x2\x30E");
		sb.Append("\x310\a\x89\x2\x2\x30F\x311\x5\xA2R\x2\x310\x30F\x3\x2\x2\x2");
		sb.Append("\x310\x311\x3\x2\x2\x2\x311\x313\x3\x2\x2\x2\x312\x30E\x3\x2");
		sb.Append("\x2\x2\x312\x313\x3\x2\x2\x2\x313\x319\x3\x2\x2\x2\x314\x316");
		sb.Append("\a\x88\x2\x2\x315\x317\a\x81\x2\x2\x316\x315\x3\x2\x2\x2\x316");
		sb.Append("\x317\x3\x2\x2\x2\x317\x318\x3\x2\x2\x2\x318\x31A\x5\x9EP\x2");
		sb.Append("\x319\x314\x3\x2\x2\x2\x319\x31A\x3\x2\x2\x2\x31A\x39\x3\x2");
		sb.Append("\x2\x2\x31B\x31C\a\x81\x2\x2\x31C\x31D\x5\x9EP\x2\x31D;\x3\x2");
		sb.Append("\x2\x2\x31E\x320\a\x95\x2\x2\x31F\x321\av\x2\x2\x320\x31F\x3");
		sb.Append("\x2\x2\x2\x320\x321\x3\x2\x2\x2\x321\x322\x3\x2\x2\x2\x322\x327");
		sb.Append("\x5\x62\x32\x2\x323\x324\a\a\x2\x2\x324\x326\x5\x62\x32\x2\x325");
		sb.Append("\x323\x3\x2\x2\x2\x326\x329\x3\x2\x2\x2\x327\x325\x3\x2\x2\x2");
		sb.Append("\x327\x328\x3\x2\x2\x2\x328\x32B\x3\x2\x2\x2\x329\x327\x3\x2");
		sb.Append("\x2\x2\x32A\x31E\x3\x2\x2\x2\x32A\x32B\x3\x2\x2\x2\x32B\x32C");
		sb.Append("\x3\x2\x2\x2\x32C\x337\x5n\x38\x2\x32D\x32E\ao\x2\x2\x32E\x32F");
		sb.Append("\a*\x2\x2\x32F\x334\x5^\x30\x2\x330\x331\a\a\x2\x2\x331\x333");
		sb.Append("\x5^\x30\x2\x332\x330\x3\x2\x2\x2\x333\x336\x3\x2\x2\x2\x334");
		sb.Append("\x332\x3\x2\x2\x2\x334\x335\x3\x2\x2\x2\x335\x338\x3\x2\x2\x2");
		sb.Append("\x336\x334\x3\x2\x2\x2\x337\x32D\x3\x2\x2\x2\x337\x338\x3\x2");
		sb.Append("\x2\x2\x338\x33F\x3\x2\x2\x2\x339\x33A\a\x64\x2\x2\x33A\x33D");
		sb.Append("\x5P)\x2\x33B\x33C\t\x4\x2\x2\x33C\x33E\x5P)\x2\x33D\x33B\x3");
		sb.Append("\x2\x2\x2\x33D\x33E\x3\x2\x2\x2\x33E\x340\x3\x2\x2\x2\x33F\x339");
		sb.Append("\x3\x2\x2\x2\x33F\x340\x3\x2\x2\x2\x340=\x3\x2\x2\x2\x341\x343");
		sb.Append("\a\x95\x2\x2\x342\x344\av\x2\x2\x343\x342\x3\x2\x2\x2\x343\x344");
		sb.Append("\x3\x2\x2\x2\x344\x345\x3\x2\x2\x2\x345\x34A\x5\x62\x32\x2\x346");
		sb.Append("\x347\a\a\x2\x2\x347\x349\x5\x62\x32\x2\x348\x346\x3\x2\x2\x2");
		sb.Append("\x349\x34C\x3\x2\x2\x2\x34A\x348\x3\x2\x2\x2\x34A\x34B\x3\x2");
		sb.Append("\x2\x2\x34B\x34E\x3\x2\x2\x2\x34C\x34A\x3\x2\x2\x2\x34D\x341");
		sb.Append("\x3\x2\x2\x2\x34D\x34E\x3\x2\x2\x2\x34E\x34F\x3\x2\x2\x2\x34F");
		sb.Append("\x355\x5@!\x2\x350\x351\x5p\x39\x2\x351\x352\x5@!\x2\x352\x354");
		sb.Append("\x3\x2\x2\x2\x353\x350\x3\x2\x2\x2\x354\x357\x3\x2\x2\x2\x355");
		sb.Append("\x353\x3\x2\x2\x2\x355\x356\x3\x2\x2\x2\x356\x362\x3\x2\x2\x2");
		sb.Append("\x357\x355\x3\x2\x2\x2\x358\x359\ao\x2\x2\x359\x35A\a*\x2\x2");
		sb.Append("\x35A\x35F\x5^\x30\x2\x35B\x35C\a\a\x2\x2\x35C\x35E\x5^\x30");
		sb.Append("\x2\x35D\x35B\x3\x2\x2\x2\x35E\x361\x3\x2\x2\x2\x35F\x35D\x3");
		sb.Append("\x2\x2\x2\x35F\x360\x3\x2\x2\x2\x360\x363\x3\x2\x2\x2\x361\x35F");
		sb.Append("\x3\x2\x2\x2\x362\x358\x3\x2\x2\x2\x362\x363\x3\x2\x2\x2\x363");
		sb.Append("\x36A\x3\x2\x2\x2\x364\x365\a\x64\x2\x2\x365\x368\x5P)\x2\x366");
		sb.Append("\x367\t\x4\x2\x2\x367\x369\x5P)\x2\x368\x366\x3\x2\x2\x2\x368");
		sb.Append("\x369\x3\x2\x2\x2\x369\x36B\x3\x2\x2\x2\x36A\x364\x3\x2\x2\x2");
		sb.Append("\x36A\x36B\x3\x2\x2\x2\x36B?\x3\x2\x2\x2\x36C\x36E\a\x82\x2");
		sb.Append("\x2\x36D\x36F\t\x6\x2\x2\x36E\x36D\x3\x2\x2\x2\x36E\x36F\x3");
		sb.Append("\x2\x2\x2\x36F\x370\x3\x2\x2\x2\x370\x375\x5\x64\x33\x2\x371");
		sb.Append("\x372\a\a\x2\x2\x372\x374\x5\x64\x33\x2\x373\x371\x3\x2\x2\x2");
		sb.Append("\x374\x377\x3\x2\x2\x2\x375\x373\x3\x2\x2\x2\x375\x376\x3\x2");
		sb.Append("\x2\x2\x376\x384\x3\x2\x2\x2\x377\x375\x3\x2\x2\x2\x378\x382");
		sb.Append("\aM\x2\x2\x379\x37E\x5\x66\x34\x2\x37A\x37B\a\a\x2\x2\x37B\x37D");
		sb.Append("\x5\x66\x34\x2\x37C\x37A\x3\x2\x2\x2\x37D\x380\x3\x2\x2\x2\x37E");
		sb.Append("\x37C\x3\x2\x2\x2\x37E\x37F\x3\x2\x2\x2\x37F\x383\x3\x2\x2\x2");
		sb.Append("\x380\x37E\x3\x2\x2\x2\x381\x383\x5h\x35\x2\x382\x379\x3\x2");
		sb.Append("\x2\x2\x382\x381\x3\x2\x2\x2\x383\x385\x3\x2\x2\x2\x384\x378");
		sb.Append("\x3\x2\x2\x2\x384\x385\x3\x2\x2\x2\x385\x388\x3\x2\x2\x2\x386");
		sb.Append("\x387\a\x94\x2\x2\x387\x389\x5P)\x2\x388\x386\x3\x2\x2\x2\x388");
		sb.Append("\x389\x3\x2\x2\x2\x389\x398\x3\x2\x2\x2\x38A\x38B\aP\x2\x2\x38B");
		sb.Append("\x38C\a*\x2\x2\x38C\x391\x5P)\x2\x38D\x38E\a\a\x2\x2\x38E\x390");
		sb.Append("\x5P)\x2\x38F\x38D\x3\x2\x2\x2\x390\x393\x3\x2\x2\x2\x391\x38F");
		sb.Append("\x3\x2\x2\x2\x391\x392\x3\x2\x2\x2\x392\x396\x3\x2\x2\x2\x393");
		sb.Append("\x391\x3\x2\x2\x2\x394\x395\aQ\x2\x2\x395\x397\x5P)\x2\x396");
		sb.Append("\x394\x3\x2\x2\x2\x396\x397\x3\x2\x2\x2\x397\x399\x3\x2\x2\x2");
		sb.Append("\x398\x38A\x3\x2\x2\x2\x398\x399\x3\x2\x2\x2\x399\x3B7\x3\x2");
		sb.Append("\x2\x2\x39A\x39B\a\x90\x2\x2\x39B\x39C\a\x5\x2\x2\x39C\x3A1");
		sb.Append("\x5P)\x2\x39D\x39E\a\a\x2\x2\x39E\x3A0\x5P)\x2\x39F\x39D\x3");
		sb.Append("\x2\x2\x2\x3A0\x3A3\x3\x2\x2\x2\x3A1\x39F\x3\x2\x2\x2\x3A1\x3A2");
		sb.Append("\x3\x2\x2\x2\x3A2\x3A4\x3\x2\x2\x2\x3A3\x3A1\x3\x2\x2\x2\x3A4");
		sb.Append("\x3B3\a\x6\x2\x2\x3A5\x3A6\a\a\x2\x2\x3A6\x3A7\a\x5\x2\x2\x3A7");
		sb.Append("\x3AC\x5P)\x2\x3A8\x3A9\a\a\x2\x2\x3A9\x3AB\x5P)\x2\x3AA\x3A8");
		sb.Append("\x3\x2\x2\x2\x3AB\x3AE\x3\x2\x2\x2\x3AC\x3AA\x3\x2\x2\x2\x3AC");
		sb.Append("\x3AD\x3\x2\x2\x2\x3AD\x3AF\x3\x2\x2\x2\x3AE\x3AC\x3\x2\x2\x2");
		sb.Append("\x3AF\x3B0\a\x6\x2\x2\x3B0\x3B2\x3\x2\x2\x2\x3B1\x3A5\x3\x2");
		sb.Append("\x2\x2\x3B2\x3B5\x3\x2\x2\x2\x3B3\x3B1\x3\x2\x2\x2\x3B3\x3B4");
		sb.Append("\x3\x2\x2\x2\x3B4\x3B7\x3\x2\x2\x2\x3B5\x3B3\x3\x2\x2\x2\x3B6");
		sb.Append("\x36C\x3\x2\x2\x2\x3B6\x39A\x3\x2\x2\x2\x3B7\x41\x3\x2\x2\x2");
		sb.Append("\x3B8\x3BA\x5Z.\x2\x3B9\x3B8\x3\x2\x2\x2\x3B9\x3BA\x3\x2\x2");
		sb.Append("\x2\x3BA\x3BB\x3\x2\x2\x2\x3BB\x3C6\a\x8D\x2\x2\x3BC\x3BD\a");
		sb.Append("n\x2\x2\x3BD\x3C7\a\x7F\x2\x2\x3BE\x3BF\an\x2\x2\x3BF\x3C7\a");
		sb.Append("\x1B\x2\x2\x3C0\x3C1\an\x2\x2\x3C1\x3C7\a|\x2\x2\x3C2\x3C3\a");
		sb.Append("n\x2\x2\x3C3\x3C7\aJ\x2\x2\x3C4\x3C5\an\x2\x2\x3C5\x3C7\aS\x2");
		sb.Append("\x2\x3C6\x3BC\x3\x2\x2\x2\x3C6\x3BE\x3\x2\x2\x2\x3C6\x3C0\x3");
		sb.Append("\x2\x2\x2\x3C6\x3C2\x3\x2\x2\x2\x3C6\x3C4\x3\x2\x2\x2\x3C6\x3C7");
		sb.Append("\x3\x2\x2\x2\x3C7\x3C8\x3\x2\x2\x2\x3C8\x3C9\x5\\/\x2\x3C9\x3CA");
		sb.Append("\a\x83\x2\x2\x3CA\x3CB\x5\x8EH\x2\x3CB\x3CC\a\b\x2\x2\x3CC\x3D4");
		sb.Append("\x5P)\x2\x3CD\x3CE\a\a\x2\x2\x3CE\x3CF\x5\x8EH\x2\x3CF\x3D0");
		sb.Append("\a\b\x2\x2\x3D0\x3D1\x5P)\x2\x3D1\x3D3\x3\x2\x2\x2\x3D2\x3CD");
		sb.Append("\x3\x2\x2\x2\x3D3\x3D6\x3\x2\x2\x2\x3D4\x3D2\x3\x2\x2\x2\x3D4");
		sb.Append("\x3D5\x3\x2\x2\x2\x3D5\x3D9\x3\x2\x2\x2\x3D6\x3D4\x3\x2\x2\x2");
		sb.Append("\x3D7\x3D8\a\x94\x2\x2\x3D8\x3DA\x5P)\x2\x3D9\x3D7\x3\x2\x2");
		sb.Append("\x2\x3D9\x3DA\x3\x2\x2\x2\x3DA\x43\x3\x2\x2\x2\x3DB\x3DD\x5");
		sb.Append("Z.\x2\x3DC\x3DB\x3\x2\x2\x2\x3DC\x3DD\x3\x2\x2\x2\x3DD\x3DE");
		sb.Append("\x3\x2\x2\x2\x3DE\x3E9\a\x8D\x2\x2\x3DF\x3E0\an\x2\x2\x3E0\x3EA");
		sb.Append("\a\x7F\x2\x2\x3E1\x3E2\an\x2\x2\x3E2\x3EA\a\x1B\x2\x2\x3E3\x3E4");
		sb.Append("\an\x2\x2\x3E4\x3EA\a|\x2\x2\x3E5\x3E6\an\x2\x2\x3E6\x3EA\a");
		sb.Append("J\x2\x2\x3E7\x3E8\an\x2\x2\x3E8\x3EA\aS\x2\x2\x3E9\x3DF\x3\x2");
		sb.Append("\x2\x2\x3E9\x3E1\x3\x2\x2\x2\x3E9\x3E3\x3\x2\x2\x2\x3E9\x3E5");
		sb.Append("\x3\x2\x2\x2\x3E9\x3E7\x3\x2\x2\x2\x3E9\x3EA\x3\x2\x2\x2\x3EA");
		sb.Append("\x3EB\x3\x2\x2\x2\x3EB\x3EC\x5\\/\x2\x3EC\x3ED\a\x83\x2\x2\x3ED");
		sb.Append("\x3EE\x5\x8EH\x2\x3EE\x3EF\a\b\x2\x2\x3EF\x3F7\x5P)\x2\x3F0");
		sb.Append("\x3F1\a\a\x2\x2\x3F1\x3F2\x5\x8EH\x2\x3F2\x3F3\a\b\x2\x2\x3F3");
		sb.Append("\x3F4\x5P)\x2\x3F4\x3F6\x3\x2\x2\x2\x3F5\x3F0\x3\x2\x2\x2\x3F6");
		sb.Append("\x3F9\x3\x2\x2\x2\x3F7\x3F5\x3\x2\x2\x2\x3F7\x3F8\x3\x2\x2\x2");
		sb.Append("\x3F8\x3FC\x3\x2\x2\x2\x3F9\x3F7\x3\x2\x2\x2\x3FA\x3FB\a\x94");
		sb.Append("\x2\x2\x3FB\x3FD\x5P)\x2\x3FC\x3FA\x3\x2\x2\x2\x3FC\x3FD\x3");
		sb.Append("\x2\x2\x2\x3FD\x410\x3\x2\x2\x2\x3FE\x3FF\ao\x2\x2\x3FF\x400");
		sb.Append("\a*\x2\x2\x400\x405\x5^\x30\x2\x401\x402\a\a\x2\x2\x402\x404");
		sb.Append("\x5^\x30\x2\x403\x401\x3\x2\x2\x2\x404\x407\x3\x2\x2\x2\x405");
		sb.Append("\x403\x3\x2\x2\x2\x405\x406\x3\x2\x2\x2\x406\x409\x3\x2\x2\x2");
		sb.Append("\x407\x405\x3\x2\x2\x2\x408\x3FE\x3\x2\x2\x2\x408\x409\x3\x2");
		sb.Append("\x2\x2\x409\x40A\x3\x2\x2\x2\x40A\x40B\a\x64\x2\x2\x40B\x40E");
		sb.Append("\x5P)\x2\x40C\x40D\t\x4\x2\x2\x40D\x40F\x5P)\x2\x40E\x40C\x3");
		sb.Append("\x2\x2\x2\x40E\x40F\x3\x2\x2\x2\x40F\x411\x3\x2\x2\x2\x410\x408");
		sb.Append("\x3\x2\x2\x2\x410\x411\x3\x2\x2\x2\x411\x45\x3\x2\x2\x2\x412");
		sb.Append("\x413\a\x8F\x2\x2\x413G\x3\x2\x2\x2\x414\x416\x5\x8EH\x2\x415");
		sb.Append("\x417\x5J&\x2\x416\x415\x3\x2\x2\x2\x416\x417\x3\x2\x2\x2\x417");
		sb.Append("\x41B\x3\x2\x2\x2\x418\x41A\x5L\'\x2\x419\x418\x3\x2\x2\x2\x41A");
		sb.Append("\x41D\x3\x2\x2\x2\x41B\x419\x3\x2\x2\x2\x41B\x41C\x3\x2\x2\x2");
		sb.Append("\x41CI\x3\x2\x2\x2\x41D\x41B\x3\x2\x2\x2\x41E\x420\x5\x82\x42");
		sb.Append("\x2\x41F\x41E\x3\x2\x2\x2\x420\x421\x3\x2\x2\x2\x421\x41F\x3");
		sb.Append("\x2\x2\x2\x421\x422\x3\x2\x2\x2\x422\x42D\x3\x2\x2\x2\x423\x424");
		sb.Append("\a\x5\x2\x2\x424\x425\x5t;\x2\x425\x426\a\x6\x2\x2\x426\x42E");
		sb.Append("\x3\x2\x2\x2\x427\x428\a\x5\x2\x2\x428\x429\x5t;\x2\x429\x42A");
		sb.Append("\a\a\x2\x2\x42A\x42B\x5t;\x2\x42B\x42C\a\x6\x2\x2\x42C\x42E");
		sb.Append("\x3\x2\x2\x2\x42D\x423\x3\x2\x2\x2\x42D\x427\x3\x2\x2\x2\x42D");
		sb.Append("\x42E\x3\x2\x2\x2\x42EK\x3\x2\x2\x2\x42F\x430\a\x33\x2\x2\x430");
		sb.Append("\x432\x5\x82\x42\x2\x431\x42F\x3\x2\x2\x2\x431\x432\x3\x2\x2");
		sb.Append("\x2\x432\x454\x3\x2\x2\x2\x433\x434\as\x2\x2\x434\x436\a\x61");
		sb.Append("\x2\x2\x435\x437\t\a\x2\x2\x436\x435\x3\x2\x2\x2\x436\x437\x3");
		sb.Append("\x2\x2\x2\x437\x438\x3\x2\x2\x2\x438\x43A\x5N(\x2\x439\x43B");
		sb.Append("\a&\x2\x2\x43A\x439\x3\x2\x2\x2\x43A\x43B\x3\x2\x2\x2\x43B\x455");
		sb.Append("\x3\x2\x2\x2\x43C\x43E\ah\x2\x2\x43D\x43C\x3\x2\x2\x2\x43D\x43E");
		sb.Append("\x3\x2\x2\x2\x43E\x43F\x3\x2\x2\x2\x43F\x440\aj\x2\x2\x440\x455");
		sb.Append("\x5N(\x2\x441\x442\a\x8C\x2\x2\x442\x455\x5N(\x2\x443\x444\a");
		sb.Append(".\x2\x2\x444\x445\a\x5\x2\x2\x445\x446\x5P)\x2\x446\x447\a\x6");
		sb.Append("\x2\x2\x447\x455\x3\x2\x2\x2\x448\x44F\a:\x2\x2\x449\x450\x5");
		sb.Append("t;\x2\x44A\x450\x5v<\x2\x44B\x44C\a\x5\x2\x2\x44C\x44D\x5P)");
		sb.Append("\x2\x44D\x44E\a\x6\x2\x2\x44E\x450\x3\x2\x2\x2\x44F\x449\x3");
		sb.Append("\x2\x2\x2\x44F\x44A\x3\x2\x2\x2\x44F\x44B\x3\x2\x2\x2\x450\x455");
		sb.Append("\x3\x2\x2\x2\x451\x452\a/\x2\x2\x452\x455\x5\x90I\x2\x453\x455");
		sb.Append("\x5R*\x2\x454\x433\x3\x2\x2\x2\x454\x43D\x3\x2\x2\x2\x454\x441");
		sb.Append("\x3\x2\x2\x2\x454\x443\x3\x2\x2\x2\x454\x448\x3\x2\x2\x2\x454");
		sb.Append("\x451\x3\x2\x2\x2\x454\x453\x3\x2\x2\x2\x455M\x3\x2\x2\x2\x456");
		sb.Append("\x457\am\x2\x2\x457\x458\a\x32\x2\x2\x458\x45A\t\b\x2\x2\x459");
		sb.Append("\x456\x3\x2\x2\x2\x459\x45A\x3\x2\x2\x2\x45AO\x3\x2\x2\x2\x45B");
		sb.Append("\x45C\b)\x1\x2\x45C\x4A8\x5v<\x2\x45D\x4A8\a\x99\x2\x2\x45E");
		sb.Append("\x45F\x5\x86\x44\x2\x45F\x460\a\x4\x2\x2\x460\x462\x3\x2\x2");
		sb.Append("\x2\x461\x45E\x3\x2\x2\x2\x461\x462\x3\x2\x2\x2\x462\x463\x3");
		sb.Append("\x2\x2\x2\x463\x464\x5\x88\x45\x2\x464\x465\a\x4\x2\x2\x465");
		sb.Append("\x467\x3\x2\x2\x2\x466\x461\x3\x2\x2\x2\x466\x467\x3\x2\x2\x2");
		sb.Append("\x467\x468\x3\x2\x2\x2\x468\x4A8\x5\x8EH\x2\x469\x46A\x5x=\x2");
		sb.Append("\x46A\x46B\x5P)\x17\x46B\x4A8\x3\x2\x2\x2\x46C\x46D\x5\x84\x43");
		sb.Append("\x2\x46D\x47A\a\x5\x2\x2\x46E\x470\a@\x2\x2\x46F\x46E\x3\x2");
		sb.Append("\x2\x2\x46F\x470\x3\x2\x2\x2\x470\x471\x3\x2\x2\x2\x471\x476");
		sb.Append("\x5P)\x2\x472\x473\a\a\x2\x2\x473\x475\x5P)\x2\x474\x472\x3");
		sb.Append("\x2\x2\x2\x475\x478\x3\x2\x2\x2\x476\x474\x3\x2\x2\x2\x476\x477");
		sb.Append("\x3\x2\x2\x2\x477\x47B\x3\x2\x2\x2\x478\x476\x3\x2\x2\x2\x479");
		sb.Append("\x47B\a\t\x2\x2\x47A\x46F\x3\x2\x2\x2\x47A\x479\x3\x2\x2\x2");
		sb.Append("\x47A\x47B\x3\x2\x2\x2\x47B\x47C\x3\x2\x2\x2\x47C\x47D\a\x6");
		sb.Append("\x2\x2\x47D\x4A8\x3\x2\x2\x2\x47E\x47F\a\x5\x2\x2\x47F\x480");
		sb.Append("\x5P)\x2\x480\x481\a\x6\x2\x2\x481\x4A8\x3\x2\x2\x2\x482\x483");
		sb.Append("\a-\x2\x2\x483\x484\a\x5\x2\x2\x484\x485\x5P)\x2\x485\x486\a");
		sb.Append("#\x2\x2\x486\x487\x5J&\x2\x487\x488\a\x6\x2\x2\x488\x4A8\x3");
		sb.Append("\x2\x2\x2\x489\x48B\ah\x2\x2\x48A\x489\x3\x2\x2\x2\x48A\x48B");
		sb.Append("\x3\x2\x2\x2\x48B\x48C\x3\x2\x2\x2\x48C\x48E\aH\x2\x2\x48D\x48A");
		sb.Append("\x3\x2\x2\x2\x48D\x48E\x3\x2\x2\x2\x48E\x48F\x3\x2\x2\x2\x48F");
		sb.Append("\x490\a\x5\x2\x2\x490\x491\x5> \x2\x491\x492\a\x6\x2\x2\x492");
		sb.Append("\x4A8\x3\x2\x2\x2\x493\x495\a,\x2\x2\x494\x496\x5P)\x2\x495");
		sb.Append("\x494\x3\x2\x2\x2\x495\x496\x3\x2\x2\x2\x496\x49C\x3\x2\x2\x2");
		sb.Append("\x497\x498\a\x93\x2\x2\x498\x499\x5P)\x2\x499\x49A\a\x87\x2");
		sb.Append("\x2\x49A\x49B\x5P)\x2\x49B\x49D\x3\x2\x2\x2\x49C\x497\x3\x2");
		sb.Append("\x2\x2\x49D\x49E\x3\x2\x2\x2\x49E\x49C\x3\x2\x2\x2\x49E\x49F");
		sb.Append("\x3\x2\x2\x2\x49F\x4A2\x3\x2\x2\x2\x4A0\x4A1\a\x43\x2\x2\x4A1");
		sb.Append("\x4A3\x5P)\x2\x4A2\x4A0\x3\x2\x2\x2\x4A2\x4A3\x3\x2\x2\x2\x4A3");
		sb.Append("\x4A4\x3\x2\x2\x2\x4A4\x4A5\a\x44\x2\x2\x4A5\x4A8\x3\x2\x2\x2");
		sb.Append("\x4A6\x4A8\x5T+\x2\x4A7\x45B\x3\x2\x2\x2\x4A7\x45D\x3\x2\x2");
		sb.Append("\x2\x4A7\x466\x3\x2\x2\x2\x4A7\x469\x3\x2\x2\x2\x4A7\x46C\x3");
		sb.Append("\x2\x2\x2\x4A7\x47E\x3\x2\x2\x2\x4A7\x482\x3\x2\x2\x2\x4A7\x48D");
		sb.Append("\x3\x2\x2\x2\x4A7\x493\x3\x2\x2\x2\x4A7\x4A6\x3\x2\x2\x2\x4A8");
		sb.Append("\x50D\x3\x2\x2\x2\x4A9\x4AA\f\x16\x2\x2\x4AA\x4AB\a\r\x2\x2");
		sb.Append("\x4AB\x50C\x5P)\x17\x4AC\x4AD\f\x15\x2\x2\x4AD\x4AE\t\t\x2\x2");
		sb.Append("\x4AE\x50C\x5P)\x16\x4AF\x4B0\f\x14\x2\x2\x4B0\x4B1\t\n\x2\x2");
		sb.Append("\x4B1\x50C\x5P)\x15\x4B2\x4B3\f\x13\x2\x2\x4B3\x4B4\t\v\x2\x2");
		sb.Append("\x4B4\x50C\x5P)\x14\x4B5\x4B6\f\x12\x2\x2\x4B6\x4B7\t\f\x2\x2");
		sb.Append("\x4B7\x50C\x5P)\x13\x4B8\x4C5\f\x11\x2\x2\x4B9\x4C6\a\b\x2\x2");
		sb.Append("\x4BA\x4C6\a\x18\x2\x2\x4BB\x4C6\a\x19\x2\x2\x4BC\x4C6\a\x1A");
		sb.Append("\x2\x2\x4BD\x4C6\a^\x2\x2\x4BE\x4BF\a^\x2\x2\x4BF\x4C6\ah\x2");
		sb.Append("\x2\x4C0\x4C6\aU\x2\x2\x4C1\x4C6\a\x63\x2\x2\x4C2\x4C6\aO\x2");
		sb.Append("\x2\x4C3\x4C6\a\x65\x2\x2\x4C4\x4C6\ax\x2\x2\x4C5\x4B9\x3\x2");
		sb.Append("\x2\x2\x4C5\x4BA\x3\x2\x2\x2\x4C5\x4BB\x3\x2\x2\x2\x4C5\x4BC");
		sb.Append("\x3\x2\x2\x2\x4C5\x4BD\x3\x2\x2\x2\x4C5\x4BE\x3\x2\x2\x2\x4C5");
		sb.Append("\x4C0\x3\x2\x2\x2\x4C5\x4C1\x3\x2\x2\x2\x4C5\x4C2\x3\x2\x2\x2");
		sb.Append("\x4C5\x4C3\x3\x2\x2\x2\x4C5\x4C4\x3\x2\x2\x2\x4C6\x4C7\x3\x2");
		sb.Append("\x2\x2\x4C7\x50C\x5P)\x12\x4C8\x4C9\f\x10\x2\x2\x4C9\x4CA\a");
		sb.Append("\"\x2\x2\x4CA\x50C\x5P)\x11\x4CB\x4CC\f\xF\x2\x2\x4CC\x4CD\a");
		sb.Append("n\x2\x2\x4CD\x50C\x5P)\x10\x4CE\x4CF\f\b\x2\x2\x4CF\x4D1\a^");
		sb.Append("\x2\x2\x4D0\x4D2\ah\x2\x2\x4D1\x4D0\x3\x2\x2\x2\x4D1\x4D2\x3");
		sb.Append("\x2\x2\x2\x4D2\x4D3\x3\x2\x2\x2\x4D3\x50C\x5P)\t\x4D4\x4D6\f");
		sb.Append("\a\x2\x2\x4D5\x4D7\ah\x2\x2\x4D6\x4D5\x3\x2\x2\x2\x4D6\x4D7");
		sb.Append("\x3\x2\x2\x2\x4D7\x4D8\x3\x2\x2\x2\x4D8\x4D9\a)\x2\x2\x4D9\x4DA");
		sb.Append("\x5P)\x2\x4DA\x4DB\a\"\x2\x2\x4DB\x4DC\x5P)\b\x4DC\x50C\x3\x2");
		sb.Append("\x2\x2\x4DD\x4DE\f\v\x2\x2\x4DE\x4DF\a/\x2\x2\x4DF\x50C\x5\x90");
		sb.Append("I\x2\x4E0\x4E2\f\n\x2\x2\x4E1\x4E3\ah\x2\x2\x4E2\x4E1\x3\x2");
		sb.Append("\x2\x2\x4E2\x4E3\x3\x2\x2\x2\x4E3\x4E4\x3\x2\x2\x2\x4E4\x4E5");
		sb.Append("\t\r\x2\x2\x4E5\x4E8\x5P)\x2\x4E6\x4E7\a\x45\x2\x2\x4E7\x4E9");
		sb.Append("\x5P)\x2\x4E8\x4E6\x3\x2\x2\x2\x4E8\x4E9\x3\x2\x2\x2\x4E9\x50C");
		sb.Append("\x3\x2\x2\x2\x4EA\x4EF\f\t\x2\x2\x4EB\x4F0\a_\x2\x2\x4EC\x4F0");
		sb.Append("\ai\x2\x2\x4ED\x4EE\ah\x2\x2\x4EE\x4F0\aj\x2\x2\x4EF\x4EB\x3");
		sb.Append("\x2\x2\x2\x4EF\x4EC\x3\x2\x2\x2\x4EF\x4ED\x3\x2\x2\x2\x4F0\x50C");
		sb.Append("\x3\x2\x2\x2\x4F1\x4F3\f\x6\x2\x2\x4F2\x4F4\ah\x2\x2\x4F3\x4F2");
		sb.Append("\x3\x2\x2\x2\x4F3\x4F4\x3\x2\x2\x2\x4F4\x4F5\x3\x2\x2\x2\x4F5");
		sb.Append("\x509\aU\x2\x2\x4F6\x500\a\x5\x2\x2\x4F7\x501\x5> \x2\x4F8\x4FD");
		sb.Append("\x5P)\x2\x4F9\x4FA\a\a\x2\x2\x4FA\x4FC\x5P)\x2\x4FB\x4F9\x3");
		sb.Append("\x2\x2\x2\x4FC\x4FF\x3\x2\x2\x2\x4FD\x4FB\x3\x2\x2\x2\x4FD\x4FE");
		sb.Append("\x3\x2\x2\x2\x4FE\x501\x3\x2\x2\x2\x4FF\x4FD\x3\x2\x2\x2\x500");
		sb.Append("\x4F7\x3\x2\x2\x2\x500\x4F8\x3\x2\x2\x2\x500\x501\x3\x2\x2\x2");
		sb.Append("\x501\x502\x3\x2\x2\x2\x502\x50A\a\x6\x2\x2\x503\x504\x5\x86");
		sb.Append("\x44\x2\x504\x505\a\x4\x2\x2\x505\x507\x3\x2\x2\x2\x506\x503");
		sb.Append("\x3\x2\x2\x2\x506\x507\x3\x2\x2\x2\x507\x508\x3\x2\x2\x2\x508");
		sb.Append("\x50A\x5\x88\x45\x2\x509\x4F6\x3\x2\x2\x2\x509\x506\x3\x2\x2");
		sb.Append("\x2\x50A\x50C\x3\x2\x2\x2\x50B\x4A9\x3\x2\x2\x2\x50B\x4AC\x3");
		sb.Append("\x2\x2\x2\x50B\x4AF\x3\x2\x2\x2\x50B\x4B2\x3\x2\x2\x2\x50B\x4B5");
		sb.Append("\x3\x2\x2\x2\x50B\x4B8\x3\x2\x2\x2\x50B\x4C8\x3\x2\x2\x2\x50B");
		sb.Append("\x4CB\x3\x2\x2\x2\x50B\x4CE\x3\x2\x2\x2\x50B\x4D4\x3\x2\x2\x2");
		sb.Append("\x50B\x4DD\x3\x2\x2\x2\x50B\x4E0\x3\x2\x2\x2\x50B\x4EA\x3\x2");
		sb.Append("\x2\x2\x50B\x4F1\x3\x2\x2\x2\x50C\x50F\x3\x2\x2\x2\x50D\x50B");
		sb.Append("\x3\x2\x2\x2\x50D\x50E\x3\x2\x2\x2\x50EQ\x3\x2\x2\x2\x50F\x50D");
		sb.Append("\x3\x2\x2\x2\x510\x511\aw\x2\x2\x511\x51D\x5\x92J\x2\x512\x513");
		sb.Append("\a\x5\x2\x2\x513\x518\x5\x8EH\x2\x514\x515\a\a\x2\x2\x515\x517");
		sb.Append("\x5\x8EH\x2\x516\x514\x3\x2\x2\x2\x517\x51A\x3\x2\x2\x2\x518");
		sb.Append("\x516\x3\x2\x2\x2\x518\x519\x3\x2\x2\x2\x519\x51B\x3\x2\x2\x2");
		sb.Append("\x51A\x518\x3\x2\x2\x2\x51B\x51C\a\x6\x2\x2\x51C\x51E\x3\x2");
		sb.Append("\x2\x2\x51D\x512\x3\x2\x2\x2\x51D\x51E\x3\x2\x2\x2\x51E\x531");
		sb.Append("\x3\x2\x2\x2\x51F\x520\am\x2\x2\x520\x529\t\xE\x2\x2\x521\x522");
		sb.Append("\a\x83\x2\x2\x522\x52A\aj\x2\x2\x523\x524\a\x83\x2\x2\x524\x52A");
		sb.Append("\a:\x2\x2\x525\x52A\a+\x2\x2\x526\x52A\a}\x2\x2\x527\x528\a");
		sb.Append("g\x2\x2\x528\x52A\a\x1C\x2\x2\x529\x521\x3\x2\x2\x2\x529\x523");
		sb.Append("\x3\x2\x2\x2\x529\x525\x3\x2\x2\x2\x529\x526\x3\x2\x2\x2\x529");
		sb.Append("\x527\x3\x2\x2\x2\x52A\x52E\x3\x2\x2\x2\x52B\x52C\a\x65\x2\x2");
		sb.Append("\x52C\x52E\x5\x82\x42\x2\x52D\x51F\x3\x2\x2\x2\x52D\x52B\x3");
		sb.Append("\x2\x2\x2\x52E\x530\x3\x2\x2\x2\x52F\x52D\x3\x2\x2\x2\x530\x533");
		sb.Append("\x3\x2\x2\x2\x531\x52F\x3\x2\x2\x2\x531\x532\x3\x2\x2\x2\x532");
		sb.Append("\x53E\x3\x2\x2\x2\x533\x531\x3\x2\x2\x2\x534\x536\ah\x2\x2\x535");
		sb.Append("\x534\x3\x2\x2\x2\x535\x536\x3\x2\x2\x2\x536\x537\x3\x2\x2\x2");
		sb.Append("\x537\x53C\a;\x2\x2\x538\x539\aX\x2\x2\x539\x53D\a<\x2\x2\x53A");
		sb.Append("\x53B\aX\x2\x2\x53B\x53D\aT\x2\x2\x53C\x538\x3\x2\x2\x2\x53C");
		sb.Append("\x53A\x3\x2\x2\x2\x53C\x53D\x3\x2\x2\x2\x53D\x53F\x3\x2\x2\x2");
		sb.Append("\x53E\x535\x3\x2\x2\x2\x53E\x53F\x3\x2\x2\x2\x53FS\x3\x2\x2");
		sb.Append("\x2\x540\x541\au\x2\x2\x541\x546\a\x5\x2\x2\x542\x547\aS\x2");
		sb.Append("\x2\x543\x544\t\xF\x2\x2\x544\x545\a\a\x2\x2\x545\x547\x5z>");
		sb.Append("\x2\x546\x542\x3\x2\x2\x2\x546\x543\x3\x2\x2\x2\x547\x548\x3");
		sb.Append("\x2\x2\x2\x548\x549\a\x6\x2\x2\x549U\x3\x2\x2\x2\x54A\x54D\x5");
		sb.Append("\x8EH\x2\x54B\x54C\a/\x2\x2\x54C\x54E\x5\x90I\x2\x54D\x54B\x3");
		sb.Append("\x2\x2\x2\x54D\x54E\x3\x2\x2\x2\x54E\x550\x3\x2\x2\x2\x54F\x551");
		sb.Append("\t\a\x2\x2\x550\x54F\x3\x2\x2\x2\x550\x551\x3\x2\x2\x2\x551");
		sb.Append("W\x3\x2\x2\x2\x552\x553\a\x33\x2\x2\x553\x555\x5\x82\x42\x2");
		sb.Append("\x554\x552\x3\x2\x2\x2\x554\x555\x3\x2\x2\x2\x555\x57A\x3\x2");
		sb.Append("\x2\x2\x556\x557\as\x2\x2\x557\x55A\a\x61\x2\x2\x558\x55A\a");
		sb.Append("\x8C\x2\x2\x559\x556\x3\x2\x2\x2\x559\x558\x3\x2\x2\x2\x55A");
		sb.Append("\x55B\x3\x2\x2\x2\x55B\x55C\a\x5\x2\x2\x55C\x561\x5V,\x2\x55D");
		sb.Append("\x55E\a\a\x2\x2\x55E\x560\x5V,\x2\x55F\x55D\x3\x2\x2\x2\x560");
		sb.Append("\x563\x3\x2\x2\x2\x561\x55F\x3\x2\x2\x2\x561\x562\x3\x2\x2\x2");
		sb.Append("\x562\x564\x3\x2\x2\x2\x563\x561\x3\x2\x2\x2\x564\x565\a\x6");
		sb.Append("\x2\x2\x565\x566\x5N(\x2\x566\x57B\x3\x2\x2\x2\x567\x568\a.");
		sb.Append("\x2\x2\x568\x569\a\x5\x2\x2\x569\x56A\x5P)\x2\x56A\x56B\a\x6");
		sb.Append("\x2\x2\x56B\x57B\x3\x2\x2\x2\x56C\x56D\aL\x2\x2\x56D\x56E\a");
		sb.Append("\x61\x2\x2\x56E\x56F\a\x5\x2\x2\x56F\x574\x5\x8EH\x2\x570\x571");
		sb.Append("\a\a\x2\x2\x571\x573\x5\x8EH\x2\x572\x570\x3\x2\x2\x2\x573\x576");
		sb.Append("\x3\x2\x2\x2\x574\x572\x3\x2\x2\x2\x574\x575\x3\x2\x2\x2\x575");
		sb.Append("\x577\x3\x2\x2\x2\x576\x574\x3\x2\x2\x2\x577\x578\a\x6\x2\x2");
		sb.Append("\x578\x579\x5R*\x2\x579\x57B\x3\x2\x2\x2\x57A\x559\x3\x2\x2");
		sb.Append("\x2\x57A\x567\x3\x2\x2\x2\x57A\x56C\x3\x2\x2\x2\x57BY\x3\x2");
		sb.Append("\x2\x2\x57C\x57E\a\x95\x2\x2\x57D\x57F\av\x2\x2\x57E\x57D\x3");
		sb.Append("\x2\x2\x2\x57E\x57F\x3\x2\x2\x2\x57F\x580\x3\x2\x2\x2\x580\x581");
		sb.Append("\x5r:\x2\x581\x582\a#\x2\x2\x582\x583\a\x5\x2\x2\x583\x584\x5");
		sb.Append("> \x2\x584\x58E\a\x6\x2\x2\x585\x586\a\a\x2\x2\x586\x587\x5");
		sb.Append("r:\x2\x587\x588\a#\x2\x2\x588\x589\a\x5\x2\x2\x589\x58A\x5>");
		sb.Append(" \x2\x58A\x58B\a\x6\x2\x2\x58B\x58D\x3\x2\x2\x2\x58C\x585\x3");
		sb.Append("\x2\x2\x2\x58D\x590\x3\x2\x2\x2\x58E\x58C\x3\x2\x2\x2\x58E\x58F");
		sb.Append("\x3\x2\x2\x2\x58F[\x3\x2\x2\x2\x590\x58E\x3\x2\x2\x2\x591\x592");
		sb.Append("\x5\x86\x44\x2\x592\x593\a\x4\x2\x2\x593\x595\x3\x2\x2\x2\x594");
		sb.Append("\x591\x3\x2\x2\x2\x594\x595\x3\x2\x2\x2\x595\x596\x3\x2\x2\x2");
		sb.Append("\x596\x59C\x5\x88\x45\x2\x597\x598\aW\x2\x2\x598\x599\a*\x2");
		sb.Append("\x2\x599\x59D\x5\x94K\x2\x59A\x59B\ah\x2\x2\x59B\x59D\aW\x2");
		sb.Append("\x2\x59C\x597\x3\x2\x2\x2\x59C\x59A\x3\x2\x2\x2\x59C\x59D\x3");
		sb.Append("\x2\x2\x2\x59D]\x3\x2\x2\x2\x59E\x5A1\x5P)\x2\x59F\x5A0\a/\x2");
		sb.Append("\x2\x5A0\x5A2\x5\x90I\x2\x5A1\x59F\x3\x2\x2\x2\x5A1\x5A2\x3");
		sb.Append("\x2\x2\x2\x5A2\x5A4\x3\x2\x2\x2\x5A3\x5A5\t\a\x2\x2\x5A4\x5A3");
		sb.Append("\x3\x2\x2\x2\x5A4\x5A5\x3\x2\x2\x2\x5A5_\x3\x2\x2\x2\x5A6\x5AA");
		sb.Append("\x5t;\x2\x5A7\x5AA\x5\x82\x42\x2\x5A8\x5AA\a\x9A\x2\x2\x5A9");
		sb.Append("\x5A6\x3\x2\x2\x2\x5A9\x5A7\x3\x2\x2\x2\x5A9\x5A8\x3\x2\x2\x2");
		sb.Append("\x5AA\x61\x3\x2\x2\x2\x5AB\x5B7\x5\x88\x45\x2\x5AC\x5AD\a\x5");
		sb.Append("\x2\x2\x5AD\x5B2\x5\x8EH\x2\x5AE\x5AF\a\a\x2\x2\x5AF\x5B1\x5");
		sb.Append("\x8EH\x2\x5B0\x5AE\x3\x2\x2\x2\x5B1\x5B4\x3\x2\x2\x2\x5B2\x5B0");
		sb.Append("\x3\x2\x2\x2\x5B2\x5B3\x3\x2\x2\x2\x5B3\x5B5\x3\x2\x2\x2\x5B4");
		sb.Append("\x5B2\x3\x2\x2\x2\x5B5\x5B6\a\x6\x2\x2\x5B6\x5B8\x3\x2\x2\x2");
		sb.Append("\x5B7\x5AC\x3\x2\x2\x2\x5B7\x5B8\x3\x2\x2\x2\x5B8\x5B9\x3\x2");
		sb.Append("\x2\x2\x5B9\x5BA\a#\x2\x2\x5BA\x5BB\a\x5\x2\x2\x5BB\x5BC\x5");
		sb.Append("> \x2\x5BC\x5BD\a\x6\x2\x2\x5BD\x63\x3\x2\x2\x2\x5BE\x5CB\a");
		sb.Append("\t\x2\x2\x5BF\x5C0\x5\x88\x45\x2\x5C0\x5C1\a\x4\x2\x2\x5C1\x5C2");
		sb.Append("\a\t\x2\x2\x5C2\x5CB\x3\x2\x2\x2\x5C3\x5C8\x5P)\x2\x5C4\x5C6");
		sb.Append("\a#\x2\x2\x5C5\x5C4\x3\x2\x2\x2\x5C5\x5C6\x3\x2\x2\x2\x5C6\x5C7");
		sb.Append("\x3\x2\x2\x2\x5C7\x5C9\x5~@\x2\x5C8\x5C5\x3\x2\x2\x2\x5C8\x5C9");
		sb.Append("\x3\x2\x2\x2\x5C9\x5CB\x3\x2\x2\x2\x5CA\x5BE\x3\x2\x2\x2\x5CA");
		sb.Append("\x5BF\x3\x2\x2\x2\x5CA\x5C3\x3\x2\x2\x2\x5CB\x65\x3\x2\x2\x2");
		sb.Append("\x5CC\x5CD\x5\x86\x44\x2\x5CD\x5CE\a\x4\x2\x2\x5CE\x5D0\x3\x2");
		sb.Append("\x2\x2\x5CF\x5CC\x3\x2\x2\x2\x5CF\x5D0\x3\x2\x2\x2\x5D0\x5D1");
		sb.Append("\x3\x2\x2\x2\x5D1\x5D6\x5\x88\x45\x2\x5D2\x5D4\a#\x2\x2\x5D3");
		sb.Append("\x5D2\x3\x2\x2\x2\x5D3\x5D4\x3\x2\x2\x2\x5D4\x5D5\x3\x2\x2\x2");
		sb.Append("\x5D5\x5D7\x5\xA0Q\x2\x5D6\x5D3\x3\x2\x2\x2\x5D6\x5D7\x3\x2");
		sb.Append("\x2\x2\x5D7\x5DD\x3\x2\x2\x2\x5D8\x5D9\aW\x2\x2\x5D9\x5DA\a");
		sb.Append("*\x2\x2\x5DA\x5DE\x5\x94K\x2\x5DB\x5DC\ah\x2\x2\x5DC\x5DE\a");
		sb.Append("W\x2\x2\x5DD\x5D8\x3\x2\x2\x2\x5DD\x5DB\x3\x2\x2\x2\x5DD\x5DE");
		sb.Append("\x3\x2\x2\x2\x5DE\x5FC\x3\x2\x2\x2\x5DF\x5E9\a\x5\x2\x2\x5E0");
		sb.Append("\x5E5\x5\x66\x34\x2\x5E1\x5E2\a\a\x2\x2\x5E2\x5E4\x5\x66\x34");
		sb.Append("\x2\x5E3\x5E1\x3\x2\x2\x2\x5E4\x5E7\x3\x2\x2\x2\x5E5\x5E3\x3");
		sb.Append("\x2\x2\x2\x5E5\x5E6\x3\x2\x2\x2\x5E6\x5EA\x3\x2\x2\x2\x5E7\x5E5");
		sb.Append("\x3\x2\x2\x2\x5E8\x5EA\x5h\x35\x2\x5E9\x5E0\x3\x2\x2\x2\x5E9");
		sb.Append("\x5E8\x3\x2\x2\x2\x5EA\x5EB\x3\x2\x2\x2\x5EB\x5F0\a\x6\x2\x2");
		sb.Append("\x5EC\x5EE\a#\x2\x2\x5ED\x5EC\x3\x2\x2\x2\x5ED\x5EE\x3\x2\x2");
		sb.Append("\x2\x5EE\x5EF\x3\x2\x2\x2\x5EF\x5F1\x5\xA0Q\x2\x5F0\x5ED\x3");
		sb.Append("\x2\x2\x2\x5F0\x5F1\x3\x2\x2\x2\x5F1\x5FC\x3\x2\x2\x2\x5F2\x5F3");
		sb.Append("\a\x5\x2\x2\x5F3\x5F4\x5> \x2\x5F4\x5F9\a\x6\x2\x2\x5F5\x5F7");
		sb.Append("\a#\x2\x2\x5F6\x5F5\x3\x2\x2\x2\x5F6\x5F7\x3\x2\x2\x2\x5F7\x5F8");
		sb.Append("\x3\x2\x2\x2\x5F8\x5FA\x5\xA0Q\x2\x5F9\x5F6\x3\x2\x2\x2\x5F9");
		sb.Append("\x5FA\x3\x2\x2\x2\x5FA\x5FC\x3\x2\x2\x2\x5FB\x5CF\x3\x2\x2\x2");
		sb.Append("\x5FB\x5DF\x3\x2\x2\x2\x5FB\x5F2\x3\x2\x2\x2\x5FCg\x3\x2\x2");
		sb.Append("\x2\x5FD\x604\x5\x66\x34\x2\x5FE\x5FF\x5j\x36\x2\x5FF\x600\x5");
		sb.Append("\x66\x34\x2\x600\x601\x5l\x37\x2\x601\x603\x3\x2\x2\x2\x602");
		sb.Append("\x5FE\x3\x2\x2\x2\x603\x606\x3\x2\x2\x2\x604\x602\x3\x2\x2\x2");
		sb.Append("\x604\x605\x3\x2\x2\x2\x605i\x3\x2\x2\x2\x606\x604\x3\x2\x2");
		sb.Append("\x2\x607\x615\a\a\x2\x2\x608\x60A\a\x66\x2\x2\x609\x608\x3\x2");
		sb.Append("\x2\x2\x609\x60A\x3\x2\x2\x2\x60A\x611\x3\x2\x2\x2\x60B\x60D");
		sb.Append("\a\x62\x2\x2\x60C\x60E\ap\x2\x2\x60D\x60C\x3\x2\x2\x2\x60D\x60E");
		sb.Append("\x3\x2\x2\x2\x60E\x612\x3\x2\x2\x2\x60F\x612\aY\x2\x2\x610\x612");
		sb.Append("\a\x35\x2\x2\x611\x60B\x3\x2\x2\x2\x611\x60F\x3\x2\x2\x2\x611");
		sb.Append("\x610\x3\x2\x2\x2\x611\x612\x3\x2\x2\x2\x612\x613\x3\x2\x2\x2");
		sb.Append("\x613\x615\a`\x2\x2\x614\x607\x3\x2\x2\x2\x614\x609\x3\x2\x2");
		sb.Append("\x2\x615k\x3\x2\x2\x2\x616\x617\am\x2\x2\x617\x625\x5P)\x2\x618");
		sb.Append("\x619\a\x8E\x2\x2\x619\x61A\a\x5\x2\x2\x61A\x61F\x5\x8EH\x2");
		sb.Append("\x61B\x61C\a\a\x2\x2\x61C\x61E\x5\x8EH\x2\x61D\x61B\x3\x2\x2");
		sb.Append("\x2\x61E\x621\x3\x2\x2\x2\x61F\x61D\x3\x2\x2\x2\x61F\x620\x3");
		sb.Append("\x2\x2\x2\x620\x622\x3\x2\x2\x2\x621\x61F\x3\x2\x2\x2\x622\x623");
		sb.Append("\a\x6\x2\x2\x623\x625\x3\x2\x2\x2\x624\x616\x3\x2\x2\x2\x624");
		sb.Append("\x618\x3\x2\x2\x2\x624\x625\x3\x2\x2\x2\x625m\x3\x2\x2\x2\x626");
		sb.Append("\x628\a\x82\x2\x2\x627\x629\t\x6\x2\x2\x628\x627\x3\x2\x2\x2");
		sb.Append("\x628\x629\x3\x2\x2\x2\x629\x62A\x3\x2\x2\x2\x62A\x62F\x5\x64");
		sb.Append("\x33\x2\x62B\x62C\a\a\x2\x2\x62C\x62E\x5\x64\x33\x2\x62D\x62B");
		sb.Append("\x3\x2\x2\x2\x62E\x631\x3\x2\x2\x2\x62F\x62D\x3\x2\x2\x2\x62F");
		sb.Append("\x630\x3\x2\x2\x2\x630\x63E\x3\x2\x2\x2\x631\x62F\x3\x2\x2\x2");
		sb.Append("\x632\x63C\aM\x2\x2\x633\x638\x5\x66\x34\x2\x634\x635\a\a\x2");
		sb.Append("\x2\x635\x637\x5\x66\x34\x2\x636\x634\x3\x2\x2\x2\x637\x63A");
		sb.Append("\x3\x2\x2\x2\x638\x636\x3\x2\x2\x2\x638\x639\x3\x2\x2\x2\x639");
		sb.Append("\x63D\x3\x2\x2\x2\x63A\x638\x3\x2\x2\x2\x63B\x63D\x5h\x35\x2");
		sb.Append("\x63C\x633\x3\x2\x2\x2\x63C\x63B\x3\x2\x2\x2\x63D\x63F\x3\x2");
		sb.Append("\x2\x2\x63E\x632\x3\x2\x2\x2\x63E\x63F\x3\x2\x2\x2\x63F\x642");
		sb.Append("\x3\x2\x2\x2\x640\x641\a\x94\x2\x2\x641\x643\x5P)\x2\x642\x640");
		sb.Append("\x3\x2\x2\x2\x642\x643\x3\x2\x2\x2\x643\x652\x3\x2\x2\x2\x644");
		sb.Append("\x645\aP\x2\x2\x645\x646\a*\x2\x2\x646\x64B\x5P)\x2\x647\x648");
		sb.Append("\a\a\x2\x2\x648\x64A\x5P)\x2\x649\x647\x3\x2\x2\x2\x64A\x64D");
		sb.Append("\x3\x2\x2\x2\x64B\x649\x3\x2\x2\x2\x64B\x64C\x3\x2\x2\x2\x64C");
		sb.Append("\x650\x3\x2\x2\x2\x64D\x64B\x3\x2\x2\x2\x64E\x64F\aQ\x2\x2\x64F");
		sb.Append("\x651\x5P)\x2\x650\x64E\x3\x2\x2\x2\x650\x651\x3\x2\x2\x2\x651");
		sb.Append("\x653\x3\x2\x2\x2\x652\x644\x3\x2\x2\x2\x652\x653\x3\x2\x2\x2");
		sb.Append("\x653\x671\x3\x2\x2\x2\x654\x655\a\x90\x2\x2\x655\x656\a\x5");
		sb.Append("\x2\x2\x656\x65B\x5P)\x2\x657\x658\a\a\x2\x2\x658\x65A\x5P)");
		sb.Append("\x2\x659\x657\x3\x2\x2\x2\x65A\x65D\x3\x2\x2\x2\x65B\x659\x3");
		sb.Append("\x2\x2\x2\x65B\x65C\x3\x2\x2\x2\x65C\x65E\x3\x2\x2\x2\x65D\x65B");
		sb.Append("\x3\x2\x2\x2\x65E\x66D\a\x6\x2\x2\x65F\x660\a\a\x2\x2\x660\x661");
		sb.Append("\a\x5\x2\x2\x661\x666\x5P)\x2\x662\x663\a\a\x2\x2\x663\x665");
		sb.Append("\x5P)\x2\x664\x662\x3\x2\x2\x2\x665\x668\x3\x2\x2\x2\x666\x664");
		sb.Append("\x3\x2\x2\x2\x666\x667\x3\x2\x2\x2\x667\x669\x3\x2\x2\x2\x668");
		sb.Append("\x666\x3\x2\x2\x2\x669\x66A\a\x6\x2\x2\x66A\x66C\x3\x2\x2\x2");
		sb.Append("\x66B\x65F\x3\x2\x2\x2\x66C\x66F\x3\x2\x2\x2\x66D\x66B\x3\x2");
		sb.Append("\x2\x2\x66D\x66E\x3\x2\x2\x2\x66E\x671\x3\x2\x2\x2\x66F\x66D");
		sb.Append("\x3\x2\x2\x2\x670\x626\x3\x2\x2\x2\x670\x654\x3\x2\x2\x2\x671");
		sb.Append("o\x3\x2\x2\x2\x672\x678\a\x8B\x2\x2\x673\x674\a\x8B\x2\x2\x674");
		sb.Append("\x678\a\x1F\x2\x2\x675\x678\a\\\x2\x2\x676\x678\a\x46\x2\x2");
		sb.Append("\x677\x672\x3\x2\x2\x2\x677\x673\x3\x2\x2\x2\x677\x675\x3\x2");
		sb.Append("\x2\x2\x677\x676\x3\x2\x2\x2\x678q\x3\x2\x2\x2\x679\x685\x5");
		sb.Append("\x88\x45\x2\x67A\x67B\a\x5\x2\x2\x67B\x680\x5\x8EH\x2\x67C\x67D");
		sb.Append("\a\a\x2\x2\x67D\x67F\x5\x8EH\x2\x67E\x67C\x3\x2\x2\x2\x67F\x682");
		sb.Append("\x3\x2\x2\x2\x680\x67E\x3\x2\x2\x2\x680\x681\x3\x2\x2\x2\x681");
		sb.Append("\x683\x3\x2\x2\x2\x682\x680\x3\x2\x2\x2\x683\x684\a\x6\x2\x2");
		sb.Append("\x684\x686\x3\x2\x2\x2\x685\x67A\x3\x2\x2\x2\x685\x686\x3\x2");
		sb.Append("\x2\x2\x686s\x3\x2\x2\x2\x687\x689\t\n\x2\x2\x688\x687\x3\x2");
		sb.Append("\x2\x2\x688\x689\x3\x2\x2\x2\x689\x68A\x3\x2\x2\x2\x68A\x68B");
		sb.Append("\a\x98\x2\x2\x68Bu\x3\x2\x2\x2\x68C\x68D\t\x10\x2\x2\x68Dw\x3");
		sb.Append("\x2\x2\x2\x68E\x68F\t\x11\x2\x2\x68Fy\x3\x2\x2\x2\x690\x691");
		sb.Append("\a\x9A\x2\x2\x691{\x3\x2\x2\x2\x692\x695\x5P)\x2\x693\x695\x5");
		sb.Append("H%\x2\x694\x692\x3\x2\x2\x2\x694\x693\x3\x2\x2\x2\x695}\x3\x2");
		sb.Append("\x2\x2\x696\x697\t\x12\x2\x2\x697\x7F\x3\x2\x2\x2\x698\x699");
		sb.Append("\t\x13\x2\x2\x699\x81\x3\x2\x2\x2\x69A\x69B\x5\xA4S\x2\x69B");
		sb.Append("\x83\x3\x2\x2\x2\x69C\x69D\x5\xA4S\x2\x69D\x85\x3\x2\x2\x2\x69E");
		sb.Append("\x69F\x5\xA4S\x2\x69F\x87\x3\x2\x2\x2\x6A0\x6A1\x5\xA4S\x2\x6A1");
		sb.Append("\x89\x3\x2\x2\x2\x6A2\x6A3\x5\xA4S\x2\x6A3\x8B\x3\x2\x2\x2\x6A4");
		sb.Append("\x6A5\x5\xA4S\x2\x6A5\x8D\x3\x2\x2\x2\x6A6\x6A7\x5\xA4S\x2\x6A7");
		sb.Append("\x8F\x3\x2\x2\x2\x6A8\x6A9\x5\xA4S\x2\x6A9\x91\x3\x2\x2\x2\x6AA");
		sb.Append("\x6AB\x5\xA4S\x2\x6AB\x93\x3\x2\x2\x2\x6AC\x6AD\x5\xA4S\x2\x6AD");
		sb.Append("\x95\x3\x2\x2\x2\x6AE\x6AF\x5\xA4S\x2\x6AF\x97\x3\x2\x2\x2\x6B0");
		sb.Append("\x6B1\x5\xA4S\x2\x6B1\x99\x3\x2\x2\x2\x6B2\x6B3\x5\xA4S\x2\x6B3");
		sb.Append("\x9B\x3\x2\x2\x2\x6B4\x6B5\x5\xA4S\x2\x6B5\x9D\x3\x2\x2\x2\x6B6");
		sb.Append("\x6B7\x5\xA4S\x2\x6B7\x9F\x3\x2\x2\x2\x6B8\x6B9\x5\xA4S\x2\x6B9");
		sb.Append("\xA1\x3\x2\x2\x2\x6BA\x6BB\x5\xA4S\x2\x6BB\xA3\x3\x2\x2\x2\x6BC");
		sb.Append("\x6C4\a\x97\x2\x2\x6BD\x6C4\x5\x80\x41\x2\x6BE\x6C4\a\x9A\x2");
		sb.Append("\x2\x6BF\x6C0\a\x5\x2\x2\x6C0\x6C1\x5\xA4S\x2\x6C1\x6C2\a\x6");
		sb.Append("\x2\x2\x6C2\x6C4\x3\x2\x2\x2\x6C3\x6BC\x3\x2\x2\x2\x6C3\x6BD");
		sb.Append("\x3\x2\x2\x2\x6C3\x6BE\x3\x2\x2\x2\x6C3\x6BF\x3\x2\x2\x2\x6C4");
		sb.Append("\xA5\x3\x2\x2\x2\xF6\xA8\xAA\xB5\xBC\xC1\xC7\xCD\xCF\xEF\xF6");
		sb.Append("\xFE\x101\x10A\x10E\x116\x11A\x11C\x121\x123\x127\x12E\x131");
		sb.Append("\x136\x13A\x13F\x148\x14B\x151\x153\x157\x15D\x162\x16D\x173");
		sb.Append("\x177\x17D\x182\x18B\x192\x198\x19C\x1A0\x1A6\x1AB\x1B2\x1BD");
		sb.Append("\x1C0\x1C2\x1C8\x1CE\x1D2\x1D9\x1DF\x1E5\x1EB\x1F0\x1FC\x201");
		sb.Append("\x20C\x211\x214\x21B\x21E\x225\x22E\x231\x237\x239\x23D\x245");
		sb.Append("\x24A\x252\x257\x25F\x264\x26C\x271\x277\x27E\x281\x289\x293");
		sb.Append("\x296\x29C\x29E\x2A1\x2B4\x2BA\x2C3\x2C8\x2D1\x2DC\x2E3\x2E9");
		sb.Append("\x2EF\x2F8\x2FF\x303\x305\x309\x310\x312\x316\x319\x320\x327");
		sb.Append("\x32A\x334\x337\x33D\x33F\x343\x34A\x34D\x355\x35F\x362\x368");
		sb.Append("\x36A\x36E\x375\x37E\x382\x384\x388\x391\x396\x398\x3A1\x3AC");
		sb.Append("\x3B3\x3B6\x3B9\x3C6\x3D4\x3D9\x3DC\x3E9\x3F7\x3FC\x405\x408");
		sb.Append("\x40E\x410\x416\x41B\x421\x42D\x431\x436\x43A\x43D\x44F\x454");
		sb.Append("\x459\x461\x466\x46F\x476\x47A\x48A\x48D\x495\x49E\x4A2\x4A7");
		sb.Append("\x4C5\x4D1\x4D6\x4E2\x4E8\x4EF\x4F3\x4FD\x500\x506\x509\x50B");
		sb.Append("\x50D\x518\x51D\x529\x52D\x531\x535\x53C\x53E\x546\x54D\x550");
		sb.Append("\x554\x559\x561\x574\x57A\x57E\x58E\x594\x59C\x5A1\x5A4\x5A9");
		sb.Append("\x5B2\x5B7\x5C5\x5C8\x5CA\x5CF\x5D3\x5D6\x5DD\x5E5\x5E9\x5ED");
		sb.Append("\x5F0\x5F6\x5F9\x5FB\x604\x609\x60D\x611\x614\x61F\x624\x628");
		sb.Append("\x62F\x638\x63C\x63E\x642\x64B\x650\x652\x65B\x666\x66D\x670");
		sb.Append("\x677\x680\x685\x688\x694\x6C3");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
