//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from tsql.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class tsqlParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ADD=1, ALL=2, ALTER=3, AND=4, ANY=5, AS=6, ASC=7, AUTHORIZATION=8, BACKUP=9, 
		BEGIN=10, BETWEEN=11, BREAK=12, BROWSE=13, BULK=14, BY=15, CASCADE=16, 
		CASE=17, CHANGETABLE=18, CHANGES=19, CHECK=20, CHECKPOINT=21, CLOSE=22, 
		CLUSTERED=23, COALESCE=24, COLLATE=25, COLUMN=26, COMMIT=27, COMPUTE=28, 
		CONSTRAINT=29, CONTAINS=30, CONTAINSTABLE=31, CONTINUE=32, CONVERT=33, 
		CREATE=34, CROSS=35, CURRENT=36, CURRENT_DATE=37, CURRENT_TIME=38, CURRENT_TIMESTAMP=39, 
		CURRENT_USER=40, CURSOR=41, DATABASE=42, DBCC=43, DEALLOCATE=44, DECLARE=45, 
		DEFAULT=46, DELETE=47, DENY=48, DESC=49, DISK=50, DISTINCT=51, DISTRIBUTED=52, 
		DOUBLE=53, DROP=54, DUMP=55, ELSE=56, END=57, ERRLVL=58, ESCAPE=59, EXCEPT=60, 
		EXEC=61, EXECUTE=62, EXISTS=63, EXIT=64, EXTERNAL=65, FETCH=66, FILE=67, 
		FILLFACTOR=68, FOR=69, FORCESEEK=70, FOREIGN=71, FREETEXT=72, FREETEXTTABLE=73, 
		FROM=74, FULL=75, FUNCTION=76, GOTO=77, GRANT=78, GROUP=79, HAVING=80, 
		IDENTITY=81, IDENTITYCOL=82, IDENTITY_INSERT=83, IF=84, IN=85, INDEX=86, 
		INNER=87, INSERT=88, INTERSECT=89, INTO=90, IS=91, JOIN=92, KEY=93, KILL=94, 
		LEFT=95, LIKE=96, LINENO=97, LOAD=98, MERGE=99, NATIONAL=100, NOCHECK=101, 
		NONCLUSTERED=102, NOT=103, NULL=104, NULLIF=105, OF=106, OFF=107, OFFSETS=108, 
		ON=109, OPEN=110, OPENDATASOURCE=111, OPENQUERY=112, OPENROWSET=113, OPENXML=114, 
		OPTION=115, OR=116, ORDER=117, OUTER=118, OVER=119, PERCENT=120, PIVOT=121, 
		PLAN=122, PRECISION=123, PRIMARY=124, PRINT=125, PROC=126, PROCEDURE=127, 
		PUBLIC=128, RAISERROR=129, READ=130, READTEXT=131, RECONFIGURE=132, REFERENCES=133, 
		REPLICATION=134, RESTORE=135, RESTRICT=136, RETURN=137, REVERT=138, REVOKE=139, 
		RIGHT=140, ROLLBACK=141, ROWCOUNT=142, ROWGUIDCOL=143, RULE=144, SAVE=145, 
		SCHEMA=146, SECURITYAUDIT=147, SELECT=148, SEMANTICKEYPHRASETABLE=149, 
		SEMANTICSIMILARITYDETAILSTABLE=150, SEMANTICSIMILARITYTABLE=151, SESSION_USER=152, 
		SET=153, SETUSER=154, SHUTDOWN=155, SOME=156, STATISTICS=157, SYSTEM_USER=158, 
		TABLE=159, TABLESAMPLE=160, TEXTSIZE=161, THEN=162, TO=163, TOP=164, TRAN=165, 
		TRANSACTION=166, TRIGGER=167, TRUNCATE=168, TRY_CONVERT=169, TSEQUAL=170, 
		UNION=171, UNIQUE=172, UNPIVOT=173, UPDATE=174, UPDATETEXT=175, USE=176, 
		USER=177, VALUES=178, VARYING=179, VIEW=180, WAITFOR=181, WHEN=182, WHERE=183, 
		WHILE=184, WITH=185, WITHIN=186, WRITETEXT=187, ABSOLUTE=188, APPLY=189, 
		AUTO=190, AVG=191, BASE64=192, BINARY_CHECKSUM=193, CALLER=194, CAST=195, 
		CATCH=196, CHECKSUM=197, CHECKSUM_AGG=198, COMMITTED=199, CONCAT=200, 
		COOKIE=201, COUNT=202, COUNT_BIG=203, DATEADD=204, DATEDIFF=205, DATENAME=206, 
		DATEPART=207, DELAY=208, DELETED=209, DENSE_RANK=210, DISABLE=211, DYNAMIC=212, 
		ENCRYPTION=213, EXPAND=214, FAST=215, FAST_FORWARD=216, FIRST=217, FORCE=218, 
		FORCED=219, FOLLOWING=220, FORWARD_ONLY=221, FULLSCAN=222, GLOBAL=223, 
		GO=224, GROUPING=225, GROUPING_ID=226, HASH=227, INSENSITIVE=228, INSERTED=229, 
		ISOLATION=230, KEEP=231, KEEPFIXED=232, IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX=233, 
		KEYSET=234, LAST=235, LEVEL=236, LOCAL=237, LOCK_ESCALATION=238, LOGIN=239, 
		LOOP=240, MARK=241, MAX=242, MAXDOP=243, MAXRECURSION=244, MIN=245, MIN_ACTIVE_ROWVERSION=246, 
		MODIFY=247, NEXT=248, NAME=249, NOCOUNT=250, NOEXPAND=251, NORECOMPUTE=252, 
		NTILE=253, NUMBER=254, OFFSET=255, ONLY=256, OPTIMISTIC=257, OPTIMIZE=258, 
		OUT=259, OUTPUT=260, OWNER=261, PARAMETERIZATION=262, PARTITION=263, PATH=264, 
		PRECEDING=265, PRIOR=266, RANGE=267, RANK=268, READONLY=269, READ_ONLY=270, 
		RECOMPILE=271, RELATIVE=272, REMOTE=273, REPEATABLE=274, ROBUST=275, ROOT=276, 
		ROW=277, ROWGUID=278, ROWS=279, ROW_NUMBER=280, SAMPLE=281, SCHEMABINDING=282, 
		SCROLL=283, SCROLL_LOCKS=284, SELF=285, SERIALIZABLE=286, SIMPLE=287, 
		SNAPSHOT=288, SPATIAL_WINDOW_MAX_CELLS=289, STATIC=290, STATS_STREAM=291, 
		STDEV=292, STDEVP=293, SUM=294, THROW=295, TIES=296, TIME=297, TRY=298, 
		TYPE=299, TYPE_WARNING=300, UNBOUNDED=301, UNCOMMITTED=302, UNKNOWN=303, 
		USING=304, VAR=305, VARP=306, VIEW_METADATA=307, VIEWS=308, WORK=309, 
		XML=310, XMLNAMESPACES=311, DOLLAR_ACTION=312, SPACE=313, COMMENT=314, 
		LINE_COMMENT=315, DOUBLE_QUOTE_ID=316, SQUARE_BRACKET_ID=317, LOCAL_ID=318, 
		DECIMAL=319, ID=320, STRING=321, BINARY=322, FLOAT=323, REAL=324, EQUAL=325, 
		GREATER=326, LESS=327, EXCLAMATION=328, PLUS_ASSIGN=329, MINUS_ASSIGN=330, 
		MULT_ASSIGN=331, DIV_ASSIGN=332, MOD_ASSIGN=333, AND_ASSIGN=334, XOR_ASSIGN=335, 
		OR_ASSIGN=336, DOT=337, UNDERLINE=338, AT=339, SHARP=340, DOLLAR=341, 
		LR_BRACKET=342, RR_BRACKET=343, COMMA=344, SEMI=345, COLON=346, STAR=347, 
		DIVIDE=348, MODULE=349, PLUS=350, MINUS=351, BIT_NOT=352, BIT_OR=353, 
		BIT_AND=354, BIT_XOR=355;
	public const int
		RULE_tsql_file = 0, RULE_sql_clause = 1, RULE_dml_clause = 2, RULE_ddl_clause = 3, 
		RULE_cfl_statement = 4, RULE_another_statement = 5, RULE_delete_statement = 6, 
		RULE_insert_statement = 7, RULE_select_statement = 8, RULE_update_statement = 9, 
		RULE_output_clause = 10, RULE_output_dml_list_elem = 11, RULE_output_column_name = 12, 
		RULE_create_index = 13, RULE_create_procedure = 14, RULE_procedure_param = 15, 
		RULE_procedure_option = 16, RULE_create_statistics = 17, RULE_create_table = 18, 
		RULE_create_view = 19, RULE_view_attribute = 20, RULE_alter_table = 21, 
		RULE_alter_database = 22, RULE_database_option = 23, RULE_drop_index = 24, 
		RULE_drop_procedure = 25, RULE_drop_statistics = 26, RULE_drop_table = 27, 
		RULE_drop_view = 28, RULE_rowset_function_limited = 29, RULE_openquery = 30, 
		RULE_opendatasource = 31, RULE_declare_statement = 32, RULE_cursor_statement = 33, 
		RULE_execute_statement = 34, RULE_execute_statement_arg = 35, RULE_execute_var_string = 36, 
		RULE_security_statement = 37, RULE_set_statment = 38, RULE_transaction_statement = 39, 
		RULE_go_statement = 40, RULE_use_statement = 41, RULE_execute_clause = 42, 
		RULE_declare_local = 43, RULE_table_type_definition = 44, RULE_column_def_table_constraint = 45, 
		RULE_column_definition = 46, RULE_column_constraint = 47, RULE_table_constraint = 48, 
		RULE_index_options = 49, RULE_index_option = 50, RULE_declare_cursor = 51, 
		RULE_declare_set_cursor_common = 52, RULE_fetch_cursor = 53, RULE_set_special = 54, 
		RULE_expression = 55, RULE_constant_expression = 56, RULE_subquery = 57, 
		RULE_with_expression = 58, RULE_common_table_expression = 59, RULE_update_elem = 60, 
		RULE_search_condition_list = 61, RULE_search_condition = 62, RULE_search_condition_or = 63, 
		RULE_search_condition_not = 64, RULE_predicate = 65, RULE_query_expression = 66, 
		RULE_union = 67, RULE_query_specification = 68, RULE_order_by_clause = 69, 
		RULE_for_clause = 70, RULE_xml_common_directives = 71, RULE_order_by_expression = 72, 
		RULE_group_by_item = 73, RULE_option_clause = 74, RULE_option = 75, RULE_optimize_for_arg = 76, 
		RULE_select_list = 77, RULE_select_list_elem = 78, RULE_partition_by_clause = 79, 
		RULE_table_source = 80, RULE_table_source_item_joined = 81, RULE_table_source_item = 82, 
		RULE_change_table = 83, RULE_join_part = 84, RULE_table_name_with_hint = 85, 
		RULE_rowset_function = 86, RULE_bulk_option = 87, RULE_derived_table = 88, 
		RULE_function_call = 89, RULE_datepart = 90, RULE_as_table_alias = 91, 
		RULE_table_alias = 92, RULE_with_table_hints = 93, RULE_insert_with_table_hints = 94, 
		RULE_table_hint = 95, RULE_index_column_name = 96, RULE_index_value = 97, 
		RULE_column_alias_list = 98, RULE_column_alias = 99, RULE_expression_list = 100, 
		RULE_case_expr = 101, RULE_ranking_windowed_function = 102, RULE_aggregate_windowed_function = 103, 
		RULE_all_distinct_expression = 104, RULE_over_clause = 105, RULE_row_or_range_clause = 106, 
		RULE_window_frame_extent = 107, RULE_window_frame_bound = 108, RULE_window_frame_preceding = 109, 
		RULE_window_frame_following = 110, RULE_full_table_name = 111, RULE_table_name = 112, 
		RULE_view_name = 113, RULE_func_proc_name = 114, RULE_ddl_object = 115, 
		RULE_full_column_name = 116, RULE_column_name_list = 117, RULE_column_name = 118, 
		RULE_cursor_name = 119, RULE_on_off = 120, RULE_clustered = 121, RULE_null_notnull = 122, 
		RULE_scalar_function_name = 123, RULE_data_type = 124, RULE_default_value = 125, 
		RULE_constant = 126, RULE_number = 127, RULE_sign = 128, RULE_id = 129, 
		RULE_simple_id = 130, RULE_comparison_operator = 131, RULE_assignment_operator = 132;
	public static readonly string[] ruleNames = {
		"tsql_file", "sql_clause", "dml_clause", "ddl_clause", "cfl_statement", 
		"another_statement", "delete_statement", "insert_statement", "select_statement", 
		"update_statement", "output_clause", "output_dml_list_elem", "output_column_name", 
		"create_index", "create_procedure", "procedure_param", "procedure_option", 
		"create_statistics", "create_table", "create_view", "view_attribute", 
		"alter_table", "alter_database", "database_option", "drop_index", "drop_procedure", 
		"drop_statistics", "drop_table", "drop_view", "rowset_function_limited", 
		"openquery", "opendatasource", "declare_statement", "cursor_statement", 
		"execute_statement", "execute_statement_arg", "execute_var_string", "security_statement", 
		"set_statment", "transaction_statement", "go_statement", "use_statement", 
		"execute_clause", "declare_local", "table_type_definition", "column_def_table_constraint", 
		"column_definition", "column_constraint", "table_constraint", "index_options", 
		"index_option", "declare_cursor", "declare_set_cursor_common", "fetch_cursor", 
		"set_special", "expression", "constant_expression", "subquery", "with_expression", 
		"common_table_expression", "update_elem", "search_condition_list", "search_condition", 
		"search_condition_or", "search_condition_not", "predicate", "query_expression", 
		"union", "query_specification", "order_by_clause", "for_clause", "xml_common_directives", 
		"order_by_expression", "group_by_item", "option_clause", "option", "optimize_for_arg", 
		"select_list", "select_list_elem", "partition_by_clause", "table_source", 
		"table_source_item_joined", "table_source_item", "change_table", "join_part", 
		"table_name_with_hint", "rowset_function", "bulk_option", "derived_table", 
		"function_call", "datepart", "as_table_alias", "table_alias", "with_table_hints", 
		"insert_with_table_hints", "table_hint", "index_column_name", "index_value", 
		"column_alias_list", "column_alias", "expression_list", "case_expr", "ranking_windowed_function", 
		"aggregate_windowed_function", "all_distinct_expression", "over_clause", 
		"row_or_range_clause", "window_frame_extent", "window_frame_bound", "window_frame_preceding", 
		"window_frame_following", "full_table_name", "table_name", "view_name", 
		"func_proc_name", "ddl_object", "full_column_name", "column_name_list", 
		"column_name", "cursor_name", "on_off", "clustered", "null_notnull", "scalar_function_name", 
		"data_type", "default_value", "constant", "number", "sign", "id", "simple_id", 
		"comparison_operator", "assignment_operator"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "'='", "'>'", "'<'", "'!'", "'+='", "'-='", "'*='", "'/='", "'%='", 
		"'&='", "'^='", "'|='", "'.'", "'_'", "'@'", "'#'", "'$'", "'('", "')'", 
		"','", "';'", "':'", "'*'", "'/'", "'%'", "'+'", "'-'", "'~'", "'|'", 
		"'&'", "'^'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ADD", "ALL", "ALTER", "AND", "ANY", "AS", "ASC", "AUTHORIZATION", 
		"BACKUP", "BEGIN", "BETWEEN", "BREAK", "BROWSE", "BULK", "BY", "CASCADE", 
		"CASE", "CHANGETABLE", "CHANGES", "CHECK", "CHECKPOINT", "CLOSE", "CLUSTERED", 
		"COALESCE", "COLLATE", "COLUMN", "COMMIT", "COMPUTE", "CONSTRAINT", "CONTAINS", 
		"CONTAINSTABLE", "CONTINUE", "CONVERT", "CREATE", "CROSS", "CURRENT", 
		"CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", "CURSOR", 
		"DATABASE", "DBCC", "DEALLOCATE", "DECLARE", "DEFAULT", "DELETE", "DENY", 
		"DESC", "DISK", "DISTINCT", "DISTRIBUTED", "DOUBLE", "DROP", "DUMP", "ELSE", 
		"END", "ERRLVL", "ESCAPE", "EXCEPT", "EXEC", "EXECUTE", "EXISTS", "EXIT", 
		"EXTERNAL", "FETCH", "FILE", "FILLFACTOR", "FOR", "FORCESEEK", "FOREIGN", 
		"FREETEXT", "FREETEXTTABLE", "FROM", "FULL", "FUNCTION", "GOTO", "GRANT", 
		"GROUP", "HAVING", "IDENTITY", "IDENTITYCOL", "IDENTITY_INSERT", "IF", 
		"IN", "INDEX", "INNER", "INSERT", "INTERSECT", "INTO", "IS", "JOIN", "KEY", 
		"KILL", "LEFT", "LIKE", "LINENO", "LOAD", "MERGE", "NATIONAL", "NOCHECK", 
		"NONCLUSTERED", "NOT", "NULL", "NULLIF", "OF", "OFF", "OFFSETS", "ON", 
		"OPEN", "OPENDATASOURCE", "OPENQUERY", "OPENROWSET", "OPENXML", "OPTION", 
		"OR", "ORDER", "OUTER", "OVER", "PERCENT", "PIVOT", "PLAN", "PRECISION", 
		"PRIMARY", "PRINT", "PROC", "PROCEDURE", "PUBLIC", "RAISERROR", "READ", 
		"READTEXT", "RECONFIGURE", "REFERENCES", "REPLICATION", "RESTORE", "RESTRICT", 
		"RETURN", "REVERT", "REVOKE", "RIGHT", "ROLLBACK", "ROWCOUNT", "ROWGUIDCOL", 
		"RULE", "SAVE", "SCHEMA", "SECURITYAUDIT", "SELECT", "SEMANTICKEYPHRASETABLE", 
		"SEMANTICSIMILARITYDETAILSTABLE", "SEMANTICSIMILARITYTABLE", "SESSION_USER", 
		"SET", "SETUSER", "SHUTDOWN", "SOME", "STATISTICS", "SYSTEM_USER", "TABLE", 
		"TABLESAMPLE", "TEXTSIZE", "THEN", "TO", "TOP", "TRAN", "TRANSACTION", 
		"TRIGGER", "TRUNCATE", "TRY_CONVERT", "TSEQUAL", "UNION", "UNIQUE", "UNPIVOT", 
		"UPDATE", "UPDATETEXT", "USE", "USER", "VALUES", "VARYING", "VIEW", "WAITFOR", 
		"WHEN", "WHERE", "WHILE", "WITH", "WITHIN", "WRITETEXT", "ABSOLUTE", "APPLY", 
		"AUTO", "AVG", "BASE64", "BINARY_CHECKSUM", "CALLER", "CAST", "CATCH", 
		"CHECKSUM", "CHECKSUM_AGG", "COMMITTED", "CONCAT", "COOKIE", "COUNT", 
		"COUNT_BIG", "DATEADD", "DATEDIFF", "DATENAME", "DATEPART", "DELAY", "DELETED", 
		"DENSE_RANK", "DISABLE", "DYNAMIC", "ENCRYPTION", "EXPAND", "FAST", "FAST_FORWARD", 
		"FIRST", "FORCE", "FORCED", "FOLLOWING", "FORWARD_ONLY", "FULLSCAN", "GLOBAL", 
		"GO", "GROUPING", "GROUPING_ID", "HASH", "INSENSITIVE", "INSERTED", "ISOLATION", 
		"KEEP", "KEEPFIXED", "IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX", "KEYSET", 
		"LAST", "LEVEL", "LOCAL", "LOCK_ESCALATION", "LOGIN", "LOOP", "MARK", 
		"MAX", "MAXDOP", "MAXRECURSION", "MIN", "MIN_ACTIVE_ROWVERSION", "MODIFY", 
		"NEXT", "NAME", "NOCOUNT", "NOEXPAND", "NORECOMPUTE", "NTILE", "NUMBER", 
		"OFFSET", "ONLY", "OPTIMISTIC", "OPTIMIZE", "OUT", "OUTPUT", "OWNER", 
		"PARAMETERIZATION", "PARTITION", "PATH", "PRECEDING", "PRIOR", "RANGE", 
		"RANK", "READONLY", "READ_ONLY", "RECOMPILE", "RELATIVE", "REMOTE", "REPEATABLE", 
		"ROBUST", "ROOT", "ROW", "ROWGUID", "ROWS", "ROW_NUMBER", "SAMPLE", "SCHEMABINDING", 
		"SCROLL", "SCROLL_LOCKS", "SELF", "SERIALIZABLE", "SIMPLE", "SNAPSHOT", 
		"SPATIAL_WINDOW_MAX_CELLS", "STATIC", "STATS_STREAM", "STDEV", "STDEVP", 
		"SUM", "THROW", "TIES", "TIME", "TRY", "TYPE", "TYPE_WARNING", "UNBOUNDED", 
		"UNCOMMITTED", "UNKNOWN", "USING", "VAR", "VARP", "VIEW_METADATA", "VIEWS", 
		"WORK", "XML", "XMLNAMESPACES", "DOLLAR_ACTION", "SPACE", "COMMENT", "LINE_COMMENT", 
		"DOUBLE_QUOTE_ID", "SQUARE_BRACKET_ID", "LOCAL_ID", "DECIMAL", "ID", "STRING", 
		"BINARY", "FLOAT", "REAL", "EQUAL", "GREATER", "LESS", "EXCLAMATION", 
		"PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
		"AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "DOT", "UNDERLINE", "AT", "SHARP", 
		"DOLLAR", "LR_BRACKET", "RR_BRACKET", "COMMA", "SEMI", "COLON", "STAR", 
		"DIVIDE", "MODULE", "PLUS", "MINUS", "BIT_NOT", "BIT_OR", "BIT_AND", "BIT_XOR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "tsql.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static tsqlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

	public tsqlParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class Tsql_fileContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(tsqlParser.Eof, 0); }
		public Sql_clauseContext[] sql_clause() {
			return GetRuleContexts<Sql_clauseContext>();
		}
		public Sql_clauseContext sql_clause(int i) {
			return GetRuleContext<Sql_clauseContext>(i);
		}
		public Tsql_fileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsql_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterTsql_file(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitTsql_file(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTsql_file(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tsql_fileContext tsql_file() {
		Tsql_fileContext _localctx = new Tsql_fileContext(Context, State);
		EnterRule(_localctx, 0, RULE_tsql_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALTER) | (1L << BEGIN) | (1L << BREAK) | (1L << CLOSE) | (1L << COMMIT) | (1L << CONTINUE) | (1L << CREATE) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DELETE) | (1L << DROP) | (1L << EXEC) | (1L << EXECUTE))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (FETCH - 66)) | (1L << (FORCESEEK - 66)) | (1L << (GOTO - 66)) | (1L << (IF - 66)) | (1L << (INSERT - 66)) | (1L << (OPEN - 66)) | (1L << (PRINT - 66)) | (1L << (RAISERROR - 66)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (RETURN - 137)) | (1L << (REVERT - 137)) | (1L << (ROLLBACK - 137)) | (1L << (SAVE - 137)) | (1L << (SELECT - 137)) | (1L << (SET - 137)) | (1L << (UPDATE - 137)) | (1L << (USE - 137)) | (1L << (WAITFOR - 137)) | (1L << (WHILE - 137)) | (1L << (WITH - 137)) | (1L << (ABSOLUTE - 137)) | (1L << (APPLY - 137)) | (1L << (AUTO - 137)) | (1L << (AVG - 137)) | (1L << (BASE64 - 137)) | (1L << (CALLER - 137)) | (1L << (CAST - 137)) | (1L << (CATCH - 137)) | (1L << (CHECKSUM_AGG - 137)) | (1L << (COMMITTED - 137)) | (1L << (CONCAT - 137)))) != 0) || ((((_la - 201)) & ~0x3f) == 0 && ((1L << (_la - 201)) & ((1L << (COOKIE - 201)) | (1L << (COUNT - 201)) | (1L << (COUNT_BIG - 201)) | (1L << (DELAY - 201)) | (1L << (DELETED - 201)) | (1L << (DENSE_RANK - 201)) | (1L << (DISABLE - 201)) | (1L << (DYNAMIC - 201)) | (1L << (ENCRYPTION - 201)) | (1L << (EXPAND - 201)) | (1L << (FAST - 201)) | (1L << (FAST_FORWARD - 201)) | (1L << (FIRST - 201)) | (1L << (FORCE - 201)) | (1L << (FORCED - 201)) | (1L << (FOLLOWING - 201)) | (1L << (FORWARD_ONLY - 201)) | (1L << (FULLSCAN - 201)) | (1L << (GLOBAL - 201)) | (1L << (GO - 201)) | (1L << (GROUPING - 201)) | (1L << (GROUPING_ID - 201)) | (1L << (HASH - 201)) | (1L << (INSENSITIVE - 201)) | (1L << (INSERTED - 201)) | (1L << (ISOLATION - 201)) | (1L << (KEEP - 201)) | (1L << (KEEPFIXED - 201)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 201)) | (1L << (KEYSET - 201)) | (1L << (LAST - 201)) | (1L << (LEVEL - 201)) | (1L << (LOCAL - 201)) | (1L << (LOCK_ESCALATION - 201)) | (1L << (LOGIN - 201)) | (1L << (LOOP - 201)) | (1L << (MARK - 201)) | (1L << (MAX - 201)) | (1L << (MAXDOP - 201)) | (1L << (MAXRECURSION - 201)) | (1L << (MIN - 201)) | (1L << (MODIFY - 201)) | (1L << (NEXT - 201)) | (1L << (NAME - 201)) | (1L << (NOCOUNT - 201)) | (1L << (NOEXPAND - 201)) | (1L << (NORECOMPUTE - 201)) | (1L << (NTILE - 201)) | (1L << (NUMBER - 201)) | (1L << (OFFSET - 201)) | (1L << (ONLY - 201)) | (1L << (OPTIMISTIC - 201)) | (1L << (OPTIMIZE - 201)) | (1L << (OUT - 201)) | (1L << (OUTPUT - 201)) | (1L << (OWNER - 201)) | (1L << (PARAMETERIZATION - 201)) | (1L << (PARTITION - 201)) | (1L << (PATH - 201)))) != 0) || ((((_la - 265)) & ~0x3f) == 0 && ((1L << (_la - 265)) & ((1L << (PRECEDING - 265)) | (1L << (PRIOR - 265)) | (1L << (RANGE - 265)) | (1L << (RANK - 265)) | (1L << (READONLY - 265)) | (1L << (READ_ONLY - 265)) | (1L << (RECOMPILE - 265)) | (1L << (RELATIVE - 265)) | (1L << (REMOTE - 265)) | (1L << (REPEATABLE - 265)) | (1L << (ROBUST - 265)) | (1L << (ROOT - 265)) | (1L << (ROW - 265)) | (1L << (ROWGUID - 265)) | (1L << (ROWS - 265)) | (1L << (ROW_NUMBER - 265)) | (1L << (SAMPLE - 265)) | (1L << (SCHEMABINDING - 265)) | (1L << (SCROLL - 265)) | (1L << (SCROLL_LOCKS - 265)) | (1L << (SELF - 265)) | (1L << (SERIALIZABLE - 265)) | (1L << (SIMPLE - 265)) | (1L << (SNAPSHOT - 265)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 265)) | (1L << (STATIC - 265)) | (1L << (STATS_STREAM - 265)) | (1L << (STDEV - 265)) | (1L << (STDEVP - 265)) | (1L << (SUM - 265)) | (1L << (THROW - 265)) | (1L << (TIES - 265)) | (1L << (TIME - 265)) | (1L << (TRY - 265)) | (1L << (TYPE - 265)) | (1L << (TYPE_WARNING - 265)) | (1L << (UNBOUNDED - 265)) | (1L << (UNCOMMITTED - 265)) | (1L << (UNKNOWN - 265)) | (1L << (USING - 265)) | (1L << (VAR - 265)) | (1L << (VARP - 265)) | (1L << (VIEW_METADATA - 265)) | (1L << (VIEWS - 265)) | (1L << (WORK - 265)) | (1L << (XML - 265)) | (1L << (XMLNAMESPACES - 265)) | (1L << (DOUBLE_QUOTE_ID - 265)) | (1L << (SQUARE_BRACKET_ID - 265)) | (1L << (ID - 265)))) != 0) || _la==LR_BRACKET) {
				{
				{
				State = 266; sql_clause();
				}
				}
				State = 271;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 272; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_clauseContext : ParserRuleContext {
		public Dml_clauseContext dml_clause() {
			return GetRuleContext<Dml_clauseContext>(0);
		}
		public Ddl_clauseContext ddl_clause() {
			return GetRuleContext<Ddl_clauseContext>(0);
		}
		public Cfl_statementContext cfl_statement() {
			return GetRuleContext<Cfl_statementContext>(0);
		}
		public Another_statementContext another_statement() {
			return GetRuleContext<Another_statementContext>(0);
		}
		public Sql_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSql_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSql_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sql_clauseContext sql_clause() {
		Sql_clauseContext _localctx = new Sql_clauseContext(Context, State);
		EnterRule(_localctx, 2, RULE_sql_clause);
		try {
			State = 278;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 274; dml_clause();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 275; ddl_clause();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 276; cfl_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 277; another_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dml_clauseContext : ParserRuleContext {
		public Delete_statementContext delete_statement() {
			return GetRuleContext<Delete_statementContext>(0);
		}
		public Insert_statementContext insert_statement() {
			return GetRuleContext<Insert_statementContext>(0);
		}
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public Update_statementContext update_statement() {
			return GetRuleContext<Update_statementContext>(0);
		}
		public Dml_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dml_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDml_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDml_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDml_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dml_clauseContext dml_clause() {
		Dml_clauseContext _localctx = new Dml_clauseContext(Context, State);
		EnterRule(_localctx, 4, RULE_dml_clause);
		try {
			State = 284;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 280; delete_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 281; insert_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 282; select_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 283; update_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ddl_clauseContext : ParserRuleContext {
		public Create_indexContext create_index() {
			return GetRuleContext<Create_indexContext>(0);
		}
		public Create_procedureContext create_procedure() {
			return GetRuleContext<Create_procedureContext>(0);
		}
		public Create_statisticsContext create_statistics() {
			return GetRuleContext<Create_statisticsContext>(0);
		}
		public Create_tableContext create_table() {
			return GetRuleContext<Create_tableContext>(0);
		}
		public Create_viewContext create_view() {
			return GetRuleContext<Create_viewContext>(0);
		}
		public Alter_tableContext alter_table() {
			return GetRuleContext<Alter_tableContext>(0);
		}
		public Alter_databaseContext alter_database() {
			return GetRuleContext<Alter_databaseContext>(0);
		}
		public Drop_indexContext drop_index() {
			return GetRuleContext<Drop_indexContext>(0);
		}
		public Drop_procedureContext drop_procedure() {
			return GetRuleContext<Drop_procedureContext>(0);
		}
		public Drop_statisticsContext drop_statistics() {
			return GetRuleContext<Drop_statisticsContext>(0);
		}
		public Drop_tableContext drop_table() {
			return GetRuleContext<Drop_tableContext>(0);
		}
		public Drop_viewContext drop_view() {
			return GetRuleContext<Drop_viewContext>(0);
		}
		public Ddl_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ddl_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDdl_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDdl_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDdl_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ddl_clauseContext ddl_clause() {
		Ddl_clauseContext _localctx = new Ddl_clauseContext(Context, State);
		EnterRule(_localctx, 6, RULE_ddl_clause);
		try {
			State = 298;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 286; create_index();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 287; create_procedure();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 288; create_statistics();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 289; create_table();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 290; create_view();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 291; alter_table();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 292; alter_database();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 293; drop_index();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 294; drop_procedure();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 295; drop_statistics();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 296; drop_table();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 297; drop_view();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cfl_statementContext : ParserRuleContext {
		public Cfl_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cfl_statement; } }
	 
		public Cfl_statementContext() { }
		public virtual void CopyFrom(Cfl_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Waitfor_statementContext : Cfl_statementContext {
		public ITerminalNode WAITFOR() { return GetToken(tsqlParser.WAITFOR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode DELAY() { return GetToken(tsqlParser.DELAY, 0); }
		public ITerminalNode TIME() { return GetToken(tsqlParser.TIME, 0); }
		public Waitfor_statementContext(Cfl_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterWaitfor_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitWaitfor_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWaitfor_statement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Print_statementContext : Cfl_statementContext {
		public ITerminalNode PRINT() { return GetToken(tsqlParser.PRINT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Print_statementContext(Cfl_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterPrint_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitPrint_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint_statement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Continue_statementContext : Cfl_statementContext {
		public ITerminalNode CONTINUE() { return GetToken(tsqlParser.CONTINUE, 0); }
		public Continue_statementContext(Cfl_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterContinue_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitContinue_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinue_statement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Begin_statementContext : Cfl_statementContext {
		public ITerminalNode BEGIN() { return GetToken(tsqlParser.BEGIN, 0); }
		public ITerminalNode END() { return GetToken(tsqlParser.END, 0); }
		public Sql_clauseContext[] sql_clause() {
			return GetRuleContexts<Sql_clauseContext>();
		}
		public Sql_clauseContext sql_clause(int i) {
			return GetRuleContext<Sql_clauseContext>(i);
		}
		public Begin_statementContext(Cfl_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterBegin_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitBegin_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBegin_statement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class If_statementContext : Cfl_statementContext {
		public ITerminalNode IF() { return GetToken(tsqlParser.IF, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Sql_clauseContext[] sql_clause() {
			return GetRuleContexts<Sql_clauseContext>();
		}
		public Sql_clauseContext sql_clause(int i) {
			return GetRuleContext<Sql_clauseContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(tsqlParser.ELSE, 0); }
		public If_statementContext(Cfl_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_statement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Raiseerror_statementContext : Cfl_statementContext {
		public IToken msg;
		public ITerminalNode RAISERROR() { return GetToken(tsqlParser.RAISERROR, 0); }
		public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		public ITerminalNode STRING() { return GetToken(tsqlParser.STRING, 0); }
		public ITerminalNode[] LOCAL_ID() { return GetTokens(tsqlParser.LOCAL_ID); }
		public ITerminalNode LOCAL_ID(int i) {
			return GetToken(tsqlParser.LOCAL_ID, i);
		}
		public NumberContext[] number() {
			return GetRuleContexts<NumberContext>();
		}
		public NumberContext number(int i) {
			return GetRuleContext<NumberContext>(i);
		}
		public ConstantContext[] constant() {
			return GetRuleContexts<ConstantContext>();
		}
		public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		public Raiseerror_statementContext(Cfl_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterRaiseerror_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitRaiseerror_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaiseerror_statement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Throw_statementContext : Cfl_statementContext {
		public ITerminalNode THROW() { return GetToken(tsqlParser.THROW, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(tsqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(tsqlParser.DECIMAL, i);
		}
		public ITerminalNode[] LOCAL_ID() { return GetTokens(tsqlParser.LOCAL_ID); }
		public ITerminalNode LOCAL_ID(int i) {
			return GetToken(tsqlParser.LOCAL_ID, i);
		}
		public ITerminalNode STRING() { return GetToken(tsqlParser.STRING, 0); }
		public Throw_statementContext(Cfl_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterThrow_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitThrow_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrow_statement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Try_catch_statementContext : Cfl_statementContext {
		public ITerminalNode[] BEGIN() { return GetTokens(tsqlParser.BEGIN); }
		public ITerminalNode BEGIN(int i) {
			return GetToken(tsqlParser.BEGIN, i);
		}
		public ITerminalNode[] TRY() { return GetTokens(tsqlParser.TRY); }
		public ITerminalNode TRY(int i) {
			return GetToken(tsqlParser.TRY, i);
		}
		public ITerminalNode[] END() { return GetTokens(tsqlParser.END); }
		public ITerminalNode END(int i) {
			return GetToken(tsqlParser.END, i);
		}
		public ITerminalNode[] CATCH() { return GetTokens(tsqlParser.CATCH); }
		public ITerminalNode CATCH(int i) {
			return GetToken(tsqlParser.CATCH, i);
		}
		public Sql_clauseContext[] sql_clause() {
			return GetRuleContexts<Sql_clauseContext>();
		}
		public Sql_clauseContext sql_clause(int i) {
			return GetRuleContext<Sql_clauseContext>(i);
		}
		public Try_catch_statementContext(Cfl_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterTry_catch_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitTry_catch_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTry_catch_statement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class While_statementContext : Cfl_statementContext {
		public ITerminalNode WHILE() { return GetToken(tsqlParser.WHILE, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public Sql_clauseContext sql_clause() {
			return GetRuleContext<Sql_clauseContext>(0);
		}
		public ITerminalNode BREAK() { return GetToken(tsqlParser.BREAK, 0); }
		public ITerminalNode CONTINUE() { return GetToken(tsqlParser.CONTINUE, 0); }
		public While_statementContext(Cfl_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterWhile_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitWhile_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_statement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Break_statementContext : Cfl_statementContext {
		public ITerminalNode BREAK() { return GetToken(tsqlParser.BREAK, 0); }
		public Break_statementContext(Cfl_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterBreak_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitBreak_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreak_statement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Goto_statementContext : Cfl_statementContext {
		public ITerminalNode GOTO() { return GetToken(tsqlParser.GOTO, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Goto_statementContext(Cfl_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterGoto_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitGoto_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoto_statement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Return_statementContext : Cfl_statementContext {
		public ITerminalNode RETURN() { return GetToken(tsqlParser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Return_statementContext(Cfl_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cfl_statementContext cfl_statement() {
		Cfl_statementContext _localctx = new Cfl_statementContext(Context, State);
		EnterRule(_localctx, 8, RULE_cfl_statement);
		int _la;
		try {
			State = 443;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				_localctx = new Begin_statementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 300; Match(BEGIN);
				State = 302;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMI) {
					{
					State = 301; Match(SEMI);
					}
				}

				State = 307;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALTER) | (1L << BEGIN) | (1L << BREAK) | (1L << CLOSE) | (1L << COMMIT) | (1L << CONTINUE) | (1L << CREATE) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DELETE) | (1L << DROP) | (1L << EXEC) | (1L << EXECUTE))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (FETCH - 66)) | (1L << (FORCESEEK - 66)) | (1L << (GOTO - 66)) | (1L << (IF - 66)) | (1L << (INSERT - 66)) | (1L << (OPEN - 66)) | (1L << (PRINT - 66)) | (1L << (RAISERROR - 66)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (RETURN - 137)) | (1L << (REVERT - 137)) | (1L << (ROLLBACK - 137)) | (1L << (SAVE - 137)) | (1L << (SELECT - 137)) | (1L << (SET - 137)) | (1L << (UPDATE - 137)) | (1L << (USE - 137)) | (1L << (WAITFOR - 137)) | (1L << (WHILE - 137)) | (1L << (WITH - 137)) | (1L << (ABSOLUTE - 137)) | (1L << (APPLY - 137)) | (1L << (AUTO - 137)) | (1L << (AVG - 137)) | (1L << (BASE64 - 137)) | (1L << (CALLER - 137)) | (1L << (CAST - 137)) | (1L << (CATCH - 137)) | (1L << (CHECKSUM_AGG - 137)) | (1L << (COMMITTED - 137)) | (1L << (CONCAT - 137)))) != 0) || ((((_la - 201)) & ~0x3f) == 0 && ((1L << (_la - 201)) & ((1L << (COOKIE - 201)) | (1L << (COUNT - 201)) | (1L << (COUNT_BIG - 201)) | (1L << (DELAY - 201)) | (1L << (DELETED - 201)) | (1L << (DENSE_RANK - 201)) | (1L << (DISABLE - 201)) | (1L << (DYNAMIC - 201)) | (1L << (ENCRYPTION - 201)) | (1L << (EXPAND - 201)) | (1L << (FAST - 201)) | (1L << (FAST_FORWARD - 201)) | (1L << (FIRST - 201)) | (1L << (FORCE - 201)) | (1L << (FORCED - 201)) | (1L << (FOLLOWING - 201)) | (1L << (FORWARD_ONLY - 201)) | (1L << (FULLSCAN - 201)) | (1L << (GLOBAL - 201)) | (1L << (GO - 201)) | (1L << (GROUPING - 201)) | (1L << (GROUPING_ID - 201)) | (1L << (HASH - 201)) | (1L << (INSENSITIVE - 201)) | (1L << (INSERTED - 201)) | (1L << (ISOLATION - 201)) | (1L << (KEEP - 201)) | (1L << (KEEPFIXED - 201)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 201)) | (1L << (KEYSET - 201)) | (1L << (LAST - 201)) | (1L << (LEVEL - 201)) | (1L << (LOCAL - 201)) | (1L << (LOCK_ESCALATION - 201)) | (1L << (LOGIN - 201)) | (1L << (LOOP - 201)) | (1L << (MARK - 201)) | (1L << (MAX - 201)) | (1L << (MAXDOP - 201)) | (1L << (MAXRECURSION - 201)) | (1L << (MIN - 201)) | (1L << (MODIFY - 201)) | (1L << (NEXT - 201)) | (1L << (NAME - 201)) | (1L << (NOCOUNT - 201)) | (1L << (NOEXPAND - 201)) | (1L << (NORECOMPUTE - 201)) | (1L << (NTILE - 201)) | (1L << (NUMBER - 201)) | (1L << (OFFSET - 201)) | (1L << (ONLY - 201)) | (1L << (OPTIMISTIC - 201)) | (1L << (OPTIMIZE - 201)) | (1L << (OUT - 201)) | (1L << (OUTPUT - 201)) | (1L << (OWNER - 201)) | (1L << (PARAMETERIZATION - 201)) | (1L << (PARTITION - 201)) | (1L << (PATH - 201)))) != 0) || ((((_la - 265)) & ~0x3f) == 0 && ((1L << (_la - 265)) & ((1L << (PRECEDING - 265)) | (1L << (PRIOR - 265)) | (1L << (RANGE - 265)) | (1L << (RANK - 265)) | (1L << (READONLY - 265)) | (1L << (READ_ONLY - 265)) | (1L << (RECOMPILE - 265)) | (1L << (RELATIVE - 265)) | (1L << (REMOTE - 265)) | (1L << (REPEATABLE - 265)) | (1L << (ROBUST - 265)) | (1L << (ROOT - 265)) | (1L << (ROW - 265)) | (1L << (ROWGUID - 265)) | (1L << (ROWS - 265)) | (1L << (ROW_NUMBER - 265)) | (1L << (SAMPLE - 265)) | (1L << (SCHEMABINDING - 265)) | (1L << (SCROLL - 265)) | (1L << (SCROLL_LOCKS - 265)) | (1L << (SELF - 265)) | (1L << (SERIALIZABLE - 265)) | (1L << (SIMPLE - 265)) | (1L << (SNAPSHOT - 265)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 265)) | (1L << (STATIC - 265)) | (1L << (STATS_STREAM - 265)) | (1L << (STDEV - 265)) | (1L << (STDEVP - 265)) | (1L << (SUM - 265)) | (1L << (THROW - 265)) | (1L << (TIES - 265)) | (1L << (TIME - 265)) | (1L << (TRY - 265)) | (1L << (TYPE - 265)) | (1L << (TYPE_WARNING - 265)) | (1L << (UNBOUNDED - 265)) | (1L << (UNCOMMITTED - 265)) | (1L << (UNKNOWN - 265)) | (1L << (USING - 265)) | (1L << (VAR - 265)) | (1L << (VARP - 265)) | (1L << (VIEW_METADATA - 265)) | (1L << (VIEWS - 265)) | (1L << (WORK - 265)) | (1L << (XML - 265)) | (1L << (XMLNAMESPACES - 265)) | (1L << (DOUBLE_QUOTE_ID - 265)) | (1L << (SQUARE_BRACKET_ID - 265)) | (1L << (ID - 265)))) != 0) || _la==LR_BRACKET) {
					{
					{
					State = 304; sql_clause();
					}
					}
					State = 309;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 310; Match(END);
				State = 312;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
				case 1:
					{
					State = 311; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new Break_statementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 314; Match(BREAK);
				State = 316;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
				case 1:
					{
					State = 315; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new Continue_statementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 318; Match(CONTINUE);
				State = 320;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
				case 1:
					{
					State = 319; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new Goto_statementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 322; Match(GOTO);
				State = 323; id();
				State = 325;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
				case 1:
					{
					State = 324; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 5:
				_localctx = new Goto_statementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 327; id();
				State = 328; Match(COLON);
				State = 330;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
				case 1:
					{
					State = 329; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 6:
				_localctx = new If_statementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 332; Match(IF);
				State = 333; search_condition();
				State = 334; sql_clause();
				State = 337;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 335; Match(ELSE);
					State = 336; sql_clause();
					}
					break;
				}
				State = 340;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
				case 1:
					{
					State = 339; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 7:
				_localctx = new Return_statementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 342; Match(RETURN);
				State = 344;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
				case 1:
					{
					State = 343; expression(0);
					}
					break;
				}
				State = 347;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 346; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 8:
				_localctx = new Throw_statementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 349; Match(THROW);
				State = 355;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCAL_ID || _la==DECIMAL) {
					{
					State = 350;
					_la = TokenStream.LA(1);
					if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 351; Match(COMMA);
					State = 352;
					_la = TokenStream.LA(1);
					if ( !(_la==LOCAL_ID || _la==STRING) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 353; Match(COMMA);
					State = 354;
					_la = TokenStream.LA(1);
					if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 358;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 357; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 9:
				_localctx = new Try_catch_statementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 360; Match(BEGIN);
				State = 361; Match(TRY);
				State = 363;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMI) {
					{
					State = 362; Match(SEMI);
					}
				}

				State = 368;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALTER) | (1L << BEGIN) | (1L << BREAK) | (1L << CLOSE) | (1L << COMMIT) | (1L << CONTINUE) | (1L << CREATE) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DELETE) | (1L << DROP) | (1L << EXEC) | (1L << EXECUTE))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (FETCH - 66)) | (1L << (FORCESEEK - 66)) | (1L << (GOTO - 66)) | (1L << (IF - 66)) | (1L << (INSERT - 66)) | (1L << (OPEN - 66)) | (1L << (PRINT - 66)) | (1L << (RAISERROR - 66)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (RETURN - 137)) | (1L << (REVERT - 137)) | (1L << (ROLLBACK - 137)) | (1L << (SAVE - 137)) | (1L << (SELECT - 137)) | (1L << (SET - 137)) | (1L << (UPDATE - 137)) | (1L << (USE - 137)) | (1L << (WAITFOR - 137)) | (1L << (WHILE - 137)) | (1L << (WITH - 137)) | (1L << (ABSOLUTE - 137)) | (1L << (APPLY - 137)) | (1L << (AUTO - 137)) | (1L << (AVG - 137)) | (1L << (BASE64 - 137)) | (1L << (CALLER - 137)) | (1L << (CAST - 137)) | (1L << (CATCH - 137)) | (1L << (CHECKSUM_AGG - 137)) | (1L << (COMMITTED - 137)) | (1L << (CONCAT - 137)))) != 0) || ((((_la - 201)) & ~0x3f) == 0 && ((1L << (_la - 201)) & ((1L << (COOKIE - 201)) | (1L << (COUNT - 201)) | (1L << (COUNT_BIG - 201)) | (1L << (DELAY - 201)) | (1L << (DELETED - 201)) | (1L << (DENSE_RANK - 201)) | (1L << (DISABLE - 201)) | (1L << (DYNAMIC - 201)) | (1L << (ENCRYPTION - 201)) | (1L << (EXPAND - 201)) | (1L << (FAST - 201)) | (1L << (FAST_FORWARD - 201)) | (1L << (FIRST - 201)) | (1L << (FORCE - 201)) | (1L << (FORCED - 201)) | (1L << (FOLLOWING - 201)) | (1L << (FORWARD_ONLY - 201)) | (1L << (FULLSCAN - 201)) | (1L << (GLOBAL - 201)) | (1L << (GO - 201)) | (1L << (GROUPING - 201)) | (1L << (GROUPING_ID - 201)) | (1L << (HASH - 201)) | (1L << (INSENSITIVE - 201)) | (1L << (INSERTED - 201)) | (1L << (ISOLATION - 201)) | (1L << (KEEP - 201)) | (1L << (KEEPFIXED - 201)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 201)) | (1L << (KEYSET - 201)) | (1L << (LAST - 201)) | (1L << (LEVEL - 201)) | (1L << (LOCAL - 201)) | (1L << (LOCK_ESCALATION - 201)) | (1L << (LOGIN - 201)) | (1L << (LOOP - 201)) | (1L << (MARK - 201)) | (1L << (MAX - 201)) | (1L << (MAXDOP - 201)) | (1L << (MAXRECURSION - 201)) | (1L << (MIN - 201)) | (1L << (MODIFY - 201)) | (1L << (NEXT - 201)) | (1L << (NAME - 201)) | (1L << (NOCOUNT - 201)) | (1L << (NOEXPAND - 201)) | (1L << (NORECOMPUTE - 201)) | (1L << (NTILE - 201)) | (1L << (NUMBER - 201)) | (1L << (OFFSET - 201)) | (1L << (ONLY - 201)) | (1L << (OPTIMISTIC - 201)) | (1L << (OPTIMIZE - 201)) | (1L << (OUT - 201)) | (1L << (OUTPUT - 201)) | (1L << (OWNER - 201)) | (1L << (PARAMETERIZATION - 201)) | (1L << (PARTITION - 201)) | (1L << (PATH - 201)))) != 0) || ((((_la - 265)) & ~0x3f) == 0 && ((1L << (_la - 265)) & ((1L << (PRECEDING - 265)) | (1L << (PRIOR - 265)) | (1L << (RANGE - 265)) | (1L << (RANK - 265)) | (1L << (READONLY - 265)) | (1L << (READ_ONLY - 265)) | (1L << (RECOMPILE - 265)) | (1L << (RELATIVE - 265)) | (1L << (REMOTE - 265)) | (1L << (REPEATABLE - 265)) | (1L << (ROBUST - 265)) | (1L << (ROOT - 265)) | (1L << (ROW - 265)) | (1L << (ROWGUID - 265)) | (1L << (ROWS - 265)) | (1L << (ROW_NUMBER - 265)) | (1L << (SAMPLE - 265)) | (1L << (SCHEMABINDING - 265)) | (1L << (SCROLL - 265)) | (1L << (SCROLL_LOCKS - 265)) | (1L << (SELF - 265)) | (1L << (SERIALIZABLE - 265)) | (1L << (SIMPLE - 265)) | (1L << (SNAPSHOT - 265)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 265)) | (1L << (STATIC - 265)) | (1L << (STATS_STREAM - 265)) | (1L << (STDEV - 265)) | (1L << (STDEVP - 265)) | (1L << (SUM - 265)) | (1L << (THROW - 265)) | (1L << (TIES - 265)) | (1L << (TIME - 265)) | (1L << (TRY - 265)) | (1L << (TYPE - 265)) | (1L << (TYPE_WARNING - 265)) | (1L << (UNBOUNDED - 265)) | (1L << (UNCOMMITTED - 265)) | (1L << (UNKNOWN - 265)) | (1L << (USING - 265)) | (1L << (VAR - 265)) | (1L << (VARP - 265)) | (1L << (VIEW_METADATA - 265)) | (1L << (VIEWS - 265)) | (1L << (WORK - 265)) | (1L << (XML - 265)) | (1L << (XMLNAMESPACES - 265)) | (1L << (DOUBLE_QUOTE_ID - 265)) | (1L << (SQUARE_BRACKET_ID - 265)) | (1L << (ID - 265)))) != 0) || _la==LR_BRACKET) {
					{
					{
					State = 365; sql_clause();
					}
					}
					State = 370;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 371; Match(END);
				State = 372; Match(TRY);
				State = 374;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMI) {
					{
					State = 373; Match(SEMI);
					}
				}

				State = 376; Match(BEGIN);
				State = 377; Match(CATCH);
				State = 379;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMI) {
					{
					State = 378; Match(SEMI);
					}
				}

				State = 384;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALTER) | (1L << BEGIN) | (1L << BREAK) | (1L << CLOSE) | (1L << COMMIT) | (1L << CONTINUE) | (1L << CREATE) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DELETE) | (1L << DROP) | (1L << EXEC) | (1L << EXECUTE))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (FETCH - 66)) | (1L << (FORCESEEK - 66)) | (1L << (GOTO - 66)) | (1L << (IF - 66)) | (1L << (INSERT - 66)) | (1L << (OPEN - 66)) | (1L << (PRINT - 66)) | (1L << (RAISERROR - 66)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (RETURN - 137)) | (1L << (REVERT - 137)) | (1L << (ROLLBACK - 137)) | (1L << (SAVE - 137)) | (1L << (SELECT - 137)) | (1L << (SET - 137)) | (1L << (UPDATE - 137)) | (1L << (USE - 137)) | (1L << (WAITFOR - 137)) | (1L << (WHILE - 137)) | (1L << (WITH - 137)) | (1L << (ABSOLUTE - 137)) | (1L << (APPLY - 137)) | (1L << (AUTO - 137)) | (1L << (AVG - 137)) | (1L << (BASE64 - 137)) | (1L << (CALLER - 137)) | (1L << (CAST - 137)) | (1L << (CATCH - 137)) | (1L << (CHECKSUM_AGG - 137)) | (1L << (COMMITTED - 137)) | (1L << (CONCAT - 137)))) != 0) || ((((_la - 201)) & ~0x3f) == 0 && ((1L << (_la - 201)) & ((1L << (COOKIE - 201)) | (1L << (COUNT - 201)) | (1L << (COUNT_BIG - 201)) | (1L << (DELAY - 201)) | (1L << (DELETED - 201)) | (1L << (DENSE_RANK - 201)) | (1L << (DISABLE - 201)) | (1L << (DYNAMIC - 201)) | (1L << (ENCRYPTION - 201)) | (1L << (EXPAND - 201)) | (1L << (FAST - 201)) | (1L << (FAST_FORWARD - 201)) | (1L << (FIRST - 201)) | (1L << (FORCE - 201)) | (1L << (FORCED - 201)) | (1L << (FOLLOWING - 201)) | (1L << (FORWARD_ONLY - 201)) | (1L << (FULLSCAN - 201)) | (1L << (GLOBAL - 201)) | (1L << (GO - 201)) | (1L << (GROUPING - 201)) | (1L << (GROUPING_ID - 201)) | (1L << (HASH - 201)) | (1L << (INSENSITIVE - 201)) | (1L << (INSERTED - 201)) | (1L << (ISOLATION - 201)) | (1L << (KEEP - 201)) | (1L << (KEEPFIXED - 201)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 201)) | (1L << (KEYSET - 201)) | (1L << (LAST - 201)) | (1L << (LEVEL - 201)) | (1L << (LOCAL - 201)) | (1L << (LOCK_ESCALATION - 201)) | (1L << (LOGIN - 201)) | (1L << (LOOP - 201)) | (1L << (MARK - 201)) | (1L << (MAX - 201)) | (1L << (MAXDOP - 201)) | (1L << (MAXRECURSION - 201)) | (1L << (MIN - 201)) | (1L << (MODIFY - 201)) | (1L << (NEXT - 201)) | (1L << (NAME - 201)) | (1L << (NOCOUNT - 201)) | (1L << (NOEXPAND - 201)) | (1L << (NORECOMPUTE - 201)) | (1L << (NTILE - 201)) | (1L << (NUMBER - 201)) | (1L << (OFFSET - 201)) | (1L << (ONLY - 201)) | (1L << (OPTIMISTIC - 201)) | (1L << (OPTIMIZE - 201)) | (1L << (OUT - 201)) | (1L << (OUTPUT - 201)) | (1L << (OWNER - 201)) | (1L << (PARAMETERIZATION - 201)) | (1L << (PARTITION - 201)) | (1L << (PATH - 201)))) != 0) || ((((_la - 265)) & ~0x3f) == 0 && ((1L << (_la - 265)) & ((1L << (PRECEDING - 265)) | (1L << (PRIOR - 265)) | (1L << (RANGE - 265)) | (1L << (RANK - 265)) | (1L << (READONLY - 265)) | (1L << (READ_ONLY - 265)) | (1L << (RECOMPILE - 265)) | (1L << (RELATIVE - 265)) | (1L << (REMOTE - 265)) | (1L << (REPEATABLE - 265)) | (1L << (ROBUST - 265)) | (1L << (ROOT - 265)) | (1L << (ROW - 265)) | (1L << (ROWGUID - 265)) | (1L << (ROWS - 265)) | (1L << (ROW_NUMBER - 265)) | (1L << (SAMPLE - 265)) | (1L << (SCHEMABINDING - 265)) | (1L << (SCROLL - 265)) | (1L << (SCROLL_LOCKS - 265)) | (1L << (SELF - 265)) | (1L << (SERIALIZABLE - 265)) | (1L << (SIMPLE - 265)) | (1L << (SNAPSHOT - 265)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 265)) | (1L << (STATIC - 265)) | (1L << (STATS_STREAM - 265)) | (1L << (STDEV - 265)) | (1L << (STDEVP - 265)) | (1L << (SUM - 265)) | (1L << (THROW - 265)) | (1L << (TIES - 265)) | (1L << (TIME - 265)) | (1L << (TRY - 265)) | (1L << (TYPE - 265)) | (1L << (TYPE_WARNING - 265)) | (1L << (UNBOUNDED - 265)) | (1L << (UNCOMMITTED - 265)) | (1L << (UNKNOWN - 265)) | (1L << (USING - 265)) | (1L << (VAR - 265)) | (1L << (VARP - 265)) | (1L << (VIEW_METADATA - 265)) | (1L << (VIEWS - 265)) | (1L << (WORK - 265)) | (1L << (XML - 265)) | (1L << (XMLNAMESPACES - 265)) | (1L << (DOUBLE_QUOTE_ID - 265)) | (1L << (SQUARE_BRACKET_ID - 265)) | (1L << (ID - 265)))) != 0) || _la==LR_BRACKET) {
					{
					{
					State = 381; sql_clause();
					}
					}
					State = 386;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 387; Match(END);
				State = 388; Match(CATCH);
				State = 390;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
				case 1:
					{
					State = 389; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 10:
				_localctx = new Waitfor_statementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 392; Match(WAITFOR);
				State = 393;
				_la = TokenStream.LA(1);
				if ( !(_la==DELAY || _la==TIME) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 394; expression(0);
				State = 396;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
				case 1:
					{
					State = 395; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 11:
				_localctx = new While_statementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 398; Match(WHILE);
				State = 399; search_condition();
				State = 409;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
				case 1:
					{
					State = 400; sql_clause();
					}
					break;
				case 2:
					{
					State = 401; Match(BREAK);
					State = 403;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
					case 1:
						{
						State = 402; Match(SEMI);
						}
						break;
					}
					}
					break;
				case 3:
					{
					State = 405; Match(CONTINUE);
					State = 407;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
					case 1:
						{
						State = 406; Match(SEMI);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 12:
				_localctx = new Print_statementContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 411; Match(PRINT);
				State = 412; expression(0);
				State = 414;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
				case 1:
					{
					State = 413; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 13:
				_localctx = new Raiseerror_statementContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 416; Match(RAISERROR);
				State = 417; Match(LR_BRACKET);
				State = 418;
				((Raiseerror_statementContext)_localctx).msg = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 318)) & ~0x3f) == 0 && ((1L << (_la - 318)) & ((1L << (LOCAL_ID - 318)) | (1L << (DECIMAL - 318)) | (1L << (STRING - 318)))) != 0)) ) {
					((Raiseerror_statementContext)_localctx).msg = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 419; Match(COMMA);
				State = 422;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DECIMAL:
				case PLUS:
				case MINUS:
					{
					State = 420; number();
					}
					break;
				case LOCAL_ID:
					{
					State = 421; Match(LOCAL_ID);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 424; Match(COMMA);
				State = 427;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DECIMAL:
				case PLUS:
				case MINUS:
					{
					State = 425; number();
					}
					break;
				case LOCAL_ID:
					{
					State = 426; Match(LOCAL_ID);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 436;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 429; Match(COMMA);
					State = 432;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case DECIMAL:
					case STRING:
					case BINARY:
					case FLOAT:
					case REAL:
					case DOLLAR:
					case PLUS:
					case MINUS:
						{
						State = 430; constant();
						}
						break;
					case LOCAL_ID:
						{
						State = 431; Match(LOCAL_ID);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					State = 438;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 439; Match(RR_BRACKET);
				State = 441;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
				case 1:
					{
					State = 440; Match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Another_statementContext : ParserRuleContext {
		public Declare_statementContext declare_statement() {
			return GetRuleContext<Declare_statementContext>(0);
		}
		public Cursor_statementContext cursor_statement() {
			return GetRuleContext<Cursor_statementContext>(0);
		}
		public Execute_statementContext execute_statement() {
			return GetRuleContext<Execute_statementContext>(0);
		}
		public Security_statementContext security_statement() {
			return GetRuleContext<Security_statementContext>(0);
		}
		public Set_statmentContext set_statment() {
			return GetRuleContext<Set_statmentContext>(0);
		}
		public Transaction_statementContext transaction_statement() {
			return GetRuleContext<Transaction_statementContext>(0);
		}
		public Go_statementContext go_statement() {
			return GetRuleContext<Go_statementContext>(0);
		}
		public Use_statementContext use_statement() {
			return GetRuleContext<Use_statementContext>(0);
		}
		public Another_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_another_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterAnother_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitAnother_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnother_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Another_statementContext another_statement() {
		Another_statementContext _localctx = new Another_statementContext(Context, State);
		EnterRule(_localctx, 10, RULE_another_statement);
		try {
			State = 453;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 445; declare_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 446; cursor_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 447; execute_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 448; security_statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 449; set_statment();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 450; transaction_statement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 451; go_statement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 452; use_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_statementContext : ParserRuleContext {
		public IToken cursor_var;
		public ITerminalNode DELETE() { return GetToken(tsqlParser.DELETE, 0); }
		public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		public Ddl_objectContext ddl_object() {
			return GetRuleContext<Ddl_objectContext>(0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return GetRuleContext<Rowset_function_limitedContext>(0);
		}
		public With_expressionContext with_expression() {
			return GetRuleContext<With_expressionContext>(0);
		}
		public ITerminalNode TOP() { return GetToken(tsqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode[] FROM() { return GetTokens(tsqlParser.FROM); }
		public ITerminalNode FROM(int i) {
			return GetToken(tsqlParser.FROM, i);
		}
		public With_table_hintsContext with_table_hints() {
			return GetRuleContext<With_table_hintsContext>(0);
		}
		public Output_clauseContext output_clause() {
			return GetRuleContext<Output_clauseContext>(0);
		}
		public Table_sourceContext[] table_source() {
			return GetRuleContexts<Table_sourceContext>();
		}
		public Table_sourceContext table_source(int i) {
			return GetRuleContext<Table_sourceContext>(i);
		}
		public ITerminalNode WHERE() { return GetToken(tsqlParser.WHERE, 0); }
		public For_clauseContext for_clause() {
			return GetRuleContext<For_clauseContext>(0);
		}
		public Option_clauseContext option_clause() {
			return GetRuleContext<Option_clauseContext>(0);
		}
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ITerminalNode CURRENT() { return GetToken(tsqlParser.CURRENT, 0); }
		public ITerminalNode OF() { return GetToken(tsqlParser.OF, 0); }
		public ITerminalNode PERCENT() { return GetToken(tsqlParser.PERCENT, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		public ITerminalNode GLOBAL() { return GetToken(tsqlParser.GLOBAL, 0); }
		public Delete_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDelete_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDelete_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelete_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delete_statementContext delete_statement() {
		Delete_statementContext _localctx = new Delete_statementContext(Context, State);
		EnterRule(_localctx, 12, RULE_delete_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 456;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 455; with_expression();
				}
			}

			State = 458; Match(DELETE);
			State = 466;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOP) {
				{
				State = 459; Match(TOP);
				State = 460; Match(LR_BRACKET);
				State = 461; expression(0);
				State = 462; Match(RR_BRACKET);
				State = 464;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PERCENT) {
					{
					State = 463; Match(PERCENT);
					}
				}

				}
			}

			State = 469;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 468; Match(FROM);
				}
			}

			State = 474;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				{
				State = 471; table_alias();
				}
				break;
			case 2:
				{
				State = 472; ddl_object();
				}
				break;
			case 3:
				{
				State = 473; rowset_function_limited();
				}
				break;
			}
			State = 477;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				{
				State = 476; with_table_hints();
				}
				break;
			}
			State = 480;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				{
				State = 479; output_clause();
				}
				break;
			}
			State = 491;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 482; Match(FROM);
				State = 483; table_source();
				State = 488;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 484; Match(COMMA);
					State = 485; table_source();
					}
					}
					State = 490;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 506;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 493; Match(WHERE);
				State = 504;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CASE:
				case COALESCE:
				case CONVERT:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DEFAULT:
				case EXISTS:
				case FORCESEEK:
				case IDENTITY:
				case LEFT:
				case NOT:
				case NULL:
				case NULLIF:
				case RIGHT:
				case SESSION_USER:
				case SYSTEM_USER:
				case ABSOLUTE:
				case APPLY:
				case AUTO:
				case AVG:
				case BASE64:
				case BINARY_CHECKSUM:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FORCE:
				case FORCED:
				case FOLLOWING:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GO:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MODIFY:
				case NEXT:
				case NAME:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case DECIMAL:
				case ID:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case LR_BRACKET:
				case PLUS:
				case MINUS:
				case BIT_NOT:
					{
					State = 494; search_condition();
					}
					break;
				case CURRENT:
					{
					State = 495; Match(CURRENT);
					State = 496; Match(OF);
					State = 502;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
					case 1:
						{
						State = 498;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
						case 1:
							{
							State = 497; Match(GLOBAL);
							}
							break;
						}
						State = 500; cursor_name();
						}
						break;
					case 2:
						{
						State = 501; _localctx.cursor_var = Match(LOCAL_ID);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			State = 509;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 508; for_clause();
				}
			}

			State = 512;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTION) {
				{
				State = 511; option_clause();
				}
			}

			State = 515;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				{
				State = 514; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_statementContext : ParserRuleContext {
		public ITerminalNode INSERT() { return GetToken(tsqlParser.INSERT, 0); }
		public Ddl_objectContext ddl_object() {
			return GetRuleContext<Ddl_objectContext>(0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return GetRuleContext<Rowset_function_limitedContext>(0);
		}
		public ITerminalNode VALUES() { return GetToken(tsqlParser.VALUES, 0); }
		public Expression_listContext[] expression_list() {
			return GetRuleContexts<Expression_listContext>();
		}
		public Expression_listContext expression_list(int i) {
			return GetRuleContext<Expression_listContext>(i);
		}
		public Derived_tableContext derived_table() {
			return GetRuleContext<Derived_tableContext>(0);
		}
		public Execute_statementContext execute_statement() {
			return GetRuleContext<Execute_statementContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(tsqlParser.DEFAULT, 0); }
		public With_expressionContext with_expression() {
			return GetRuleContext<With_expressionContext>(0);
		}
		public ITerminalNode TOP() { return GetToken(tsqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode INTO() { return GetToken(tsqlParser.INTO, 0); }
		public Insert_with_table_hintsContext insert_with_table_hints() {
			return GetRuleContext<Insert_with_table_hintsContext>(0);
		}
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Output_clauseContext output_clause() {
			return GetRuleContext<Output_clauseContext>(0);
		}
		public For_clauseContext for_clause() {
			return GetRuleContext<For_clauseContext>(0);
		}
		public Option_clauseContext option_clause() {
			return GetRuleContext<Option_clauseContext>(0);
		}
		public ITerminalNode PERCENT() { return GetToken(tsqlParser.PERCENT, 0); }
		public Insert_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterInsert_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitInsert_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsert_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Insert_statementContext insert_statement() {
		Insert_statementContext _localctx = new Insert_statementContext(Context, State);
		EnterRule(_localctx, 14, RULE_insert_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 518;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 517; with_expression();
				}
			}

			State = 520; Match(INSERT);
			State = 528;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOP) {
				{
				State = 521; Match(TOP);
				State = 522; Match(LR_BRACKET);
				State = 523; expression(0);
				State = 524; Match(RR_BRACKET);
				State = 526;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PERCENT) {
					{
					State = 525; Match(PERCENT);
					}
				}

				}
			}

			State = 531;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 530; Match(INTO);
				}
			}

			State = 535;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FORCESEEK:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FORCE:
			case FORCED:
			case FOLLOWING:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NEXT:
			case NAME:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case ID:
				{
				State = 533; ddl_object();
				}
				break;
			case OPENDATASOURCE:
			case OPENQUERY:
				{
				State = 534; rowset_function_limited();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 538;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				{
				State = 537; insert_with_table_hints();
				}
				break;
			}
			State = 544;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				{
				State = 540; Match(LR_BRACKET);
				State = 541; column_name_list();
				State = 542; Match(RR_BRACKET);
				}
				break;
			}
			State = 547;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OUTPUT) {
				{
				State = 546; output_clause();
				}
			}

			State = 567;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VALUES:
				{
				State = 549; Match(VALUES);
				State = 550; Match(LR_BRACKET);
				State = 551; expression_list();
				State = 552; Match(RR_BRACKET);
				State = 560;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 553; Match(COMMA);
					State = 554; Match(LR_BRACKET);
					State = 555; expression_list();
					State = 556; Match(RR_BRACKET);
					}
					}
					State = 562;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case SELECT:
			case WITH:
			case LR_BRACKET:
				{
				State = 563; derived_table();
				}
				break;
			case EXEC:
			case EXECUTE:
				{
				State = 564; execute_statement();
				}
				break;
			case DEFAULT:
				{
				State = 565; Match(DEFAULT);
				State = 566; Match(VALUES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 570;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 569; for_clause();
				}
			}

			State = 573;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTION) {
				{
				State = 572; option_clause();
				}
			}

			State = 576;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				{
				State = 575; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_statementContext : ParserRuleContext {
		public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		public With_expressionContext with_expression() {
			return GetRuleContext<With_expressionContext>(0);
		}
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public For_clauseContext for_clause() {
			return GetRuleContext<For_clauseContext>(0);
		}
		public Option_clauseContext option_clause() {
			return GetRuleContext<Option_clauseContext>(0);
		}
		public Select_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSelect_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSelect_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_statementContext select_statement() {
		Select_statementContext _localctx = new Select_statementContext(Context, State);
		EnterRule(_localctx, 16, RULE_select_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 579;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 578; with_expression();
				}
			}

			State = 581; query_expression();
			State = 583;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				{
				State = 582; order_by_clause();
				}
				break;
			}
			State = 586;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				{
				State = 585; for_clause();
				}
				break;
			}
			State = 589;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				{
				State = 588; option_clause();
				}
				break;
			}
			State = 592;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
			case 1:
				{
				State = 591; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_statementContext : ParserRuleContext {
		public IToken cursor_var;
		public ITerminalNode UPDATE() { return GetToken(tsqlParser.UPDATE, 0); }
		public ITerminalNode SET() { return GetToken(tsqlParser.SET, 0); }
		public Update_elemContext[] update_elem() {
			return GetRuleContexts<Update_elemContext>();
		}
		public Update_elemContext update_elem(int i) {
			return GetRuleContext<Update_elemContext>(i);
		}
		public Ddl_objectContext ddl_object() {
			return GetRuleContext<Ddl_objectContext>(0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return GetRuleContext<Rowset_function_limitedContext>(0);
		}
		public With_expressionContext with_expression() {
			return GetRuleContext<With_expressionContext>(0);
		}
		public ITerminalNode TOP() { return GetToken(tsqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public With_table_hintsContext with_table_hints() {
			return GetRuleContext<With_table_hintsContext>(0);
		}
		public Output_clauseContext output_clause() {
			return GetRuleContext<Output_clauseContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(tsqlParser.FROM, 0); }
		public Table_sourceContext[] table_source() {
			return GetRuleContexts<Table_sourceContext>();
		}
		public Table_sourceContext table_source(int i) {
			return GetRuleContext<Table_sourceContext>(i);
		}
		public ITerminalNode WHERE() { return GetToken(tsqlParser.WHERE, 0); }
		public For_clauseContext for_clause() {
			return GetRuleContext<For_clauseContext>(0);
		}
		public Option_clauseContext option_clause() {
			return GetRuleContext<Option_clauseContext>(0);
		}
		public Search_condition_listContext search_condition_list() {
			return GetRuleContext<Search_condition_listContext>(0);
		}
		public ITerminalNode CURRENT() { return GetToken(tsqlParser.CURRENT, 0); }
		public ITerminalNode OF() { return GetToken(tsqlParser.OF, 0); }
		public ITerminalNode PERCENT() { return GetToken(tsqlParser.PERCENT, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		public ITerminalNode GLOBAL() { return GetToken(tsqlParser.GLOBAL, 0); }
		public Update_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterUpdate_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitUpdate_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Update_statementContext update_statement() {
		Update_statementContext _localctx = new Update_statementContext(Context, State);
		EnterRule(_localctx, 18, RULE_update_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 595;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 594; with_expression();
				}
			}

			State = 597; Match(UPDATE);
			State = 605;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOP) {
				{
				State = 598; Match(TOP);
				State = 599; Match(LR_BRACKET);
				State = 600; expression(0);
				State = 601; Match(RR_BRACKET);
				State = 603;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PERCENT) {
					{
					State = 602; Match(PERCENT);
					}
				}

				}
			}

			State = 609;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FORCESEEK:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FORCE:
			case FORCED:
			case FOLLOWING:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NEXT:
			case NAME:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case ID:
				{
				State = 607; ddl_object();
				}
				break;
			case OPENDATASOURCE:
			case OPENQUERY:
				{
				State = 608; rowset_function_limited();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 612;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH || _la==LR_BRACKET) {
				{
				State = 611; with_table_hints();
				}
			}

			State = 614; Match(SET);
			State = 615; update_elem();
			State = 620;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 616; Match(COMMA);
				State = 617; update_elem();
				}
				}
				State = 622;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 624;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				{
				State = 623; output_clause();
				}
				break;
			}
			State = 635;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 626; Match(FROM);
				State = 627; table_source();
				State = 632;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 628; Match(COMMA);
					State = 629; table_source();
					}
					}
					State = 634;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 650;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 637; Match(WHERE);
				State = 648;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CASE:
				case COALESCE:
				case CONVERT:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DEFAULT:
				case EXISTS:
				case FORCESEEK:
				case IDENTITY:
				case LEFT:
				case NOT:
				case NULL:
				case NULLIF:
				case RIGHT:
				case SESSION_USER:
				case SYSTEM_USER:
				case ABSOLUTE:
				case APPLY:
				case AUTO:
				case AVG:
				case BASE64:
				case BINARY_CHECKSUM:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FORCE:
				case FORCED:
				case FOLLOWING:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GO:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MODIFY:
				case NEXT:
				case NAME:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case DECIMAL:
				case ID:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case LR_BRACKET:
				case PLUS:
				case MINUS:
				case BIT_NOT:
					{
					State = 638; search_condition_list();
					}
					break;
				case CURRENT:
					{
					State = 639; Match(CURRENT);
					State = 640; Match(OF);
					State = 646;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
					case 1:
						{
						State = 642;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
						case 1:
							{
							State = 641; Match(GLOBAL);
							}
							break;
						}
						State = 644; cursor_name();
						}
						break;
					case 2:
						{
						State = 645; _localctx.cursor_var = Match(LOCAL_ID);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			State = 653;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 652; for_clause();
				}
			}

			State = 656;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPTION) {
				{
				State = 655; option_clause();
				}
			}

			State = 659;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
			case 1:
				{
				State = 658; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Output_clauseContext : ParserRuleContext {
		public ITerminalNode OUTPUT() { return GetToken(tsqlParser.OUTPUT, 0); }
		public Output_dml_list_elemContext[] output_dml_list_elem() {
			return GetRuleContexts<Output_dml_list_elemContext>();
		}
		public Output_dml_list_elemContext output_dml_list_elem(int i) {
			return GetRuleContext<Output_dml_list_elemContext>(i);
		}
		public ITerminalNode INTO() { return GetToken(tsqlParser.INTO, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Output_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterOutput_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitOutput_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutput_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Output_clauseContext output_clause() {
		Output_clauseContext _localctx = new Output_clauseContext(Context, State);
		EnterRule(_localctx, 20, RULE_output_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 661; Match(OUTPUT);
			State = 662; output_dml_list_elem();
			State = 667;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 663; Match(COMMA);
				State = 664; output_dml_list_elem();
				}
				}
				State = 669;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 681;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 670; Match(INTO);
				State = 673;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LOCAL_ID:
					{
					State = 671; Match(LOCAL_ID);
					}
					break;
				case FORCESEEK:
				case ABSOLUTE:
				case APPLY:
				case AUTO:
				case AVG:
				case BASE64:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FORCE:
				case FORCED:
				case FOLLOWING:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GO:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NEXT:
				case NAME:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					State = 672; table_name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 679;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
				case 1:
					{
					State = 675; Match(LR_BRACKET);
					State = 676; column_name_list();
					State = 677; Match(RR_BRACKET);
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Output_dml_list_elemContext : ParserRuleContext {
		public Output_column_nameContext output_column_name() {
			return GetRuleContext<Output_column_nameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		public ITerminalNode AS() { return GetToken(tsqlParser.AS, 0); }
		public Output_dml_list_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output_dml_list_elem; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterOutput_dml_list_elem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitOutput_dml_list_elem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutput_dml_list_elem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Output_dml_list_elemContext output_dml_list_elem() {
		Output_dml_list_elemContext _localctx = new Output_dml_list_elemContext(Context, State);
		EnterRule(_localctx, 22, RULE_output_dml_list_elem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 685;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
			case 1:
				{
				State = 683; output_column_name();
				}
				break;
			case 2:
				{
				State = 684; expression(0);
				}
				break;
			}
			State = 691;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
			case 1:
				{
				State = 688;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 687; Match(AS);
					}
				}

				State = 690; column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Output_column_nameContext : ParserRuleContext {
		public ITerminalNode DELETED() { return GetToken(tsqlParser.DELETED, 0); }
		public ITerminalNode INSERTED() { return GetToken(tsqlParser.INSERTED, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public ITerminalNode DOLLAR_ACTION() { return GetToken(tsqlParser.DOLLAR_ACTION, 0); }
		public Output_column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output_column_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterOutput_column_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitOutput_column_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutput_column_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Output_column_nameContext output_column_name() {
		Output_column_nameContext _localctx = new Output_column_nameContext(Context, State);
		EnterRule(_localctx, 24, RULE_output_column_name);
		try {
			State = 704;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FORCESEEK:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FORCE:
			case FORCED:
			case FOLLOWING:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NEXT:
			case NAME:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 696;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,92,Context) ) {
				case 1:
					{
					State = 693; Match(DELETED);
					}
					break;
				case 2:
					{
					State = 694; Match(INSERTED);
					}
					break;
				case 3:
					{
					State = 695; table_name();
					}
					break;
				}
				State = 698; Match(DOT);
				State = 701;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STAR:
					{
					State = 699; Match(STAR);
					}
					break;
				case FORCESEEK:
				case ABSOLUTE:
				case APPLY:
				case AUTO:
				case AVG:
				case BASE64:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FORCE:
				case FORCED:
				case FOLLOWING:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GO:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NEXT:
				case NAME:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					State = 700; column_name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DOLLAR_ACTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 703; Match(DOLLAR_ACTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_indexContext : ParserRuleContext {
		public IdContext name;
		public ITerminalNode CREATE() { return GetToken(tsqlParser.CREATE, 0); }
		public ITerminalNode INDEX() { return GetToken(tsqlParser.INDEX, 0); }
		public ITerminalNode ON() { return GetToken(tsqlParser.ON, 0); }
		public Table_name_with_hintContext table_name_with_hint() {
			return GetRuleContext<Table_name_with_hintContext>(0);
		}
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode UNIQUE() { return GetToken(tsqlParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return GetRuleContext<ClusteredContext>(0);
		}
		public Create_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterCreate_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitCreate_index(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_indexContext create_index() {
		Create_indexContext _localctx = new Create_indexContext(Context, State);
		EnterRule(_localctx, 26, RULE_create_index);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 706; Match(CREATE);
			State = 708;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNIQUE) {
				{
				State = 707; Match(UNIQUE);
				}
			}

			State = 711;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CLUSTERED || _la==NONCLUSTERED) {
				{
				State = 710; clustered();
				}
			}

			State = 713; Match(INDEX);
			State = 714; _localctx.name = id();
			State = 715; Match(ON);
			State = 716; table_name_with_hint();
			State = 717; Match(LR_BRACKET);
			State = 718; column_name_list();
			State = 719; Match(RR_BRACKET);
			State = 721;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,97,Context) ) {
			case 1:
				{
				State = 720; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_procedureContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(tsqlParser.CREATE, 0); }
		public Func_proc_nameContext func_proc_name() {
			return GetRuleContext<Func_proc_nameContext>(0);
		}
		public ITerminalNode AS() { return GetToken(tsqlParser.AS, 0); }
		public ITerminalNode PROC() { return GetToken(tsqlParser.PROC, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(tsqlParser.PROCEDURE, 0); }
		public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		public Procedure_paramContext[] procedure_param() {
			return GetRuleContexts<Procedure_paramContext>();
		}
		public Procedure_paramContext procedure_param(int i) {
			return GetRuleContext<Procedure_paramContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(tsqlParser.WITH, 0); }
		public Procedure_optionContext[] procedure_option() {
			return GetRuleContexts<Procedure_optionContext>();
		}
		public Procedure_optionContext procedure_option(int i) {
			return GetRuleContext<Procedure_optionContext>(i);
		}
		public ITerminalNode FOR() { return GetToken(tsqlParser.FOR, 0); }
		public ITerminalNode REPLICATION() { return GetToken(tsqlParser.REPLICATION, 0); }
		public Sql_clauseContext[] sql_clause() {
			return GetRuleContexts<Sql_clauseContext>();
		}
		public Sql_clauseContext sql_clause(int i) {
			return GetRuleContext<Sql_clauseContext>(i);
		}
		public Create_procedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_procedure; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterCreate_procedure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitCreate_procedure(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_procedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_procedureContext create_procedure() {
		Create_procedureContext _localctx = new Create_procedureContext(Context, State);
		EnterRule(_localctx, 28, RULE_create_procedure);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 723; Match(CREATE);
			State = 724;
			_la = TokenStream.LA(1);
			if ( !(_la==PROC || _la==PROCEDURE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 725; func_proc_name();
			State = 728;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMI) {
				{
				State = 726; Match(SEMI);
				State = 727; Match(DECIMAL);
				}
			}

			State = 744;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOCAL_ID || _la==LR_BRACKET) {
				{
				State = 731;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 730; Match(LR_BRACKET);
					}
				}

				State = 733; procedure_param();
				State = 738;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 734; Match(COMMA);
					State = 735; procedure_param();
					}
					}
					State = 740;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 742;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RR_BRACKET) {
					{
					State = 741; Match(RR_BRACKET);
					}
				}

				}
			}

			State = 755;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 746; Match(WITH);
				State = 747; procedure_option();
				State = 752;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 748; Match(COMMA);
					State = 749; procedure_option();
					}
					}
					State = 754;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 759;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 757; Match(FOR);
				State = 758; Match(REPLICATION);
				}
			}

			State = 761; Match(AS);
			State = 763;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 762; sql_clause();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 765;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,106,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_paramContext : ParserRuleContext {
		public Default_valueContext default_val;
		public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode AS() { return GetToken(tsqlParser.AS, 0); }
		public ITerminalNode VARYING() { return GetToken(tsqlParser.VARYING, 0); }
		public Default_valueContext default_value() {
			return GetRuleContext<Default_valueContext>(0);
		}
		public ITerminalNode OUT() { return GetToken(tsqlParser.OUT, 0); }
		public ITerminalNode OUTPUT() { return GetToken(tsqlParser.OUTPUT, 0); }
		public ITerminalNode READONLY() { return GetToken(tsqlParser.READONLY, 0); }
		public Procedure_paramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_param; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterProcedure_param(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitProcedure_param(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedure_param(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_paramContext procedure_param() {
		Procedure_paramContext _localctx = new Procedure_paramContext(Context, State);
		EnterRule(_localctx, 30, RULE_procedure_param);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 767; Match(LOCAL_ID);
			State = 771;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,107,Context) ) {
			case 1:
				{
				State = 768; id();
				State = 769; Match(DOT);
				}
				break;
			}
			State = 774;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 773; Match(AS);
				}
			}

			State = 776; data_type();
			State = 778;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VARYING) {
				{
				State = 777; Match(VARYING);
				}
			}

			State = 782;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL) {
				{
				State = 780; Match(EQUAL);
				State = 781; _localctx.default_val = default_value();
				}
			}

			State = 785;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (OUT - 259)) | (1L << (OUTPUT - 259)) | (1L << (READONLY - 259)))) != 0)) {
				{
				State = 784;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (OUT - 259)) | (1L << (OUTPUT - 259)) | (1L << (READONLY - 259)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_optionContext : ParserRuleContext {
		public ITerminalNode ENCRYPTION() { return GetToken(tsqlParser.ENCRYPTION, 0); }
		public ITerminalNode RECOMPILE() { return GetToken(tsqlParser.RECOMPILE, 0); }
		public Execute_clauseContext execute_clause() {
			return GetRuleContext<Execute_clauseContext>(0);
		}
		public Procedure_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterProcedure_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitProcedure_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedure_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_optionContext procedure_option() {
		Procedure_optionContext _localctx = new Procedure_optionContext(Context, State);
		EnterRule(_localctx, 32, RULE_procedure_option);
		try {
			State = 790;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENCRYPTION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 787; Match(ENCRYPTION);
				}
				break;
			case RECOMPILE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 788; Match(RECOMPILE);
				}
				break;
			case EXEC:
			case EXECUTE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 789; execute_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_statisticsContext : ParserRuleContext {
		public On_offContext INCREMENTAL;
		public ITerminalNode CREATE() { return GetToken(tsqlParser.CREATE, 0); }
		public ITerminalNode STATISTICS() { return GetToken(tsqlParser.STATISTICS, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode ON() { return GetToken(tsqlParser.ON, 0); }
		public Table_name_with_hintContext table_name_with_hint() {
			return GetRuleContext<Table_name_with_hintContext>(0);
		}
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(tsqlParser.WITH, 0); }
		public ITerminalNode FULLSCAN() { return GetToken(tsqlParser.FULLSCAN, 0); }
		public ITerminalNode SAMPLE() { return GetToken(tsqlParser.SAMPLE, 0); }
		public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		public ITerminalNode STATS_STREAM() { return GetToken(tsqlParser.STATS_STREAM, 0); }
		public ITerminalNode PERCENT() { return GetToken(tsqlParser.PERCENT, 0); }
		public ITerminalNode ROWS() { return GetToken(tsqlParser.ROWS, 0); }
		public ITerminalNode NORECOMPUTE() { return GetToken(tsqlParser.NORECOMPUTE, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public Create_statisticsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_statistics; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterCreate_statistics(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitCreate_statistics(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_statistics(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_statisticsContext create_statistics() {
		Create_statisticsContext _localctx = new Create_statisticsContext(Context, State);
		EnterRule(_localctx, 34, RULE_create_statistics);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 792; Match(CREATE);
			State = 793; Match(STATISTICS);
			State = 794; id();
			State = 795; Match(ON);
			State = 796; table_name_with_hint();
			State = 797; Match(LR_BRACKET);
			State = 798; column_name_list();
			State = 799; Match(RR_BRACKET);
			State = 816;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,116,Context) ) {
			case 1:
				{
				State = 800; Match(WITH);
				State = 806;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FULLSCAN:
					{
					State = 801; Match(FULLSCAN);
					}
					break;
				case SAMPLE:
					{
					State = 802; Match(SAMPLE);
					State = 803; Match(DECIMAL);
					State = 804;
					_la = TokenStream.LA(1);
					if ( !(_la==PERCENT || _la==ROWS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case STATS_STREAM:
					{
					State = 805; Match(STATS_STREAM);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 810;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
				case 1:
					{
					State = 808; Match(COMMA);
					State = 809; Match(NORECOMPUTE);
					}
					break;
				}
				State = 814;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 812; Match(COMMA);
					State = 813; _localctx.INCREMENTAL = on_off();
					}
				}

				}
				break;
			}
			State = 819;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,117,Context) ) {
			case 1:
				{
				State = 818; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_tableContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(tsqlParser.CREATE, 0); }
		public ITerminalNode TABLE() { return GetToken(tsqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Column_def_table_constraintContext[] column_def_table_constraint() {
			return GetRuleContexts<Column_def_table_constraintContext>();
		}
		public Column_def_table_constraintContext column_def_table_constraint(int i) {
			return GetRuleContext<Column_def_table_constraintContext>(i);
		}
		public ITerminalNode ON() { return GetToken(tsqlParser.ON, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(tsqlParser.DEFAULT, 0); }
		public Create_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterCreate_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitCreate_table(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_tableContext create_table() {
		Create_tableContext _localctx = new Create_tableContext(Context, State);
		EnterRule(_localctx, 36, RULE_create_table);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 821; Match(CREATE);
			State = 822; Match(TABLE);
			State = 823; table_name();
			State = 824; Match(LR_BRACKET);
			State = 825; column_def_table_constraint();
			State = 832;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,119,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 827;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 826; Match(COMMA);
						}
					}

					State = 829; column_def_table_constraint();
					}
					} 
				}
				State = 834;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,119,Context);
			}
			State = 836;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 835; Match(COMMA);
				}
			}

			State = 838; Match(RR_BRACKET);
			State = 842;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ON:
				{
				State = 839; Match(ON);
				State = 840; id();
				}
				break;
			case DEFAULT:
				{
				State = 841; Match(DEFAULT);
				}
				break;
			case Eof:
			case ALTER:
			case BEGIN:
			case BREAK:
			case CLOSE:
			case COMMIT:
			case CONTINUE:
			case CREATE:
			case DEALLOCATE:
			case DECLARE:
			case DELETE:
			case DROP:
			case ELSE:
			case END:
			case EXEC:
			case EXECUTE:
			case FETCH:
			case FORCESEEK:
			case GOTO:
			case IF:
			case INSERT:
			case OPEN:
			case PRINT:
			case RAISERROR:
			case RETURN:
			case REVERT:
			case ROLLBACK:
			case SAVE:
			case SELECT:
			case SET:
			case UPDATE:
			case USE:
			case WAITFOR:
			case WHILE:
			case WITH:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FORCE:
			case FORCED:
			case FOLLOWING:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NEXT:
			case NAME:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
			case LR_BRACKET:
			case SEMI:
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 845;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,122,Context) ) {
			case 1:
				{
				State = 844; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_viewContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(tsqlParser.CREATE, 0); }
		public ITerminalNode VIEW() { return GetToken(tsqlParser.VIEW, 0); }
		public View_nameContext view_name() {
			return GetRuleContext<View_nameContext>(0);
		}
		public ITerminalNode AS() { return GetToken(tsqlParser.AS, 0); }
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public ITerminalNode[] WITH() { return GetTokens(tsqlParser.WITH); }
		public ITerminalNode WITH(int i) {
			return GetToken(tsqlParser.WITH, i);
		}
		public View_attributeContext[] view_attribute() {
			return GetRuleContexts<View_attributeContext>();
		}
		public View_attributeContext view_attribute(int i) {
			return GetRuleContext<View_attributeContext>(i);
		}
		public ITerminalNode CHECK() { return GetToken(tsqlParser.CHECK, 0); }
		public ITerminalNode OPTION() { return GetToken(tsqlParser.OPTION, 0); }
		public Create_viewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_view; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterCreate_view(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitCreate_view(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_view(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_viewContext create_view() {
		Create_viewContext _localctx = new Create_viewContext(Context, State);
		EnterRule(_localctx, 38, RULE_create_view);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 847; Match(CREATE);
			State = 848; Match(VIEW);
			State = 849; view_name();
			State = 861;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_BRACKET) {
				{
				State = 850; Match(LR_BRACKET);
				State = 851; column_name();
				State = 856;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 852; Match(COMMA);
					State = 853; column_name();
					}
					}
					State = 858;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 859; Match(RR_BRACKET);
				}
			}

			State = 872;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 863; Match(WITH);
				State = 864; view_attribute();
				State = 869;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 865; Match(COMMA);
					State = 866; view_attribute();
					}
					}
					State = 871;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 874; Match(AS);
			State = 875; select_statement();
			State = 879;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,127,Context) ) {
			case 1:
				{
				State = 876; Match(WITH);
				State = 877; Match(CHECK);
				State = 878; Match(OPTION);
				}
				break;
			}
			State = 882;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,128,Context) ) {
			case 1:
				{
				State = 881; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class View_attributeContext : ParserRuleContext {
		public ITerminalNode ENCRYPTION() { return GetToken(tsqlParser.ENCRYPTION, 0); }
		public ITerminalNode SCHEMABINDING() { return GetToken(tsqlParser.SCHEMABINDING, 0); }
		public ITerminalNode VIEW_METADATA() { return GetToken(tsqlParser.VIEW_METADATA, 0); }
		public View_attributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_view_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterView_attribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitView_attribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitView_attribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public View_attributeContext view_attribute() {
		View_attributeContext _localctx = new View_attributeContext(Context, State);
		EnterRule(_localctx, 40, RULE_view_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 884;
			_la = TokenStream.LA(1);
			if ( !(_la==ENCRYPTION || _la==SCHEMABINDING || _la==VIEW_METADATA) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_tableContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(tsqlParser.ALTER, 0); }
		public ITerminalNode[] TABLE() { return GetTokens(tsqlParser.TABLE); }
		public ITerminalNode TABLE(int i) {
			return GetToken(tsqlParser.TABLE, i);
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode SET() { return GetToken(tsqlParser.SET, 0); }
		public ITerminalNode LOCK_ESCALATION() { return GetToken(tsqlParser.LOCK_ESCALATION, 0); }
		public ITerminalNode AUTO() { return GetToken(tsqlParser.AUTO, 0); }
		public ITerminalNode DISABLE() { return GetToken(tsqlParser.DISABLE, 0); }
		public ITerminalNode ADD() { return GetToken(tsqlParser.ADD, 0); }
		public Column_def_table_constraintContext column_def_table_constraint() {
			return GetRuleContext<Column_def_table_constraintContext>(0);
		}
		public Alter_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterAlter_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitAlter_table(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_tableContext alter_table() {
		Alter_tableContext _localctx = new Alter_tableContext(Context, State);
		EnterRule(_localctx, 42, RULE_alter_table);
		int _la;
		try {
			State = 906;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,131,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 886; Match(ALTER);
				State = 887; Match(TABLE);
				State = 888; table_name();
				State = 889; Match(SET);
				State = 890; Match(LR_BRACKET);
				State = 891; Match(LOCK_ESCALATION);
				State = 892; Match(EQUAL);
				State = 893;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (TABLE - 159)) | (1L << (AUTO - 159)) | (1L << (DISABLE - 159)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 894; Match(RR_BRACKET);
				State = 896;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,129,Context) ) {
				case 1:
					{
					State = 895; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 898; Match(ALTER);
				State = 899; Match(TABLE);
				State = 900; table_name();
				State = 901; Match(ADD);
				State = 902; column_def_table_constraint();
				State = 904;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,130,Context) ) {
				case 1:
					{
					State = 903; Match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_databaseContext : ParserRuleContext {
		public IdContext database;
		public IdContext new_name;
		public IdContext collation;
		public ITerminalNode ALTER() { return GetToken(tsqlParser.ALTER, 0); }
		public ITerminalNode DATABASE() { return GetToken(tsqlParser.DATABASE, 0); }
		public ITerminalNode CURRENT() { return GetToken(tsqlParser.CURRENT, 0); }
		public ITerminalNode MODIFY() { return GetToken(tsqlParser.MODIFY, 0); }
		public ITerminalNode NAME() { return GetToken(tsqlParser.NAME, 0); }
		public ITerminalNode COLLATE() { return GetToken(tsqlParser.COLLATE, 0); }
		public ITerminalNode SET() { return GetToken(tsqlParser.SET, 0); }
		public Database_optionContext database_option() {
			return GetRuleContext<Database_optionContext>(0);
		}
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public Alter_databaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_database; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterAlter_database(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitAlter_database(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_database(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_databaseContext alter_database() {
		Alter_databaseContext _localctx = new Alter_databaseContext(Context, State);
		EnterRule(_localctx, 44, RULE_alter_database);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 908; Match(ALTER);
			State = 909; Match(DATABASE);
			State = 912;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FORCESEEK:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FORCE:
			case FORCED:
			case FOLLOWING:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NEXT:
			case NAME:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				State = 910; _localctx.database = id();
				}
				break;
			case CURRENT:
				{
				State = 911; Match(CURRENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 922;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MODIFY:
				{
				State = 914; Match(MODIFY);
				State = 915; Match(NAME);
				State = 916; Match(EQUAL);
				State = 917; _localctx.new_name = id();
				}
				break;
			case COLLATE:
				{
				State = 918; Match(COLLATE);
				State = 919; _localctx.collation = id();
				}
				break;
			case SET:
				{
				State = 920; Match(SET);
				State = 921; database_option();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 925;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,134,Context) ) {
			case 1:
				{
				State = 924; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Database_optionContext : ParserRuleContext {
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode FULL() { return GetToken(tsqlParser.FULL, 0); }
		public Database_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_database_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDatabase_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDatabase_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatabase_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Database_optionContext database_option() {
		Database_optionContext _localctx = new Database_optionContext(Context, State);
		EnterRule(_localctx, 46, RULE_database_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 927; id();
			State = 930;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,135,Context) ) {
			case 1:
				{
				State = 928; id();
				}
				break;
			case 2:
				{
				State = 929; Match(FULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_indexContext : ParserRuleContext {
		public IdContext name;
		public ITerminalNode DROP() { return GetToken(tsqlParser.DROP, 0); }
		public ITerminalNode INDEX() { return GetToken(tsqlParser.INDEX, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode IF() { return GetToken(tsqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(tsqlParser.EXISTS, 0); }
		public Drop_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_index; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDrop_index(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDrop_index(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_indexContext drop_index() {
		Drop_indexContext _localctx = new Drop_indexContext(Context, State);
		EnterRule(_localctx, 48, RULE_drop_index);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 932; Match(DROP);
			State = 933; Match(INDEX);
			State = 936;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 934; Match(IF);
				State = 935; Match(EXISTS);
				}
			}

			State = 938; _localctx.name = id();
			State = 940;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,137,Context) ) {
			case 1:
				{
				State = 939; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_procedureContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(tsqlParser.DROP, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(tsqlParser.PROCEDURE, 0); }
		public Func_proc_nameContext func_proc_name() {
			return GetRuleContext<Func_proc_nameContext>(0);
		}
		public ITerminalNode IF() { return GetToken(tsqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(tsqlParser.EXISTS, 0); }
		public Drop_procedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_procedure; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDrop_procedure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDrop_procedure(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_procedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_procedureContext drop_procedure() {
		Drop_procedureContext _localctx = new Drop_procedureContext(Context, State);
		EnterRule(_localctx, 50, RULE_drop_procedure);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 942; Match(DROP);
			State = 943; Match(PROCEDURE);
			State = 946;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 944; Match(IF);
				State = 945; Match(EXISTS);
				}
			}

			State = 948; func_proc_name();
			State = 950;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,139,Context) ) {
			case 1:
				{
				State = 949; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_statisticsContext : ParserRuleContext {
		public IdContext name;
		public ITerminalNode DROP() { return GetToken(tsqlParser.DROP, 0); }
		public ITerminalNode STATISTICS() { return GetToken(tsqlParser.STATISTICS, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Drop_statisticsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_statistics; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDrop_statistics(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDrop_statistics(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_statistics(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_statisticsContext drop_statistics() {
		Drop_statisticsContext _localctx = new Drop_statisticsContext(Context, State);
		EnterRule(_localctx, 52, RULE_drop_statistics);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 952; Match(DROP);
			State = 953; Match(STATISTICS);
			State = 957;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,140,Context) ) {
			case 1:
				{
				State = 954; table_name();
				State = 955; Match(DOT);
				}
				break;
			}
			State = 959; _localctx.name = id();
			State = 960; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_tableContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(tsqlParser.DROP, 0); }
		public ITerminalNode TABLE() { return GetToken(tsqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode IF() { return GetToken(tsqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(tsqlParser.EXISTS, 0); }
		public Drop_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDrop_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDrop_table(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_tableContext drop_table() {
		Drop_tableContext _localctx = new Drop_tableContext(Context, State);
		EnterRule(_localctx, 54, RULE_drop_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 962; Match(DROP);
			State = 963; Match(TABLE);
			State = 966;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 964; Match(IF);
				State = 965; Match(EXISTS);
				}
			}

			State = 968; table_name();
			State = 970;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,142,Context) ) {
			case 1:
				{
				State = 969; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_viewContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(tsqlParser.DROP, 0); }
		public ITerminalNode VIEW() { return GetToken(tsqlParser.VIEW, 0); }
		public View_nameContext[] view_name() {
			return GetRuleContexts<View_nameContext>();
		}
		public View_nameContext view_name(int i) {
			return GetRuleContext<View_nameContext>(i);
		}
		public ITerminalNode IF() { return GetToken(tsqlParser.IF, 0); }
		public ITerminalNode EXISTS() { return GetToken(tsqlParser.EXISTS, 0); }
		public Drop_viewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_view; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDrop_view(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDrop_view(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_view(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_viewContext drop_view() {
		Drop_viewContext _localctx = new Drop_viewContext(Context, State);
		EnterRule(_localctx, 56, RULE_drop_view);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 972; Match(DROP);
			State = 973; Match(VIEW);
			State = 976;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 974; Match(IF);
				State = 975; Match(EXISTS);
				}
			}

			State = 978; view_name();
			State = 983;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 979; Match(COMMA);
				State = 980; view_name();
				}
				}
				State = 985;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 987;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,145,Context) ) {
			case 1:
				{
				State = 986; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rowset_function_limitedContext : ParserRuleContext {
		public OpenqueryContext openquery() {
			return GetRuleContext<OpenqueryContext>(0);
		}
		public OpendatasourceContext opendatasource() {
			return GetRuleContext<OpendatasourceContext>(0);
		}
		public Rowset_function_limitedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowset_function_limited; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterRowset_function_limited(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitRowset_function_limited(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRowset_function_limited(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rowset_function_limitedContext rowset_function_limited() {
		Rowset_function_limitedContext _localctx = new Rowset_function_limitedContext(Context, State);
		EnterRule(_localctx, 58, RULE_rowset_function_limited);
		try {
			State = 991;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPENQUERY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 989; openquery();
				}
				break;
			case OPENDATASOURCE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 990; opendatasource();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpenqueryContext : ParserRuleContext {
		public IdContext linked_server;
		public IToken query;
		public ITerminalNode OPENQUERY() { return GetToken(tsqlParser.OPENQUERY, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(tsqlParser.STRING, 0); }
		public OpenqueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_openquery; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterOpenquery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitOpenquery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpenquery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpenqueryContext openquery() {
		OpenqueryContext _localctx = new OpenqueryContext(Context, State);
		EnterRule(_localctx, 60, RULE_openquery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 993; Match(OPENQUERY);
			State = 994; Match(LR_BRACKET);
			State = 995; _localctx.linked_server = id();
			State = 996; Match(COMMA);
			State = 997; _localctx.query = Match(STRING);
			State = 998; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpendatasourceContext : ParserRuleContext {
		public IToken provider;
		public IToken init;
		public IdContext database;
		public IdContext scheme;
		public IdContext table;
		public ITerminalNode OPENDATASOURCE() { return GetToken(tsqlParser.OPENDATASOURCE, 0); }
		public ITerminalNode[] STRING() { return GetTokens(tsqlParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(tsqlParser.STRING, i);
		}
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public OpendatasourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opendatasource; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterOpendatasource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitOpendatasource(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpendatasource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpendatasourceContext opendatasource() {
		OpendatasourceContext _localctx = new OpendatasourceContext(Context, State);
		EnterRule(_localctx, 62, RULE_opendatasource);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1000; Match(OPENDATASOURCE);
			State = 1001; Match(LR_BRACKET);
			State = 1002; _localctx.provider = Match(STRING);
			State = 1003; Match(COMMA);
			State = 1004; _localctx.init = Match(STRING);
			State = 1005; Match(RR_BRACKET);
			State = 1006; Match(DOT);
			State = 1008;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FORCESEEK || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & ((1L << (ABSOLUTE - 188)) | (1L << (APPLY - 188)) | (1L << (AUTO - 188)) | (1L << (AVG - 188)) | (1L << (BASE64 - 188)) | (1L << (CALLER - 188)) | (1L << (CAST - 188)) | (1L << (CATCH - 188)) | (1L << (CHECKSUM_AGG - 188)) | (1L << (COMMITTED - 188)) | (1L << (CONCAT - 188)) | (1L << (COOKIE - 188)) | (1L << (COUNT - 188)) | (1L << (COUNT_BIG - 188)) | (1L << (DELAY - 188)) | (1L << (DELETED - 188)) | (1L << (DENSE_RANK - 188)) | (1L << (DISABLE - 188)) | (1L << (DYNAMIC - 188)) | (1L << (ENCRYPTION - 188)) | (1L << (EXPAND - 188)) | (1L << (FAST - 188)) | (1L << (FAST_FORWARD - 188)) | (1L << (FIRST - 188)) | (1L << (FORCE - 188)) | (1L << (FORCED - 188)) | (1L << (FOLLOWING - 188)) | (1L << (FORWARD_ONLY - 188)) | (1L << (FULLSCAN - 188)) | (1L << (GLOBAL - 188)) | (1L << (GO - 188)) | (1L << (GROUPING - 188)) | (1L << (GROUPING_ID - 188)) | (1L << (HASH - 188)) | (1L << (INSENSITIVE - 188)) | (1L << (INSERTED - 188)) | (1L << (ISOLATION - 188)) | (1L << (KEEP - 188)) | (1L << (KEEPFIXED - 188)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 188)) | (1L << (KEYSET - 188)) | (1L << (LAST - 188)) | (1L << (LEVEL - 188)) | (1L << (LOCAL - 188)) | (1L << (LOCK_ESCALATION - 188)) | (1L << (LOGIN - 188)) | (1L << (LOOP - 188)) | (1L << (MARK - 188)) | (1L << (MAX - 188)) | (1L << (MAXDOP - 188)) | (1L << (MAXRECURSION - 188)) | (1L << (MIN - 188)) | (1L << (MODIFY - 188)) | (1L << (NEXT - 188)) | (1L << (NAME - 188)) | (1L << (NOCOUNT - 188)) | (1L << (NOEXPAND - 188)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (NORECOMPUTE - 252)) | (1L << (NTILE - 252)) | (1L << (NUMBER - 252)) | (1L << (OFFSET - 252)) | (1L << (ONLY - 252)) | (1L << (OPTIMISTIC - 252)) | (1L << (OPTIMIZE - 252)) | (1L << (OUT - 252)) | (1L << (OUTPUT - 252)) | (1L << (OWNER - 252)) | (1L << (PARAMETERIZATION - 252)) | (1L << (PARTITION - 252)) | (1L << (PATH - 252)) | (1L << (PRECEDING - 252)) | (1L << (PRIOR - 252)) | (1L << (RANGE - 252)) | (1L << (RANK - 252)) | (1L << (READONLY - 252)) | (1L << (READ_ONLY - 252)) | (1L << (RECOMPILE - 252)) | (1L << (RELATIVE - 252)) | (1L << (REMOTE - 252)) | (1L << (REPEATABLE - 252)) | (1L << (ROBUST - 252)) | (1L << (ROOT - 252)) | (1L << (ROW - 252)) | (1L << (ROWGUID - 252)) | (1L << (ROWS - 252)) | (1L << (ROW_NUMBER - 252)) | (1L << (SAMPLE - 252)) | (1L << (SCHEMABINDING - 252)) | (1L << (SCROLL - 252)) | (1L << (SCROLL_LOCKS - 252)) | (1L << (SELF - 252)) | (1L << (SERIALIZABLE - 252)) | (1L << (SIMPLE - 252)) | (1L << (SNAPSHOT - 252)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 252)) | (1L << (STATIC - 252)) | (1L << (STATS_STREAM - 252)) | (1L << (STDEV - 252)) | (1L << (STDEVP - 252)) | (1L << (SUM - 252)) | (1L << (THROW - 252)) | (1L << (TIES - 252)) | (1L << (TIME - 252)) | (1L << (TRY - 252)) | (1L << (TYPE - 252)) | (1L << (TYPE_WARNING - 252)) | (1L << (UNBOUNDED - 252)) | (1L << (UNCOMMITTED - 252)) | (1L << (UNKNOWN - 252)) | (1L << (USING - 252)) | (1L << (VAR - 252)) | (1L << (VARP - 252)) | (1L << (VIEW_METADATA - 252)) | (1L << (VIEWS - 252)) | (1L << (WORK - 252)) | (1L << (XML - 252)) | (1L << (XMLNAMESPACES - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (DOUBLE_QUOTE_ID - 316)) | (1L << (SQUARE_BRACKET_ID - 316)) | (1L << (ID - 316)))) != 0)) {
				{
				State = 1007; _localctx.database = id();
				}
			}

			State = 1010; Match(DOT);
			State = 1012;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FORCESEEK || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & ((1L << (ABSOLUTE - 188)) | (1L << (APPLY - 188)) | (1L << (AUTO - 188)) | (1L << (AVG - 188)) | (1L << (BASE64 - 188)) | (1L << (CALLER - 188)) | (1L << (CAST - 188)) | (1L << (CATCH - 188)) | (1L << (CHECKSUM_AGG - 188)) | (1L << (COMMITTED - 188)) | (1L << (CONCAT - 188)) | (1L << (COOKIE - 188)) | (1L << (COUNT - 188)) | (1L << (COUNT_BIG - 188)) | (1L << (DELAY - 188)) | (1L << (DELETED - 188)) | (1L << (DENSE_RANK - 188)) | (1L << (DISABLE - 188)) | (1L << (DYNAMIC - 188)) | (1L << (ENCRYPTION - 188)) | (1L << (EXPAND - 188)) | (1L << (FAST - 188)) | (1L << (FAST_FORWARD - 188)) | (1L << (FIRST - 188)) | (1L << (FORCE - 188)) | (1L << (FORCED - 188)) | (1L << (FOLLOWING - 188)) | (1L << (FORWARD_ONLY - 188)) | (1L << (FULLSCAN - 188)) | (1L << (GLOBAL - 188)) | (1L << (GO - 188)) | (1L << (GROUPING - 188)) | (1L << (GROUPING_ID - 188)) | (1L << (HASH - 188)) | (1L << (INSENSITIVE - 188)) | (1L << (INSERTED - 188)) | (1L << (ISOLATION - 188)) | (1L << (KEEP - 188)) | (1L << (KEEPFIXED - 188)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 188)) | (1L << (KEYSET - 188)) | (1L << (LAST - 188)) | (1L << (LEVEL - 188)) | (1L << (LOCAL - 188)) | (1L << (LOCK_ESCALATION - 188)) | (1L << (LOGIN - 188)) | (1L << (LOOP - 188)) | (1L << (MARK - 188)) | (1L << (MAX - 188)) | (1L << (MAXDOP - 188)) | (1L << (MAXRECURSION - 188)) | (1L << (MIN - 188)) | (1L << (MODIFY - 188)) | (1L << (NEXT - 188)) | (1L << (NAME - 188)) | (1L << (NOCOUNT - 188)) | (1L << (NOEXPAND - 188)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (NORECOMPUTE - 252)) | (1L << (NTILE - 252)) | (1L << (NUMBER - 252)) | (1L << (OFFSET - 252)) | (1L << (ONLY - 252)) | (1L << (OPTIMISTIC - 252)) | (1L << (OPTIMIZE - 252)) | (1L << (OUT - 252)) | (1L << (OUTPUT - 252)) | (1L << (OWNER - 252)) | (1L << (PARAMETERIZATION - 252)) | (1L << (PARTITION - 252)) | (1L << (PATH - 252)) | (1L << (PRECEDING - 252)) | (1L << (PRIOR - 252)) | (1L << (RANGE - 252)) | (1L << (RANK - 252)) | (1L << (READONLY - 252)) | (1L << (READ_ONLY - 252)) | (1L << (RECOMPILE - 252)) | (1L << (RELATIVE - 252)) | (1L << (REMOTE - 252)) | (1L << (REPEATABLE - 252)) | (1L << (ROBUST - 252)) | (1L << (ROOT - 252)) | (1L << (ROW - 252)) | (1L << (ROWGUID - 252)) | (1L << (ROWS - 252)) | (1L << (ROW_NUMBER - 252)) | (1L << (SAMPLE - 252)) | (1L << (SCHEMABINDING - 252)) | (1L << (SCROLL - 252)) | (1L << (SCROLL_LOCKS - 252)) | (1L << (SELF - 252)) | (1L << (SERIALIZABLE - 252)) | (1L << (SIMPLE - 252)) | (1L << (SNAPSHOT - 252)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 252)) | (1L << (STATIC - 252)) | (1L << (STATS_STREAM - 252)) | (1L << (STDEV - 252)) | (1L << (STDEVP - 252)) | (1L << (SUM - 252)) | (1L << (THROW - 252)) | (1L << (TIES - 252)) | (1L << (TIME - 252)) | (1L << (TRY - 252)) | (1L << (TYPE - 252)) | (1L << (TYPE_WARNING - 252)) | (1L << (UNBOUNDED - 252)) | (1L << (UNCOMMITTED - 252)) | (1L << (UNKNOWN - 252)) | (1L << (USING - 252)) | (1L << (VAR - 252)) | (1L << (VARP - 252)) | (1L << (VIEW_METADATA - 252)) | (1L << (VIEWS - 252)) | (1L << (WORK - 252)) | (1L << (XML - 252)) | (1L << (XMLNAMESPACES - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (DOUBLE_QUOTE_ID - 316)) | (1L << (SQUARE_BRACKET_ID - 316)) | (1L << (ID - 316)))) != 0)) {
				{
				State = 1011; _localctx.scheme = id();
				}
			}

			State = 1014; Match(DOT);
			{
			State = 1015; _localctx.table = id();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_statementContext : ParserRuleContext {
		public ITerminalNode DECLARE() { return GetToken(tsqlParser.DECLARE, 0); }
		public Declare_localContext[] declare_local() {
			return GetRuleContexts<Declare_localContext>();
		}
		public Declare_localContext declare_local(int i) {
			return GetRuleContext<Declare_localContext>(i);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		public Table_type_definitionContext table_type_definition() {
			return GetRuleContext<Table_type_definitionContext>(0);
		}
		public ITerminalNode AS() { return GetToken(tsqlParser.AS, 0); }
		public Declare_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDeclare_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDeclare_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declare_statementContext declare_statement() {
		Declare_statementContext _localctx = new Declare_statementContext(Context, State);
		EnterRule(_localctx, 64, RULE_declare_statement);
		int _la;
		try {
			State = 1038;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,153,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1017; Match(DECLARE);
				State = 1018; declare_local();
				State = 1023;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1019; Match(COMMA);
					State = 1020; declare_local();
					}
					}
					State = 1025;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1027;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,150,Context) ) {
				case 1:
					{
					State = 1026; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1029; Match(DECLARE);
				State = 1030; Match(LOCAL_ID);
				State = 1032;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 1031; Match(AS);
					}
				}

				State = 1034; table_type_definition();
				State = 1036;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,152,Context) ) {
				case 1:
					{
					State = 1035; Match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_statementContext : ParserRuleContext {
		public ITerminalNode CLOSE() { return GetToken(tsqlParser.CLOSE, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ITerminalNode GLOBAL() { return GetToken(tsqlParser.GLOBAL, 0); }
		public ITerminalNode DEALLOCATE() { return GetToken(tsqlParser.DEALLOCATE, 0); }
		public Declare_cursorContext declare_cursor() {
			return GetRuleContext<Declare_cursorContext>(0);
		}
		public Fetch_cursorContext fetch_cursor() {
			return GetRuleContext<Fetch_cursorContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(tsqlParser.OPEN, 0); }
		public Cursor_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterCursor_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitCursor_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursor_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_statementContext cursor_statement() {
		Cursor_statementContext _localctx = new Cursor_statementContext(Context, State);
		EnterRule(_localctx, 66, RULE_cursor_statement);
		try {
			State = 1066;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CLOSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1040; Match(CLOSE);
				State = 1042;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,154,Context) ) {
				case 1:
					{
					State = 1041; Match(GLOBAL);
					}
					break;
				}
				State = 1044; cursor_name();
				State = 1046;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,155,Context) ) {
				case 1:
					{
					State = 1045; Match(SEMI);
					}
					break;
				}
				}
				break;
			case DEALLOCATE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1048; Match(DEALLOCATE);
				State = 1050;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,156,Context) ) {
				case 1:
					{
					State = 1049; Match(GLOBAL);
					}
					break;
				}
				State = 1052; cursor_name();
				State = 1054;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,157,Context) ) {
				case 1:
					{
					State = 1053; Match(SEMI);
					}
					break;
				}
				}
				break;
			case DECLARE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1056; declare_cursor();
				}
				break;
			case FETCH:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1057; fetch_cursor();
				}
				break;
			case OPEN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1058; Match(OPEN);
				State = 1060;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,158,Context) ) {
				case 1:
					{
					State = 1059; Match(GLOBAL);
					}
					break;
				}
				State = 1062; cursor_name();
				State = 1064;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,159,Context) ) {
				case 1:
					{
					State = 1063; Match(SEMI);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_statementContext : ParserRuleContext {
		public IToken return_status;
		public Func_proc_nameContext func_proc_name() {
			return GetRuleContext<Func_proc_nameContext>(0);
		}
		public ITerminalNode EXEC() { return GetToken(tsqlParser.EXEC, 0); }
		public ITerminalNode EXECUTE() { return GetToken(tsqlParser.EXECUTE, 0); }
		public Execute_statement_argContext[] execute_statement_arg() {
			return GetRuleContexts<Execute_statement_argContext>();
		}
		public Execute_statement_argContext execute_statement_arg(int i) {
			return GetRuleContext<Execute_statement_argContext>(i);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		public Execute_var_stringContext[] execute_var_string() {
			return GetRuleContexts<Execute_var_stringContext>();
		}
		public Execute_var_stringContext execute_var_string(int i) {
			return GetRuleContext<Execute_var_stringContext>(i);
		}
		public ITerminalNode STRING() { return GetToken(tsqlParser.STRING, 0); }
		public ITerminalNode LOGIN() { return GetToken(tsqlParser.LOGIN, 0); }
		public ITerminalNode USER() { return GetToken(tsqlParser.USER, 0); }
		public ITerminalNode AS() { return GetToken(tsqlParser.AS, 0); }
		public Execute_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterExecute_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitExecute_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Execute_statementContext execute_statement() {
		Execute_statementContext _localctx = new Execute_statementContext(Context, State);
		EnterRule(_localctx, 68, RULE_execute_statement);
		int _la;
		try {
			State = 1109;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,169,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1068;
				_la = TokenStream.LA(1);
				if ( !(_la==EXEC || _la==EXECUTE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1071;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCAL_ID) {
					{
					State = 1069; _localctx.return_status = Match(LOCAL_ID);
					State = 1070; Match(EQUAL);
					}
				}

				State = 1073; func_proc_name();
				State = 1082;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT || _la==NULL || ((((_la - 318)) & ~0x3f) == 0 && ((1L << (_la - 318)) & ((1L << (LOCAL_ID - 318)) | (1L << (DECIMAL - 318)) | (1L << (STRING - 318)) | (1L << (BINARY - 318)) | (1L << (FLOAT - 318)) | (1L << (REAL - 318)) | (1L << (DOLLAR - 318)) | (1L << (PLUS - 318)) | (1L << (MINUS - 318)))) != 0)) {
					{
					State = 1074; execute_statement_arg();
					State = 1079;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 1075; Match(COMMA);
						State = 1076; execute_statement_arg();
						}
						}
						State = 1081;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 1085;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,164,Context) ) {
				case 1:
					{
					State = 1084; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1087;
				_la = TokenStream.LA(1);
				if ( !(_la==EXEC || _la==EXECUTE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1088; Match(LR_BRACKET);
				State = 1089; execute_var_string();
				State = 1094;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==PLUS) {
					{
					{
					State = 1090; Match(PLUS);
					State = 1091; execute_var_string();
					}
					}
					State = 1096;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1097; Match(RR_BRACKET);
				State = 1104;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,167,Context) ) {
				case 1:
					{
					State = 1099;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AS) {
						{
						State = 1098; Match(AS);
						}
					}

					State = 1101;
					_la = TokenStream.LA(1);
					if ( !(_la==USER || _la==LOGIN) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1102; Match(EQUAL);
					State = 1103; Match(STRING);
					}
					break;
				}
				State = 1107;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,168,Context) ) {
				case 1:
					{
					State = 1106; Match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_statement_argContext : ParserRuleContext {
		public IToken parameter;
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ITerminalNode[] LOCAL_ID() { return GetTokens(tsqlParser.LOCAL_ID); }
		public ITerminalNode LOCAL_ID(int i) {
			return GetToken(tsqlParser.LOCAL_ID, i);
		}
		public ITerminalNode DEFAULT() { return GetToken(tsqlParser.DEFAULT, 0); }
		public ITerminalNode NULL() { return GetToken(tsqlParser.NULL, 0); }
		public ITerminalNode OUTPUT() { return GetToken(tsqlParser.OUTPUT, 0); }
		public ITerminalNode OUT() { return GetToken(tsqlParser.OUT, 0); }
		public Execute_statement_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_statement_arg; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterExecute_statement_arg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitExecute_statement_arg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute_statement_arg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Execute_statement_argContext execute_statement_arg() {
		Execute_statement_argContext _localctx = new Execute_statement_argContext(Context, State);
		EnterRule(_localctx, 70, RULE_execute_statement_arg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1113;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,170,Context) ) {
			case 1:
				{
				State = 1111; _localctx.parameter = Match(LOCAL_ID);
				State = 1112; Match(EQUAL);
				}
				break;
			}
			State = 1122;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				{
				State = 1115; constant();
				}
				break;
			case LOCAL_ID:
				{
				State = 1116; Match(LOCAL_ID);
				State = 1118;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,171,Context) ) {
				case 1:
					{
					State = 1117;
					_la = TokenStream.LA(1);
					if ( !(_la==OUT || _la==OUTPUT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case DEFAULT:
				{
				State = 1120; Match(DEFAULT);
				}
				break;
			case NULL:
				{
				State = 1121; Match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_var_stringContext : ParserRuleContext {
		public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		public ITerminalNode STRING() { return GetToken(tsqlParser.STRING, 0); }
		public Execute_var_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_var_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterExecute_var_string(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitExecute_var_string(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute_var_string(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Execute_var_stringContext execute_var_string() {
		Execute_var_stringContext _localctx = new Execute_var_stringContext(Context, State);
		EnterRule(_localctx, 72, RULE_execute_var_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1124;
			_la = TokenStream.LA(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Security_statementContext : ParserRuleContext {
		public Execute_clauseContext execute_clause() {
			return GetRuleContext<Execute_clauseContext>(0);
		}
		public ITerminalNode REVERT() { return GetToken(tsqlParser.REVERT, 0); }
		public ITerminalNode WITH() { return GetToken(tsqlParser.WITH, 0); }
		public ITerminalNode COOKIE() { return GetToken(tsqlParser.COOKIE, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		public Security_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_security_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSecurity_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSecurity_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSecurity_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Security_statementContext security_statement() {
		Security_statementContext _localctx = new Security_statementContext(Context, State);
		EnterRule(_localctx, 74, RULE_security_statement);
		try {
			State = 1142;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EXEC:
			case EXECUTE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1126; execute_clause();
				State = 1128;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,173,Context) ) {
				case 1:
					{
					State = 1127; Match(SEMI);
					}
					break;
				}
				}
				break;
			case REVERT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1130; Match(REVERT);
				State = 1137;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,174,Context) ) {
				case 1:
					{
					State = 1131; Match(LR_BRACKET);
					State = 1132; Match(WITH);
					State = 1133; Match(COOKIE);
					State = 1134; Match(EQUAL);
					State = 1135; Match(LOCAL_ID);
					State = 1136; Match(RR_BRACKET);
					}
					break;
				}
				State = 1140;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,175,Context) ) {
				case 1:
					{
					State = 1139; Match(SEMI);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_statmentContext : ParserRuleContext {
		public IdContext member_name;
		public ITerminalNode SET() { return GetToken(tsqlParser.SET, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public ITerminalNode CURSOR() { return GetToken(tsqlParser.CURSOR, 0); }
		public Declare_set_cursor_commonContext declare_set_cursor_common() {
			return GetRuleContext<Declare_set_cursor_commonContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(tsqlParser.FOR, 0); }
		public ITerminalNode READ() { return GetToken(tsqlParser.READ, 0); }
		public ITerminalNode ONLY() { return GetToken(tsqlParser.ONLY, 0); }
		public ITerminalNode UPDATE() { return GetToken(tsqlParser.UPDATE, 0); }
		public ITerminalNode OF() { return GetToken(tsqlParser.OF, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Set_specialContext set_special() {
			return GetRuleContext<Set_specialContext>(0);
		}
		public Set_statmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_statment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSet_statment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSet_statment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_statment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_statmentContext set_statment() {
		Set_statmentContext _localctx = new Set_statmentContext(Context, State);
		EnterRule(_localctx, 76, RULE_set_statment);
		int _la;
		try {
			State = 1183;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,184,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1144; Match(SET);
				State = 1145; Match(LOCAL_ID);
				State = 1148;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 1146; Match(DOT);
					State = 1147; _localctx.member_name = id();
					}
				}

				State = 1150; Match(EQUAL);
				State = 1151; expression(0);
				State = 1153;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,178,Context) ) {
				case 1:
					{
					State = 1152; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1155; Match(SET);
				State = 1156; Match(LOCAL_ID);
				State = 1157; assignment_operator();
				State = 1158; expression(0);
				State = 1160;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,179,Context) ) {
				case 1:
					{
					State = 1159; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1162; Match(SET);
				State = 1163; Match(LOCAL_ID);
				State = 1164; Match(EQUAL);
				State = 1165; Match(CURSOR);
				State = 1166; declare_set_cursor_common();
				State = 1177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 1167; Match(FOR);
					State = 1175;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case READ:
						{
						State = 1168; Match(READ);
						State = 1169; Match(ONLY);
						}
						break;
					case UPDATE:
						{
						State = 1170; Match(UPDATE);
						State = 1173;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==OF) {
							{
							State = 1171; Match(OF);
							State = 1172; column_name_list();
							}
						}

						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				State = 1180;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,183,Context) ) {
				case 1:
					{
					State = 1179; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1182; set_special();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transaction_statementContext : ParserRuleContext {
		public IToken DELAYED_DURABILITY;
		public ITerminalNode BEGIN() { return GetToken(tsqlParser.BEGIN, 0); }
		public ITerminalNode DISTRIBUTED() { return GetToken(tsqlParser.DISTRIBUTED, 0); }
		public ITerminalNode TRAN() { return GetToken(tsqlParser.TRAN, 0); }
		public ITerminalNode TRANSACTION() { return GetToken(tsqlParser.TRANSACTION, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		public ITerminalNode WITH() { return GetToken(tsqlParser.WITH, 0); }
		public ITerminalNode MARK() { return GetToken(tsqlParser.MARK, 0); }
		public ITerminalNode STRING() { return GetToken(tsqlParser.STRING, 0); }
		public ITerminalNode COMMIT() { return GetToken(tsqlParser.COMMIT, 0); }
		public ITerminalNode OFF() { return GetToken(tsqlParser.OFF, 0); }
		public ITerminalNode ON() { return GetToken(tsqlParser.ON, 0); }
		public ITerminalNode WORK() { return GetToken(tsqlParser.WORK, 0); }
		public ITerminalNode ROLLBACK() { return GetToken(tsqlParser.ROLLBACK, 0); }
		public ITerminalNode SAVE() { return GetToken(tsqlParser.SAVE, 0); }
		public Transaction_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transaction_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterTransaction_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitTransaction_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransaction_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Transaction_statementContext transaction_statement() {
		Transaction_statementContext _localctx = new Transaction_statementContext(Context, State);
		EnterRule(_localctx, 78, RULE_transaction_statement);
		int _la;
		try {
			State = 1260;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,203,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1185; Match(BEGIN);
				State = 1186; Match(DISTRIBUTED);
				State = 1187;
				_la = TokenStream.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1190;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,185,Context) ) {
				case 1:
					{
					State = 1188; id();
					}
					break;
				case 2:
					{
					State = 1189; Match(LOCAL_ID);
					}
					break;
				}
				State = 1193;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,186,Context) ) {
				case 1:
					{
					State = 1192; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1195; Match(BEGIN);
				State = 1196;
				_la = TokenStream.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1206;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,189,Context) ) {
				case 1:
					{
					State = 1199;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case FORCESEEK:
					case ABSOLUTE:
					case APPLY:
					case AUTO:
					case AVG:
					case BASE64:
					case CALLER:
					case CAST:
					case CATCH:
					case CHECKSUM_AGG:
					case COMMITTED:
					case CONCAT:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case DELAY:
					case DELETED:
					case DENSE_RANK:
					case DISABLE:
					case DYNAMIC:
					case ENCRYPTION:
					case EXPAND:
					case FAST:
					case FAST_FORWARD:
					case FIRST:
					case FORCE:
					case FORCED:
					case FOLLOWING:
					case FORWARD_ONLY:
					case FULLSCAN:
					case GLOBAL:
					case GO:
					case GROUPING:
					case GROUPING_ID:
					case HASH:
					case INSENSITIVE:
					case INSERTED:
					case ISOLATION:
					case KEEP:
					case KEEPFIXED:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case KEYSET:
					case LAST:
					case LEVEL:
					case LOCAL:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case MARK:
					case MAX:
					case MAXDOP:
					case MAXRECURSION:
					case MIN:
					case MODIFY:
					case NEXT:
					case NAME:
					case NOCOUNT:
					case NOEXPAND:
					case NORECOMPUTE:
					case NTILE:
					case NUMBER:
					case OFFSET:
					case ONLY:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OWNER:
					case PARAMETERIZATION:
					case PARTITION:
					case PATH:
					case PRECEDING:
					case PRIOR:
					case RANGE:
					case RANK:
					case READONLY:
					case READ_ONLY:
					case RECOMPILE:
					case RELATIVE:
					case REMOTE:
					case REPEATABLE:
					case ROBUST:
					case ROOT:
					case ROW:
					case ROWGUID:
					case ROWS:
					case ROW_NUMBER:
					case SAMPLE:
					case SCHEMABINDING:
					case SCROLL:
					case SCROLL_LOCKS:
					case SELF:
					case SERIALIZABLE:
					case SIMPLE:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STATIC:
					case STATS_STREAM:
					case STDEV:
					case STDEVP:
					case SUM:
					case THROW:
					case TIES:
					case TIME:
					case TRY:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case USING:
					case VAR:
					case VARP:
					case VIEW_METADATA:
					case VIEWS:
					case WORK:
					case XML:
					case XMLNAMESPACES:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case ID:
						{
						State = 1197; id();
						}
						break;
					case LOCAL_ID:
						{
						State = 1198; Match(LOCAL_ID);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1204;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,188,Context) ) {
					case 1:
						{
						State = 1201; Match(WITH);
						State = 1202; Match(MARK);
						State = 1203; Match(STRING);
						}
						break;
					}
					}
					break;
				}
				State = 1209;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,190,Context) ) {
				case 1:
					{
					State = 1208; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1211; Match(COMMIT);
				State = 1212;
				_la = TokenStream.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1223;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,193,Context) ) {
				case 1:
					{
					State = 1215;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case FORCESEEK:
					case ABSOLUTE:
					case APPLY:
					case AUTO:
					case AVG:
					case BASE64:
					case CALLER:
					case CAST:
					case CATCH:
					case CHECKSUM_AGG:
					case COMMITTED:
					case CONCAT:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case DELAY:
					case DELETED:
					case DENSE_RANK:
					case DISABLE:
					case DYNAMIC:
					case ENCRYPTION:
					case EXPAND:
					case FAST:
					case FAST_FORWARD:
					case FIRST:
					case FORCE:
					case FORCED:
					case FOLLOWING:
					case FORWARD_ONLY:
					case FULLSCAN:
					case GLOBAL:
					case GO:
					case GROUPING:
					case GROUPING_ID:
					case HASH:
					case INSENSITIVE:
					case INSERTED:
					case ISOLATION:
					case KEEP:
					case KEEPFIXED:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case KEYSET:
					case LAST:
					case LEVEL:
					case LOCAL:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case MARK:
					case MAX:
					case MAXDOP:
					case MAXRECURSION:
					case MIN:
					case MODIFY:
					case NEXT:
					case NAME:
					case NOCOUNT:
					case NOEXPAND:
					case NORECOMPUTE:
					case NTILE:
					case NUMBER:
					case OFFSET:
					case ONLY:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OWNER:
					case PARAMETERIZATION:
					case PARTITION:
					case PATH:
					case PRECEDING:
					case PRIOR:
					case RANGE:
					case RANK:
					case READONLY:
					case READ_ONLY:
					case RECOMPILE:
					case RELATIVE:
					case REMOTE:
					case REPEATABLE:
					case ROBUST:
					case ROOT:
					case ROW:
					case ROWGUID:
					case ROWS:
					case ROW_NUMBER:
					case SAMPLE:
					case SCHEMABINDING:
					case SCROLL:
					case SCROLL_LOCKS:
					case SELF:
					case SERIALIZABLE:
					case SIMPLE:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STATIC:
					case STATS_STREAM:
					case STDEV:
					case STDEVP:
					case SUM:
					case THROW:
					case TIES:
					case TIME:
					case TRY:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case USING:
					case VAR:
					case VARP:
					case VIEW_METADATA:
					case VIEWS:
					case WORK:
					case XML:
					case XMLNAMESPACES:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case ID:
						{
						State = 1213; id();
						}
						break;
					case LOCAL_ID:
						{
						State = 1214; Match(LOCAL_ID);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1221;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,192,Context) ) {
					case 1:
						{
						State = 1217; Match(WITH);
						State = 1218; Match(LR_BRACKET);
						State = 1219;
						_localctx.DELAYED_DURABILITY = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==OFF || _la==ON) ) {
							_localctx.DELAYED_DURABILITY = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1220; Match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				}
				State = 1226;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,194,Context) ) {
				case 1:
					{
					State = 1225; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1228; Match(COMMIT);
				State = 1230;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,195,Context) ) {
				case 1:
					{
					State = 1229; Match(WORK);
					}
					break;
				}
				State = 1233;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,196,Context) ) {
				case 1:
					{
					State = 1232; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1235; Match(ROLLBACK);
				State = 1236;
				_la = TokenStream.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1239;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,197,Context) ) {
				case 1:
					{
					State = 1237; id();
					}
					break;
				case 2:
					{
					State = 1238; Match(LOCAL_ID);
					}
					break;
				}
				State = 1242;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,198,Context) ) {
				case 1:
					{
					State = 1241; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1244; Match(ROLLBACK);
				State = 1246;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,199,Context) ) {
				case 1:
					{
					State = 1245; Match(WORK);
					}
					break;
				}
				State = 1249;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,200,Context) ) {
				case 1:
					{
					State = 1248; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1251; Match(SAVE);
				State = 1252;
				_la = TokenStream.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1255;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,201,Context) ) {
				case 1:
					{
					State = 1253; id();
					}
					break;
				case 2:
					{
					State = 1254; Match(LOCAL_ID);
					}
					break;
				}
				State = 1258;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,202,Context) ) {
				case 1:
					{
					State = 1257; Match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Go_statementContext : ParserRuleContext {
		public IToken count;
		public ITerminalNode GO() { return GetToken(tsqlParser.GO, 0); }
		public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		public Go_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_go_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterGo_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitGo_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGo_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Go_statementContext go_statement() {
		Go_statementContext _localctx = new Go_statementContext(Context, State);
		EnterRule(_localctx, 80, RULE_go_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1262; Match(GO);
			State = 1264;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DECIMAL) {
				{
				State = 1263; _localctx.count = Match(DECIMAL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Use_statementContext : ParserRuleContext {
		public IdContext database;
		public ITerminalNode USE() { return GetToken(tsqlParser.USE, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Use_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_use_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterUse_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitUse_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUse_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Use_statementContext use_statement() {
		Use_statementContext _localctx = new Use_statementContext(Context, State);
		EnterRule(_localctx, 82, RULE_use_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1266; Match(USE);
			State = 1267; _localctx.database = id();
			State = 1269;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,205,Context) ) {
			case 1:
				{
				State = 1268; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_clauseContext : ParserRuleContext {
		public IToken clause;
		public ITerminalNode AS() { return GetToken(tsqlParser.AS, 0); }
		public ITerminalNode EXEC() { return GetToken(tsqlParser.EXEC, 0); }
		public ITerminalNode EXECUTE() { return GetToken(tsqlParser.EXECUTE, 0); }
		public ITerminalNode CALLER() { return GetToken(tsqlParser.CALLER, 0); }
		public ITerminalNode SELF() { return GetToken(tsqlParser.SELF, 0); }
		public ITerminalNode OWNER() { return GetToken(tsqlParser.OWNER, 0); }
		public ITerminalNode STRING() { return GetToken(tsqlParser.STRING, 0); }
		public Execute_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterExecute_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitExecute_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Execute_clauseContext execute_clause() {
		Execute_clauseContext _localctx = new Execute_clauseContext(Context, State);
		EnterRule(_localctx, 84, RULE_execute_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1271;
			_la = TokenStream.LA(1);
			if ( !(_la==EXEC || _la==EXECUTE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1272; Match(AS);
			State = 1273;
			_localctx.clause = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==CALLER || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (OWNER - 261)) | (1L << (SELF - 261)) | (1L << (STRING - 261)))) != 0)) ) {
				_localctx.clause = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_localContext : ParserRuleContext {
		public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ITerminalNode AS() { return GetToken(tsqlParser.AS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Declare_localContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_local; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDeclare_local(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDeclare_local(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare_local(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declare_localContext declare_local() {
		Declare_localContext _localctx = new Declare_localContext(Context, State);
		EnterRule(_localctx, 86, RULE_declare_local);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1275; Match(LOCAL_ID);
			State = 1277;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 1276; Match(AS);
				}
			}

			State = 1279; data_type();
			State = 1282;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL) {
				{
				State = 1280; Match(EQUAL);
				State = 1281; expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_type_definitionContext : ParserRuleContext {
		public ITerminalNode TABLE() { return GetToken(tsqlParser.TABLE, 0); }
		public Column_def_table_constraintContext[] column_def_table_constraint() {
			return GetRuleContexts<Column_def_table_constraintContext>();
		}
		public Column_def_table_constraintContext column_def_table_constraint(int i) {
			return GetRuleContext<Column_def_table_constraintContext>(i);
		}
		public Table_type_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_type_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterTable_type_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitTable_type_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_type_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_type_definitionContext table_type_definition() {
		Table_type_definitionContext _localctx = new Table_type_definitionContext(Context, State);
		EnterRule(_localctx, 88, RULE_table_type_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1284; Match(TABLE);
			State = 1285; Match(LR_BRACKET);
			State = 1286; column_def_table_constraint();
			State = 1293;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CHECK || _la==CONSTRAINT || _la==FORCESEEK || _la==PRIMARY || ((((_la - 172)) & ~0x3f) == 0 && ((1L << (_la - 172)) & ((1L << (UNIQUE - 172)) | (1L << (ABSOLUTE - 172)) | (1L << (APPLY - 172)) | (1L << (AUTO - 172)) | (1L << (AVG - 172)) | (1L << (BASE64 - 172)) | (1L << (CALLER - 172)) | (1L << (CAST - 172)) | (1L << (CATCH - 172)) | (1L << (CHECKSUM_AGG - 172)) | (1L << (COMMITTED - 172)) | (1L << (CONCAT - 172)) | (1L << (COOKIE - 172)) | (1L << (COUNT - 172)) | (1L << (COUNT_BIG - 172)) | (1L << (DELAY - 172)) | (1L << (DELETED - 172)) | (1L << (DENSE_RANK - 172)) | (1L << (DISABLE - 172)) | (1L << (DYNAMIC - 172)) | (1L << (ENCRYPTION - 172)) | (1L << (EXPAND - 172)) | (1L << (FAST - 172)) | (1L << (FAST_FORWARD - 172)) | (1L << (FIRST - 172)) | (1L << (FORCE - 172)) | (1L << (FORCED - 172)) | (1L << (FOLLOWING - 172)) | (1L << (FORWARD_ONLY - 172)) | (1L << (FULLSCAN - 172)) | (1L << (GLOBAL - 172)) | (1L << (GO - 172)) | (1L << (GROUPING - 172)) | (1L << (GROUPING_ID - 172)) | (1L << (HASH - 172)) | (1L << (INSENSITIVE - 172)) | (1L << (INSERTED - 172)) | (1L << (ISOLATION - 172)) | (1L << (KEEP - 172)) | (1L << (KEEPFIXED - 172)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 172)) | (1L << (KEYSET - 172)) | (1L << (LAST - 172)))) != 0) || ((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & ((1L << (LEVEL - 236)) | (1L << (LOCAL - 236)) | (1L << (LOCK_ESCALATION - 236)) | (1L << (LOGIN - 236)) | (1L << (LOOP - 236)) | (1L << (MARK - 236)) | (1L << (MAX - 236)) | (1L << (MAXDOP - 236)) | (1L << (MAXRECURSION - 236)) | (1L << (MIN - 236)) | (1L << (MODIFY - 236)) | (1L << (NEXT - 236)) | (1L << (NAME - 236)) | (1L << (NOCOUNT - 236)) | (1L << (NOEXPAND - 236)) | (1L << (NORECOMPUTE - 236)) | (1L << (NTILE - 236)) | (1L << (NUMBER - 236)) | (1L << (OFFSET - 236)) | (1L << (ONLY - 236)) | (1L << (OPTIMISTIC - 236)) | (1L << (OPTIMIZE - 236)) | (1L << (OUT - 236)) | (1L << (OUTPUT - 236)) | (1L << (OWNER - 236)) | (1L << (PARAMETERIZATION - 236)) | (1L << (PARTITION - 236)) | (1L << (PATH - 236)) | (1L << (PRECEDING - 236)) | (1L << (PRIOR - 236)) | (1L << (RANGE - 236)) | (1L << (RANK - 236)) | (1L << (READONLY - 236)) | (1L << (READ_ONLY - 236)) | (1L << (RECOMPILE - 236)) | (1L << (RELATIVE - 236)) | (1L << (REMOTE - 236)) | (1L << (REPEATABLE - 236)) | (1L << (ROBUST - 236)) | (1L << (ROOT - 236)) | (1L << (ROW - 236)) | (1L << (ROWGUID - 236)) | (1L << (ROWS - 236)) | (1L << (ROW_NUMBER - 236)) | (1L << (SAMPLE - 236)) | (1L << (SCHEMABINDING - 236)) | (1L << (SCROLL - 236)) | (1L << (SCROLL_LOCKS - 236)) | (1L << (SELF - 236)) | (1L << (SERIALIZABLE - 236)) | (1L << (SIMPLE - 236)) | (1L << (SNAPSHOT - 236)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 236)) | (1L << (STATIC - 236)) | (1L << (STATS_STREAM - 236)) | (1L << (STDEV - 236)) | (1L << (STDEVP - 236)) | (1L << (SUM - 236)) | (1L << (THROW - 236)) | (1L << (TIES - 236)) | (1L << (TIME - 236)) | (1L << (TRY - 236)) | (1L << (TYPE - 236)))) != 0) || ((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (TYPE_WARNING - 300)) | (1L << (UNBOUNDED - 300)) | (1L << (UNCOMMITTED - 300)) | (1L << (UNKNOWN - 300)) | (1L << (USING - 300)) | (1L << (VAR - 300)) | (1L << (VARP - 300)) | (1L << (VIEW_METADATA - 300)) | (1L << (VIEWS - 300)) | (1L << (WORK - 300)) | (1L << (XML - 300)) | (1L << (XMLNAMESPACES - 300)) | (1L << (DOUBLE_QUOTE_ID - 300)) | (1L << (SQUARE_BRACKET_ID - 300)) | (1L << (ID - 300)) | (1L << (COMMA - 300)))) != 0)) {
				{
				{
				State = 1288;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1287; Match(COMMA);
					}
				}

				State = 1290; column_def_table_constraint();
				}
				}
				State = 1295;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1296; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_def_table_constraintContext : ParserRuleContext {
		public Column_definitionContext column_definition() {
			return GetRuleContext<Column_definitionContext>(0);
		}
		public Table_constraintContext table_constraint() {
			return GetRuleContext<Table_constraintContext>(0);
		}
		public Column_def_table_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_def_table_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterColumn_def_table_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitColumn_def_table_constraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_def_table_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_def_table_constraintContext column_def_table_constraint() {
		Column_def_table_constraintContext _localctx = new Column_def_table_constraintContext(Context, State);
		EnterRule(_localctx, 90, RULE_column_def_table_constraint);
		try {
			State = 1300;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FORCESEEK:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FORCE:
			case FORCED:
			case FOLLOWING:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NEXT:
			case NAME:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1298; column_definition();
				}
				break;
			case CHECK:
			case CONSTRAINT:
			case PRIMARY:
			case UNIQUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1299; table_constraint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_definitionContext : ParserRuleContext {
		public IdContext constraint;
		public IToken seed;
		public IToken increment;
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ITerminalNode AS() { return GetToken(tsqlParser.AS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode COLLATE() { return GetToken(tsqlParser.COLLATE, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public Null_notnullContext null_notnull() {
			return GetRuleContext<Null_notnullContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(tsqlParser.DEFAULT, 0); }
		public Constant_expressionContext constant_expression() {
			return GetRuleContext<Constant_expressionContext>(0);
		}
		public ITerminalNode IDENTITY() { return GetToken(tsqlParser.IDENTITY, 0); }
		public ITerminalNode ROWGUIDCOL() { return GetToken(tsqlParser.ROWGUIDCOL, 0); }
		public Column_constraintContext[] column_constraint() {
			return GetRuleContexts<Column_constraintContext>();
		}
		public Column_constraintContext column_constraint(int i) {
			return GetRuleContext<Column_constraintContext>(i);
		}
		public ITerminalNode CONSTRAINT() { return GetToken(tsqlParser.CONSTRAINT, 0); }
		public ITerminalNode WITH() { return GetToken(tsqlParser.WITH, 0); }
		public ITerminalNode VALUES() { return GetToken(tsqlParser.VALUES, 0); }
		public ITerminalNode NOT() { return GetToken(tsqlParser.NOT, 0); }
		public ITerminalNode FOR() { return GetToken(tsqlParser.FOR, 0); }
		public ITerminalNode REPLICATION() { return GetToken(tsqlParser.REPLICATION, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(tsqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(tsqlParser.DECIMAL, i);
		}
		public Column_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterColumn_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitColumn_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_definitionContext column_definition() {
		Column_definitionContext _localctx = new Column_definitionContext(Context, State);
		EnterRule(_localctx, 92, RULE_column_definition);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1302; column_name();
			State = 1306;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FORCESEEK:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FORCE:
			case FORCED:
			case FOLLOWING:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NEXT:
			case NAME:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				State = 1303; data_type();
				}
				break;
			case AS:
				{
				State = 1304; Match(AS);
				State = 1305; expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1310;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLLATE) {
				{
				State = 1308; Match(COLLATE);
				State = 1309; id();
				}
			}

			State = 1313;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,213,Context) ) {
			case 1:
				{
				State = 1312; null_notnull();
				}
				break;
			}
			State = 1338;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,218,Context) ) {
			case 1:
				{
				State = 1317;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 1315; Match(CONSTRAINT);
					State = 1316; _localctx.constraint = id();
					}
				}

				State = 1319; Match(DEFAULT);
				State = 1320; constant_expression();
				State = 1323;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,215,Context) ) {
				case 1:
					{
					State = 1321; Match(WITH);
					State = 1322; Match(VALUES);
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 1325; Match(IDENTITY);
				State = 1331;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,216,Context) ) {
				case 1:
					{
					State = 1326; Match(LR_BRACKET);
					State = 1327; _localctx.seed = Match(DECIMAL);
					State = 1328; Match(COMMA);
					State = 1329; _localctx.increment = Match(DECIMAL);
					State = 1330; Match(RR_BRACKET);
					}
					break;
				}
				State = 1336;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,217,Context) ) {
				case 1:
					{
					State = 1333; Match(NOT);
					State = 1334; Match(FOR);
					State = 1335; Match(REPLICATION);
					}
					break;
				}
				}
				break;
			}
			State = 1341;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ROWGUIDCOL) {
				{
				State = 1340; Match(ROWGUIDCOL);
				}
			}

			State = 1346;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,220,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1343; column_constraint();
					}
					} 
				}
				State = 1348;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,220,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_constraintContext : ParserRuleContext {
		public ITerminalNode CHECK() { return GetToken(tsqlParser.CHECK, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ITerminalNode CONSTRAINT() { return GetToken(tsqlParser.CONSTRAINT, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Null_notnullContext null_notnull() {
			return GetRuleContext<Null_notnullContext>(0);
		}
		public ITerminalNode PRIMARY() { return GetToken(tsqlParser.PRIMARY, 0); }
		public ITerminalNode KEY() { return GetToken(tsqlParser.KEY, 0); }
		public ITerminalNode UNIQUE() { return GetToken(tsqlParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return GetRuleContext<ClusteredContext>(0);
		}
		public Index_optionsContext index_options() {
			return GetRuleContext<Index_optionsContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(tsqlParser.NOT, 0); }
		public ITerminalNode FOR() { return GetToken(tsqlParser.FOR, 0); }
		public ITerminalNode REPLICATION() { return GetToken(tsqlParser.REPLICATION, 0); }
		public Column_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterColumn_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitColumn_constraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_constraintContext column_constraint() {
		Column_constraintContext _localctx = new Column_constraintContext(Context, State);
		EnterRule(_localctx, 94, RULE_column_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1351;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONSTRAINT) {
				{
				State = 1349; Match(CONSTRAINT);
				State = 1350; id();
				}
			}

			State = 1354;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT || _la==NULL) {
				{
				State = 1353; null_notnull();
				}
			}

			State = 1377;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRIMARY:
			case UNIQUE:
				{
				State = 1359;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PRIMARY:
					{
					State = 1356; Match(PRIMARY);
					State = 1357; Match(KEY);
					}
					break;
				case UNIQUE:
					{
					State = 1358; Match(UNIQUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1362;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CLUSTERED || _la==NONCLUSTERED) {
					{
					State = 1361; clustered();
					}
				}

				State = 1365;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,225,Context) ) {
				case 1:
					{
					State = 1364; index_options();
					}
					break;
				}
				}
				break;
			case CHECK:
				{
				State = 1367; Match(CHECK);
				State = 1371;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 1368; Match(NOT);
					State = 1369; Match(FOR);
					State = 1370; Match(REPLICATION);
					}
				}

				State = 1373; Match(LR_BRACKET);
				State = 1374; search_condition();
				State = 1375; Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_constraintContext : ParserRuleContext {
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public ITerminalNode CHECK() { return GetToken(tsqlParser.CHECK, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ITerminalNode CONSTRAINT() { return GetToken(tsqlParser.CONSTRAINT, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode PRIMARY() { return GetToken(tsqlParser.PRIMARY, 0); }
		public ITerminalNode KEY() { return GetToken(tsqlParser.KEY, 0); }
		public ITerminalNode UNIQUE() { return GetToken(tsqlParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return GetRuleContext<ClusteredContext>(0);
		}
		public Index_optionsContext index_options() {
			return GetRuleContext<Index_optionsContext>(0);
		}
		public ITerminalNode ON() { return GetToken(tsqlParser.ON, 0); }
		public ITerminalNode NOT() { return GetToken(tsqlParser.NOT, 0); }
		public ITerminalNode FOR() { return GetToken(tsqlParser.FOR, 0); }
		public ITerminalNode REPLICATION() { return GetToken(tsqlParser.REPLICATION, 0); }
		public Table_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterTable_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitTable_constraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_constraintContext table_constraint() {
		Table_constraintContext _localctx = new Table_constraintContext(Context, State);
		EnterRule(_localctx, 96, RULE_table_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1381;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONSTRAINT) {
				{
				State = 1379; Match(CONSTRAINT);
				State = 1380; id();
				}
			}

			State = 1411;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRIMARY:
			case UNIQUE:
				{
				State = 1386;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PRIMARY:
					{
					State = 1383; Match(PRIMARY);
					State = 1384; Match(KEY);
					}
					break;
				case UNIQUE:
					{
					State = 1385; Match(UNIQUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1389;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CLUSTERED || _la==NONCLUSTERED) {
					{
					State = 1388; clustered();
					}
				}

				State = 1391; Match(LR_BRACKET);
				State = 1392; column_name_list();
				State = 1393; Match(RR_BRACKET);
				State = 1395;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,231,Context) ) {
				case 1:
					{
					State = 1394; index_options();
					}
					break;
				}
				State = 1399;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON) {
					{
					State = 1397; Match(ON);
					State = 1398; id();
					}
				}

				}
				break;
			case CHECK:
				{
				State = 1401; Match(CHECK);
				State = 1405;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 1402; Match(NOT);
					State = 1403; Match(FOR);
					State = 1404; Match(REPLICATION);
					}
				}

				State = 1407; Match(LR_BRACKET);
				State = 1408; search_condition();
				State = 1409; Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_optionsContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(tsqlParser.WITH, 0); }
		public Index_optionContext[] index_option() {
			return GetRuleContexts<Index_optionContext>();
		}
		public Index_optionContext index_option(int i) {
			return GetRuleContext<Index_optionContext>(i);
		}
		public Index_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_options; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterIndex_options(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitIndex_options(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_optionsContext index_options() {
		Index_optionsContext _localctx = new Index_optionsContext(Context, State);
		EnterRule(_localctx, 98, RULE_index_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1413; Match(WITH);
			State = 1414; Match(LR_BRACKET);
			State = 1415; index_option();
			State = 1420;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1416; Match(COMMA);
				State = 1417; index_option();
				}
				}
				State = 1422;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1423; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_optionContext : ParserRuleContext {
		public Simple_idContext[] simple_id() {
			return GetRuleContexts<Simple_idContext>();
		}
		public Simple_idContext simple_id(int i) {
			return GetRuleContext<Simple_idContext>(i);
		}
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		public Index_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterIndex_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitIndex_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_optionContext index_option() {
		Index_optionContext _localctx = new Index_optionContext(Context, State);
		EnterRule(_localctx, 100, RULE_index_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1425; simple_id();
			State = 1426; Match(EQUAL);
			State = 1430;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FORCESEEK:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FORCE:
			case FORCED:
			case FOLLOWING:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NEXT:
			case NAME:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case ID:
				{
				State = 1427; simple_id();
				}
				break;
			case OFF:
			case ON:
				{
				State = 1428; on_off();
				}
				break;
			case DECIMAL:
				{
				State = 1429; Match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_cursorContext : ParserRuleContext {
		public ITerminalNode DECLARE() { return GetToken(tsqlParser.DECLARE, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ITerminalNode CURSOR() { return GetToken(tsqlParser.CURSOR, 0); }
		public ITerminalNode[] FOR() { return GetTokens(tsqlParser.FOR); }
		public ITerminalNode FOR(int i) {
			return GetToken(tsqlParser.FOR, i);
		}
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public ITerminalNode INSENSITIVE() { return GetToken(tsqlParser.INSENSITIVE, 0); }
		public ITerminalNode SCROLL() { return GetToken(tsqlParser.SCROLL, 0); }
		public ITerminalNode READ() { return GetToken(tsqlParser.READ, 0); }
		public ITerminalNode ONLY() { return GetToken(tsqlParser.ONLY, 0); }
		public ITerminalNode UPDATE() { return GetToken(tsqlParser.UPDATE, 0); }
		public ITerminalNode OF() { return GetToken(tsqlParser.OF, 0); }
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Declare_set_cursor_commonContext declare_set_cursor_common() {
			return GetRuleContext<Declare_set_cursor_commonContext>(0);
		}
		public Declare_cursorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_cursor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDeclare_cursor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDeclare_cursor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare_cursor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declare_cursorContext declare_cursor() {
		Declare_cursorContext _localctx = new Declare_cursorContext(Context, State);
		EnterRule(_localctx, 102, RULE_declare_cursor);
		int _la;
		try {
			State = 1477;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,246,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1432; Match(DECLARE);
				State = 1433; cursor_name();
				State = 1434; Match(CURSOR);
				State = 1436;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,237,Context) ) {
				case 1:
					{
					State = 1435; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1438; Match(DECLARE);
				State = 1439; cursor_name();
				State = 1441;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INSENSITIVE) {
					{
					State = 1440; Match(INSENSITIVE);
					}
				}

				State = 1444;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SCROLL) {
					{
					State = 1443; Match(SCROLL);
					}
				}

				State = 1446; Match(CURSOR);
				State = 1447; Match(FOR);
				State = 1448; select_statement();
				State = 1457;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 1449; Match(FOR);
					State = 1455;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case READ:
						{
						State = 1450; Match(READ);
						State = 1451; Match(ONLY);
						}
						break;
					case UPDATE:
						{
						State = 1452; Match(UPDATE);
						}
						break;
					case OF:
						{
						{
						State = 1453; Match(OF);
						State = 1454; column_name_list();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				State = 1460;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,242,Context) ) {
				case 1:
					{
					State = 1459; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1462; Match(DECLARE);
				State = 1463; cursor_name();
				State = 1464; Match(CURSOR);
				State = 1465; declare_set_cursor_common();
				State = 1472;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 1466; Match(FOR);
					State = 1467; Match(UPDATE);
					State = 1470;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==OF) {
						{
						State = 1468; Match(OF);
						State = 1469; column_name_list();
						}
					}

					}
				}

				State = 1475;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,245,Context) ) {
				case 1:
					{
					State = 1474; Match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_set_cursor_commonContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(tsqlParser.FOR, 0); }
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public ITerminalNode TYPE_WARNING() { return GetToken(tsqlParser.TYPE_WARNING, 0); }
		public ITerminalNode LOCAL() { return GetToken(tsqlParser.LOCAL, 0); }
		public ITerminalNode GLOBAL() { return GetToken(tsqlParser.GLOBAL, 0); }
		public ITerminalNode FORWARD_ONLY() { return GetToken(tsqlParser.FORWARD_ONLY, 0); }
		public ITerminalNode SCROLL() { return GetToken(tsqlParser.SCROLL, 0); }
		public ITerminalNode STATIC() { return GetToken(tsqlParser.STATIC, 0); }
		public ITerminalNode KEYSET() { return GetToken(tsqlParser.KEYSET, 0); }
		public ITerminalNode DYNAMIC() { return GetToken(tsqlParser.DYNAMIC, 0); }
		public ITerminalNode FAST_FORWARD() { return GetToken(tsqlParser.FAST_FORWARD, 0); }
		public ITerminalNode READ_ONLY() { return GetToken(tsqlParser.READ_ONLY, 0); }
		public ITerminalNode SCROLL_LOCKS() { return GetToken(tsqlParser.SCROLL_LOCKS, 0); }
		public ITerminalNode OPTIMISTIC() { return GetToken(tsqlParser.OPTIMISTIC, 0); }
		public Declare_set_cursor_commonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_set_cursor_common; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDeclare_set_cursor_common(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDeclare_set_cursor_common(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare_set_cursor_common(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declare_set_cursor_commonContext declare_set_cursor_common() {
		Declare_set_cursor_commonContext _localctx = new Declare_set_cursor_commonContext(Context, State);
		EnterRule(_localctx, 104, RULE_declare_set_cursor_common);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1480;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GLOBAL || _la==LOCAL) {
				{
				State = 1479;
				_la = TokenStream.LA(1);
				if ( !(_la==GLOBAL || _la==LOCAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1483;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FORWARD_ONLY || _la==SCROLL) {
				{
				State = 1482;
				_la = TokenStream.LA(1);
				if ( !(_la==FORWARD_ONLY || _la==SCROLL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1486;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 212)) & ~0x3f) == 0 && ((1L << (_la - 212)) & ((1L << (DYNAMIC - 212)) | (1L << (FAST_FORWARD - 212)) | (1L << (KEYSET - 212)))) != 0) || _la==STATIC) {
				{
				State = 1485;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 212)) & ~0x3f) == 0 && ((1L << (_la - 212)) & ((1L << (DYNAMIC - 212)) | (1L << (FAST_FORWARD - 212)) | (1L << (KEYSET - 212)))) != 0) || _la==STATIC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1489;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (OPTIMISTIC - 257)) | (1L << (READ_ONLY - 257)) | (1L << (SCROLL_LOCKS - 257)))) != 0)) {
				{
				State = 1488;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (OPTIMISTIC - 257)) | (1L << (READ_ONLY - 257)) | (1L << (SCROLL_LOCKS - 257)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1492;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TYPE_WARNING) {
				{
				State = 1491; Match(TYPE_WARNING);
				}
			}

			State = 1494; Match(FOR);
			State = 1495; select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fetch_cursorContext : ParserRuleContext {
		public ITerminalNode FETCH() { return GetToken(tsqlParser.FETCH, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(tsqlParser.FROM, 0); }
		public ITerminalNode GLOBAL() { return GetToken(tsqlParser.GLOBAL, 0); }
		public ITerminalNode INTO() { return GetToken(tsqlParser.INTO, 0); }
		public ITerminalNode[] LOCAL_ID() { return GetTokens(tsqlParser.LOCAL_ID); }
		public ITerminalNode LOCAL_ID(int i) {
			return GetToken(tsqlParser.LOCAL_ID, i);
		}
		public ITerminalNode NEXT() { return GetToken(tsqlParser.NEXT, 0); }
		public ITerminalNode PRIOR() { return GetToken(tsqlParser.PRIOR, 0); }
		public ITerminalNode FIRST() { return GetToken(tsqlParser.FIRST, 0); }
		public ITerminalNode LAST() { return GetToken(tsqlParser.LAST, 0); }
		public ITerminalNode ABSOLUTE() { return GetToken(tsqlParser.ABSOLUTE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RELATIVE() { return GetToken(tsqlParser.RELATIVE, 0); }
		public Fetch_cursorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fetch_cursor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterFetch_cursor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitFetch_cursor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFetch_cursor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fetch_cursorContext fetch_cursor() {
		Fetch_cursorContext _localctx = new Fetch_cursorContext(Context, State);
		EnterRule(_localctx, 106, RULE_fetch_cursor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1497; Match(FETCH);
			State = 1509;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,253,Context) ) {
			case 1:
				{
				State = 1506;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NEXT:
					{
					State = 1498; Match(NEXT);
					}
					break;
				case PRIOR:
					{
					State = 1499; Match(PRIOR);
					}
					break;
				case FIRST:
					{
					State = 1500; Match(FIRST);
					}
					break;
				case LAST:
					{
					State = 1501; Match(LAST);
					}
					break;
				case ABSOLUTE:
					{
					State = 1502; Match(ABSOLUTE);
					State = 1503; expression(0);
					}
					break;
				case RELATIVE:
					{
					State = 1504; Match(RELATIVE);
					State = 1505; expression(0);
					}
					break;
				case FROM:
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1508; Match(FROM);
				}
				break;
			}
			State = 1512;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,254,Context) ) {
			case 1:
				{
				State = 1511; Match(GLOBAL);
				}
				break;
			}
			State = 1514; cursor_name();
			State = 1524;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 1515; Match(INTO);
				State = 1516; Match(LOCAL_ID);
				State = 1521;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1517; Match(COMMA);
					State = 1518; Match(LOCAL_ID);
					}
					}
					State = 1523;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 1527;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,257,Context) ) {
			case 1:
				{
				State = 1526; Match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_specialContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(tsqlParser.SET, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		public On_offContext on_off() {
			return GetRuleContext<On_offContext>(0);
		}
		public ITerminalNode TRANSACTION() { return GetToken(tsqlParser.TRANSACTION, 0); }
		public ITerminalNode ISOLATION() { return GetToken(tsqlParser.ISOLATION, 0); }
		public ITerminalNode LEVEL() { return GetToken(tsqlParser.LEVEL, 0); }
		public ITerminalNode READ() { return GetToken(tsqlParser.READ, 0); }
		public ITerminalNode UNCOMMITTED() { return GetToken(tsqlParser.UNCOMMITTED, 0); }
		public ITerminalNode COMMITTED() { return GetToken(tsqlParser.COMMITTED, 0); }
		public ITerminalNode REPEATABLE() { return GetToken(tsqlParser.REPEATABLE, 0); }
		public ITerminalNode SNAPSHOT() { return GetToken(tsqlParser.SNAPSHOT, 0); }
		public ITerminalNode SERIALIZABLE() { return GetToken(tsqlParser.SERIALIZABLE, 0); }
		public ITerminalNode IDENTITY_INSERT() { return GetToken(tsqlParser.IDENTITY_INSERT, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Set_specialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_special; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSet_special(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSet_special(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_special(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_specialContext set_special() {
		Set_specialContext _localctx = new Set_specialContext(Context, State);
		EnterRule(_localctx, 108, RULE_set_special);
		try {
			State = 1564;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,263,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1529; Match(SET);
				State = 1530; id();
				State = 1535;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FORCESEEK:
				case ABSOLUTE:
				case APPLY:
				case AUTO:
				case AVG:
				case BASE64:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FORCE:
				case FORCED:
				case FOLLOWING:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GO:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NEXT:
				case NAME:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					State = 1531; id();
					}
					break;
				case DECIMAL:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case PLUS:
				case MINUS:
					{
					State = 1532; constant();
					}
					break;
				case LOCAL_ID:
					{
					State = 1533; Match(LOCAL_ID);
					}
					break;
				case OFF:
				case ON:
					{
					State = 1534; on_off();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1538;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,259,Context) ) {
				case 1:
					{
					State = 1537; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1540; Match(SET);
				State = 1541; Match(TRANSACTION);
				State = 1542; Match(ISOLATION);
				State = 1543; Match(LEVEL);
				State = 1552;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,260,Context) ) {
				case 1:
					{
					State = 1544; Match(READ);
					State = 1545; Match(UNCOMMITTED);
					}
					break;
				case 2:
					{
					State = 1546; Match(READ);
					State = 1547; Match(COMMITTED);
					}
					break;
				case 3:
					{
					State = 1548; Match(REPEATABLE);
					State = 1549; Match(READ);
					}
					break;
				case 4:
					{
					State = 1550; Match(SNAPSHOT);
					}
					break;
				case 5:
					{
					State = 1551; Match(SERIALIZABLE);
					}
					break;
				}
				State = 1555;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,261,Context) ) {
				case 1:
					{
					State = 1554; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1557; Match(SET);
				State = 1558; Match(IDENTITY_INSERT);
				State = 1559; table_name();
				State = 1560; on_off();
				State = 1562;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,262,Context) ) {
				case 1:
					{
					State = 1561; Match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Binary_operator_expressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Comparison_operatorContext comparison_operator() {
			return GetRuleContext<Comparison_operatorContext>(0);
		}
		public Binary_operator_expressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterBinary_operator_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitBinary_operator_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary_operator_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Primitive_expressionContext : ExpressionContext {
		public ITerminalNode DEFAULT() { return GetToken(tsqlParser.DEFAULT, 0); }
		public ITerminalNode NULL() { return GetToken(tsqlParser.NULL, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public Primitive_expressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterPrimitive_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitPrimitive_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitive_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Bracket_expressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Bracket_expressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterBracket_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitBracket_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracket_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Unary_operator_expressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Unary_operator_expressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterUnary_operator_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitUnary_operator_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_operator_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Function_call_expressionContext : ExpressionContext {
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode COLLATE() { return GetToken(tsqlParser.COLLATE, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Function_call_expressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterFunction_call_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitFunction_call_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Case_expressionContext : ExpressionContext {
		public Case_exprContext case_expr() {
			return GetRuleContext<Case_exprContext>(0);
		}
		public Case_expressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterCase_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitCase_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Column_ref_expressionContext : ExpressionContext {
		public Full_column_nameContext full_column_name() {
			return GetRuleContext<Full_column_nameContext>(0);
		}
		public Column_ref_expressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterColumn_ref_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitColumn_ref_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_ref_expression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Subquery_expressionContext : ExpressionContext {
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public Subquery_expressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSubquery_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSubquery_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubquery_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 110;
		EnterRecursionRule(_localctx, 110, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1586;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,264,Context) ) {
			case 1:
				{
				_localctx = new Primitive_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1567; Match(DEFAULT);
				}
				break;
			case 2:
				{
				_localctx = new Primitive_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1568; Match(NULL);
				}
				break;
			case 3:
				{
				_localctx = new Primitive_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1569; Match(LOCAL_ID);
				}
				break;
			case 4:
				{
				_localctx = new Primitive_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1570; constant();
				}
				break;
			case 5:
				{
				_localctx = new Function_call_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1571; function_call();
				}
				break;
			case 6:
				{
				_localctx = new Case_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1572; case_expr();
				}
				break;
			case 7:
				{
				_localctx = new Column_ref_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1573; full_column_name();
				}
				break;
			case 8:
				{
				_localctx = new Bracket_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1574; Match(LR_BRACKET);
				State = 1575; expression(0);
				State = 1576; Match(RR_BRACKET);
				}
				break;
			case 9:
				{
				_localctx = new Subquery_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1578; Match(LR_BRACKET);
				State = 1579; subquery();
				State = 1580; Match(RR_BRACKET);
				}
				break;
			case 10:
				{
				_localctx = new Unary_operator_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1582; Match(BIT_NOT);
				State = 1583; expression(5);
				}
				break;
			case 11:
				{
				_localctx = new Unary_operator_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1584;
				((Unary_operator_expressionContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
					((Unary_operator_expressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1585; expression(3);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1603;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,266,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1601;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,265,Context) ) {
					case 1:
						{
						_localctx = new Binary_operator_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1588;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 1589;
						((Binary_operator_expressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 347)) & ~0x3f) == 0 && ((1L << (_la - 347)) & ((1L << (STAR - 347)) | (1L << (DIVIDE - 347)) | (1L << (MODULE - 347)))) != 0)) ) {
							((Binary_operator_expressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1590; expression(5);
						}
						break;
					case 2:
						{
						_localctx = new Binary_operator_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1591;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 1592;
						((Binary_operator_expressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 350)) & ~0x3f) == 0 && ((1L << (_la - 350)) & ((1L << (PLUS - 350)) | (1L << (MINUS - 350)) | (1L << (BIT_OR - 350)) | (1L << (BIT_AND - 350)) | (1L << (BIT_XOR - 350)))) != 0)) ) {
							((Binary_operator_expressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1593; expression(3);
						}
						break;
					case 3:
						{
						_localctx = new Binary_operator_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1594;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 1595; comparison_operator();
						State = 1596; expression(2);
						}
						break;
					case 4:
						{
						_localctx = new Function_call_expressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1598;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 1599; Match(COLLATE);
						State = 1600; id();
						}
						break;
					}
					} 
				}
				State = 1605;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,266,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Constant_expressionContext : ParserRuleContext {
		public ITerminalNode NULL() { return GetToken(tsqlParser.NULL, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		public Constant_expressionContext constant_expression() {
			return GetRuleContext<Constant_expressionContext>(0);
		}
		public Constant_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterConstant_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitConstant_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constant_expressionContext constant_expression() {
		Constant_expressionContext _localctx = new Constant_expressionContext(Context, State);
		EnterRule(_localctx, 112, RULE_constant_expression);
		try {
			State = 1614;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NULL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1606; Match(NULL);
				}
				break;
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1607; constant();
				}
				break;
			case COALESCE:
			case CONVERT:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case FORCESEEK:
			case IDENTITY:
			case LEFT:
			case NULLIF:
			case RIGHT:
			case SESSION_USER:
			case SYSTEM_USER:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case BINARY_CHECKSUM:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FORCE:
			case FORCED:
			case FOLLOWING:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MODIFY:
			case NEXT:
			case NAME:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1608; function_call();
				}
				break;
			case LOCAL_ID:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1609; Match(LOCAL_ID);
				}
				break;
			case LR_BRACKET:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1610; Match(LR_BRACKET);
				State = 1611; constant_expression();
				State = 1612; Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubqueryContext : ParserRuleContext {
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subquery; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSubquery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSubquery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubquery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubqueryContext subquery() {
		SubqueryContext _localctx = new SubqueryContext(Context, State);
		EnterRule(_localctx, 114, RULE_subquery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1616; select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_expressionContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(tsqlParser.WITH, 0); }
		public Common_table_expressionContext[] common_table_expression() {
			return GetRuleContexts<Common_table_expressionContext>();
		}
		public Common_table_expressionContext common_table_expression(int i) {
			return GetRuleContext<Common_table_expressionContext>(i);
		}
		public ITerminalNode XMLNAMESPACES() { return GetToken(tsqlParser.XMLNAMESPACES, 0); }
		public With_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterWith_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitWith_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWith_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public With_expressionContext with_expression() {
		With_expressionContext _localctx = new With_expressionContext(Context, State);
		EnterRule(_localctx, 116, RULE_with_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1618; Match(WITH);
			State = 1621;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,268,Context) ) {
			case 1:
				{
				State = 1619; Match(XMLNAMESPACES);
				State = 1620; Match(COMMA);
				}
				break;
			}
			State = 1623; common_table_expression();
			State = 1628;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1624; Match(COMMA);
				State = 1625; common_table_expression();
				}
				}
				State = 1630;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Common_table_expressionContext : ParserRuleContext {
		public IdContext expression_name;
		public ITerminalNode AS() { return GetToken(tsqlParser.AS, 0); }
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Column_name_listContext column_name_list() {
			return GetRuleContext<Column_name_listContext>(0);
		}
		public Common_table_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_common_table_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterCommon_table_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitCommon_table_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommon_table_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Common_table_expressionContext common_table_expression() {
		Common_table_expressionContext _localctx = new Common_table_expressionContext(Context, State);
		EnterRule(_localctx, 118, RULE_common_table_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1631; _localctx.expression_name = id();
			State = 1636;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_BRACKET) {
				{
				State = 1632; Match(LR_BRACKET);
				State = 1633; column_name_list();
				State = 1634; Match(RR_BRACKET);
				}
			}

			State = 1638; Match(AS);
			State = 1639; Match(LR_BRACKET);
			State = 1640; select_statement();
			State = 1641; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_elemContext : ParserRuleContext {
		public IdContext udt_column_name;
		public IdContext method_name;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Full_column_nameContext full_column_name() {
			return GetRuleContext<Full_column_nameContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public Update_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_elem; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterUpdate_elem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitUpdate_elem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate_elem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Update_elemContext update_elem() {
		Update_elemContext _localctx = new Update_elemContext(Context, State);
		EnterRule(_localctx, 120, RULE_update_elem);
		try {
			State = 1659;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,273,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1645;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FORCESEEK:
				case ABSOLUTE:
				case APPLY:
				case AUTO:
				case AVG:
				case BASE64:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FORCE:
				case FORCED:
				case FOLLOWING:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GO:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NEXT:
				case NAME:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					State = 1643; full_column_name();
					}
					break;
				case LOCAL_ID:
					{
					State = 1644; Match(LOCAL_ID);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1649;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case EQUAL:
					{
					State = 1647; Match(EQUAL);
					}
					break;
				case PLUS_ASSIGN:
				case MINUS_ASSIGN:
				case MULT_ASSIGN:
				case DIV_ASSIGN:
				case MOD_ASSIGN:
				case AND_ASSIGN:
				case XOR_ASSIGN:
				case OR_ASSIGN:
					{
					State = 1648; assignment_operator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1651; expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1652; _localctx.udt_column_name = id();
				State = 1653; Match(DOT);
				State = 1654; _localctx.method_name = id();
				State = 1655; Match(LR_BRACKET);
				State = 1656; expression_list();
				State = 1657; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Search_condition_listContext : ParserRuleContext {
		public Search_conditionContext[] search_condition() {
			return GetRuleContexts<Search_conditionContext>();
		}
		public Search_conditionContext search_condition(int i) {
			return GetRuleContext<Search_conditionContext>(i);
		}
		public Search_condition_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_search_condition_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSearch_condition_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSearch_condition_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSearch_condition_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Search_condition_listContext search_condition_list() {
		Search_condition_listContext _localctx = new Search_condition_listContext(Context, State);
		EnterRule(_localctx, 122, RULE_search_condition_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1661; search_condition();
			State = 1666;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1662; Match(COMMA);
				State = 1663; search_condition();
				}
				}
				State = 1668;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Search_conditionContext : ParserRuleContext {
		public Search_condition_orContext[] search_condition_or() {
			return GetRuleContexts<Search_condition_orContext>();
		}
		public Search_condition_orContext search_condition_or(int i) {
			return GetRuleContext<Search_condition_orContext>(i);
		}
		public ITerminalNode[] AND() { return GetTokens(tsqlParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(tsqlParser.AND, i);
		}
		public Search_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_search_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSearch_condition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSearch_condition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSearch_condition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Search_conditionContext search_condition() {
		Search_conditionContext _localctx = new Search_conditionContext(Context, State);
		EnterRule(_localctx, 124, RULE_search_condition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1669; search_condition_or();
			State = 1674;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 1670; Match(AND);
				State = 1671; search_condition_or();
				}
				}
				State = 1676;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Search_condition_orContext : ParserRuleContext {
		public Search_condition_notContext[] search_condition_not() {
			return GetRuleContexts<Search_condition_notContext>();
		}
		public Search_condition_notContext search_condition_not(int i) {
			return GetRuleContext<Search_condition_notContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(tsqlParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(tsqlParser.OR, i);
		}
		public Search_condition_orContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_search_condition_or; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSearch_condition_or(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSearch_condition_or(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSearch_condition_or(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Search_condition_orContext search_condition_or() {
		Search_condition_orContext _localctx = new Search_condition_orContext(Context, State);
		EnterRule(_localctx, 126, RULE_search_condition_or);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1677; search_condition_not();
			State = 1682;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 1678; Match(OR);
				State = 1679; search_condition_not();
				}
				}
				State = 1684;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Search_condition_notContext : ParserRuleContext {
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(tsqlParser.NOT, 0); }
		public Search_condition_notContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_search_condition_not; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSearch_condition_not(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSearch_condition_not(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSearch_condition_not(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Search_condition_notContext search_condition_not() {
		Search_condition_notContext _localctx = new Search_condition_notContext(Context, State);
		EnterRule(_localctx, 128, RULE_search_condition_not);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1686;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 1685; Match(NOT);
				}
			}

			State = 1688; predicate();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public ITerminalNode EXISTS() { return GetToken(tsqlParser.EXISTS, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Comparison_operatorContext comparison_operator() {
			return GetRuleContext<Comparison_operatorContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(tsqlParser.ALL, 0); }
		public ITerminalNode SOME() { return GetToken(tsqlParser.SOME, 0); }
		public ITerminalNode ANY() { return GetToken(tsqlParser.ANY, 0); }
		public ITerminalNode BETWEEN() { return GetToken(tsqlParser.BETWEEN, 0); }
		public ITerminalNode AND() { return GetToken(tsqlParser.AND, 0); }
		public ITerminalNode NOT() { return GetToken(tsqlParser.NOT, 0); }
		public ITerminalNode IN() { return GetToken(tsqlParser.IN, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public ITerminalNode LIKE() { return GetToken(tsqlParser.LIKE, 0); }
		public ITerminalNode ESCAPE() { return GetToken(tsqlParser.ESCAPE, 0); }
		public ITerminalNode IS() { return GetToken(tsqlParser.IS, 0); }
		public Null_notnullContext null_notnull() {
			return GetRuleContext<Null_notnullContext>(0);
		}
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterPredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitPredicate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		PredicateContext _localctx = new PredicateContext(Context, State);
		EnterRule(_localctx, 130, RULE_predicate);
		int _la;
		try {
			State = 1745;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,283,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1690; Match(EXISTS);
				State = 1691; Match(LR_BRACKET);
				State = 1692; subquery();
				State = 1693; Match(RR_BRACKET);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1695; expression(0);
				State = 1696; comparison_operator();
				State = 1697; expression(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1699; expression(0);
				State = 1700; comparison_operator();
				State = 1701;
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1702; Match(LR_BRACKET);
				State = 1703; subquery();
				State = 1704; Match(RR_BRACKET);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1706; expression(0);
				State = 1708;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 1707; Match(NOT);
					}
				}

				State = 1710; Match(BETWEEN);
				State = 1711; expression(0);
				State = 1712; Match(AND);
				State = 1713; expression(0);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1715; expression(0);
				State = 1717;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 1716; Match(NOT);
					}
				}

				State = 1719; Match(IN);
				State = 1720; Match(LR_BRACKET);
				State = 1723;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,280,Context) ) {
				case 1:
					{
					State = 1721; subquery();
					}
					break;
				case 2:
					{
					State = 1722; expression_list();
					}
					break;
				}
				State = 1725; Match(RR_BRACKET);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1727; expression(0);
				State = 1729;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 1728; Match(NOT);
					}
				}

				State = 1731; Match(LIKE);
				State = 1732; expression(0);
				State = 1735;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ESCAPE) {
					{
					State = 1733; Match(ESCAPE);
					State = 1734; expression(0);
					}
				}

				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1737; expression(0);
				State = 1738; Match(IS);
				State = 1739; null_notnull();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1741; Match(LR_BRACKET);
				State = 1742; search_condition();
				State = 1743; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_expressionContext : ParserRuleContext {
		public Query_specificationContext query_specification() {
			return GetRuleContext<Query_specificationContext>(0);
		}
		public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		public UnionContext[] union() {
			return GetRuleContexts<UnionContext>();
		}
		public UnionContext union(int i) {
			return GetRuleContext<UnionContext>(i);
		}
		public Query_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterQuery_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitQuery_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_expressionContext query_expression() {
		Query_expressionContext _localctx = new Query_expressionContext(Context, State);
		EnterRule(_localctx, 132, RULE_query_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1752;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
				{
				State = 1747; query_specification();
				}
				break;
			case LR_BRACKET:
				{
				State = 1748; Match(LR_BRACKET);
				State = 1749; query_expression();
				State = 1750; Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1757;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,285,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1754; union();
					}
					} 
				}
				State = 1759;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,285,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionContext : ParserRuleContext {
		public ITerminalNode UNION() { return GetToken(tsqlParser.UNION, 0); }
		public ITerminalNode EXCEPT() { return GetToken(tsqlParser.EXCEPT, 0); }
		public ITerminalNode INTERSECT() { return GetToken(tsqlParser.INTERSECT, 0); }
		public Query_specificationContext query_specification() {
			return GetRuleContext<Query_specificationContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(tsqlParser.ALL, 0); }
		public Query_expressionContext[] query_expression() {
			return GetRuleContexts<Query_expressionContext>();
		}
		public Query_expressionContext query_expression(int i) {
			return GetRuleContext<Query_expressionContext>(i);
		}
		public UnionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_union; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterUnion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitUnion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnionContext union() {
		UnionContext _localctx = new UnionContext(Context, State);
		EnterRule(_localctx, 134, RULE_union);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1766;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNION:
				{
				State = 1760; Match(UNION);
				State = 1762;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL) {
					{
					State = 1761; Match(ALL);
					}
				}

				}
				break;
			case EXCEPT:
				{
				State = 1764; Match(EXCEPT);
				}
				break;
			case INTERSECT:
				{
				State = 1765; Match(INTERSECT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1777;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
				{
				State = 1768; query_specification();
				}
				break;
			case LR_BRACKET:
				{
				State = 1773;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1769; Match(LR_BRACKET);
						State = 1770; query_expression();
						State = 1771; Match(RR_BRACKET);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1775;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,288,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_specificationContext : ParserRuleContext {
		public Table_nameContext into_table;
		public Search_conditionContext where;
		public Search_conditionContext having;
		public ITerminalNode SELECT() { return GetToken(tsqlParser.SELECT, 0); }
		public Select_listContext select_list() {
			return GetRuleContext<Select_listContext>(0);
		}
		public ITerminalNode TOP() { return GetToken(tsqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode INTO() { return GetToken(tsqlParser.INTO, 0); }
		public ITerminalNode FROM() { return GetToken(tsqlParser.FROM, 0); }
		public Table_sourceContext[] table_source() {
			return GetRuleContexts<Table_sourceContext>();
		}
		public Table_sourceContext table_source(int i) {
			return GetRuleContext<Table_sourceContext>(i);
		}
		public ITerminalNode WHERE() { return GetToken(tsqlParser.WHERE, 0); }
		public ITerminalNode GROUP() { return GetToken(tsqlParser.GROUP, 0); }
		public ITerminalNode BY() { return GetToken(tsqlParser.BY, 0); }
		public Group_by_itemContext[] group_by_item() {
			return GetRuleContexts<Group_by_itemContext>();
		}
		public Group_by_itemContext group_by_item(int i) {
			return GetRuleContext<Group_by_itemContext>(i);
		}
		public ITerminalNode HAVING() { return GetToken(tsqlParser.HAVING, 0); }
		public ITerminalNode ALL() { return GetToken(tsqlParser.ALL, 0); }
		public ITerminalNode DISTINCT() { return GetToken(tsqlParser.DISTINCT, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Search_conditionContext[] search_condition() {
			return GetRuleContexts<Search_conditionContext>();
		}
		public Search_conditionContext search_condition(int i) {
			return GetRuleContext<Search_conditionContext>(i);
		}
		public ITerminalNode PERCENT() { return GetToken(tsqlParser.PERCENT, 0); }
		public ITerminalNode WITH() { return GetToken(tsqlParser.WITH, 0); }
		public ITerminalNode TIES() { return GetToken(tsqlParser.TIES, 0); }
		public Query_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_specification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterQuery_specification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitQuery_specification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_specificationContext query_specification() {
		Query_specificationContext _localctx = new Query_specificationContext(Context, State);
		EnterRule(_localctx, 136, RULE_query_specification);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1779; Match(SELECT);
			State = 1781;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				State = 1780;
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1792;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOP) {
				{
				State = 1783; Match(TOP);
				State = 1784; expression(0);
				State = 1786;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PERCENT) {
					{
					State = 1785; Match(PERCENT);
					}
				}

				State = 1790;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 1788; Match(WITH);
					State = 1789; Match(TIES);
					}
				}

				}
			}

			State = 1794; select_list();
			State = 1797;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 1795; Match(INTO);
				State = 1796; _localctx.into_table = table_name();
				}
			}

			State = 1808;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 1799; Match(FROM);
				State = 1800; table_source();
				State = 1805;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,295,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1801; Match(COMMA);
						State = 1802; table_source();
						}
						} 
					}
					State = 1807;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,295,Context);
				}
				}
			}

			State = 1812;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,297,Context) ) {
			case 1:
				{
				State = 1810; Match(WHERE);
				State = 1811; _localctx.where = search_condition();
				}
				break;
			}
			State = 1824;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,299,Context) ) {
			case 1:
				{
				State = 1814; Match(GROUP);
				State = 1815; Match(BY);
				State = 1816; group_by_item();
				State = 1821;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,298,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1817; Match(COMMA);
						State = 1818; group_by_item();
						}
						} 
					}
					State = 1823;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,298,Context);
				}
				}
				break;
			}
			State = 1828;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,300,Context) ) {
			case 1:
				{
				State = 1826; Match(HAVING);
				State = 1827; _localctx.having = search_condition();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_clauseContext : ParserRuleContext {
		public ITerminalNode ORDER() { return GetToken(tsqlParser.ORDER, 0); }
		public ITerminalNode BY() { return GetToken(tsqlParser.BY, 0); }
		public Order_by_expressionContext[] order_by_expression() {
			return GetRuleContexts<Order_by_expressionContext>();
		}
		public Order_by_expressionContext order_by_expression(int i) {
			return GetRuleContext<Order_by_expressionContext>(i);
		}
		public ITerminalNode OFFSET() { return GetToken(tsqlParser.OFFSET, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] ROW() { return GetTokens(tsqlParser.ROW); }
		public ITerminalNode ROW(int i) {
			return GetToken(tsqlParser.ROW, i);
		}
		public ITerminalNode[] ROWS() { return GetTokens(tsqlParser.ROWS); }
		public ITerminalNode ROWS(int i) {
			return GetToken(tsqlParser.ROWS, i);
		}
		public ITerminalNode FETCH() { return GetToken(tsqlParser.FETCH, 0); }
		public ITerminalNode ONLY() { return GetToken(tsqlParser.ONLY, 0); }
		public ITerminalNode FIRST() { return GetToken(tsqlParser.FIRST, 0); }
		public ITerminalNode NEXT() { return GetToken(tsqlParser.NEXT, 0); }
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterOrder_by_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitOrder_by_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_by_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_clauseContext order_by_clause() {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(Context, State);
		EnterRule(_localctx, 138, RULE_order_by_clause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1830; Match(ORDER);
			State = 1831; Match(BY);
			State = 1832; order_by_expression();
			State = 1837;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,301,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1833; Match(COMMA);
					State = 1834; order_by_expression();
					}
					} 
				}
				State = 1839;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,301,Context);
			}
			State = 1851;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,303,Context) ) {
			case 1:
				{
				State = 1840; Match(OFFSET);
				State = 1841; expression(0);
				State = 1842;
				_la = TokenStream.LA(1);
				if ( !(_la==ROW || _la==ROWS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1849;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,302,Context) ) {
				case 1:
					{
					State = 1843; Match(FETCH);
					State = 1844;
					_la = TokenStream.LA(1);
					if ( !(_la==FIRST || _la==NEXT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1845; expression(0);
					State = 1846;
					_la = TokenStream.LA(1);
					if ( !(_la==ROW || _la==ROWS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1847; Match(ONLY);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_clauseContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(tsqlParser.FOR, 0); }
		public ITerminalNode BROWSE() { return GetToken(tsqlParser.BROWSE, 0); }
		public ITerminalNode XML() { return GetToken(tsqlParser.XML, 0); }
		public ITerminalNode AUTO() { return GetToken(tsqlParser.AUTO, 0); }
		public Xml_common_directivesContext xml_common_directives() {
			return GetRuleContext<Xml_common_directivesContext>(0);
		}
		public ITerminalNode PATH() { return GetToken(tsqlParser.PATH, 0); }
		public ITerminalNode STRING() { return GetToken(tsqlParser.STRING, 0); }
		public For_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterFor_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitFor_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_clauseContext for_clause() {
		For_clauseContext _localctx = new For_clauseContext(Context, State);
		EnterRule(_localctx, 140, RULE_for_clause);
		try {
			State = 1872;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,307,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1853; Match(FOR);
				State = 1854; Match(BROWSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1855; Match(FOR);
				State = 1856; Match(XML);
				State = 1857; Match(AUTO);
				State = 1859;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,304,Context) ) {
				case 1:
					{
					State = 1858; xml_common_directives();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1861; Match(FOR);
				State = 1862; Match(XML);
				State = 1863; Match(PATH);
				State = 1867;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,305,Context) ) {
				case 1:
					{
					State = 1864; Match(LR_BRACKET);
					State = 1865; Match(STRING);
					State = 1866; Match(RR_BRACKET);
					}
					break;
				}
				State = 1870;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,306,Context) ) {
				case 1:
					{
					State = 1869; xml_common_directives();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_common_directivesContext : ParserRuleContext {
		public ITerminalNode BINARY() { return GetToken(tsqlParser.BINARY, 0); }
		public ITerminalNode BASE64() { return GetToken(tsqlParser.BASE64, 0); }
		public ITerminalNode TYPE() { return GetToken(tsqlParser.TYPE, 0); }
		public ITerminalNode ROOT() { return GetToken(tsqlParser.ROOT, 0); }
		public Xml_common_directivesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_common_directives; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterXml_common_directives(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitXml_common_directives(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXml_common_directives(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xml_common_directivesContext xml_common_directives() {
		Xml_common_directivesContext _localctx = new Xml_common_directivesContext(Context, State);
		EnterRule(_localctx, 142, RULE_xml_common_directives);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1874; Match(COMMA);
			State = 1879;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BINARY:
				{
				State = 1875; Match(BINARY);
				State = 1876; Match(BASE64);
				}
				break;
			case TYPE:
				{
				State = 1877; Match(TYPE);
				}
				break;
			case ROOT:
				{
				State = 1878; Match(ROOT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_expressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ASC() { return GetToken(tsqlParser.ASC, 0); }
		public ITerminalNode DESC() { return GetToken(tsqlParser.DESC, 0); }
		public Order_by_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterOrder_by_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitOrder_by_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_by_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_expressionContext order_by_expression() {
		Order_by_expressionContext _localctx = new Order_by_expressionContext(Context, State);
		EnterRule(_localctx, 144, RULE_order_by_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1881; expression(0);
			State = 1883;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 1882;
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_by_itemContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Group_by_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_by_item; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterGroup_by_item(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitGroup_by_item(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroup_by_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Group_by_itemContext group_by_item() {
		Group_by_itemContext _localctx = new Group_by_itemContext(Context, State);
		EnterRule(_localctx, 146, RULE_group_by_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1885; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Option_clauseContext : ParserRuleContext {
		public ITerminalNode OPTION() { return GetToken(tsqlParser.OPTION, 0); }
		public OptionContext[] option() {
			return GetRuleContexts<OptionContext>();
		}
		public OptionContext option(int i) {
			return GetRuleContext<OptionContext>(i);
		}
		public Option_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterOption_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitOption_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOption_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Option_clauseContext option_clause() {
		Option_clauseContext _localctx = new Option_clauseContext(Context, State);
		EnterRule(_localctx, 148, RULE_option_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1887; Match(OPTION);
			State = 1888; Match(LR_BRACKET);
			State = 1889; option();
			State = 1894;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1890; Match(COMMA);
				State = 1891; option();
				}
				}
				State = 1896;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1897; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionContext : ParserRuleContext {
		public IToken number_rows;
		public IToken number_of_processors;
		public IToken number_recursion;
		public ITerminalNode FAST() { return GetToken(tsqlParser.FAST, 0); }
		public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		public ITerminalNode GROUP() { return GetToken(tsqlParser.GROUP, 0); }
		public ITerminalNode HASH() { return GetToken(tsqlParser.HASH, 0); }
		public ITerminalNode ORDER() { return GetToken(tsqlParser.ORDER, 0); }
		public ITerminalNode UNION() { return GetToken(tsqlParser.UNION, 0); }
		public ITerminalNode MERGE() { return GetToken(tsqlParser.MERGE, 0); }
		public ITerminalNode CONCAT() { return GetToken(tsqlParser.CONCAT, 0); }
		public ITerminalNode JOIN() { return GetToken(tsqlParser.JOIN, 0); }
		public ITerminalNode LOOP() { return GetToken(tsqlParser.LOOP, 0); }
		public ITerminalNode EXPAND() { return GetToken(tsqlParser.EXPAND, 0); }
		public ITerminalNode VIEWS() { return GetToken(tsqlParser.VIEWS, 0); }
		public ITerminalNode FORCE() { return GetToken(tsqlParser.FORCE, 0); }
		public ITerminalNode IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX() { return GetToken(tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0); }
		public ITerminalNode KEEP() { return GetToken(tsqlParser.KEEP, 0); }
		public ITerminalNode PLAN() { return GetToken(tsqlParser.PLAN, 0); }
		public ITerminalNode KEEPFIXED() { return GetToken(tsqlParser.KEEPFIXED, 0); }
		public ITerminalNode MAXDOP() { return GetToken(tsqlParser.MAXDOP, 0); }
		public ITerminalNode MAXRECURSION() { return GetToken(tsqlParser.MAXRECURSION, 0); }
		public ITerminalNode OPTIMIZE() { return GetToken(tsqlParser.OPTIMIZE, 0); }
		public ITerminalNode FOR() { return GetToken(tsqlParser.FOR, 0); }
		public Optimize_for_argContext[] optimize_for_arg() {
			return GetRuleContexts<Optimize_for_argContext>();
		}
		public Optimize_for_argContext optimize_for_arg(int i) {
			return GetRuleContext<Optimize_for_argContext>(i);
		}
		public ITerminalNode UNKNOWN() { return GetToken(tsqlParser.UNKNOWN, 0); }
		public ITerminalNode PARAMETERIZATION() { return GetToken(tsqlParser.PARAMETERIZATION, 0); }
		public ITerminalNode SIMPLE() { return GetToken(tsqlParser.SIMPLE, 0); }
		public ITerminalNode FORCED() { return GetToken(tsqlParser.FORCED, 0); }
		public ITerminalNode RECOMPILE() { return GetToken(tsqlParser.RECOMPILE, 0); }
		public ITerminalNode ROBUST() { return GetToken(tsqlParser.ROBUST, 0); }
		public ITerminalNode USE() { return GetToken(tsqlParser.USE, 0); }
		public ITerminalNode STRING() { return GetToken(tsqlParser.STRING, 0); }
		public OptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionContext option() {
		OptionContext _localctx = new OptionContext(Context, State);
		EnterRule(_localctx, 150, RULE_option);
		int _la;
		try {
			State = 1944;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,312,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1899; Match(FAST);
				State = 1900; _localctx.number_rows = Match(DECIMAL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1901;
				_la = TokenStream.LA(1);
				if ( !(_la==ORDER || _la==HASH) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1902; Match(GROUP);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1903;
				_la = TokenStream.LA(1);
				if ( !(_la==MERGE || _la==CONCAT || _la==HASH) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1904; Match(UNION);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1905;
				_la = TokenStream.LA(1);
				if ( !(_la==MERGE || _la==HASH || _la==LOOP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1906; Match(JOIN);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1907; Match(EXPAND);
				State = 1908; Match(VIEWS);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1909; Match(FORCE);
				State = 1910; Match(ORDER);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1911; Match(IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1912; Match(KEEP);
				State = 1913; Match(PLAN);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1914; Match(KEEPFIXED);
				State = 1915; Match(PLAN);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1916; Match(MAXDOP);
				State = 1917; _localctx.number_of_processors = Match(DECIMAL);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1918; Match(MAXRECURSION);
				State = 1919; _localctx.number_recursion = Match(DECIMAL);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1920; Match(OPTIMIZE);
				State = 1921; Match(FOR);
				State = 1922; Match(LR_BRACKET);
				State = 1923; optimize_for_arg();
				State = 1928;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1924; Match(COMMA);
					State = 1925; optimize_for_arg();
					}
					}
					State = 1930;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1931; Match(RR_BRACKET);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1933; Match(OPTIMIZE);
				State = 1934; Match(FOR);
				State = 1935; Match(UNKNOWN);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1936; Match(PARAMETERIZATION);
				State = 1937;
				_la = TokenStream.LA(1);
				if ( !(_la==FORCED || _la==SIMPLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1938; Match(RECOMPILE);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1939; Match(ROBUST);
				State = 1940; Match(PLAN);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1941; Match(USE);
				State = 1942; Match(PLAN);
				State = 1943; Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Optimize_for_argContext : ParserRuleContext {
		public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		public ITerminalNode UNKNOWN() { return GetToken(tsqlParser.UNKNOWN, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public Optimize_for_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optimize_for_arg; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterOptimize_for_arg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitOptimize_for_arg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptimize_for_arg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Optimize_for_argContext optimize_for_arg() {
		Optimize_for_argContext _localctx = new Optimize_for_argContext(Context, State);
		EnterRule(_localctx, 152, RULE_optimize_for_arg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1946; Match(LOCAL_ID);
			State = 1950;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNKNOWN:
				{
				State = 1947; Match(UNKNOWN);
				}
				break;
			case EQUAL:
				{
				State = 1948; Match(EQUAL);
				State = 1949; constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_listContext : ParserRuleContext {
		public Select_list_elemContext[] select_list_elem() {
			return GetRuleContexts<Select_list_elemContext>();
		}
		public Select_list_elemContext select_list_elem(int i) {
			return GetRuleContext<Select_list_elemContext>(i);
		}
		public Select_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSelect_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSelect_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_listContext select_list() {
		Select_listContext _localctx = new Select_listContext(Context, State);
		EnterRule(_localctx, 154, RULE_select_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1952; select_list_elem();
			State = 1957;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,314,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1953; Match(COMMA);
					State = 1954; select_list_elem();
					}
					} 
				}
				State = 1959;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,314,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_list_elemContext : ParserRuleContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode IDENTITY() { return GetToken(tsqlParser.IDENTITY, 0); }
		public ITerminalNode ROWGUID() { return GetToken(tsqlParser.ROWGUID, 0); }
		public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode AS() { return GetToken(tsqlParser.AS, 0); }
		public Select_list_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_list_elem; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSelect_list_elem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSelect_list_elem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_list_elem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_list_elemContext select_list_elem() {
		Select_list_elemContext _localctx = new Select_list_elemContext(Context, State);
		EnterRule(_localctx, 156, RULE_select_list_elem);
		int _la;
		try {
			State = 1981;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,319,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1963;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FORCESEEK || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & ((1L << (ABSOLUTE - 188)) | (1L << (APPLY - 188)) | (1L << (AUTO - 188)) | (1L << (AVG - 188)) | (1L << (BASE64 - 188)) | (1L << (CALLER - 188)) | (1L << (CAST - 188)) | (1L << (CATCH - 188)) | (1L << (CHECKSUM_AGG - 188)) | (1L << (COMMITTED - 188)) | (1L << (CONCAT - 188)) | (1L << (COOKIE - 188)) | (1L << (COUNT - 188)) | (1L << (COUNT_BIG - 188)) | (1L << (DELAY - 188)) | (1L << (DELETED - 188)) | (1L << (DENSE_RANK - 188)) | (1L << (DISABLE - 188)) | (1L << (DYNAMIC - 188)) | (1L << (ENCRYPTION - 188)) | (1L << (EXPAND - 188)) | (1L << (FAST - 188)) | (1L << (FAST_FORWARD - 188)) | (1L << (FIRST - 188)) | (1L << (FORCE - 188)) | (1L << (FORCED - 188)) | (1L << (FOLLOWING - 188)) | (1L << (FORWARD_ONLY - 188)) | (1L << (FULLSCAN - 188)) | (1L << (GLOBAL - 188)) | (1L << (GO - 188)) | (1L << (GROUPING - 188)) | (1L << (GROUPING_ID - 188)) | (1L << (HASH - 188)) | (1L << (INSENSITIVE - 188)) | (1L << (INSERTED - 188)) | (1L << (ISOLATION - 188)) | (1L << (KEEP - 188)) | (1L << (KEEPFIXED - 188)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 188)) | (1L << (KEYSET - 188)) | (1L << (LAST - 188)) | (1L << (LEVEL - 188)) | (1L << (LOCAL - 188)) | (1L << (LOCK_ESCALATION - 188)) | (1L << (LOGIN - 188)) | (1L << (LOOP - 188)) | (1L << (MARK - 188)) | (1L << (MAX - 188)) | (1L << (MAXDOP - 188)) | (1L << (MAXRECURSION - 188)) | (1L << (MIN - 188)) | (1L << (MODIFY - 188)) | (1L << (NEXT - 188)) | (1L << (NAME - 188)) | (1L << (NOCOUNT - 188)) | (1L << (NOEXPAND - 188)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (NORECOMPUTE - 252)) | (1L << (NTILE - 252)) | (1L << (NUMBER - 252)) | (1L << (OFFSET - 252)) | (1L << (ONLY - 252)) | (1L << (OPTIMISTIC - 252)) | (1L << (OPTIMIZE - 252)) | (1L << (OUT - 252)) | (1L << (OUTPUT - 252)) | (1L << (OWNER - 252)) | (1L << (PARAMETERIZATION - 252)) | (1L << (PARTITION - 252)) | (1L << (PATH - 252)) | (1L << (PRECEDING - 252)) | (1L << (PRIOR - 252)) | (1L << (RANGE - 252)) | (1L << (RANK - 252)) | (1L << (READONLY - 252)) | (1L << (READ_ONLY - 252)) | (1L << (RECOMPILE - 252)) | (1L << (RELATIVE - 252)) | (1L << (REMOTE - 252)) | (1L << (REPEATABLE - 252)) | (1L << (ROBUST - 252)) | (1L << (ROOT - 252)) | (1L << (ROW - 252)) | (1L << (ROWGUID - 252)) | (1L << (ROWS - 252)) | (1L << (ROW_NUMBER - 252)) | (1L << (SAMPLE - 252)) | (1L << (SCHEMABINDING - 252)) | (1L << (SCROLL - 252)) | (1L << (SCROLL_LOCKS - 252)) | (1L << (SELF - 252)) | (1L << (SERIALIZABLE - 252)) | (1L << (SIMPLE - 252)) | (1L << (SNAPSHOT - 252)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 252)) | (1L << (STATIC - 252)) | (1L << (STATS_STREAM - 252)) | (1L << (STDEV - 252)) | (1L << (STDEVP - 252)) | (1L << (SUM - 252)) | (1L << (THROW - 252)) | (1L << (TIES - 252)) | (1L << (TIME - 252)) | (1L << (TRY - 252)) | (1L << (TYPE - 252)) | (1L << (TYPE_WARNING - 252)) | (1L << (UNBOUNDED - 252)) | (1L << (UNCOMMITTED - 252)) | (1L << (UNKNOWN - 252)) | (1L << (USING - 252)) | (1L << (VAR - 252)) | (1L << (VARP - 252)) | (1L << (VIEW_METADATA - 252)) | (1L << (VIEWS - 252)) | (1L << (WORK - 252)) | (1L << (XML - 252)) | (1L << (XMLNAMESPACES - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (DOUBLE_QUOTE_ID - 316)) | (1L << (SQUARE_BRACKET_ID - 316)) | (1L << (ID - 316)))) != 0)) {
					{
					State = 1960; table_name();
					State = 1961; Match(DOT);
					}
				}

				State = 1968;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STAR:
					{
					State = 1965; Match(STAR);
					}
					break;
				case DOLLAR:
					{
					State = 1966; Match(DOLLAR);
					State = 1967;
					_la = TokenStream.LA(1);
					if ( !(_la==IDENTITY || _la==ROWGUID) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1970; column_alias();
				State = 1971; Match(EQUAL);
				State = 1972; expression(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1974; expression(0);
				State = 1979;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,318,Context) ) {
				case 1:
					{
					State = 1976;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AS) {
						{
						State = 1975; Match(AS);
						}
					}

					State = 1978; column_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partition_by_clauseContext : ParserRuleContext {
		public ITerminalNode PARTITION() { return GetToken(tsqlParser.PARTITION, 0); }
		public ITerminalNode BY() { return GetToken(tsqlParser.BY, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public Partition_by_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partition_by_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterPartition_by_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitPartition_by_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartition_by_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Partition_by_clauseContext partition_by_clause() {
		Partition_by_clauseContext _localctx = new Partition_by_clauseContext(Context, State);
		EnterRule(_localctx, 158, RULE_partition_by_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1983; Match(PARTITION);
			State = 1984; Match(BY);
			State = 1985; expression_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_sourceContext : ParserRuleContext {
		public Table_source_item_joinedContext table_source_item_joined() {
			return GetRuleContext<Table_source_item_joinedContext>(0);
		}
		public Table_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_source; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterTable_source(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitTable_source(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_source(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_sourceContext table_source() {
		Table_sourceContext _localctx = new Table_sourceContext(Context, State);
		EnterRule(_localctx, 160, RULE_table_source);
		try {
			State = 1992;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,320,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1987; table_source_item_joined();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1988; Match(LR_BRACKET);
				State = 1989; table_source_item_joined();
				State = 1990; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_source_item_joinedContext : ParserRuleContext {
		public Table_source_itemContext table_source_item() {
			return GetRuleContext<Table_source_itemContext>(0);
		}
		public Join_partContext[] join_part() {
			return GetRuleContexts<Join_partContext>();
		}
		public Join_partContext join_part(int i) {
			return GetRuleContext<Join_partContext>(i);
		}
		public Table_source_item_joinedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_source_item_joined; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterTable_source_item_joined(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitTable_source_item_joined(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_source_item_joined(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_source_item_joinedContext table_source_item_joined() {
		Table_source_item_joinedContext _localctx = new Table_source_item_joinedContext(Context, State);
		EnterRule(_localctx, 162, RULE_table_source_item_joined);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1994; table_source_item();
			State = 1998;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,321,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1995; join_part();
					}
					} 
				}
				State = 2000;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,321,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_source_itemContext : ParserRuleContext {
		public Table_name_with_hintContext table_name_with_hint() {
			return GetRuleContext<Table_name_with_hintContext>(0);
		}
		public As_table_aliasContext as_table_alias() {
			return GetRuleContext<As_table_aliasContext>(0);
		}
		public Rowset_functionContext rowset_function() {
			return GetRuleContext<Rowset_functionContext>(0);
		}
		public Derived_tableContext derived_table() {
			return GetRuleContext<Derived_tableContext>(0);
		}
		public Column_alias_listContext column_alias_list() {
			return GetRuleContext<Column_alias_listContext>(0);
		}
		public Change_tableContext change_table() {
			return GetRuleContext<Change_tableContext>(0);
		}
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		public Table_source_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_source_item; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterTable_source_item(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitTable_source_item(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_source_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_source_itemContext table_source_item() {
		Table_source_itemContext _localctx = new Table_source_itemContext(Context, State);
		EnterRule(_localctx, 164, RULE_table_source_item);
		try {
			State = 2036;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,330,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2001; table_name_with_hint();
				State = 2003;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,322,Context) ) {
				case 1:
					{
					State = 2002; as_table_alias();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2005; rowset_function();
				State = 2007;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,323,Context) ) {
				case 1:
					{
					State = 2006; as_table_alias();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2009; derived_table();
				State = 2014;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,325,Context) ) {
				case 1:
					{
					State = 2010; as_table_alias();
					State = 2012;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,324,Context) ) {
					case 1:
						{
						State = 2011; column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2016; change_table();
				State = 2017; as_table_alias();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2019; function_call();
				State = 2021;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,326,Context) ) {
				case 1:
					{
					State = 2020; as_table_alias();
					}
					break;
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2023; Match(LOCAL_ID);
				State = 2025;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,327,Context) ) {
				case 1:
					{
					State = 2024; as_table_alias();
					}
					break;
				}
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2027; Match(LOCAL_ID);
				State = 2028; Match(DOT);
				State = 2029; function_call();
				State = 2034;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,329,Context) ) {
				case 1:
					{
					State = 2030; as_table_alias();
					State = 2032;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,328,Context) ) {
					case 1:
						{
						State = 2031; column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Change_tableContext : ParserRuleContext {
		public ITerminalNode CHANGETABLE() { return GetToken(tsqlParser.CHANGETABLE, 0); }
		public ITerminalNode CHANGES() { return GetToken(tsqlParser.CHANGES, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode NULL() { return GetToken(tsqlParser.NULL, 0); }
		public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		public Change_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_change_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterChange_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitChange_table(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChange_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Change_tableContext change_table() {
		Change_tableContext _localctx = new Change_tableContext(Context, State);
		EnterRule(_localctx, 166, RULE_change_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2038; Match(CHANGETABLE);
			State = 2039; Match(LR_BRACKET);
			State = 2040; Match(CHANGES);
			State = 2041; table_name();
			State = 2042; Match(COMMA);
			State = 2043;
			_la = TokenStream.LA(1);
			if ( !(_la==NULL || _la==LOCAL_ID || _la==DECIMAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2044; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_partContext : ParserRuleContext {
		public IToken join_type;
		public IToken join_hint;
		public ITerminalNode JOIN() { return GetToken(tsqlParser.JOIN, 0); }
		public Table_sourceContext table_source() {
			return GetRuleContext<Table_sourceContext>(0);
		}
		public ITerminalNode ON() { return GetToken(tsqlParser.ON, 0); }
		public Search_conditionContext search_condition() {
			return GetRuleContext<Search_conditionContext>(0);
		}
		public ITerminalNode LEFT() { return GetToken(tsqlParser.LEFT, 0); }
		public ITerminalNode RIGHT() { return GetToken(tsqlParser.RIGHT, 0); }
		public ITerminalNode FULL() { return GetToken(tsqlParser.FULL, 0); }
		public ITerminalNode INNER() { return GetToken(tsqlParser.INNER, 0); }
		public ITerminalNode OUTER() { return GetToken(tsqlParser.OUTER, 0); }
		public ITerminalNode LOOP() { return GetToken(tsqlParser.LOOP, 0); }
		public ITerminalNode HASH() { return GetToken(tsqlParser.HASH, 0); }
		public ITerminalNode MERGE() { return GetToken(tsqlParser.MERGE, 0); }
		public ITerminalNode REMOTE() { return GetToken(tsqlParser.REMOTE, 0); }
		public ITerminalNode CROSS() { return GetToken(tsqlParser.CROSS, 0); }
		public ITerminalNode APPLY() { return GetToken(tsqlParser.APPLY, 0); }
		public Join_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_part; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterJoin_part(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitJoin_part(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_partContext join_part() {
		Join_partContext _localctx = new Join_partContext(Context, State);
		EnterRule(_localctx, 168, RULE_join_part);
		int _la;
		try {
			State = 2072;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,335,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2053;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INNER:
				case JOIN:
				case MERGE:
				case HASH:
				case LOOP:
				case REMOTE:
					{
					State = 2047;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==INNER) {
						{
						State = 2046; Match(INNER);
						}
					}

					}
					break;
				case FULL:
				case LEFT:
				case RIGHT:
					{
					State = 2049;
					_localctx.join_type = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
						_localctx.join_type = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 2051;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==OUTER) {
						{
						State = 2050; Match(OUTER);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2056;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MERGE || ((((_la - 227)) & ~0x3f) == 0 && ((1L << (_la - 227)) & ((1L << (HASH - 227)) | (1L << (LOOP - 227)) | (1L << (REMOTE - 227)))) != 0)) {
					{
					State = 2055;
					_localctx.join_hint = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==MERGE || ((((_la - 227)) & ~0x3f) == 0 && ((1L << (_la - 227)) & ((1L << (HASH - 227)) | (1L << (LOOP - 227)) | (1L << (REMOTE - 227)))) != 0)) ) {
						_localctx.join_hint = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 2058; Match(JOIN);
				State = 2059; table_source();
				State = 2060; Match(ON);
				State = 2061; search_condition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2063; Match(CROSS);
				State = 2064; Match(JOIN);
				State = 2065; table_source();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2066; Match(CROSS);
				State = 2067; Match(APPLY);
				State = 2068; table_source();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2069; Match(OUTER);
				State = 2070; Match(APPLY);
				State = 2071; table_source();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_name_with_hintContext : ParserRuleContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public With_table_hintsContext with_table_hints() {
			return GetRuleContext<With_table_hintsContext>(0);
		}
		public Table_name_with_hintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_name_with_hint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterTable_name_with_hint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitTable_name_with_hint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_name_with_hint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_name_with_hintContext table_name_with_hint() {
		Table_name_with_hintContext _localctx = new Table_name_with_hintContext(Context, State);
		EnterRule(_localctx, 170, RULE_table_name_with_hint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2074; table_name();
			State = 2076;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,336,Context) ) {
			case 1:
				{
				State = 2075; with_table_hints();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rowset_functionContext : ParserRuleContext {
		public IToken data_file;
		public ITerminalNode OPENROWSET() { return GetToken(tsqlParser.OPENROWSET, 0); }
		public ITerminalNode BULK() { return GetToken(tsqlParser.BULK, 0); }
		public ITerminalNode STRING() { return GetToken(tsqlParser.STRING, 0); }
		public Bulk_optionContext[] bulk_option() {
			return GetRuleContexts<Bulk_optionContext>();
		}
		public Bulk_optionContext bulk_option(int i) {
			return GetRuleContext<Bulk_optionContext>(i);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Rowset_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowset_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterRowset_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitRowset_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRowset_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rowset_functionContext rowset_function() {
		Rowset_functionContext _localctx = new Rowset_functionContext(Context, State);
		EnterRule(_localctx, 172, RULE_rowset_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2078; Match(OPENROWSET);
			State = 2079; Match(LR_BRACKET);
			State = 2080; Match(BULK);
			State = 2081; _localctx.data_file = Match(STRING);
			State = 2082; Match(COMMA);
			State = 2092;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,338,Context) ) {
			case 1:
				{
				State = 2083; bulk_option();
				State = 2088;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2084; Match(COMMA);
					State = 2085; bulk_option();
					}
					}
					State = 2090;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				{
				State = 2091; id();
				}
				break;
			}
			State = 2094; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bulk_optionContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		public ITerminalNode STRING() { return GetToken(tsqlParser.STRING, 0); }
		public Bulk_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bulk_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterBulk_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitBulk_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBulk_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bulk_optionContext bulk_option() {
		Bulk_optionContext _localctx = new Bulk_optionContext(Context, State);
		EnterRule(_localctx, 174, RULE_bulk_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2096; id();
			State = 2097; Match(EQUAL);
			State = 2098;
			_la = TokenStream.LA(1);
			if ( !(_la==DECIMAL || _la==STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Derived_tableContext : ParserRuleContext {
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public Derived_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derived_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDerived_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDerived_table(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDerived_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Derived_tableContext derived_table() {
		Derived_tableContext _localctx = new Derived_tableContext(Context, State);
		EnterRule(_localctx, 176, RULE_derived_table);
		try {
			State = 2105;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,339,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2100; subquery();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2101; Match(LR_BRACKET);
				State = 2102; subquery();
				State = 2103; Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		public ExpressionContext style;
		public IToken seed;
		public IToken increment;
		public Ranking_windowed_functionContext ranking_windowed_function() {
			return GetRuleContext<Ranking_windowed_functionContext>(0);
		}
		public Aggregate_windowed_functionContext aggregate_windowed_function() {
			return GetRuleContext<Aggregate_windowed_functionContext>(0);
		}
		public Scalar_function_nameContext scalar_function_name() {
			return GetRuleContext<Scalar_function_nameContext>(0);
		}
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public ITerminalNode BINARY_CHECKSUM() { return GetToken(tsqlParser.BINARY_CHECKSUM, 0); }
		public ITerminalNode CAST() { return GetToken(tsqlParser.CAST, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode AS() { return GetToken(tsqlParser.AS, 0); }
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ITerminalNode CONVERT() { return GetToken(tsqlParser.CONVERT, 0); }
		public ITerminalNode CHECKSUM() { return GetToken(tsqlParser.CHECKSUM, 0); }
		public ITerminalNode COALESCE() { return GetToken(tsqlParser.COALESCE, 0); }
		public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(tsqlParser.CURRENT_TIMESTAMP, 0); }
		public ITerminalNode CURRENT_USER() { return GetToken(tsqlParser.CURRENT_USER, 0); }
		public ITerminalNode DATEADD() { return GetToken(tsqlParser.DATEADD, 0); }
		public DatepartContext datepart() {
			return GetRuleContext<DatepartContext>(0);
		}
		public ITerminalNode DATEDIFF() { return GetToken(tsqlParser.DATEDIFF, 0); }
		public ITerminalNode DATENAME() { return GetToken(tsqlParser.DATENAME, 0); }
		public ITerminalNode DATEPART() { return GetToken(tsqlParser.DATEPART, 0); }
		public ITerminalNode IDENTITY() { return GetToken(tsqlParser.IDENTITY, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(tsqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(tsqlParser.DECIMAL, i);
		}
		public ITerminalNode MIN_ACTIVE_ROWVERSION() { return GetToken(tsqlParser.MIN_ACTIVE_ROWVERSION, 0); }
		public ITerminalNode NULLIF() { return GetToken(tsqlParser.NULLIF, 0); }
		public ITerminalNode SESSION_USER() { return GetToken(tsqlParser.SESSION_USER, 0); }
		public ITerminalNode SYSTEM_USER() { return GetToken(tsqlParser.SYSTEM_USER, 0); }
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterFunction_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitFunction_call(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(Context, State);
		EnterRule(_localctx, 178, RULE_function_call);
		int _la;
		try {
			State = 2204;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,344,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2107; ranking_windowed_function();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2108; aggregate_windowed_function();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2109; scalar_function_name();
				State = 2110; Match(LR_BRACKET);
				State = 2112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CASE) | (1L << COALESCE) | (1L << CONVERT) | (1L << CURRENT_TIMESTAMP) | (1L << CURRENT_USER) | (1L << DEFAULT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (FORCESEEK - 70)) | (1L << (IDENTITY - 70)) | (1L << (LEFT - 70)) | (1L << (NULL - 70)) | (1L << (NULLIF - 70)))) != 0) || ((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & ((1L << (RIGHT - 140)) | (1L << (SESSION_USER - 140)) | (1L << (SYSTEM_USER - 140)) | (1L << (ABSOLUTE - 140)) | (1L << (APPLY - 140)) | (1L << (AUTO - 140)) | (1L << (AVG - 140)) | (1L << (BASE64 - 140)) | (1L << (BINARY_CHECKSUM - 140)) | (1L << (CALLER - 140)) | (1L << (CAST - 140)) | (1L << (CATCH - 140)) | (1L << (CHECKSUM - 140)) | (1L << (CHECKSUM_AGG - 140)) | (1L << (COMMITTED - 140)) | (1L << (CONCAT - 140)) | (1L << (COOKIE - 140)) | (1L << (COUNT - 140)) | (1L << (COUNT_BIG - 140)))) != 0) || ((((_la - 204)) & ~0x3f) == 0 && ((1L << (_la - 204)) & ((1L << (DATEADD - 204)) | (1L << (DATEDIFF - 204)) | (1L << (DATENAME - 204)) | (1L << (DATEPART - 204)) | (1L << (DELAY - 204)) | (1L << (DELETED - 204)) | (1L << (DENSE_RANK - 204)) | (1L << (DISABLE - 204)) | (1L << (DYNAMIC - 204)) | (1L << (ENCRYPTION - 204)) | (1L << (EXPAND - 204)) | (1L << (FAST - 204)) | (1L << (FAST_FORWARD - 204)) | (1L << (FIRST - 204)) | (1L << (FORCE - 204)) | (1L << (FORCED - 204)) | (1L << (FOLLOWING - 204)) | (1L << (FORWARD_ONLY - 204)) | (1L << (FULLSCAN - 204)) | (1L << (GLOBAL - 204)) | (1L << (GO - 204)) | (1L << (GROUPING - 204)) | (1L << (GROUPING_ID - 204)) | (1L << (HASH - 204)) | (1L << (INSENSITIVE - 204)) | (1L << (INSERTED - 204)) | (1L << (ISOLATION - 204)) | (1L << (KEEP - 204)) | (1L << (KEEPFIXED - 204)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 204)) | (1L << (KEYSET - 204)) | (1L << (LAST - 204)) | (1L << (LEVEL - 204)) | (1L << (LOCAL - 204)) | (1L << (LOCK_ESCALATION - 204)) | (1L << (LOGIN - 204)) | (1L << (LOOP - 204)) | (1L << (MARK - 204)) | (1L << (MAX - 204)) | (1L << (MAXDOP - 204)) | (1L << (MAXRECURSION - 204)) | (1L << (MIN - 204)) | (1L << (MIN_ACTIVE_ROWVERSION - 204)) | (1L << (MODIFY - 204)) | (1L << (NEXT - 204)) | (1L << (NAME - 204)) | (1L << (NOCOUNT - 204)) | (1L << (NOEXPAND - 204)) | (1L << (NORECOMPUTE - 204)) | (1L << (NTILE - 204)) | (1L << (NUMBER - 204)) | (1L << (OFFSET - 204)) | (1L << (ONLY - 204)) | (1L << (OPTIMISTIC - 204)) | (1L << (OPTIMIZE - 204)) | (1L << (OUT - 204)) | (1L << (OUTPUT - 204)) | (1L << (OWNER - 204)) | (1L << (PARAMETERIZATION - 204)) | (1L << (PARTITION - 204)) | (1L << (PATH - 204)) | (1L << (PRECEDING - 204)) | (1L << (PRIOR - 204)) | (1L << (RANGE - 204)))) != 0) || ((((_la - 268)) & ~0x3f) == 0 && ((1L << (_la - 268)) & ((1L << (RANK - 268)) | (1L << (READONLY - 268)) | (1L << (READ_ONLY - 268)) | (1L << (RECOMPILE - 268)) | (1L << (RELATIVE - 268)) | (1L << (REMOTE - 268)) | (1L << (REPEATABLE - 268)) | (1L << (ROBUST - 268)) | (1L << (ROOT - 268)) | (1L << (ROW - 268)) | (1L << (ROWGUID - 268)) | (1L << (ROWS - 268)) | (1L << (ROW_NUMBER - 268)) | (1L << (SAMPLE - 268)) | (1L << (SCHEMABINDING - 268)) | (1L << (SCROLL - 268)) | (1L << (SCROLL_LOCKS - 268)) | (1L << (SELF - 268)) | (1L << (SERIALIZABLE - 268)) | (1L << (SIMPLE - 268)) | (1L << (SNAPSHOT - 268)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 268)) | (1L << (STATIC - 268)) | (1L << (STATS_STREAM - 268)) | (1L << (STDEV - 268)) | (1L << (STDEVP - 268)) | (1L << (SUM - 268)) | (1L << (THROW - 268)) | (1L << (TIES - 268)) | (1L << (TIME - 268)) | (1L << (TRY - 268)) | (1L << (TYPE - 268)) | (1L << (TYPE_WARNING - 268)) | (1L << (UNBOUNDED - 268)) | (1L << (UNCOMMITTED - 268)) | (1L << (UNKNOWN - 268)) | (1L << (USING - 268)) | (1L << (VAR - 268)) | (1L << (VARP - 268)) | (1L << (VIEW_METADATA - 268)) | (1L << (VIEWS - 268)) | (1L << (WORK - 268)) | (1L << (XML - 268)) | (1L << (XMLNAMESPACES - 268)) | (1L << (DOUBLE_QUOTE_ID - 268)) | (1L << (SQUARE_BRACKET_ID - 268)) | (1L << (LOCAL_ID - 268)) | (1L << (DECIMAL - 268)) | (1L << (ID - 268)) | (1L << (STRING - 268)) | (1L << (BINARY - 268)) | (1L << (FLOAT - 268)) | (1L << (REAL - 268)))) != 0) || ((((_la - 341)) & ~0x3f) == 0 && ((1L << (_la - 341)) & ((1L << (DOLLAR - 341)) | (1L << (LR_BRACKET - 341)) | (1L << (PLUS - 341)) | (1L << (MINUS - 341)) | (1L << (BIT_NOT - 341)))) != 0)) {
					{
					State = 2111; expression_list();
					}
				}

				State = 2114; Match(RR_BRACKET);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2116; Match(BINARY_CHECKSUM);
				State = 2117; Match(LR_BRACKET);
				State = 2118; Match(STAR);
				State = 2119; Match(RR_BRACKET);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2120; Match(CAST);
				State = 2121; Match(LR_BRACKET);
				State = 2122; expression(0);
				State = 2123; Match(AS);
				State = 2124; data_type();
				State = 2125; Match(RR_BRACKET);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2127; Match(CONVERT);
				State = 2128; Match(LR_BRACKET);
				State = 2129; data_type();
				State = 2130; Match(COMMA);
				State = 2131; expression(0);
				State = 2134;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2132; Match(COMMA);
					State = 2133; _localctx.style = expression(0);
					}
				}

				State = 2136; Match(RR_BRACKET);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2138; Match(CHECKSUM);
				State = 2139; Match(LR_BRACKET);
				State = 2140; Match(STAR);
				State = 2141; Match(RR_BRACKET);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2142; Match(COALESCE);
				State = 2143; Match(LR_BRACKET);
				State = 2144; expression_list();
				State = 2145; Match(RR_BRACKET);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2147; Match(CURRENT_TIMESTAMP);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2148; Match(CURRENT_USER);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2149; Match(DATEADD);
				State = 2150; Match(LR_BRACKET);
				State = 2151; datepart();
				State = 2152; Match(COMMA);
				State = 2153; expression(0);
				State = 2154; Match(COMMA);
				State = 2155; expression(0);
				State = 2156; Match(RR_BRACKET);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2158; Match(DATEDIFF);
				State = 2159; Match(LR_BRACKET);
				State = 2160; datepart();
				State = 2161; Match(COMMA);
				State = 2162; expression(0);
				State = 2163; Match(COMMA);
				State = 2164; expression(0);
				State = 2165; Match(RR_BRACKET);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2167; Match(DATENAME);
				State = 2168; Match(LR_BRACKET);
				State = 2169; datepart();
				State = 2170; Match(COMMA);
				State = 2171; expression(0);
				State = 2172; Match(RR_BRACKET);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2174; Match(DATEPART);
				State = 2175; Match(LR_BRACKET);
				State = 2176; datepart();
				State = 2177; Match(COMMA);
				State = 2178; expression(0);
				State = 2179; Match(RR_BRACKET);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 2181; Match(IDENTITY);
				State = 2182; Match(LR_BRACKET);
				State = 2183; data_type();
				State = 2186;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,342,Context) ) {
				case 1:
					{
					State = 2184; Match(COMMA);
					State = 2185; _localctx.seed = Match(DECIMAL);
					}
					break;
				}
				State = 2190;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2188; Match(COMMA);
					State = 2189; _localctx.increment = Match(DECIMAL);
					}
				}

				State = 2192; Match(RR_BRACKET);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 2194; Match(MIN_ACTIVE_ROWVERSION);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 2195; Match(NULLIF);
				State = 2196; Match(LR_BRACKET);
				State = 2197; expression(0);
				State = 2198; Match(COMMA);
				State = 2199; expression(0);
				State = 2200; Match(RR_BRACKET);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 2202; Match(SESSION_USER);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 2203; Match(SYSTEM_USER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatepartContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(tsqlParser.ID, 0); }
		public DatepartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datepart; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDatepart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDatepart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatepart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatepartContext datepart() {
		DatepartContext _localctx = new DatepartContext(Context, State);
		EnterRule(_localctx, 180, RULE_datepart);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2206; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class As_table_aliasContext : ParserRuleContext {
		public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		public ITerminalNode AS() { return GetToken(tsqlParser.AS, 0); }
		public As_table_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_as_table_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterAs_table_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitAs_table_alias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAs_table_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public As_table_aliasContext as_table_alias() {
		As_table_aliasContext _localctx = new As_table_aliasContext(Context, State);
		EnterRule(_localctx, 182, RULE_as_table_alias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2209;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 2208; Match(AS);
				}
			}

			State = 2211; table_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_aliasContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public With_table_hintsContext with_table_hints() {
			return GetRuleContext<With_table_hintsContext>(0);
		}
		public Table_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterTable_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitTable_alias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_aliasContext table_alias() {
		Table_aliasContext _localctx = new Table_aliasContext(Context, State);
		EnterRule(_localctx, 184, RULE_table_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2213; id();
			State = 2215;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,346,Context) ) {
			case 1:
				{
				State = 2214; with_table_hints();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_table_hintsContext : ParserRuleContext {
		public Table_hintContext[] table_hint() {
			return GetRuleContexts<Table_hintContext>();
		}
		public Table_hintContext table_hint(int i) {
			return GetRuleContext<Table_hintContext>(i);
		}
		public ITerminalNode WITH() { return GetToken(tsqlParser.WITH, 0); }
		public With_table_hintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_table_hints; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterWith_table_hints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitWith_table_hints(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWith_table_hints(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public With_table_hintsContext with_table_hints() {
		With_table_hintsContext _localctx = new With_table_hintsContext(Context, State);
		EnterRule(_localctx, 186, RULE_with_table_hints);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 2217; Match(WITH);
				}
			}

			State = 2220; Match(LR_BRACKET);
			State = 2221; table_hint();
			State = 2226;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2222; Match(COMMA);
				State = 2223; table_hint();
				}
				}
				State = 2228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2229; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_with_table_hintsContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(tsqlParser.WITH, 0); }
		public Table_hintContext[] table_hint() {
			return GetRuleContexts<Table_hintContext>();
		}
		public Table_hintContext table_hint(int i) {
			return GetRuleContext<Table_hintContext>(i);
		}
		public Insert_with_table_hintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_with_table_hints; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterInsert_with_table_hints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitInsert_with_table_hints(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsert_with_table_hints(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Insert_with_table_hintsContext insert_with_table_hints() {
		Insert_with_table_hintsContext _localctx = new Insert_with_table_hintsContext(Context, State);
		EnterRule(_localctx, 188, RULE_insert_with_table_hints);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2231; Match(WITH);
			State = 2232; Match(LR_BRACKET);
			State = 2233; table_hint();
			State = 2238;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2234; Match(COMMA);
				State = 2235; table_hint();
				}
				}
				State = 2240;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2241; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_hintContext : ParserRuleContext {
		public ITerminalNode NOEXPAND() { return GetToken(tsqlParser.NOEXPAND, 0); }
		public ITerminalNode INDEX() { return GetToken(tsqlParser.INDEX, 0); }
		public Index_valueContext[] index_value() {
			return GetRuleContexts<Index_valueContext>();
		}
		public Index_valueContext index_value(int i) {
			return GetRuleContext<Index_valueContext>(i);
		}
		public ITerminalNode FORCESEEK() { return GetToken(tsqlParser.FORCESEEK, 0); }
		public ITerminalNode SERIALIZABLE() { return GetToken(tsqlParser.SERIALIZABLE, 0); }
		public ITerminalNode SNAPSHOT() { return GetToken(tsqlParser.SNAPSHOT, 0); }
		public ITerminalNode SPATIAL_WINDOW_MAX_CELLS() { return GetToken(tsqlParser.SPATIAL_WINDOW_MAX_CELLS, 0); }
		public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		public ITerminalNode ID() { return GetToken(tsqlParser.ID, 0); }
		public Index_column_nameContext[] index_column_name() {
			return GetRuleContexts<Index_column_nameContext>();
		}
		public Index_column_nameContext index_column_name(int i) {
			return GetRuleContext<Index_column_nameContext>(i);
		}
		public Table_hintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_hint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterTable_hint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitTable_hint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_hint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_hintContext table_hint() {
		Table_hintContext _localctx = new Table_hintContext(Context, State);
		EnterRule(_localctx, 190, RULE_table_hint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2244;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOEXPAND) {
				{
				State = 2243; Match(NOEXPAND);
				}
			}

			State = 2284;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,354,Context) ) {
			case 1:
				{
				State = 2246; Match(INDEX);
				State = 2247; Match(LR_BRACKET);
				State = 2248; index_value();
				State = 2253;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2249; Match(COMMA);
					State = 2250; index_value();
					}
					}
					State = 2255;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2256; Match(RR_BRACKET);
				}
				break;
			case 2:
				{
				State = 2258; Match(INDEX);
				State = 2259; Match(EQUAL);
				State = 2260; index_value();
				}
				break;
			case 3:
				{
				State = 2261; Match(FORCESEEK);
				State = 2276;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 2262; Match(LR_BRACKET);
					State = 2263; index_value();
					State = 2264; Match(LR_BRACKET);
					State = 2265; index_column_name();
					State = 2270;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 2266; Match(COMMA);
						State = 2267; index_column_name();
						}
						}
						State = 2272;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2273; Match(RR_BRACKET);
					State = 2274; Match(RR_BRACKET);
					}
				}

				}
				break;
			case 4:
				{
				State = 2278; Match(SERIALIZABLE);
				}
				break;
			case 5:
				{
				State = 2279; Match(SNAPSHOT);
				}
				break;
			case 6:
				{
				State = 2280; Match(SPATIAL_WINDOW_MAX_CELLS);
				State = 2281; Match(EQUAL);
				State = 2282; Match(DECIMAL);
				}
				break;
			case 7:
				{
				State = 2283; Match(ID);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_column_nameContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(tsqlParser.ID, 0); }
		public Index_column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_column_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterIndex_column_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitIndex_column_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_column_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_column_nameContext index_column_name() {
		Index_column_nameContext _localctx = new Index_column_nameContext(Context, State);
		EnterRule(_localctx, 192, RULE_index_column_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2286; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_valueContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(tsqlParser.ID, 0); }
		public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		public Index_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterIndex_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitIndex_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_valueContext index_value() {
		Index_valueContext _localctx = new Index_valueContext(Context, State);
		EnterRule(_localctx, 194, RULE_index_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2288;
			_la = TokenStream.LA(1);
			if ( !(_la==DECIMAL || _la==ID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_alias_listContext : ParserRuleContext {
		public Column_aliasContext[] column_alias() {
			return GetRuleContexts<Column_aliasContext>();
		}
		public Column_aliasContext column_alias(int i) {
			return GetRuleContext<Column_aliasContext>(i);
		}
		public Column_alias_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_alias_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterColumn_alias_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitColumn_alias_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_alias_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_alias_listContext column_alias_list() {
		Column_alias_listContext _localctx = new Column_alias_listContext(Context, State);
		EnterRule(_localctx, 196, RULE_column_alias_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2290; Match(LR_BRACKET);
			State = 2291; column_alias();
			State = 2296;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2292; Match(COMMA);
				State = 2293; column_alias();
				}
				}
				State = 2298;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2299; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_aliasContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(tsqlParser.STRING, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterColumn_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitColumn_alias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_aliasContext column_alias() {
		Column_aliasContext _localctx = new Column_aliasContext(Context, State);
		EnterRule(_localctx, 198, RULE_column_alias);
		try {
			State = 2303;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FORCESEEK:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FORCE:
			case FORCED:
			case FOLLOWING:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NEXT:
			case NAME:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2301; id();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2302; Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_listContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterExpression_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitExpression_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_listContext expression_list() {
		Expression_listContext _localctx = new Expression_listContext(Context, State);
		EnterRule(_localctx, 200, RULE_expression_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2305; expression(0);
			State = 2310;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2306; Match(COMMA);
				State = 2307; expression(0);
				}
				}
				State = 2312;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_exprContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(tsqlParser.CASE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode END() { return GetToken(tsqlParser.END, 0); }
		public ITerminalNode[] WHEN() { return GetTokens(tsqlParser.WHEN); }
		public ITerminalNode WHEN(int i) {
			return GetToken(tsqlParser.WHEN, i);
		}
		public ITerminalNode[] THEN() { return GetTokens(tsqlParser.THEN); }
		public ITerminalNode THEN(int i) {
			return GetToken(tsqlParser.THEN, i);
		}
		public ITerminalNode ELSE() { return GetToken(tsqlParser.ELSE, 0); }
		public Search_conditionContext[] search_condition() {
			return GetRuleContexts<Search_conditionContext>();
		}
		public Search_conditionContext search_condition(int i) {
			return GetRuleContext<Search_conditionContext>(i);
		}
		public Case_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterCase_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitCase_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Case_exprContext case_expr() {
		Case_exprContext _localctx = new Case_exprContext(Context, State);
		EnterRule(_localctx, 202, RULE_case_expr);
		int _la;
		try {
			State = 2346;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,362,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2313; Match(CASE);
				State = 2314; expression(0);
				State = 2320;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 2315; Match(WHEN);
					State = 2316; expression(0);
					State = 2317; Match(THEN);
					State = 2318; expression(0);
					}
					}
					State = 2322;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WHEN );
				State = 2326;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 2324; Match(ELSE);
					State = 2325; expression(0);
					}
				}

				State = 2328; Match(END);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2330; Match(CASE);
				State = 2336;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 2331; Match(WHEN);
					State = 2332; search_condition();
					State = 2333; Match(THEN);
					State = 2334; expression(0);
					}
					}
					State = 2338;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WHEN );
				State = 2342;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 2340; Match(ELSE);
					State = 2341; expression(0);
					}
				}

				State = 2344; Match(END);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ranking_windowed_functionContext : ParserRuleContext {
		public ITerminalNode RANK() { return GetToken(tsqlParser.RANK, 0); }
		public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		public ITerminalNode DENSE_RANK() { return GetToken(tsqlParser.DENSE_RANK, 0); }
		public ITerminalNode NTILE() { return GetToken(tsqlParser.NTILE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ROW_NUMBER() { return GetToken(tsqlParser.ROW_NUMBER, 0); }
		public Ranking_windowed_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ranking_windowed_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterRanking_windowed_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitRanking_windowed_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRanking_windowed_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ranking_windowed_functionContext ranking_windowed_function() {
		Ranking_windowed_functionContext _localctx = new Ranking_windowed_functionContext(Context, State);
		EnterRule(_localctx, 204, RULE_ranking_windowed_function);
		try {
			State = 2366;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RANK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2348; Match(RANK);
				State = 2349; Match(LR_BRACKET);
				State = 2350; Match(RR_BRACKET);
				State = 2351; over_clause();
				}
				break;
			case DENSE_RANK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2352; Match(DENSE_RANK);
				State = 2353; Match(LR_BRACKET);
				State = 2354; Match(RR_BRACKET);
				State = 2355; over_clause();
				}
				break;
			case NTILE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2356; Match(NTILE);
				State = 2357; Match(LR_BRACKET);
				State = 2358; expression(0);
				State = 2359; Match(RR_BRACKET);
				State = 2360; over_clause();
				}
				break;
			case ROW_NUMBER:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2362; Match(ROW_NUMBER);
				State = 2363; Match(LR_BRACKET);
				State = 2364; Match(RR_BRACKET);
				State = 2365; over_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aggregate_windowed_functionContext : ParserRuleContext {
		public ITerminalNode AVG() { return GetToken(tsqlParser.AVG, 0); }
		public All_distinct_expressionContext all_distinct_expression() {
			return GetRuleContext<All_distinct_expressionContext>(0);
		}
		public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		public ITerminalNode CHECKSUM_AGG() { return GetToken(tsqlParser.CHECKSUM_AGG, 0); }
		public ITerminalNode GROUPING() { return GetToken(tsqlParser.GROUPING, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode GROUPING_ID() { return GetToken(tsqlParser.GROUPING_ID, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public ITerminalNode MAX() { return GetToken(tsqlParser.MAX, 0); }
		public ITerminalNode MIN() { return GetToken(tsqlParser.MIN, 0); }
		public ITerminalNode SUM() { return GetToken(tsqlParser.SUM, 0); }
		public ITerminalNode STDEV() { return GetToken(tsqlParser.STDEV, 0); }
		public ITerminalNode STDEVP() { return GetToken(tsqlParser.STDEVP, 0); }
		public ITerminalNode VAR() { return GetToken(tsqlParser.VAR, 0); }
		public ITerminalNode VARP() { return GetToken(tsqlParser.VARP, 0); }
		public ITerminalNode COUNT() { return GetToken(tsqlParser.COUNT, 0); }
		public ITerminalNode COUNT_BIG() { return GetToken(tsqlParser.COUNT_BIG, 0); }
		public Aggregate_windowed_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregate_windowed_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterAggregate_windowed_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitAggregate_windowed_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregate_windowed_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Aggregate_windowed_functionContext aggregate_windowed_function() {
		Aggregate_windowed_functionContext _localctx = new Aggregate_windowed_functionContext(Context, State);
		EnterRule(_localctx, 206, RULE_aggregate_windowed_function);
		try {
			State = 2459;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AVG:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2368; Match(AVG);
				State = 2369; Match(LR_BRACKET);
				State = 2370; all_distinct_expression();
				State = 2371; Match(RR_BRACKET);
				State = 2373;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,364,Context) ) {
				case 1:
					{
					State = 2372; over_clause();
					}
					break;
				}
				}
				break;
			case CHECKSUM_AGG:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2375; Match(CHECKSUM_AGG);
				State = 2376; Match(LR_BRACKET);
				State = 2377; all_distinct_expression();
				State = 2378; Match(RR_BRACKET);
				}
				break;
			case GROUPING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2380; Match(GROUPING);
				State = 2381; Match(LR_BRACKET);
				State = 2382; expression(0);
				State = 2383; Match(RR_BRACKET);
				}
				break;
			case GROUPING_ID:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2385; Match(GROUPING_ID);
				State = 2386; Match(LR_BRACKET);
				State = 2387; expression_list();
				State = 2388; Match(RR_BRACKET);
				}
				break;
			case MAX:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2390; Match(MAX);
				State = 2391; Match(LR_BRACKET);
				State = 2392; all_distinct_expression();
				State = 2393; Match(RR_BRACKET);
				State = 2395;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,365,Context) ) {
				case 1:
					{
					State = 2394; over_clause();
					}
					break;
				}
				}
				break;
			case MIN:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2397; Match(MIN);
				State = 2398; Match(LR_BRACKET);
				State = 2399; all_distinct_expression();
				State = 2400; Match(RR_BRACKET);
				State = 2402;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,366,Context) ) {
				case 1:
					{
					State = 2401; over_clause();
					}
					break;
				}
				}
				break;
			case SUM:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2404; Match(SUM);
				State = 2405; Match(LR_BRACKET);
				State = 2406; all_distinct_expression();
				State = 2407; Match(RR_BRACKET);
				State = 2409;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,367,Context) ) {
				case 1:
					{
					State = 2408; over_clause();
					}
					break;
				}
				}
				break;
			case STDEV:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2411; Match(STDEV);
				State = 2412; Match(LR_BRACKET);
				State = 2413; all_distinct_expression();
				State = 2414; Match(RR_BRACKET);
				State = 2416;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,368,Context) ) {
				case 1:
					{
					State = 2415; over_clause();
					}
					break;
				}
				}
				break;
			case STDEVP:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2418; Match(STDEVP);
				State = 2419; Match(LR_BRACKET);
				State = 2420; all_distinct_expression();
				State = 2421; Match(RR_BRACKET);
				State = 2423;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,369,Context) ) {
				case 1:
					{
					State = 2422; over_clause();
					}
					break;
				}
				}
				break;
			case VAR:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2425; Match(VAR);
				State = 2426; Match(LR_BRACKET);
				State = 2427; all_distinct_expression();
				State = 2428; Match(RR_BRACKET);
				State = 2430;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,370,Context) ) {
				case 1:
					{
					State = 2429; over_clause();
					}
					break;
				}
				}
				break;
			case VARP:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2432; Match(VARP);
				State = 2433; Match(LR_BRACKET);
				State = 2434; all_distinct_expression();
				State = 2435; Match(RR_BRACKET);
				State = 2437;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,371,Context) ) {
				case 1:
					{
					State = 2436; over_clause();
					}
					break;
				}
				}
				break;
			case COUNT:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2439; Match(COUNT);
				State = 2440; Match(LR_BRACKET);
				State = 2443;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STAR:
					{
					State = 2441; Match(STAR);
					}
					break;
				case ALL:
				case CASE:
				case COALESCE:
				case CONVERT:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DEFAULT:
				case DISTINCT:
				case FORCESEEK:
				case IDENTITY:
				case LEFT:
				case NULL:
				case NULLIF:
				case RIGHT:
				case SESSION_USER:
				case SYSTEM_USER:
				case ABSOLUTE:
				case APPLY:
				case AUTO:
				case AVG:
				case BASE64:
				case BINARY_CHECKSUM:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FORCE:
				case FORCED:
				case FOLLOWING:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GO:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MODIFY:
				case NEXT:
				case NAME:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case DECIMAL:
				case ID:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case LR_BRACKET:
				case PLUS:
				case MINUS:
				case BIT_NOT:
					{
					State = 2442; all_distinct_expression();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2445; Match(RR_BRACKET);
				State = 2447;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,373,Context) ) {
				case 1:
					{
					State = 2446; over_clause();
					}
					break;
				}
				}
				break;
			case COUNT_BIG:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2449; Match(COUNT_BIG);
				State = 2450; Match(LR_BRACKET);
				State = 2453;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STAR:
					{
					State = 2451; Match(STAR);
					}
					break;
				case ALL:
				case CASE:
				case COALESCE:
				case CONVERT:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DEFAULT:
				case DISTINCT:
				case FORCESEEK:
				case IDENTITY:
				case LEFT:
				case NULL:
				case NULLIF:
				case RIGHT:
				case SESSION_USER:
				case SYSTEM_USER:
				case ABSOLUTE:
				case APPLY:
				case AUTO:
				case AVG:
				case BASE64:
				case BINARY_CHECKSUM:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FORCE:
				case FORCED:
				case FOLLOWING:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GO:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MODIFY:
				case NEXT:
				case NAME:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case DECIMAL:
				case ID:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case LR_BRACKET:
				case PLUS:
				case MINUS:
				case BIT_NOT:
					{
					State = 2452; all_distinct_expression();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2455; Match(RR_BRACKET);
				State = 2457;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,375,Context) ) {
				case 1:
					{
					State = 2456; over_clause();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class All_distinct_expressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(tsqlParser.ALL, 0); }
		public ITerminalNode DISTINCT() { return GetToken(tsqlParser.DISTINCT, 0); }
		public All_distinct_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_all_distinct_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterAll_distinct_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitAll_distinct_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAll_distinct_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public All_distinct_expressionContext all_distinct_expression() {
		All_distinct_expressionContext _localctx = new All_distinct_expressionContext(Context, State);
		EnterRule(_localctx, 208, RULE_all_distinct_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2462;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				State = 2461;
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2464; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Over_clauseContext : ParserRuleContext {
		public ITerminalNode OVER() { return GetToken(tsqlParser.OVER, 0); }
		public Partition_by_clauseContext partition_by_clause() {
			return GetRuleContext<Partition_by_clauseContext>(0);
		}
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public Row_or_range_clauseContext row_or_range_clause() {
			return GetRuleContext<Row_or_range_clauseContext>(0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_over_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterOver_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitOver_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOver_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Over_clauseContext over_clause() {
		Over_clauseContext _localctx = new Over_clauseContext(Context, State);
		EnterRule(_localctx, 210, RULE_over_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2466; Match(OVER);
			State = 2467; Match(LR_BRACKET);
			State = 2469;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 2468; partition_by_clause();
				}
			}

			State = 2472;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 2471; order_by_clause();
				}
			}

			State = 2475;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RANGE || _la==ROWS) {
				{
				State = 2474; row_or_range_clause();
				}
			}

			State = 2477; Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_or_range_clauseContext : ParserRuleContext {
		public Window_frame_extentContext window_frame_extent() {
			return GetRuleContext<Window_frame_extentContext>(0);
		}
		public ITerminalNode ROWS() { return GetToken(tsqlParser.ROWS, 0); }
		public ITerminalNode RANGE() { return GetToken(tsqlParser.RANGE, 0); }
		public Row_or_range_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_or_range_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterRow_or_range_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitRow_or_range_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRow_or_range_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Row_or_range_clauseContext row_or_range_clause() {
		Row_or_range_clauseContext _localctx = new Row_or_range_clauseContext(Context, State);
		EnterRule(_localctx, 212, RULE_row_or_range_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2479;
			_la = TokenStream.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2480; window_frame_extent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_extentContext : ParserRuleContext {
		public Window_frame_precedingContext window_frame_preceding() {
			return GetRuleContext<Window_frame_precedingContext>(0);
		}
		public ITerminalNode BETWEEN() { return GetToken(tsqlParser.BETWEEN, 0); }
		public Window_frame_boundContext[] window_frame_bound() {
			return GetRuleContexts<Window_frame_boundContext>();
		}
		public Window_frame_boundContext window_frame_bound(int i) {
			return GetRuleContext<Window_frame_boundContext>(i);
		}
		public ITerminalNode AND() { return GetToken(tsqlParser.AND, 0); }
		public Window_frame_extentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_extent; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterWindow_frame_extent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitWindow_frame_extent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_frame_extent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_extentContext window_frame_extent() {
		Window_frame_extentContext _localctx = new Window_frame_extentContext(Context, State);
		EnterRule(_localctx, 214, RULE_window_frame_extent);
		try {
			State = 2488;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CURRENT:
			case UNBOUNDED:
			case DECIMAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2482; window_frame_preceding();
				}
				break;
			case BETWEEN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2483; Match(BETWEEN);
				State = 2484; window_frame_bound();
				State = 2485; Match(AND);
				State = 2486; window_frame_bound();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_boundContext : ParserRuleContext {
		public Window_frame_precedingContext window_frame_preceding() {
			return GetRuleContext<Window_frame_precedingContext>(0);
		}
		public Window_frame_followingContext window_frame_following() {
			return GetRuleContext<Window_frame_followingContext>(0);
		}
		public Window_frame_boundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_bound; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterWindow_frame_bound(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitWindow_frame_bound(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_frame_bound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_boundContext window_frame_bound() {
		Window_frame_boundContext _localctx = new Window_frame_boundContext(Context, State);
		EnterRule(_localctx, 216, RULE_window_frame_bound);
		try {
			State = 2492;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,382,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2490; window_frame_preceding();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2491; window_frame_following();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_precedingContext : ParserRuleContext {
		public ITerminalNode UNBOUNDED() { return GetToken(tsqlParser.UNBOUNDED, 0); }
		public ITerminalNode PRECEDING() { return GetToken(tsqlParser.PRECEDING, 0); }
		public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		public ITerminalNode CURRENT() { return GetToken(tsqlParser.CURRENT, 0); }
		public ITerminalNode ROW() { return GetToken(tsqlParser.ROW, 0); }
		public Window_frame_precedingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_preceding; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterWindow_frame_preceding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitWindow_frame_preceding(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_frame_preceding(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_precedingContext window_frame_preceding() {
		Window_frame_precedingContext _localctx = new Window_frame_precedingContext(Context, State);
		EnterRule(_localctx, 218, RULE_window_frame_preceding);
		try {
			State = 2500;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNBOUNDED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2494; Match(UNBOUNDED);
				State = 2495; Match(PRECEDING);
				}
				break;
			case DECIMAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2496; Match(DECIMAL);
				State = 2497; Match(PRECEDING);
				}
				break;
			case CURRENT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2498; Match(CURRENT);
				State = 2499; Match(ROW);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_followingContext : ParserRuleContext {
		public ITerminalNode UNBOUNDED() { return GetToken(tsqlParser.UNBOUNDED, 0); }
		public ITerminalNode FOLLOWING() { return GetToken(tsqlParser.FOLLOWING, 0); }
		public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		public Window_frame_followingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_following; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterWindow_frame_following(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitWindow_frame_following(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_frame_following(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_followingContext window_frame_following() {
		Window_frame_followingContext _localctx = new Window_frame_followingContext(Context, State);
		EnterRule(_localctx, 220, RULE_window_frame_following);
		try {
			State = 2506;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNBOUNDED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2502; Match(UNBOUNDED);
				State = 2503; Match(FOLLOWING);
				}
				break;
			case DECIMAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2504; Match(DECIMAL);
				State = 2505; Match(FOLLOWING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_table_nameContext : ParserRuleContext {
		public IdContext server;
		public IdContext database;
		public IdContext schema;
		public IdContext table;
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public Full_table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_table_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterFull_table_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitFull_table_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFull_table_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Full_table_nameContext full_table_name() {
		Full_table_nameContext _localctx = new Full_table_nameContext(Context, State);
		EnterRule(_localctx, 222, RULE_full_table_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2525;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,386,Context) ) {
			case 1:
				{
				State = 2508; _localctx.server = id();
				State = 2509; Match(DOT);
				State = 2510; _localctx.database = id();
				State = 2511; Match(DOT);
				State = 2512; _localctx.schema = id();
				State = 2513; Match(DOT);
				}
				break;
			case 2:
				{
				State = 2515; _localctx.database = id();
				State = 2516; Match(DOT);
				State = 2518;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FORCESEEK || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & ((1L << (ABSOLUTE - 188)) | (1L << (APPLY - 188)) | (1L << (AUTO - 188)) | (1L << (AVG - 188)) | (1L << (BASE64 - 188)) | (1L << (CALLER - 188)) | (1L << (CAST - 188)) | (1L << (CATCH - 188)) | (1L << (CHECKSUM_AGG - 188)) | (1L << (COMMITTED - 188)) | (1L << (CONCAT - 188)) | (1L << (COOKIE - 188)) | (1L << (COUNT - 188)) | (1L << (COUNT_BIG - 188)) | (1L << (DELAY - 188)) | (1L << (DELETED - 188)) | (1L << (DENSE_RANK - 188)) | (1L << (DISABLE - 188)) | (1L << (DYNAMIC - 188)) | (1L << (ENCRYPTION - 188)) | (1L << (EXPAND - 188)) | (1L << (FAST - 188)) | (1L << (FAST_FORWARD - 188)) | (1L << (FIRST - 188)) | (1L << (FORCE - 188)) | (1L << (FORCED - 188)) | (1L << (FOLLOWING - 188)) | (1L << (FORWARD_ONLY - 188)) | (1L << (FULLSCAN - 188)) | (1L << (GLOBAL - 188)) | (1L << (GO - 188)) | (1L << (GROUPING - 188)) | (1L << (GROUPING_ID - 188)) | (1L << (HASH - 188)) | (1L << (INSENSITIVE - 188)) | (1L << (INSERTED - 188)) | (1L << (ISOLATION - 188)) | (1L << (KEEP - 188)) | (1L << (KEEPFIXED - 188)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 188)) | (1L << (KEYSET - 188)) | (1L << (LAST - 188)) | (1L << (LEVEL - 188)) | (1L << (LOCAL - 188)) | (1L << (LOCK_ESCALATION - 188)) | (1L << (LOGIN - 188)) | (1L << (LOOP - 188)) | (1L << (MARK - 188)) | (1L << (MAX - 188)) | (1L << (MAXDOP - 188)) | (1L << (MAXRECURSION - 188)) | (1L << (MIN - 188)) | (1L << (MODIFY - 188)) | (1L << (NEXT - 188)) | (1L << (NAME - 188)) | (1L << (NOCOUNT - 188)) | (1L << (NOEXPAND - 188)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (NORECOMPUTE - 252)) | (1L << (NTILE - 252)) | (1L << (NUMBER - 252)) | (1L << (OFFSET - 252)) | (1L << (ONLY - 252)) | (1L << (OPTIMISTIC - 252)) | (1L << (OPTIMIZE - 252)) | (1L << (OUT - 252)) | (1L << (OUTPUT - 252)) | (1L << (OWNER - 252)) | (1L << (PARAMETERIZATION - 252)) | (1L << (PARTITION - 252)) | (1L << (PATH - 252)) | (1L << (PRECEDING - 252)) | (1L << (PRIOR - 252)) | (1L << (RANGE - 252)) | (1L << (RANK - 252)) | (1L << (READONLY - 252)) | (1L << (READ_ONLY - 252)) | (1L << (RECOMPILE - 252)) | (1L << (RELATIVE - 252)) | (1L << (REMOTE - 252)) | (1L << (REPEATABLE - 252)) | (1L << (ROBUST - 252)) | (1L << (ROOT - 252)) | (1L << (ROW - 252)) | (1L << (ROWGUID - 252)) | (1L << (ROWS - 252)) | (1L << (ROW_NUMBER - 252)) | (1L << (SAMPLE - 252)) | (1L << (SCHEMABINDING - 252)) | (1L << (SCROLL - 252)) | (1L << (SCROLL_LOCKS - 252)) | (1L << (SELF - 252)) | (1L << (SERIALIZABLE - 252)) | (1L << (SIMPLE - 252)) | (1L << (SNAPSHOT - 252)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 252)) | (1L << (STATIC - 252)) | (1L << (STATS_STREAM - 252)) | (1L << (STDEV - 252)) | (1L << (STDEVP - 252)) | (1L << (SUM - 252)) | (1L << (THROW - 252)) | (1L << (TIES - 252)) | (1L << (TIME - 252)) | (1L << (TRY - 252)) | (1L << (TYPE - 252)) | (1L << (TYPE_WARNING - 252)) | (1L << (UNBOUNDED - 252)) | (1L << (UNCOMMITTED - 252)) | (1L << (UNKNOWN - 252)) | (1L << (USING - 252)) | (1L << (VAR - 252)) | (1L << (VARP - 252)) | (1L << (VIEW_METADATA - 252)) | (1L << (VIEWS - 252)) | (1L << (WORK - 252)) | (1L << (XML - 252)) | (1L << (XMLNAMESPACES - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (DOUBLE_QUOTE_ID - 316)) | (1L << (SQUARE_BRACKET_ID - 316)) | (1L << (ID - 316)))) != 0)) {
					{
					State = 2517; _localctx.schema = id();
					}
				}

				State = 2520; Match(DOT);
				}
				break;
			case 3:
				{
				State = 2522; _localctx.schema = id();
				State = 2523; Match(DOT);
				}
				break;
			}
			State = 2527; _localctx.table = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_nameContext : ParserRuleContext {
		public IdContext database;
		public IdContext schema;
		public IdContext table;
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public Table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterTable_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitTable_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_nameContext table_name() {
		Table_nameContext _localctx = new Table_nameContext(Context, State);
		EnterRule(_localctx, 224, RULE_table_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2539;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,388,Context) ) {
			case 1:
				{
				State = 2529; _localctx.database = id();
				State = 2530; Match(DOT);
				State = 2532;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FORCESEEK || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & ((1L << (ABSOLUTE - 188)) | (1L << (APPLY - 188)) | (1L << (AUTO - 188)) | (1L << (AVG - 188)) | (1L << (BASE64 - 188)) | (1L << (CALLER - 188)) | (1L << (CAST - 188)) | (1L << (CATCH - 188)) | (1L << (CHECKSUM_AGG - 188)) | (1L << (COMMITTED - 188)) | (1L << (CONCAT - 188)) | (1L << (COOKIE - 188)) | (1L << (COUNT - 188)) | (1L << (COUNT_BIG - 188)) | (1L << (DELAY - 188)) | (1L << (DELETED - 188)) | (1L << (DENSE_RANK - 188)) | (1L << (DISABLE - 188)) | (1L << (DYNAMIC - 188)) | (1L << (ENCRYPTION - 188)) | (1L << (EXPAND - 188)) | (1L << (FAST - 188)) | (1L << (FAST_FORWARD - 188)) | (1L << (FIRST - 188)) | (1L << (FORCE - 188)) | (1L << (FORCED - 188)) | (1L << (FOLLOWING - 188)) | (1L << (FORWARD_ONLY - 188)) | (1L << (FULLSCAN - 188)) | (1L << (GLOBAL - 188)) | (1L << (GO - 188)) | (1L << (GROUPING - 188)) | (1L << (GROUPING_ID - 188)) | (1L << (HASH - 188)) | (1L << (INSENSITIVE - 188)) | (1L << (INSERTED - 188)) | (1L << (ISOLATION - 188)) | (1L << (KEEP - 188)) | (1L << (KEEPFIXED - 188)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 188)) | (1L << (KEYSET - 188)) | (1L << (LAST - 188)) | (1L << (LEVEL - 188)) | (1L << (LOCAL - 188)) | (1L << (LOCK_ESCALATION - 188)) | (1L << (LOGIN - 188)) | (1L << (LOOP - 188)) | (1L << (MARK - 188)) | (1L << (MAX - 188)) | (1L << (MAXDOP - 188)) | (1L << (MAXRECURSION - 188)) | (1L << (MIN - 188)) | (1L << (MODIFY - 188)) | (1L << (NEXT - 188)) | (1L << (NAME - 188)) | (1L << (NOCOUNT - 188)) | (1L << (NOEXPAND - 188)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (NORECOMPUTE - 252)) | (1L << (NTILE - 252)) | (1L << (NUMBER - 252)) | (1L << (OFFSET - 252)) | (1L << (ONLY - 252)) | (1L << (OPTIMISTIC - 252)) | (1L << (OPTIMIZE - 252)) | (1L << (OUT - 252)) | (1L << (OUTPUT - 252)) | (1L << (OWNER - 252)) | (1L << (PARAMETERIZATION - 252)) | (1L << (PARTITION - 252)) | (1L << (PATH - 252)) | (1L << (PRECEDING - 252)) | (1L << (PRIOR - 252)) | (1L << (RANGE - 252)) | (1L << (RANK - 252)) | (1L << (READONLY - 252)) | (1L << (READ_ONLY - 252)) | (1L << (RECOMPILE - 252)) | (1L << (RELATIVE - 252)) | (1L << (REMOTE - 252)) | (1L << (REPEATABLE - 252)) | (1L << (ROBUST - 252)) | (1L << (ROOT - 252)) | (1L << (ROW - 252)) | (1L << (ROWGUID - 252)) | (1L << (ROWS - 252)) | (1L << (ROW_NUMBER - 252)) | (1L << (SAMPLE - 252)) | (1L << (SCHEMABINDING - 252)) | (1L << (SCROLL - 252)) | (1L << (SCROLL_LOCKS - 252)) | (1L << (SELF - 252)) | (1L << (SERIALIZABLE - 252)) | (1L << (SIMPLE - 252)) | (1L << (SNAPSHOT - 252)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 252)) | (1L << (STATIC - 252)) | (1L << (STATS_STREAM - 252)) | (1L << (STDEV - 252)) | (1L << (STDEVP - 252)) | (1L << (SUM - 252)) | (1L << (THROW - 252)) | (1L << (TIES - 252)) | (1L << (TIME - 252)) | (1L << (TRY - 252)) | (1L << (TYPE - 252)) | (1L << (TYPE_WARNING - 252)) | (1L << (UNBOUNDED - 252)) | (1L << (UNCOMMITTED - 252)) | (1L << (UNKNOWN - 252)) | (1L << (USING - 252)) | (1L << (VAR - 252)) | (1L << (VARP - 252)) | (1L << (VIEW_METADATA - 252)) | (1L << (VIEWS - 252)) | (1L << (WORK - 252)) | (1L << (XML - 252)) | (1L << (XMLNAMESPACES - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (DOUBLE_QUOTE_ID - 316)) | (1L << (SQUARE_BRACKET_ID - 316)) | (1L << (ID - 316)))) != 0)) {
					{
					State = 2531; _localctx.schema = id();
					}
				}

				State = 2534; Match(DOT);
				}
				break;
			case 2:
				{
				State = 2536; _localctx.schema = id();
				State = 2537; Match(DOT);
				}
				break;
			}
			State = 2541; _localctx.table = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class View_nameContext : ParserRuleContext {
		public IdContext schema;
		public IdContext view;
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public View_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_view_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterView_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitView_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitView_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public View_nameContext view_name() {
		View_nameContext _localctx = new View_nameContext(Context, State);
		EnterRule(_localctx, 226, RULE_view_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2546;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,389,Context) ) {
			case 1:
				{
				State = 2543; _localctx.schema = id();
				State = 2544; Match(DOT);
				}
				break;
			}
			State = 2548; _localctx.view = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_proc_nameContext : ParserRuleContext {
		public IdContext database;
		public IdContext schema;
		public IdContext procedure;
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public Func_proc_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_proc_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterFunc_proc_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitFunc_proc_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_proc_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_proc_nameContext func_proc_name() {
		Func_proc_nameContext _localctx = new Func_proc_nameContext(Context, State);
		EnterRule(_localctx, 228, RULE_func_proc_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2560;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,391,Context) ) {
			case 1:
				{
				State = 2550; _localctx.database = id();
				State = 2551; Match(DOT);
				State = 2553;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FORCESEEK || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & ((1L << (ABSOLUTE - 188)) | (1L << (APPLY - 188)) | (1L << (AUTO - 188)) | (1L << (AVG - 188)) | (1L << (BASE64 - 188)) | (1L << (CALLER - 188)) | (1L << (CAST - 188)) | (1L << (CATCH - 188)) | (1L << (CHECKSUM_AGG - 188)) | (1L << (COMMITTED - 188)) | (1L << (CONCAT - 188)) | (1L << (COOKIE - 188)) | (1L << (COUNT - 188)) | (1L << (COUNT_BIG - 188)) | (1L << (DELAY - 188)) | (1L << (DELETED - 188)) | (1L << (DENSE_RANK - 188)) | (1L << (DISABLE - 188)) | (1L << (DYNAMIC - 188)) | (1L << (ENCRYPTION - 188)) | (1L << (EXPAND - 188)) | (1L << (FAST - 188)) | (1L << (FAST_FORWARD - 188)) | (1L << (FIRST - 188)) | (1L << (FORCE - 188)) | (1L << (FORCED - 188)) | (1L << (FOLLOWING - 188)) | (1L << (FORWARD_ONLY - 188)) | (1L << (FULLSCAN - 188)) | (1L << (GLOBAL - 188)) | (1L << (GO - 188)) | (1L << (GROUPING - 188)) | (1L << (GROUPING_ID - 188)) | (1L << (HASH - 188)) | (1L << (INSENSITIVE - 188)) | (1L << (INSERTED - 188)) | (1L << (ISOLATION - 188)) | (1L << (KEEP - 188)) | (1L << (KEEPFIXED - 188)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 188)) | (1L << (KEYSET - 188)) | (1L << (LAST - 188)) | (1L << (LEVEL - 188)) | (1L << (LOCAL - 188)) | (1L << (LOCK_ESCALATION - 188)) | (1L << (LOGIN - 188)) | (1L << (LOOP - 188)) | (1L << (MARK - 188)) | (1L << (MAX - 188)) | (1L << (MAXDOP - 188)) | (1L << (MAXRECURSION - 188)) | (1L << (MIN - 188)) | (1L << (MODIFY - 188)) | (1L << (NEXT - 188)) | (1L << (NAME - 188)) | (1L << (NOCOUNT - 188)) | (1L << (NOEXPAND - 188)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (NORECOMPUTE - 252)) | (1L << (NTILE - 252)) | (1L << (NUMBER - 252)) | (1L << (OFFSET - 252)) | (1L << (ONLY - 252)) | (1L << (OPTIMISTIC - 252)) | (1L << (OPTIMIZE - 252)) | (1L << (OUT - 252)) | (1L << (OUTPUT - 252)) | (1L << (OWNER - 252)) | (1L << (PARAMETERIZATION - 252)) | (1L << (PARTITION - 252)) | (1L << (PATH - 252)) | (1L << (PRECEDING - 252)) | (1L << (PRIOR - 252)) | (1L << (RANGE - 252)) | (1L << (RANK - 252)) | (1L << (READONLY - 252)) | (1L << (READ_ONLY - 252)) | (1L << (RECOMPILE - 252)) | (1L << (RELATIVE - 252)) | (1L << (REMOTE - 252)) | (1L << (REPEATABLE - 252)) | (1L << (ROBUST - 252)) | (1L << (ROOT - 252)) | (1L << (ROW - 252)) | (1L << (ROWGUID - 252)) | (1L << (ROWS - 252)) | (1L << (ROW_NUMBER - 252)) | (1L << (SAMPLE - 252)) | (1L << (SCHEMABINDING - 252)) | (1L << (SCROLL - 252)) | (1L << (SCROLL_LOCKS - 252)) | (1L << (SELF - 252)) | (1L << (SERIALIZABLE - 252)) | (1L << (SIMPLE - 252)) | (1L << (SNAPSHOT - 252)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 252)) | (1L << (STATIC - 252)) | (1L << (STATS_STREAM - 252)) | (1L << (STDEV - 252)) | (1L << (STDEVP - 252)) | (1L << (SUM - 252)) | (1L << (THROW - 252)) | (1L << (TIES - 252)) | (1L << (TIME - 252)) | (1L << (TRY - 252)) | (1L << (TYPE - 252)) | (1L << (TYPE_WARNING - 252)) | (1L << (UNBOUNDED - 252)) | (1L << (UNCOMMITTED - 252)) | (1L << (UNKNOWN - 252)) | (1L << (USING - 252)) | (1L << (VAR - 252)) | (1L << (VARP - 252)) | (1L << (VIEW_METADATA - 252)) | (1L << (VIEWS - 252)) | (1L << (WORK - 252)) | (1L << (XML - 252)) | (1L << (XMLNAMESPACES - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (DOUBLE_QUOTE_ID - 316)) | (1L << (SQUARE_BRACKET_ID - 316)) | (1L << (ID - 316)))) != 0)) {
					{
					State = 2552; _localctx.schema = id();
					}
				}

				State = 2555; Match(DOT);
				}
				break;
			case 2:
				{
				{
				State = 2557; _localctx.schema = id();
				}
				State = 2558; Match(DOT);
				}
				break;
			}
			State = 2562; _localctx.procedure = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ddl_objectContext : ParserRuleContext {
		public Full_table_nameContext full_table_name() {
			return GetRuleContext<Full_table_nameContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		public Ddl_objectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ddl_object; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDdl_object(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDdl_object(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDdl_object(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ddl_objectContext ddl_object() {
		Ddl_objectContext _localctx = new Ddl_objectContext(Context, State);
		EnterRule(_localctx, 230, RULE_ddl_object);
		try {
			State = 2566;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FORCESEEK:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FORCE:
			case FORCED:
			case FOLLOWING:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NEXT:
			case NAME:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2564; full_table_name();
				}
				break;
			case LOCAL_ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2565; Match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_column_nameContext : ParserRuleContext {
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Full_column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_column_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterFull_column_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitFull_column_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFull_column_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Full_column_nameContext full_column_name() {
		Full_column_nameContext _localctx = new Full_column_nameContext(Context, State);
		EnterRule(_localctx, 232, RULE_full_column_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2571;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,393,Context) ) {
			case 1:
				{
				State = 2568; table_name();
				State = 2569; Match(DOT);
				}
				break;
			}
			State = 2573; column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_name_listContext : ParserRuleContext {
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public Column_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterColumn_name_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitColumn_name_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_name_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_name_listContext column_name_list() {
		Column_name_listContext _localctx = new Column_name_listContext(Context, State);
		EnterRule(_localctx, 234, RULE_column_name_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2575; column_name();
			State = 2580;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2576; Match(COMMA);
				State = 2577; column_name();
				}
				}
				State = 2582;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_nameContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterColumn_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitColumn_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_nameContext column_name() {
		Column_nameContext _localctx = new Column_nameContext(Context, State);
		EnterRule(_localctx, 236, RULE_column_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2583; id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_nameContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode LOCAL_ID() { return GetToken(tsqlParser.LOCAL_ID, 0); }
		public Cursor_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterCursor_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitCursor_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursor_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_nameContext cursor_name() {
		Cursor_nameContext _localctx = new Cursor_nameContext(Context, State);
		EnterRule(_localctx, 238, RULE_cursor_name);
		try {
			State = 2587;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FORCESEEK:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FORCE:
			case FORCED:
			case FOLLOWING:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NEXT:
			case NAME:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2585; id();
				}
				break;
			case LOCAL_ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2586; Match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class On_offContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(tsqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(tsqlParser.OFF, 0); }
		public On_offContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_on_off; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterOn_off(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitOn_off(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOn_off(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public On_offContext on_off() {
		On_offContext _localctx = new On_offContext(Context, State);
		EnterRule(_localctx, 240, RULE_on_off);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2589;
			_la = TokenStream.LA(1);
			if ( !(_la==OFF || _la==ON) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClusteredContext : ParserRuleContext {
		public ITerminalNode CLUSTERED() { return GetToken(tsqlParser.CLUSTERED, 0); }
		public ITerminalNode NONCLUSTERED() { return GetToken(tsqlParser.NONCLUSTERED, 0); }
		public ClusteredContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clustered; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterClustered(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitClustered(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClustered(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClusteredContext clustered() {
		ClusteredContext _localctx = new ClusteredContext(Context, State);
		EnterRule(_localctx, 242, RULE_clustered);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2591;
			_la = TokenStream.LA(1);
			if ( !(_la==CLUSTERED || _la==NONCLUSTERED) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Null_notnullContext : ParserRuleContext {
		public ITerminalNode NULL() { return GetToken(tsqlParser.NULL, 0); }
		public ITerminalNode NOT() { return GetToken(tsqlParser.NOT, 0); }
		public Null_notnullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null_notnull; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterNull_notnull(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitNull_notnull(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNull_notnull(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Null_notnullContext null_notnull() {
		Null_notnullContext _localctx = new Null_notnullContext(Context, State);
		EnterRule(_localctx, 244, RULE_null_notnull);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2594;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 2593; Match(NOT);
				}
			}

			State = 2596; Match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scalar_function_nameContext : ParserRuleContext {
		public Func_proc_nameContext func_proc_name() {
			return GetRuleContext<Func_proc_nameContext>(0);
		}
		public ITerminalNode RIGHT() { return GetToken(tsqlParser.RIGHT, 0); }
		public ITerminalNode LEFT() { return GetToken(tsqlParser.LEFT, 0); }
		public ITerminalNode BINARY_CHECKSUM() { return GetToken(tsqlParser.BINARY_CHECKSUM, 0); }
		public ITerminalNode CHECKSUM() { return GetToken(tsqlParser.CHECKSUM, 0); }
		public Scalar_function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalar_function_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterScalar_function_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitScalar_function_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScalar_function_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Scalar_function_nameContext scalar_function_name() {
		Scalar_function_nameContext _localctx = new Scalar_function_nameContext(Context, State);
		EnterRule(_localctx, 246, RULE_scalar_function_name);
		try {
			State = 2603;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FORCESEEK:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FORCE:
			case FORCED:
			case FOLLOWING:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NEXT:
			case NAME:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2598; func_proc_name();
				}
				break;
			case RIGHT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2599; Match(RIGHT);
				}
				break;
			case LEFT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2600; Match(LEFT);
				}
				break;
			case BINARY_CHECKSUM:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2601; Match(BINARY_CHECKSUM);
				}
				break;
			case CHECKSUM:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2602; Match(CHECKSUM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_typeContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode IDENTITY() { return GetToken(tsqlParser.IDENTITY, 0); }
		public ITerminalNode[] DECIMAL() { return GetTokens(tsqlParser.DECIMAL); }
		public ITerminalNode DECIMAL(int i) {
			return GetToken(tsqlParser.DECIMAL, i);
		}
		public ITerminalNode MAX() { return GetToken(tsqlParser.MAX, 0); }
		public Data_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterData_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitData_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitData_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Data_typeContext data_type() {
		Data_typeContext _localctx = new Data_typeContext(Context, State);
		EnterRule(_localctx, 248, RULE_data_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2605; id();
			State = 2607;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,398,Context) ) {
			case 1:
				{
				State = 2606; Match(IDENTITY);
				}
				break;
			}
			State = 2616;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,400,Context) ) {
			case 1:
				{
				State = 2609; Match(LR_BRACKET);
				State = 2610;
				_la = TokenStream.LA(1);
				if ( !(_la==MAX || _la==DECIMAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2613;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2611; Match(COMMA);
					State = 2612; Match(DECIMAL);
					}
				}

				State = 2615; Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_valueContext : ParserRuleContext {
		public ITerminalNode NULL() { return GetToken(tsqlParser.NULL, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public Default_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterDefault_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitDefault_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefault_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Default_valueContext default_value() {
		Default_valueContext _localctx = new Default_valueContext(Context, State);
		EnterRule(_localctx, 250, RULE_default_value);
		try {
			State = 2620;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NULL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2618; Match(NULL);
				}
				break;
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2619; constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(tsqlParser.STRING, 0); }
		public ITerminalNode BINARY() { return GetToken(tsqlParser.BINARY, 0); }
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public ITerminalNode REAL() { return GetToken(tsqlParser.REAL, 0); }
		public ITerminalNode FLOAT() { return GetToken(tsqlParser.FLOAT, 0); }
		public SignContext sign() {
			return GetRuleContext<SignContext>(0);
		}
		public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 252, RULE_constant);
		int _la;
		try {
			State = 2634;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,404,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2622; Match(STRING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2623; Match(BINARY);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2624; number();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2626;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					State = 2625; sign();
					}
				}

				State = 2628;
				_la = TokenStream.LA(1);
				if ( !(_la==FLOAT || _la==REAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2630;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					State = 2629; sign();
					}
				}

				State = 2632; Match(DOLLAR);
				State = 2633;
				_la = TokenStream.LA(1);
				if ( !(_la==DECIMAL || _la==FLOAT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public ITerminalNode DECIMAL() { return GetToken(tsqlParser.DECIMAL, 0); }
		public SignContext sign() {
			return GetRuleContext<SignContext>(0);
		}
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 254, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2637;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 2636; sign();
				}
			}

			State = 2639; Match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(tsqlParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(tsqlParser.MINUS, 0); }
		public SignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sign; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignContext sign() {
		SignContext _localctx = new SignContext(Context, State);
		EnterRule(_localctx, 256, RULE_sign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2641;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		public Simple_idContext simple_id() {
			return GetRuleContext<Simple_idContext>(0);
		}
		public ITerminalNode DOUBLE_QUOTE_ID() { return GetToken(tsqlParser.DOUBLE_QUOTE_ID, 0); }
		public ITerminalNode SQUARE_BRACKET_ID() { return GetToken(tsqlParser.SQUARE_BRACKET_ID, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 258, RULE_id);
		try {
			State = 2646;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FORCESEEK:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case BASE64:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FORCE:
			case FORCED:
			case FOLLOWING:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NEXT:
			case NAME:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2643; simple_id();
				}
				break;
			case DOUBLE_QUOTE_ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2644; Match(DOUBLE_QUOTE_ID);
				}
				break;
			case SQUARE_BRACKET_ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2645; Match(SQUARE_BRACKET_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_idContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(tsqlParser.ID, 0); }
		public ITerminalNode ABSOLUTE() { return GetToken(tsqlParser.ABSOLUTE, 0); }
		public ITerminalNode APPLY() { return GetToken(tsqlParser.APPLY, 0); }
		public ITerminalNode AUTO() { return GetToken(tsqlParser.AUTO, 0); }
		public ITerminalNode AVG() { return GetToken(tsqlParser.AVG, 0); }
		public ITerminalNode BASE64() { return GetToken(tsqlParser.BASE64, 0); }
		public ITerminalNode CALLER() { return GetToken(tsqlParser.CALLER, 0); }
		public ITerminalNode CAST() { return GetToken(tsqlParser.CAST, 0); }
		public ITerminalNode CATCH() { return GetToken(tsqlParser.CATCH, 0); }
		public ITerminalNode CHECKSUM_AGG() { return GetToken(tsqlParser.CHECKSUM_AGG, 0); }
		public ITerminalNode COMMITTED() { return GetToken(tsqlParser.COMMITTED, 0); }
		public ITerminalNode CONCAT() { return GetToken(tsqlParser.CONCAT, 0); }
		public ITerminalNode COOKIE() { return GetToken(tsqlParser.COOKIE, 0); }
		public ITerminalNode COUNT() { return GetToken(tsqlParser.COUNT, 0); }
		public ITerminalNode COUNT_BIG() { return GetToken(tsqlParser.COUNT_BIG, 0); }
		public ITerminalNode DELAY() { return GetToken(tsqlParser.DELAY, 0); }
		public ITerminalNode DELETED() { return GetToken(tsqlParser.DELETED, 0); }
		public ITerminalNode DENSE_RANK() { return GetToken(tsqlParser.DENSE_RANK, 0); }
		public ITerminalNode DISABLE() { return GetToken(tsqlParser.DISABLE, 0); }
		public ITerminalNode DYNAMIC() { return GetToken(tsqlParser.DYNAMIC, 0); }
		public ITerminalNode ENCRYPTION() { return GetToken(tsqlParser.ENCRYPTION, 0); }
		public ITerminalNode EXPAND() { return GetToken(tsqlParser.EXPAND, 0); }
		public ITerminalNode FAST() { return GetToken(tsqlParser.FAST, 0); }
		public ITerminalNode FAST_FORWARD() { return GetToken(tsqlParser.FAST_FORWARD, 0); }
		public ITerminalNode FIRST() { return GetToken(tsqlParser.FIRST, 0); }
		public ITerminalNode FOLLOWING() { return GetToken(tsqlParser.FOLLOWING, 0); }
		public ITerminalNode FORCE() { return GetToken(tsqlParser.FORCE, 0); }
		public ITerminalNode FORCESEEK() { return GetToken(tsqlParser.FORCESEEK, 0); }
		public ITerminalNode FORWARD_ONLY() { return GetToken(tsqlParser.FORWARD_ONLY, 0); }
		public ITerminalNode FULLSCAN() { return GetToken(tsqlParser.FULLSCAN, 0); }
		public ITerminalNode GLOBAL() { return GetToken(tsqlParser.GLOBAL, 0); }
		public ITerminalNode GO() { return GetToken(tsqlParser.GO, 0); }
		public ITerminalNode GROUPING() { return GetToken(tsqlParser.GROUPING, 0); }
		public ITerminalNode GROUPING_ID() { return GetToken(tsqlParser.GROUPING_ID, 0); }
		public ITerminalNode HASH() { return GetToken(tsqlParser.HASH, 0); }
		public ITerminalNode INSENSITIVE() { return GetToken(tsqlParser.INSENSITIVE, 0); }
		public ITerminalNode INSERTED() { return GetToken(tsqlParser.INSERTED, 0); }
		public ITerminalNode ISOLATION() { return GetToken(tsqlParser.ISOLATION, 0); }
		public ITerminalNode KEEP() { return GetToken(tsqlParser.KEEP, 0); }
		public ITerminalNode KEEPFIXED() { return GetToken(tsqlParser.KEEPFIXED, 0); }
		public ITerminalNode FORCED() { return GetToken(tsqlParser.FORCED, 0); }
		public ITerminalNode KEYSET() { return GetToken(tsqlParser.KEYSET, 0); }
		public ITerminalNode IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX() { return GetToken(tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0); }
		public ITerminalNode LAST() { return GetToken(tsqlParser.LAST, 0); }
		public ITerminalNode LEVEL() { return GetToken(tsqlParser.LEVEL, 0); }
		public ITerminalNode LOCAL() { return GetToken(tsqlParser.LOCAL, 0); }
		public ITerminalNode LOCK_ESCALATION() { return GetToken(tsqlParser.LOCK_ESCALATION, 0); }
		public ITerminalNode LOGIN() { return GetToken(tsqlParser.LOGIN, 0); }
		public ITerminalNode LOOP() { return GetToken(tsqlParser.LOOP, 0); }
		public ITerminalNode MARK() { return GetToken(tsqlParser.MARK, 0); }
		public ITerminalNode MAX() { return GetToken(tsqlParser.MAX, 0); }
		public ITerminalNode MAXDOP() { return GetToken(tsqlParser.MAXDOP, 0); }
		public ITerminalNode MAXRECURSION() { return GetToken(tsqlParser.MAXRECURSION, 0); }
		public ITerminalNode MIN() { return GetToken(tsqlParser.MIN, 0); }
		public ITerminalNode MODIFY() { return GetToken(tsqlParser.MODIFY, 0); }
		public ITerminalNode NAME() { return GetToken(tsqlParser.NAME, 0); }
		public ITerminalNode NEXT() { return GetToken(tsqlParser.NEXT, 0); }
		public ITerminalNode NOCOUNT() { return GetToken(tsqlParser.NOCOUNT, 0); }
		public ITerminalNode NOEXPAND() { return GetToken(tsqlParser.NOEXPAND, 0); }
		public ITerminalNode NORECOMPUTE() { return GetToken(tsqlParser.NORECOMPUTE, 0); }
		public ITerminalNode NTILE() { return GetToken(tsqlParser.NTILE, 0); }
		public ITerminalNode NUMBER() { return GetToken(tsqlParser.NUMBER, 0); }
		public ITerminalNode OFFSET() { return GetToken(tsqlParser.OFFSET, 0); }
		public ITerminalNode ONLY() { return GetToken(tsqlParser.ONLY, 0); }
		public ITerminalNode OPTIMISTIC() { return GetToken(tsqlParser.OPTIMISTIC, 0); }
		public ITerminalNode OPTIMIZE() { return GetToken(tsqlParser.OPTIMIZE, 0); }
		public ITerminalNode OUT() { return GetToken(tsqlParser.OUT, 0); }
		public ITerminalNode OUTPUT() { return GetToken(tsqlParser.OUTPUT, 0); }
		public ITerminalNode OWNER() { return GetToken(tsqlParser.OWNER, 0); }
		public ITerminalNode PARAMETERIZATION() { return GetToken(tsqlParser.PARAMETERIZATION, 0); }
		public ITerminalNode PARTITION() { return GetToken(tsqlParser.PARTITION, 0); }
		public ITerminalNode PATH() { return GetToken(tsqlParser.PATH, 0); }
		public ITerminalNode PRECEDING() { return GetToken(tsqlParser.PRECEDING, 0); }
		public ITerminalNode PRIOR() { return GetToken(tsqlParser.PRIOR, 0); }
		public ITerminalNode RANGE() { return GetToken(tsqlParser.RANGE, 0); }
		public ITerminalNode RANK() { return GetToken(tsqlParser.RANK, 0); }
		public ITerminalNode READONLY() { return GetToken(tsqlParser.READONLY, 0); }
		public ITerminalNode READ_ONLY() { return GetToken(tsqlParser.READ_ONLY, 0); }
		public ITerminalNode RECOMPILE() { return GetToken(tsqlParser.RECOMPILE, 0); }
		public ITerminalNode RELATIVE() { return GetToken(tsqlParser.RELATIVE, 0); }
		public ITerminalNode REMOTE() { return GetToken(tsqlParser.REMOTE, 0); }
		public ITerminalNode REPEATABLE() { return GetToken(tsqlParser.REPEATABLE, 0); }
		public ITerminalNode ROBUST() { return GetToken(tsqlParser.ROBUST, 0); }
		public ITerminalNode ROOT() { return GetToken(tsqlParser.ROOT, 0); }
		public ITerminalNode ROW() { return GetToken(tsqlParser.ROW, 0); }
		public ITerminalNode ROWGUID() { return GetToken(tsqlParser.ROWGUID, 0); }
		public ITerminalNode ROWS() { return GetToken(tsqlParser.ROWS, 0); }
		public ITerminalNode ROW_NUMBER() { return GetToken(tsqlParser.ROW_NUMBER, 0); }
		public ITerminalNode SAMPLE() { return GetToken(tsqlParser.SAMPLE, 0); }
		public ITerminalNode SCHEMABINDING() { return GetToken(tsqlParser.SCHEMABINDING, 0); }
		public ITerminalNode SCROLL() { return GetToken(tsqlParser.SCROLL, 0); }
		public ITerminalNode SCROLL_LOCKS() { return GetToken(tsqlParser.SCROLL_LOCKS, 0); }
		public ITerminalNode SELF() { return GetToken(tsqlParser.SELF, 0); }
		public ITerminalNode SERIALIZABLE() { return GetToken(tsqlParser.SERIALIZABLE, 0); }
		public ITerminalNode SIMPLE() { return GetToken(tsqlParser.SIMPLE, 0); }
		public ITerminalNode SNAPSHOT() { return GetToken(tsqlParser.SNAPSHOT, 0); }
		public ITerminalNode SPATIAL_WINDOW_MAX_CELLS() { return GetToken(tsqlParser.SPATIAL_WINDOW_MAX_CELLS, 0); }
		public ITerminalNode STATIC() { return GetToken(tsqlParser.STATIC, 0); }
		public ITerminalNode STATS_STREAM() { return GetToken(tsqlParser.STATS_STREAM, 0); }
		public ITerminalNode STDEV() { return GetToken(tsqlParser.STDEV, 0); }
		public ITerminalNode STDEVP() { return GetToken(tsqlParser.STDEVP, 0); }
		public ITerminalNode SUM() { return GetToken(tsqlParser.SUM, 0); }
		public ITerminalNode THROW() { return GetToken(tsqlParser.THROW, 0); }
		public ITerminalNode TIES() { return GetToken(tsqlParser.TIES, 0); }
		public ITerminalNode TIME() { return GetToken(tsqlParser.TIME, 0); }
		public ITerminalNode TRY() { return GetToken(tsqlParser.TRY, 0); }
		public ITerminalNode TYPE() { return GetToken(tsqlParser.TYPE, 0); }
		public ITerminalNode TYPE_WARNING() { return GetToken(tsqlParser.TYPE_WARNING, 0); }
		public ITerminalNode UNBOUNDED() { return GetToken(tsqlParser.UNBOUNDED, 0); }
		public ITerminalNode UNCOMMITTED() { return GetToken(tsqlParser.UNCOMMITTED, 0); }
		public ITerminalNode UNKNOWN() { return GetToken(tsqlParser.UNKNOWN, 0); }
		public ITerminalNode USING() { return GetToken(tsqlParser.USING, 0); }
		public ITerminalNode VAR() { return GetToken(tsqlParser.VAR, 0); }
		public ITerminalNode VARP() { return GetToken(tsqlParser.VARP, 0); }
		public ITerminalNode VIEW_METADATA() { return GetToken(tsqlParser.VIEW_METADATA, 0); }
		public ITerminalNode VIEWS() { return GetToken(tsqlParser.VIEWS, 0); }
		public ITerminalNode WORK() { return GetToken(tsqlParser.WORK, 0); }
		public ITerminalNode XML() { return GetToken(tsqlParser.XML, 0); }
		public ITerminalNode XMLNAMESPACES() { return GetToken(tsqlParser.XMLNAMESPACES, 0); }
		public Simple_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterSimple_id(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitSimple_id(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_id(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_idContext simple_id() {
		Simple_idContext _localctx = new Simple_idContext(Context, State);
		EnterRule(_localctx, 260, RULE_simple_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2648;
			_la = TokenStream.LA(1);
			if ( !(_la==FORCESEEK || ((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & ((1L << (ABSOLUTE - 188)) | (1L << (APPLY - 188)) | (1L << (AUTO - 188)) | (1L << (AVG - 188)) | (1L << (BASE64 - 188)) | (1L << (CALLER - 188)) | (1L << (CAST - 188)) | (1L << (CATCH - 188)) | (1L << (CHECKSUM_AGG - 188)) | (1L << (COMMITTED - 188)) | (1L << (CONCAT - 188)) | (1L << (COOKIE - 188)) | (1L << (COUNT - 188)) | (1L << (COUNT_BIG - 188)) | (1L << (DELAY - 188)) | (1L << (DELETED - 188)) | (1L << (DENSE_RANK - 188)) | (1L << (DISABLE - 188)) | (1L << (DYNAMIC - 188)) | (1L << (ENCRYPTION - 188)) | (1L << (EXPAND - 188)) | (1L << (FAST - 188)) | (1L << (FAST_FORWARD - 188)) | (1L << (FIRST - 188)) | (1L << (FORCE - 188)) | (1L << (FORCED - 188)) | (1L << (FOLLOWING - 188)) | (1L << (FORWARD_ONLY - 188)) | (1L << (FULLSCAN - 188)) | (1L << (GLOBAL - 188)) | (1L << (GO - 188)) | (1L << (GROUPING - 188)) | (1L << (GROUPING_ID - 188)) | (1L << (HASH - 188)) | (1L << (INSENSITIVE - 188)) | (1L << (INSERTED - 188)) | (1L << (ISOLATION - 188)) | (1L << (KEEP - 188)) | (1L << (KEEPFIXED - 188)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 188)) | (1L << (KEYSET - 188)) | (1L << (LAST - 188)) | (1L << (LEVEL - 188)) | (1L << (LOCAL - 188)) | (1L << (LOCK_ESCALATION - 188)) | (1L << (LOGIN - 188)) | (1L << (LOOP - 188)) | (1L << (MARK - 188)) | (1L << (MAX - 188)) | (1L << (MAXDOP - 188)) | (1L << (MAXRECURSION - 188)) | (1L << (MIN - 188)) | (1L << (MODIFY - 188)) | (1L << (NEXT - 188)) | (1L << (NAME - 188)) | (1L << (NOCOUNT - 188)) | (1L << (NOEXPAND - 188)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (NORECOMPUTE - 252)) | (1L << (NTILE - 252)) | (1L << (NUMBER - 252)) | (1L << (OFFSET - 252)) | (1L << (ONLY - 252)) | (1L << (OPTIMISTIC - 252)) | (1L << (OPTIMIZE - 252)) | (1L << (OUT - 252)) | (1L << (OUTPUT - 252)) | (1L << (OWNER - 252)) | (1L << (PARAMETERIZATION - 252)) | (1L << (PARTITION - 252)) | (1L << (PATH - 252)) | (1L << (PRECEDING - 252)) | (1L << (PRIOR - 252)) | (1L << (RANGE - 252)) | (1L << (RANK - 252)) | (1L << (READONLY - 252)) | (1L << (READ_ONLY - 252)) | (1L << (RECOMPILE - 252)) | (1L << (RELATIVE - 252)) | (1L << (REMOTE - 252)) | (1L << (REPEATABLE - 252)) | (1L << (ROBUST - 252)) | (1L << (ROOT - 252)) | (1L << (ROW - 252)) | (1L << (ROWGUID - 252)) | (1L << (ROWS - 252)) | (1L << (ROW_NUMBER - 252)) | (1L << (SAMPLE - 252)) | (1L << (SCHEMABINDING - 252)) | (1L << (SCROLL - 252)) | (1L << (SCROLL_LOCKS - 252)) | (1L << (SELF - 252)) | (1L << (SERIALIZABLE - 252)) | (1L << (SIMPLE - 252)) | (1L << (SNAPSHOT - 252)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 252)) | (1L << (STATIC - 252)) | (1L << (STATS_STREAM - 252)) | (1L << (STDEV - 252)) | (1L << (STDEVP - 252)) | (1L << (SUM - 252)) | (1L << (THROW - 252)) | (1L << (TIES - 252)) | (1L << (TIME - 252)) | (1L << (TRY - 252)) | (1L << (TYPE - 252)) | (1L << (TYPE_WARNING - 252)) | (1L << (UNBOUNDED - 252)) | (1L << (UNCOMMITTED - 252)) | (1L << (UNKNOWN - 252)) | (1L << (USING - 252)) | (1L << (VAR - 252)) | (1L << (VARP - 252)) | (1L << (VIEW_METADATA - 252)) | (1L << (VIEWS - 252)) | (1L << (WORK - 252)) | (1L << (XML - 252)) | (1L << (XMLNAMESPACES - 252)))) != 0) || _la==ID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comparison_operatorContext : ParserRuleContext {
		public Comparison_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterComparison_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitComparison_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_operatorContext comparison_operator() {
		Comparison_operatorContext _localctx = new Comparison_operatorContext(Context, State);
		EnterRule(_localctx, 262, RULE_comparison_operator);
		try {
			State = 2665;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,407,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2650; Match(EQUAL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2651; Match(GREATER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2652; Match(LESS);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2653; Match(LESS);
				State = 2654; Match(EQUAL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2655; Match(GREATER);
				State = 2656; Match(EQUAL);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2657; Match(LESS);
				State = 2658; Match(GREATER);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2659; Match(EXCLAMATION);
				State = 2660; Match(EQUAL);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2661; Match(EXCLAMATION);
				State = 2662; Match(GREATER);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2663; Match(EXCLAMATION);
				State = 2664; Match(LESS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_operatorContext : ParserRuleContext {
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.EnterAssignment_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItsqlListener typedListener = listener as ItsqlListener;
			if (typedListener != null) typedListener.ExitAssignment_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItsqlVisitor<TResult> typedVisitor = visitor as ItsqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_operatorContext assignment_operator() {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(Context, State);
		EnterRule(_localctx, 264, RULE_assignment_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2667;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (PLUS_ASSIGN - 329)) | (1L << (MINUS_ASSIGN - 329)) | (1L << (MULT_ASSIGN - 329)) | (1L << (DIV_ASSIGN - 329)) | (1L << (MOD_ASSIGN - 329)) | (1L << (AND_ASSIGN - 329)) | (1L << (XOR_ASSIGN - 329)) | (1L << (OR_ASSIGN - 329)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 55: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 4);
		case 1: return Precpred(Context, 2);
		case 2: return Precpred(Context, 1);
		case 3: return Precpred(Context, 10);
		}
		return true;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x165");
		sb.Append("\xA70\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12");
		sb.Append("\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16\x4");
		sb.Append("\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B\t\x1B");
		sb.Append("\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t ");
		sb.Append("\x4!\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t");
		sb.Append("(\x4)\t)\x4*\t*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t");
		sb.Append("\x30\x4\x31\t\x31\x4\x32\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4");
		sb.Append("\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37\x4\x38\t\x38\x4\x39\t\x39");
		sb.Append("\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4@\t@\x4\x41\t\x41");
		sb.Append("\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45\x4\x46");
		sb.Append("\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N");
		sb.Append("\tN\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV");
		sb.Append("\x4W\tW\x4X\tX\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4");
		sb.Append("_\t_\x4`\t`\x4\x61\t\x61\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t");
		sb.Append("\x64\x4\x65\t\x65\x4\x66\t\x66\x4g\tg\x4h\th\x4i\ti\x4j\tj\x4");
		sb.Append("k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4q\tq\x4r\tr\x4s\t");
		sb.Append("s\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4{\t{\x4");
		sb.Append("|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4");
		sb.Append("\x82\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86");
		sb.Append("\x3\x2\a\x2\x10E\n\x2\f\x2\xE\x2\x111\v\x2\x3\x2\x3\x2\x3\x3");
		sb.Append("\x3\x3\x3\x3\x3\x3\x5\x3\x119\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x5");
		sb.Append("\x4\x11F\n\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5");
		sb.Append("\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5\x12D\n\x5\x3\x6\x3\x6\x5\x6\x131");
		sb.Append("\n\x6\x3\x6\a\x6\x134\n\x6\f\x6\xE\x6\x137\v\x6\x3\x6\x3\x6");
		sb.Append("\x5\x6\x13B\n\x6\x3\x6\x3\x6\x5\x6\x13F\n\x6\x3\x6\x3\x6\x5");
		sb.Append("\x6\x143\n\x6\x3\x6\x3\x6\x3\x6\x5\x6\x148\n\x6\x3\x6\x3\x6");
		sb.Append("\x3\x6\x5\x6\x14D\n\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\x154");
		sb.Append("\n\x6\x3\x6\x5\x6\x157\n\x6\x3\x6\x3\x6\x5\x6\x15B\n\x6\x3\x6");
		sb.Append("\x5\x6\x15E\n\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\x166");
		sb.Append("\n\x6\x3\x6\x5\x6\x169\n\x6\x3\x6\x3\x6\x3\x6\x5\x6\x16E\n\x6");
		sb.Append("\x3\x6\a\x6\x171\n\x6\f\x6\xE\x6\x174\v\x6\x3\x6\x3\x6\x3\x6");
		sb.Append("\x5\x6\x179\n\x6\x3\x6\x3\x6\x3\x6\x5\x6\x17E\n\x6\x3\x6\a\x6");
		sb.Append("\x181\n\x6\f\x6\xE\x6\x184\v\x6\x3\x6\x3\x6\x3\x6\x5\x6\x189");
		sb.Append("\n\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\x18F\n\x6\x3\x6\x3\x6\x3");
		sb.Append("\x6\x3\x6\x3\x6\x5\x6\x196\n\x6\x3\x6\x3\x6\x5\x6\x19A\n\x6");
		sb.Append("\x5\x6\x19C\n\x6\x3\x6\x3\x6\x3\x6\x5\x6\x1A1\n\x6\x3\x6\x3");
		sb.Append("\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\x1A9\n\x6\x3\x6\x3\x6\x3\x6");
		sb.Append("\x5\x6\x1AE\n\x6\x3\x6\x3\x6\x3\x6\x5\x6\x1B3\n\x6\a\x6\x1B5");
		sb.Append("\n\x6\f\x6\xE\x6\x1B8\v\x6\x3\x6\x3\x6\x5\x6\x1BC\n\x6\x5\x6");
		sb.Append("\x1BE\n\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a\x1C8");
		sb.Append("\n\a\x3\b\x5\b\x1CB\n\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b\x1D3");
		sb.Append("\n\b\x5\b\x1D5\n\b\x3\b\x5\b\x1D8\n\b\x3\b\x3\b\x3\b\x5\b\x1DD");
		sb.Append("\n\b\x3\b\x5\b\x1E0\n\b\x3\b\x5\b\x1E3\n\b\x3\b\x3\b\x3\b\x3");
		sb.Append("\b\a\b\x1E9\n\b\f\b\xE\b\x1EC\v\b\x5\b\x1EE\n\b\x3\b\x3\b\x3");
		sb.Append("\b\x3\b\x3\b\x5\b\x1F5\n\b\x3\b\x3\b\x5\b\x1F9\n\b\x5\b\x1FB");
		sb.Append("\n\b\x5\b\x1FD\n\b\x3\b\x5\b\x200\n\b\x3\b\x5\b\x203\n\b\x3");
		sb.Append("\b\x5\b\x206\n\b\x3\t\x5\t\x209\n\t\x3\t\x3\t\x3\t\x3\t\x3\t");
		sb.Append("\x3\t\x5\t\x211\n\t\x5\t\x213\n\t\x3\t\x5\t\x216\n\t\x3\t\x3");
		sb.Append("\t\x5\t\x21A\n\t\x3\t\x5\t\x21D\n\t\x3\t\x3\t\x3\t\x3\t\x5\t");
		sb.Append("\x223\n\t\x3\t\x5\t\x226\n\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3");
		sb.Append("\t\x3\t\x3\t\a\t\x231\n\t\f\t\xE\t\x234\v\t\x3\t\x3\t\x3\t\x3");
		sb.Append("\t\x5\t\x23A\n\t\x3\t\x5\t\x23D\n\t\x3\t\x5\t\x240\n\t\x3\t");
		sb.Append("\x5\t\x243\n\t\x3\n\x5\n\x246\n\n\x3\n\x3\n\x5\n\x24A\n\n\x3");
		sb.Append("\n\x5\n\x24D\n\n\x3\n\x5\n\x250\n\n\x3\n\x5\n\x253\n\n\x3\v");
		sb.Append("\x5\v\x256\n\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5\v\x25E\n\v\x5");
		sb.Append("\v\x260\n\v\x3\v\x3\v\x5\v\x264\n\v\x3\v\x5\v\x267\n\v\x3\v");
		sb.Append("\x3\v\x3\v\x3\v\a\v\x26D\n\v\f\v\xE\v\x270\v\v\x3\v\x5\v\x273");
		sb.Append("\n\v\x3\v\x3\v\x3\v\x3\v\a\v\x279\n\v\f\v\xE\v\x27C\v\v\x5\v");
		sb.Append("\x27E\n\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5\v\x285\n\v\x3\v\x3\v\x5");
		sb.Append("\v\x289\n\v\x5\v\x28B\n\v\x5\v\x28D\n\v\x3\v\x5\v\x290\n\v\x3");
		sb.Append("\v\x5\v\x293\n\v\x3\v\x5\v\x296\n\v\x3\f\x3\f\x3\f\x3\f\a\f");
		sb.Append("\x29C\n\f\f\f\xE\f\x29F\v\f\x3\f\x3\f\x3\f\x5\f\x2A4\n\f\x3");
		sb.Append("\f\x3\f\x3\f\x3\f\x5\f\x2AA\n\f\x5\f\x2AC\n\f\x3\r\x3\r\x5\r");
		sb.Append("\x2B0\n\r\x3\r\x5\r\x2B3\n\r\x3\r\x5\r\x2B6\n\r\x3\xE\x3\xE");
		sb.Append("\x3\xE\x5\xE\x2BB\n\xE\x3\xE\x3\xE\x3\xE\x5\xE\x2C0\n\xE\x3");
		sb.Append("\xE\x5\xE\x2C3\n\xE\x3\xF\x3\xF\x5\xF\x2C7\n\xF\x3\xF\x5\xF");
		sb.Append("\x2CA\n\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5");
		sb.Append("\xF\x2D4\n\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\x2DB");
		sb.Append("\n\x10\x3\x10\x5\x10\x2DE\n\x10\x3\x10\x3\x10\x3\x10\a\x10\x2E3");
		sb.Append("\n\x10\f\x10\xE\x10\x2E6\v\x10\x3\x10\x5\x10\x2E9\n\x10\x5\x10");
		sb.Append("\x2EB\n\x10\x3\x10\x3\x10\x3\x10\x3\x10\a\x10\x2F1\n\x10\f\x10");
		sb.Append("\xE\x10\x2F4\v\x10\x5\x10\x2F6\n\x10\x3\x10\x3\x10\x5\x10\x2FA");
		sb.Append("\n\x10\x3\x10\x3\x10\x6\x10\x2FE\n\x10\r\x10\xE\x10\x2FF\x3");
		sb.Append("\x11\x3\x11\x3\x11\x3\x11\x5\x11\x306\n\x11\x3\x11\x5\x11\x309");
		sb.Append("\n\x11\x3\x11\x3\x11\x5\x11\x30D\n\x11\x3\x11\x3\x11\x5\x11");
		sb.Append("\x311\n\x11\x3\x11\x5\x11\x314\n\x11\x3\x12\x3\x12\x3\x12\x5");
		sb.Append("\x12\x319\n\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3");
		sb.Append("\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x5\x13");
		sb.Append("\x329\n\x13\x3\x13\x3\x13\x5\x13\x32D\n\x13\x3\x13\x3\x13\x5");
		sb.Append("\x13\x331\n\x13\x5\x13\x333\n\x13\x3\x13\x5\x13\x336\n\x13\x3");
		sb.Append("\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\x33E\n\x14\x3");
		sb.Append("\x14\a\x14\x341\n\x14\f\x14\xE\x14\x344\v\x14\x3\x14\x5\x14");
		sb.Append("\x347\n\x14\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\x34D\n\x14\x3");
		sb.Append("\x14\x5\x14\x350\n\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3");
		sb.Append("\x15\x3\x15\a\x15\x359\n\x15\f\x15\xE\x15\x35C\v\x15\x3\x15");
		sb.Append("\x3\x15\x5\x15\x360\n\x15\x3\x15\x3\x15\x3\x15\x3\x15\a\x15");
		sb.Append("\x366\n\x15\f\x15\xE\x15\x369\v\x15\x5\x15\x36B\n\x15\x3\x15");
		sb.Append("\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x372\n\x15\x3\x15\x5\x15");
		sb.Append("\x375\n\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17");
		sb.Append("\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x5\x17\x383\n\x17\x3\x17");
		sb.Append("\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x5\x17\x38B\n\x17\x5\x17");
		sb.Append("\x38D\n\x17\x3\x18\x3\x18\x3\x18\x3\x18\x5\x18\x393\n\x18\x3");
		sb.Append("\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x5\x18");
		sb.Append("\x39D\n\x18\x3\x18\x5\x18\x3A0\n\x18\x3\x19\x3\x19\x3\x19\x5");
		sb.Append("\x19\x3A5\n\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x3AB\n\x1A");
		sb.Append("\x3\x1A\x3\x1A\x5\x1A\x3AF\n\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B");
		sb.Append("\x5\x1B\x3B5\n\x1B\x3\x1B\x3\x1B\x5\x1B\x3B9\n\x1B\x3\x1C\x3");
		sb.Append("\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x3C0\n\x1C\x3\x1C\x3\x1C\x3");
		sb.Append("\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x3C9\n\x1D\x3\x1D\x3");
		sb.Append("\x1D\x5\x1D\x3CD\n\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x3D3");
		sb.Append("\n\x1E\x3\x1E\x3\x1E\x3\x1E\a\x1E\x3D8\n\x1E\f\x1E\xE\x1E\x3DB");
		sb.Append("\v\x1E\x3\x1E\x5\x1E\x3DE\n\x1E\x3\x1F\x3\x1F\x5\x1F\x3E2\n");
		sb.Append("\x1F\x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3!\x3!\x3!\x3!\x3!\x3!\x3");
		sb.Append("!\x3!\x5!\x3F3\n!\x3!\x3!\x5!\x3F7\n!\x3!\x3!\x3!\x3\"\x3\"");
		sb.Append("\x3\"\x3\"\a\"\x400\n\"\f\"\xE\"\x403\v\"\x3\"\x5\"\x406\n\"");
		sb.Append("\x3\"\x3\"\x3\"\x5\"\x40B\n\"\x3\"\x3\"\x5\"\x40F\n\"\x5\"\x411");
		sb.Append("\n\"\x3#\x3#\x5#\x415\n#\x3#\x3#\x5#\x419\n#\x3#\x3#\x5#\x41D");
		sb.Append("\n#\x3#\x3#\x5#\x421\n#\x3#\x3#\x3#\x3#\x5#\x427\n#\x3#\x3#");
		sb.Append("\x5#\x42B\n#\x5#\x42D\n#\x3$\x3$\x3$\x5$\x432\n$\x3$\x3$\x3");
		sb.Append("$\x3$\a$\x438\n$\f$\xE$\x43B\v$\x5$\x43D\n$\x3$\x5$\x440\n$");
		sb.Append("\x3$\x3$\x3$\x3$\x3$\a$\x447\n$\f$\xE$\x44A\v$\x3$\x3$\x5$\x44E");
		sb.Append("\n$\x3$\x3$\x3$\x5$\x453\n$\x3$\x5$\x456\n$\x5$\x458\n$\x3%");
		sb.Append("\x3%\x5%\x45C\n%\x3%\x3%\x3%\x5%\x461\n%\x3%\x3%\x5%\x465\n");
		sb.Append("%\x3&\x3&\x3\'\x3\'\x5\'\x46B\n\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3");
		sb.Append("\'\x3\'\x5\'\x474\n\'\x3\'\x5\'\x477\n\'\x5\'\x479\n\'\x3(\x3");
		sb.Append("(\x3(\x3(\x5(\x47F\n(\x3(\x3(\x3(\x5(\x484\n(\x3(\x3(\x3(\x3");
		sb.Append("(\x3(\x5(\x48B\n(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3");
		sb.Append("(\x5(\x498\n(\x5(\x49A\n(\x5(\x49C\n(\x3(\x5(\x49F\n(\x3(\x5");
		sb.Append("(\x4A2\n(\x3)\x3)\x3)\x3)\x3)\x5)\x4A9\n)\x3)\x5)\x4AC\n)\x3");
		sb.Append(")\x3)\x3)\x3)\x5)\x4B2\n)\x3)\x3)\x3)\x5)\x4B7\n)\x5)\x4B9\n");
		sb.Append(")\x3)\x5)\x4BC\n)\x3)\x3)\x3)\x3)\x5)\x4C2\n)\x3)\x3)\x3)\x3");
		sb.Append(")\x5)\x4C8\n)\x5)\x4CA\n)\x3)\x5)\x4CD\n)\x3)\x3)\x5)\x4D1\n");
		sb.Append(")\x3)\x5)\x4D4\n)\x3)\x3)\x3)\x3)\x5)\x4DA\n)\x3)\x5)\x4DD\n");
		sb.Append(")\x3)\x3)\x5)\x4E1\n)\x3)\x5)\x4E4\n)\x3)\x3)\x3)\x3)\x5)\x4EA");
		sb.Append("\n)\x3)\x5)\x4ED\n)\x5)\x4EF\n)\x3*\x3*\x5*\x4F3\n*\x3+\x3+");
		sb.Append("\x3+\x5+\x4F8\n+\x3,\x3,\x3,\x3,\x3-\x3-\x5-\x500\n-\x3-\x3");
		sb.Append("-\x3-\x5-\x505\n-\x3.\x3.\x3.\x3.\x5.\x50B\n.\x3.\a.\x50E\n");
		sb.Append(".\f.\xE.\x511\v.\x3.\x3.\x3/\x3/\x5/\x517\n/\x3\x30\x3\x30\x3");
		sb.Append("\x30\x3\x30\x5\x30\x51D\n\x30\x3\x30\x3\x30\x5\x30\x521\n\x30");
		sb.Append("\x3\x30\x5\x30\x524\n\x30\x3\x30\x3\x30\x5\x30\x528\n\x30\x3");
		sb.Append("\x30\x3\x30\x3\x30\x3\x30\x5\x30\x52E\n\x30\x3\x30\x3\x30\x3");
		sb.Append("\x30\x3\x30\x3\x30\x3\x30\x5\x30\x536\n\x30\x3\x30\x3\x30\x3");
		sb.Append("\x30\x5\x30\x53B\n\x30\x5\x30\x53D\n\x30\x3\x30\x5\x30\x540");
		sb.Append("\n\x30\x3\x30\a\x30\x543\n\x30\f\x30\xE\x30\x546\v\x30\x3\x31");
		sb.Append("\x3\x31\x5\x31\x54A\n\x31\x3\x31\x5\x31\x54D\n\x31\x3\x31\x3");
		sb.Append("\x31\x3\x31\x5\x31\x552\n\x31\x3\x31\x5\x31\x555\n\x31\x3\x31");
		sb.Append("\x5\x31\x558\n\x31\x3\x31\x3\x31\x3\x31\x3\x31\x5\x31\x55E\n");
		sb.Append("\x31\x3\x31\x3\x31\x3\x31\x3\x31\x5\x31\x564\n\x31\x3\x32\x3");
		sb.Append("\x32\x5\x32\x568\n\x32\x3\x32\x3\x32\x3\x32\x5\x32\x56D\n\x32");
		sb.Append("\x3\x32\x5\x32\x570\n\x32\x3\x32\x3\x32\x3\x32\x3\x32\x5\x32");
		sb.Append("\x576\n\x32\x3\x32\x3\x32\x5\x32\x57A\n\x32\x3\x32\x3\x32\x3");
		sb.Append("\x32\x3\x32\x5\x32\x580\n\x32\x3\x32\x3\x32\x3\x32\x3\x32\x5");
		sb.Append("\x32\x586\n\x32\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\a\x33\x58D");
		sb.Append("\n\x33\f\x33\xE\x33\x590\v\x33\x3\x33\x3\x33\x3\x34\x3\x34\x3");
		sb.Append("\x34\x3\x34\x3\x34\x5\x34\x599\n\x34\x3\x35\x3\x35\x3\x35\x3");
		sb.Append("\x35\x5\x35\x59F\n\x35\x3\x35\x3\x35\x3\x35\x5\x35\x5A4\n\x35");
		sb.Append("\x3\x35\x5\x35\x5A7\n\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35");
		sb.Append("\x3\x35\x3\x35\x3\x35\x3\x35\x5\x35\x5B2\n\x35\x5\x35\x5B4\n");
		sb.Append("\x35\x3\x35\x5\x35\x5B7\n\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3");
		sb.Append("\x35\x3\x35\x3\x35\x3\x35\x5\x35\x5C1\n\x35\x5\x35\x5C3\n\x35");
		sb.Append("\x3\x35\x5\x35\x5C6\n\x35\x5\x35\x5C8\n\x35\x3\x36\x5\x36\x5CB");
		sb.Append("\n\x36\x3\x36\x5\x36\x5CE\n\x36\x3\x36\x5\x36\x5D1\n\x36\x3");
		sb.Append("\x36\x5\x36\x5D4\n\x36\x3\x36\x5\x36\x5D7\n\x36\x3\x36\x3\x36");
		sb.Append("\x3\x36\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3");
		sb.Append("\x37\x3\x37\x5\x37\x5E5\n\x37\x3\x37\x5\x37\x5E8\n\x37\x3\x37");
		sb.Append("\x5\x37\x5EB\n\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\a\x37");
		sb.Append("\x5F2\n\x37\f\x37\xE\x37\x5F5\v\x37\x5\x37\x5F7\n\x37\x3\x37");
		sb.Append("\x5\x37\x5FA\n\x37\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38");
		sb.Append("\x5\x38\x602\n\x38\x3\x38\x5\x38\x605\n\x38\x3\x38\x3\x38\x3");
		sb.Append("\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38");
		sb.Append("\x3\x38\x5\x38\x613\n\x38\x3\x38\x5\x38\x616\n\x38\x3\x38\x3");
		sb.Append("\x38\x3\x38\x3\x38\x3\x38\x5\x38\x61D\n\x38\x5\x38\x61F\n\x38");
		sb.Append("\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3");
		sb.Append("\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39");
		sb.Append("\x3\x39\x3\x39\x3\x39\x5\x39\x635\n\x39\x3\x39\x3\x39\x3\x39");
		sb.Append("\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3");
		sb.Append("\x39\x3\x39\a\x39\x644\n\x39\f\x39\xE\x39\x647\v\x39\x3:\x3");
		sb.Append(":\x3:\x3:\x3:\x3:\x3:\x3:\x5:\x651\n:\x3;\x3;\x3<\x3<\x3<\x5");
		sb.Append("<\x658\n<\x3<\x3<\x3<\a<\x65D\n<\f<\xE<\x660\v<\x3=\x3=\x3=");
		sb.Append("\x3=\x3=\x5=\x667\n=\x3=\x3=\x3=\x3=\x3=\x3>\x3>\x5>\x670\n");
		sb.Append(">\x3>\x3>\x5>\x674\n>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x5>\x67E");
		sb.Append("\n>\x3?\x3?\x3?\a?\x683\n?\f?\xE?\x686\v?\x3@\x3@\x3@\a@\x68B");
		sb.Append("\n@\f@\xE@\x68E\v@\x3\x41\x3\x41\x3\x41\a\x41\x693\n\x41\f\x41");
		sb.Append("\xE\x41\x696\v\x41\x3\x42\x5\x42\x699\n\x42\x3\x42\x3\x42\x3");
		sb.Append("\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43");
		sb.Append("\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3");
		sb.Append("\x43\x5\x43\x6AF\n\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3");
		sb.Append("\x43\x3\x43\x5\x43\x6B8\n\x43\x3\x43\x3\x43\x3\x43\x3\x43\x5");
		sb.Append("\x43\x6BE\n\x43\x3\x43\x3\x43\x3\x43\x3\x43\x5\x43\x6C4\n\x43");
		sb.Append("\x3\x43\x3\x43\x3\x43\x3\x43\x5\x43\x6CA\n\x43\x3\x43\x3\x43");
		sb.Append("\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x5\x43\x6D4\n\x43");
		sb.Append("\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x5\x44\x6DB\n\x44\x3\x44");
		sb.Append("\a\x44\x6DE\n\x44\f\x44\xE\x44\x6E1\v\x44\x3\x45\x3\x45\x5\x45");
		sb.Append("\x6E5\n\x45\x3\x45\x3\x45\x5\x45\x6E9\n\x45\x3\x45\x3\x45\x3");
		sb.Append("\x45\x3\x45\x3\x45\x6\x45\x6F0\n\x45\r\x45\xE\x45\x6F1\x5\x45");
		sb.Append("\x6F4\n\x45\x3\x46\x3\x46\x5\x46\x6F8\n\x46\x3\x46\x3\x46\x3");
		sb.Append("\x46\x5\x46\x6FD\n\x46\x3\x46\x3\x46\x5\x46\x701\n\x46\x5\x46");
		sb.Append("\x703\n\x46\x3\x46\x3\x46\x3\x46\x5\x46\x708\n\x46\x3\x46\x3");
		sb.Append("\x46\x3\x46\x3\x46\a\x46\x70E\n\x46\f\x46\xE\x46\x711\v\x46");
		sb.Append("\x5\x46\x713\n\x46\x3\x46\x3\x46\x5\x46\x717\n\x46\x3\x46\x3");
		sb.Append("\x46\x3\x46\x3\x46\x3\x46\a\x46\x71E\n\x46\f\x46\xE\x46\x721");
		sb.Append("\v\x46\x5\x46\x723\n\x46\x3\x46\x3\x46\x5\x46\x727\n\x46\x3");
		sb.Append("G\x3G\x3G\x3G\x3G\aG\x72E\nG\fG\xEG\x731\vG\x3G\x3G\x3G\x3G");
		sb.Append("\x3G\x3G\x3G\x3G\x3G\x5G\x73C\nG\x5G\x73E\nG\x3H\x3H\x3H\x3");
		sb.Append("H\x3H\x3H\x5H\x746\nH\x3H\x3H\x3H\x3H\x3H\x3H\x5H\x74E\nH\x3");
		sb.Append("H\x5H\x751\nH\x5H\x753\nH\x3I\x3I\x3I\x3I\x3I\x5I\x75A\nI\x3");
		sb.Append("J\x3J\x5J\x75E\nJ\x3K\x3K\x3L\x3L\x3L\x3L\x3L\aL\x767\nL\fL");
		sb.Append("\xEL\x76A\vL\x3L\x3L\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3");
		sb.Append("M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3");
		sb.Append("M\x3M\x3M\aM\x789\nM\fM\xEM\x78C\vM\x3M\x3M\x3M\x3M\x3M\x3M");
		sb.Append("\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x5M\x79B\nM\x3N\x3N\x3N\x3N\x5");
		sb.Append("N\x7A1\nN\x3O\x3O\x3O\aO\x7A6\nO\fO\xEO\x7A9\vO\x3P\x3P\x3P");
		sb.Append("\x5P\x7AE\nP\x3P\x3P\x3P\x5P\x7B3\nP\x3P\x3P\x3P\x3P\x3P\x3");
		sb.Append("P\x5P\x7BB\nP\x3P\x5P\x7BE\nP\x5P\x7C0\nP\x3Q\x3Q\x3Q\x3Q\x3");
		sb.Append("R\x3R\x3R\x3R\x3R\x5R\x7CB\nR\x3S\x3S\aS\x7CF\nS\fS\xES\x7D2");
		sb.Append("\vS\x3T\x3T\x5T\x7D6\nT\x3T\x3T\x5T\x7DA\nT\x3T\x3T\x3T\x5T");
		sb.Append("\x7DF\nT\x5T\x7E1\nT\x3T\x3T\x3T\x3T\x3T\x5T\x7E8\nT\x3T\x3");
		sb.Append("T\x5T\x7EC\nT\x3T\x3T\x3T\x3T\x3T\x5T\x7F3\nT\x5T\x7F5\nT\x5");
		sb.Append("T\x7F7\nT\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x3U\x3V\x5V\x802\nV\x3");
		sb.Append("V\x3V\x5V\x806\nV\x5V\x808\nV\x3V\x5V\x80B\nV\x3V\x3V\x3V\x3");
		sb.Append("V\x3V\x3V\x3V\x3V\x3V\x3V\x3V\x3V\x3V\x3V\x5V\x81B\nV\x3W\x3");
		sb.Append("W\x5W\x81F\nW\x3X\x3X\x3X\x3X\x3X\x3X\x3X\x3X\aX\x829\nX\fX");
		sb.Append("\xEX\x82C\vX\x3X\x5X\x82F\nX\x3X\x3X\x3Y\x3Y\x3Y\x3Y\x3Z\x3");
		sb.Append("Z\x3Z\x3Z\x3Z\x5Z\x83C\nZ\x3[\x3[\x3[\x3[\x3[\x5[\x843\n[\x3");
		sb.Append("[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3");
		sb.Append("[\x3[\x3[\x3[\x3[\x5[\x859\n[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3");
		sb.Append("[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3");
		sb.Append("[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3");
		sb.Append("[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x5[\x88D\n");
		sb.Append("[\x3[\x3[\x5[\x891\n[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3");
		sb.Append("[\x3[\x3[\x5[\x89F\n[\x3\\\x3\\\x3]\x5]\x8A4\n]\x3]\x3]\x3^");
		sb.Append("\x3^\x5^\x8AA\n^\x3_\x5_\x8AD\n_\x3_\x3_\x3_\x3_\a_\x8B3\n_");
		sb.Append("\f_\xE_\x8B6\v_\x3_\x3_\x3`\x3`\x3`\x3`\x3`\a`\x8BF\n`\f`\xE");
		sb.Append("`\x8C2\v`\x3`\x3`\x3\x61\x5\x61\x8C7\n\x61\x3\x61\x3\x61\x3");
		sb.Append("\x61\x3\x61\x3\x61\a\x61\x8CE\n\x61\f\x61\xE\x61\x8D1\v\x61");
		sb.Append("\x3\x61\x3\x61\x3\x61\x3\x61\x3\x61\x3\x61\x3\x61\x3\x61\x3");
		sb.Append("\x61\x3\x61\x3\x61\x3\x61\a\x61\x8DF\n\x61\f\x61\xE\x61\x8E2");
		sb.Append("\v\x61\x3\x61\x3\x61\x3\x61\x5\x61\x8E7\n\x61\x3\x61\x3\x61");
		sb.Append("\x3\x61\x3\x61\x3\x61\x3\x61\x5\x61\x8EF\n\x61\x3\x62\x3\x62");
		sb.Append("\x3\x63\x3\x63\x3\x64\x3\x64\x3\x64\x3\x64\a\x64\x8F9\n\x64");
		sb.Append("\f\x64\xE\x64\x8FC\v\x64\x3\x64\x3\x64\x3\x65\x3\x65\x5\x65");
		sb.Append("\x902\n\x65\x3\x66\x3\x66\x3\x66\a\x66\x907\n\x66\f\x66\xE\x66");
		sb.Append("\x90A\v\x66\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x6g\x913\ng\rg\xEg\x914");
		sb.Append("\x3g\x3g\x5g\x919\ng\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x6g\x923");
		sb.Append("\ng\rg\xEg\x924\x3g\x3g\x5g\x929\ng\x3g\x3g\x5g\x92D\ng\x3h");
		sb.Append("\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3");
		sb.Append("h\x3h\x3h\x5h\x941\nh\x3i\x3i\x3i\x3i\x3i\x5i\x948\ni\x3i\x3");
		sb.Append("i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3");
		sb.Append("i\x3i\x3i\x3i\x5i\x95E\ni\x3i\x3i\x3i\x3i\x3i\x5i\x965\ni\x3");
		sb.Append("i\x3i\x3i\x3i\x3i\x5i\x96C\ni\x3i\x3i\x3i\x3i\x3i\x5i\x973\n");
		sb.Append("i\x3i\x3i\x3i\x3i\x3i\x5i\x97A\ni\x3i\x3i\x3i\x3i\x3i\x5i\x981");
		sb.Append("\ni\x3i\x3i\x3i\x3i\x3i\x5i\x988\ni\x3i\x3i\x3i\x3i\x5i\x98E");
		sb.Append("\ni\x3i\x3i\x5i\x992\ni\x3i\x3i\x3i\x3i\x5i\x998\ni\x3i\x3i");
		sb.Append("\x5i\x99C\ni\x5i\x99E\ni\x3j\x5j\x9A1\nj\x3j\x3j\x3k\x3k\x3");
		sb.Append("k\x5k\x9A8\nk\x3k\x5k\x9AB\nk\x3k\x5k\x9AE\nk\x3k\x3k\x3l\x3");
		sb.Append("l\x3l\x3m\x3m\x3m\x3m\x3m\x3m\x5m\x9BB\nm\x3n\x3n\x5n\x9BF\n");
		sb.Append("n\x3o\x3o\x3o\x3o\x3o\x3o\x5o\x9C7\no\x3p\x3p\x3p\x3p\x5p\x9CD");
		sb.Append("\np\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x3q\x5q\x9D9\nq\x3q");
		sb.Append("\x3q\x3q\x3q\x3q\x5q\x9E0\nq\x3q\x3q\x3r\x3r\x3r\x5r\x9E7\n");
		sb.Append("r\x3r\x3r\x3r\x3r\x3r\x5r\x9EE\nr\x3r\x3r\x3s\x3s\x3s\x5s\x9F5");
		sb.Append("\ns\x3s\x3s\x3t\x3t\x3t\x5t\x9FC\nt\x3t\x3t\x3t\x3t\x3t\x5t");
		sb.Append("\xA03\nt\x3t\x3t\x3u\x3u\x5u\xA09\nu\x3v\x3v\x3v\x5v\xA0E\n");
		sb.Append("v\x3v\x3v\x3w\x3w\x3w\aw\xA15\nw\fw\xEw\xA18\vw\x3x\x3x\x3y");
		sb.Append("\x3y\x5y\xA1E\ny\x3z\x3z\x3{\x3{\x3|\x5|\xA25\n|\x3|\x3|\x3");
		sb.Append("}\x3}\x3}\x3}\x3}\x5}\xA2E\n}\x3~\x3~\x5~\xA32\n~\x3~\x3~\x3");
		sb.Append("~\x3~\x5~\xA38\n~\x3~\x5~\xA3B\n~\x3\x7F\x3\x7F\x5\x7F\xA3F");
		sb.Append("\n\x7F\x3\x80\x3\x80\x3\x80\x3\x80\x5\x80\xA45\n\x80\x3\x80");
		sb.Append("\x3\x80\x5\x80\xA49\n\x80\x3\x80\x3\x80\x5\x80\xA4D\n\x80\x3");
		sb.Append("\x81\x5\x81\xA50\n\x81\x3\x81\x3\x81\x3\x82\x3\x82\x3\x83\x3");
		sb.Append("\x83\x3\x83\x5\x83\xA59\n\x83\x3\x84\x3\x84\x3\x85\x3\x85\x3");
		sb.Append("\x85\x3\x85\x3\x85\x3\x85\x3\x85\x3\x85\x3\x85\x3\x85\x3\x85");
		sb.Append("\x3\x85\x3\x85\x3\x85\x3\x85\x5\x85\xA6C\n\x85\x3\x86\x3\x86");
		sb.Append("\x3\x86\x2\x3p\x87\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A");
		sb.Append("\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42\x44\x46HJLNPR");
		sb.Append("TVXZ\\^`\x62\x64\x66hjlnprtvxz|~\x80\x82\x84\x86\x88\x8A\x8C");
		sb.Append("\x8E\x90\x92\x94\x96\x98\x9A\x9C\x9E\xA0\xA2\xA4\xA6\xA8\xAA");
		sb.Append("\xAC\xAE\xB0\xB2\xB4\xB6\xB8\xBA\xBC\xBE\xC0\xC2\xC4\xC6\xC8");
		sb.Append("\xCA\xCC\xCE\xD0\xD2\xD4\xD6\xD8\xDA\xDC\xDE\xE0\xE2\xE4\xE6");
		sb.Append("\xE8\xEA\xEC\xEE\xF0\xF2\xF4\xF6\xF8\xFA\xFC\xFE\x100\x102\x104");
		sb.Append("\x106\x108\x10A\x2.\x3\x2\x140\x141\x4\x2\x140\x140\x143\x143");
		sb.Append("\x4\x2\xD2\xD2\x12B\x12B\x4\x2\x140\x141\x143\x143\x3\x2\x80");
		sb.Append("\x81\x4\x2\x105\x106\x10F\x10F\x4\x2zz\x119\x119\x5\x2\xD7\xD7");
		sb.Append("\x11C\x11C\x135\x135\x5\x2\xA1\xA1\xC0\xC0\xD5\xD5\x3\x2?@\x4");
		sb.Append("\x2\xB3\xB3\xF1\xF1\x3\x2\x105\x106\x3\x2\xA7\xA8\x4\x2mmoo");
		sb.Append("\x6\x2\xC4\xC4\x107\x107\x11F\x11F\x143\x143\x4\x2\xE1\xE1\xEF");
		sb.Append("\xEF\x4\x2\xDF\xDF\x11D\x11D\x6\x2\xD6\xD6\xDA\xDA\xEC\xEC\x124");
		sb.Append("\x124\x5\x2\x103\x103\x110\x110\x11E\x11E\x3\x2\x160\x161\x3");
		sb.Append("\x2\x15D\x15F\x4\x2\x160\x161\x163\x165\x5\x2\x4\x4\a\a\x9E");
		sb.Append("\x9E\x4\x2\x4\x4\x35\x35\x4\x2\x117\x117\x119\x119\x4\x2\xDB");
		sb.Append("\xDB\xFA\xFA\x4\x2\t\t\x33\x33\x4\x2ww\xE5\xE5\x5\x2\x65\x65");
		sb.Append("\xCA\xCA\xE5\xE5\x5\x2\x65\x65\xE5\xE5\xF2\xF2\x4\x2\xDD\xDD");
		sb.Append("\x121\x121\x4\x2SS\x118\x118\x4\x2jj\x140\x141\x5\x2MM\x61\x61");
		sb.Append("\x8E\x8E\x6\x2\x65\x65\xE5\xE5\xF2\xF2\x113\x113\x4\x2\x141");
		sb.Append("\x141\x143\x143\x3\x2\x141\x142\x4\x2\x10D\x10D\x119\x119\x4");
		sb.Append("\x2\x19\x19hh\x4\x2\xF4\xF4\x141\x141\x3\x2\x145\x146\x4\x2");
		sb.Append("\x141\x141\x145\x145\t\x2HH\xBE\xC2\xC4\xC6\xC8\xCD\xD2\xF7");
		sb.Append("\xF9\x139\x142\x142\x3\x2\x14B\x152\xC2E\x2\x10F\x3\x2\x2\x2");
		sb.Append("\x4\x118\x3\x2\x2\x2\x6\x11E\x3\x2\x2\x2\b\x12C\x3\x2\x2\x2");
		sb.Append("\n\x1BD\x3\x2\x2\x2\f\x1C7\x3\x2\x2\x2\xE\x1CA\x3\x2\x2\x2\x10");
		sb.Append("\x208\x3\x2\x2\x2\x12\x245\x3\x2\x2\x2\x14\x255\x3\x2\x2\x2");
		sb.Append("\x16\x297\x3\x2\x2\x2\x18\x2AF\x3\x2\x2\x2\x1A\x2C2\x3\x2\x2");
		sb.Append("\x2\x1C\x2C4\x3\x2\x2\x2\x1E\x2D5\x3\x2\x2\x2 \x301\x3\x2\x2");
		sb.Append("\x2\"\x318\x3\x2\x2\x2$\x31A\x3\x2\x2\x2&\x337\x3\x2\x2\x2(");
		sb.Append("\x351\x3\x2\x2\x2*\x376\x3\x2\x2\x2,\x38C\x3\x2\x2\x2.\x38E");
		sb.Append("\x3\x2\x2\x2\x30\x3A1\x3\x2\x2\x2\x32\x3A6\x3\x2\x2\x2\x34\x3B0");
		sb.Append("\x3\x2\x2\x2\x36\x3BA\x3\x2\x2\x2\x38\x3C4\x3\x2\x2\x2:\x3CE");
		sb.Append("\x3\x2\x2\x2<\x3E1\x3\x2\x2\x2>\x3E3\x3\x2\x2\x2@\x3EA\x3\x2");
		sb.Append("\x2\x2\x42\x410\x3\x2\x2\x2\x44\x42C\x3\x2\x2\x2\x46\x457\x3");
		sb.Append("\x2\x2\x2H\x45B\x3\x2\x2\x2J\x466\x3\x2\x2\x2L\x478\x3\x2\x2");
		sb.Append("\x2N\x4A1\x3\x2\x2\x2P\x4EE\x3\x2\x2\x2R\x4F0\x3\x2\x2\x2T\x4F4");
		sb.Append("\x3\x2\x2\x2V\x4F9\x3\x2\x2\x2X\x4FD\x3\x2\x2\x2Z\x506\x3\x2");
		sb.Append("\x2\x2\\\x516\x3\x2\x2\x2^\x518\x3\x2\x2\x2`\x549\x3\x2\x2\x2");
		sb.Append("\x62\x567\x3\x2\x2\x2\x64\x587\x3\x2\x2\x2\x66\x593\x3\x2\x2");
		sb.Append("\x2h\x5C7\x3\x2\x2\x2j\x5CA\x3\x2\x2\x2l\x5DB\x3\x2\x2\x2n\x61E");
		sb.Append("\x3\x2\x2\x2p\x634\x3\x2\x2\x2r\x650\x3\x2\x2\x2t\x652\x3\x2");
		sb.Append("\x2\x2v\x654\x3\x2\x2\x2x\x661\x3\x2\x2\x2z\x67D\x3\x2\x2\x2");
		sb.Append("|\x67F\x3\x2\x2\x2~\x687\x3\x2\x2\x2\x80\x68F\x3\x2\x2\x2\x82");
		sb.Append("\x698\x3\x2\x2\x2\x84\x6D3\x3\x2\x2\x2\x86\x6DA\x3\x2\x2\x2");
		sb.Append("\x88\x6E8\x3\x2\x2\x2\x8A\x6F5\x3\x2\x2\x2\x8C\x728\x3\x2\x2");
		sb.Append("\x2\x8E\x752\x3\x2\x2\x2\x90\x754\x3\x2\x2\x2\x92\x75B\x3\x2");
		sb.Append("\x2\x2\x94\x75F\x3\x2\x2\x2\x96\x761\x3\x2\x2\x2\x98\x79A\x3");
		sb.Append("\x2\x2\x2\x9A\x79C\x3\x2\x2\x2\x9C\x7A2\x3\x2\x2\x2\x9E\x7BF");
		sb.Append("\x3\x2\x2\x2\xA0\x7C1\x3\x2\x2\x2\xA2\x7CA\x3\x2\x2\x2\xA4\x7CC");
		sb.Append("\x3\x2\x2\x2\xA6\x7F6\x3\x2\x2\x2\xA8\x7F8\x3\x2\x2\x2\xAA\x81A");
		sb.Append("\x3\x2\x2\x2\xAC\x81C\x3\x2\x2\x2\xAE\x820\x3\x2\x2\x2\xB0\x832");
		sb.Append("\x3\x2\x2\x2\xB2\x83B\x3\x2\x2\x2\xB4\x89E\x3\x2\x2\x2\xB6\x8A0");
		sb.Append("\x3\x2\x2\x2\xB8\x8A3\x3\x2\x2\x2\xBA\x8A7\x3\x2\x2\x2\xBC\x8AC");
		sb.Append("\x3\x2\x2\x2\xBE\x8B9\x3\x2\x2\x2\xC0\x8C6\x3\x2\x2\x2\xC2\x8F0");
		sb.Append("\x3\x2\x2\x2\xC4\x8F2\x3\x2\x2\x2\xC6\x8F4\x3\x2\x2\x2\xC8\x901");
		sb.Append("\x3\x2\x2\x2\xCA\x903\x3\x2\x2\x2\xCC\x92C\x3\x2\x2\x2\xCE\x940");
		sb.Append("\x3\x2\x2\x2\xD0\x99D\x3\x2\x2\x2\xD2\x9A0\x3\x2\x2\x2\xD4\x9A4");
		sb.Append("\x3\x2\x2\x2\xD6\x9B1\x3\x2\x2\x2\xD8\x9BA\x3\x2\x2\x2\xDA\x9BE");
		sb.Append("\x3\x2\x2\x2\xDC\x9C6\x3\x2\x2\x2\xDE\x9CC\x3\x2\x2\x2\xE0\x9DF");
		sb.Append("\x3\x2\x2\x2\xE2\x9ED\x3\x2\x2\x2\xE4\x9F4\x3\x2\x2\x2\xE6\xA02");
		sb.Append("\x3\x2\x2\x2\xE8\xA08\x3\x2\x2\x2\xEA\xA0D\x3\x2\x2\x2\xEC\xA11");
		sb.Append("\x3\x2\x2\x2\xEE\xA19\x3\x2\x2\x2\xF0\xA1D\x3\x2\x2\x2\xF2\xA1F");
		sb.Append("\x3\x2\x2\x2\xF4\xA21\x3\x2\x2\x2\xF6\xA24\x3\x2\x2\x2\xF8\xA2D");
		sb.Append("\x3\x2\x2\x2\xFA\xA2F\x3\x2\x2\x2\xFC\xA3E\x3\x2\x2\x2\xFE\xA4C");
		sb.Append("\x3\x2\x2\x2\x100\xA4F\x3\x2\x2\x2\x102\xA53\x3\x2\x2\x2\x104");
		sb.Append("\xA58\x3\x2\x2\x2\x106\xA5A\x3\x2\x2\x2\x108\xA6B\x3\x2\x2\x2");
		sb.Append("\x10A\xA6D\x3\x2\x2\x2\x10C\x10E\x5\x4\x3\x2\x10D\x10C\x3\x2");
		sb.Append("\x2\x2\x10E\x111\x3\x2\x2\x2\x10F\x10D\x3\x2\x2\x2\x10F\x110");
		sb.Append("\x3\x2\x2\x2\x110\x112\x3\x2\x2\x2\x111\x10F\x3\x2\x2\x2\x112");
		sb.Append("\x113\a\x2\x2\x3\x113\x3\x3\x2\x2\x2\x114\x119\x5\x6\x4\x2\x115");
		sb.Append("\x119\x5\b\x5\x2\x116\x119\x5\n\x6\x2\x117\x119\x5\f\a\x2\x118");
		sb.Append("\x114\x3\x2\x2\x2\x118\x115\x3\x2\x2\x2\x118\x116\x3\x2\x2\x2");
		sb.Append("\x118\x117\x3\x2\x2\x2\x119\x5\x3\x2\x2\x2\x11A\x11F\x5\xE\b");
		sb.Append("\x2\x11B\x11F\x5\x10\t\x2\x11C\x11F\x5\x12\n\x2\x11D\x11F\x5");
		sb.Append("\x14\v\x2\x11E\x11A\x3\x2\x2\x2\x11E\x11B\x3\x2\x2\x2\x11E\x11C");
		sb.Append("\x3\x2\x2\x2\x11E\x11D\x3\x2\x2\x2\x11F\a\x3\x2\x2\x2\x120\x12D");
		sb.Append("\x5\x1C\xF\x2\x121\x12D\x5\x1E\x10\x2\x122\x12D\x5$\x13\x2\x123");
		sb.Append("\x12D\x5&\x14\x2\x124\x12D\x5(\x15\x2\x125\x12D\x5,\x17\x2\x126");
		sb.Append("\x12D\x5.\x18\x2\x127\x12D\x5\x32\x1A\x2\x128\x12D\x5\x34\x1B");
		sb.Append("\x2\x129\x12D\x5\x36\x1C\x2\x12A\x12D\x5\x38\x1D\x2\x12B\x12D");
		sb.Append("\x5:\x1E\x2\x12C\x120\x3\x2\x2\x2\x12C\x121\x3\x2\x2\x2\x12C");
		sb.Append("\x122\x3\x2\x2\x2\x12C\x123\x3\x2\x2\x2\x12C\x124\x3\x2\x2\x2");
		sb.Append("\x12C\x125\x3\x2\x2\x2\x12C\x126\x3\x2\x2\x2\x12C\x127\x3\x2");
		sb.Append("\x2\x2\x12C\x128\x3\x2\x2\x2\x12C\x129\x3\x2\x2\x2\x12C\x12A");
		sb.Append("\x3\x2\x2\x2\x12C\x12B\x3\x2\x2\x2\x12D\t\x3\x2\x2\x2\x12E\x130");
		sb.Append("\a\f\x2\x2\x12F\x131\a\x15B\x2\x2\x130\x12F\x3\x2\x2\x2\x130");
		sb.Append("\x131\x3\x2\x2\x2\x131\x135\x3\x2\x2\x2\x132\x134\x5\x4\x3\x2");
		sb.Append("\x133\x132\x3\x2\x2\x2\x134\x137\x3\x2\x2\x2\x135\x133\x3\x2");
		sb.Append("\x2\x2\x135\x136\x3\x2\x2\x2\x136\x138\x3\x2\x2\x2\x137\x135");
		sb.Append("\x3\x2\x2\x2\x138\x13A\a;\x2\x2\x139\x13B\a\x15B\x2\x2\x13A");
		sb.Append("\x139\x3\x2\x2\x2\x13A\x13B\x3\x2\x2\x2\x13B\x1BE\x3\x2\x2\x2");
		sb.Append("\x13C\x13E\a\xE\x2\x2\x13D\x13F\a\x15B\x2\x2\x13E\x13D\x3\x2");
		sb.Append("\x2\x2\x13E\x13F\x3\x2\x2\x2\x13F\x1BE\x3\x2\x2\x2\x140\x142");
		sb.Append("\a\"\x2\x2\x141\x143\a\x15B\x2\x2\x142\x141\x3\x2\x2\x2\x142");
		sb.Append("\x143\x3\x2\x2\x2\x143\x1BE\x3\x2\x2\x2\x144\x145\aO\x2\x2\x145");
		sb.Append("\x147\x5\x104\x83\x2\x146\x148\a\x15B\x2\x2\x147\x146\x3\x2");
		sb.Append("\x2\x2\x147\x148\x3\x2\x2\x2\x148\x1BE\x3\x2\x2\x2\x149\x14A");
		sb.Append("\x5\x104\x83\x2\x14A\x14C\a\x15C\x2\x2\x14B\x14D\a\x15B\x2\x2");
		sb.Append("\x14C\x14B\x3\x2\x2\x2\x14C\x14D\x3\x2\x2\x2\x14D\x1BE\x3\x2");
		sb.Append("\x2\x2\x14E\x14F\aV\x2\x2\x14F\x150\x5~@\x2\x150\x153\x5\x4");
		sb.Append("\x3\x2\x151\x152\a:\x2\x2\x152\x154\x5\x4\x3\x2\x153\x151\x3");
		sb.Append("\x2\x2\x2\x153\x154\x3\x2\x2\x2\x154\x156\x3\x2\x2\x2\x155\x157");
		sb.Append("\a\x15B\x2\x2\x156\x155\x3\x2\x2\x2\x156\x157\x3\x2\x2\x2\x157");
		sb.Append("\x1BE\x3\x2\x2\x2\x158\x15A\a\x8B\x2\x2\x159\x15B\x5p\x39\x2");
		sb.Append("\x15A\x159\x3\x2\x2\x2\x15A\x15B\x3\x2\x2\x2\x15B\x15D\x3\x2");
		sb.Append("\x2\x2\x15C\x15E\a\x15B\x2\x2\x15D\x15C\x3\x2\x2\x2\x15D\x15E");
		sb.Append("\x3\x2\x2\x2\x15E\x1BE\x3\x2\x2\x2\x15F\x165\a\x129\x2\x2\x160");
		sb.Append("\x161\t\x2\x2\x2\x161\x162\a\x15A\x2\x2\x162\x163\t\x3\x2\x2");
		sb.Append("\x163\x164\a\x15A\x2\x2\x164\x166\t\x2\x2\x2\x165\x160\x3\x2");
		sb.Append("\x2\x2\x165\x166\x3\x2\x2\x2\x166\x168\x3\x2\x2\x2\x167\x169");
		sb.Append("\a\x15B\x2\x2\x168\x167\x3\x2\x2\x2\x168\x169\x3\x2\x2\x2\x169");
		sb.Append("\x1BE\x3\x2\x2\x2\x16A\x16B\a\f\x2\x2\x16B\x16D\a\x12C\x2\x2");
		sb.Append("\x16C\x16E\a\x15B\x2\x2\x16D\x16C\x3\x2\x2\x2\x16D\x16E\x3\x2");
		sb.Append("\x2\x2\x16E\x172\x3\x2\x2\x2\x16F\x171\x5\x4\x3\x2\x170\x16F");
		sb.Append("\x3\x2\x2\x2\x171\x174\x3\x2\x2\x2\x172\x170\x3\x2\x2\x2\x172");
		sb.Append("\x173\x3\x2\x2\x2\x173\x175\x3\x2\x2\x2\x174\x172\x3\x2\x2\x2");
		sb.Append("\x175\x176\a;\x2\x2\x176\x178\a\x12C\x2\x2\x177\x179\a\x15B");
		sb.Append("\x2\x2\x178\x177\x3\x2\x2\x2\x178\x179\x3\x2\x2\x2\x179\x17A");
		sb.Append("\x3\x2\x2\x2\x17A\x17B\a\f\x2\x2\x17B\x17D\a\xC6\x2\x2\x17C");
		sb.Append("\x17E\a\x15B\x2\x2\x17D\x17C\x3\x2\x2\x2\x17D\x17E\x3\x2\x2");
		sb.Append("\x2\x17E\x182\x3\x2\x2\x2\x17F\x181\x5\x4\x3\x2\x180\x17F\x3");
		sb.Append("\x2\x2\x2\x181\x184\x3\x2\x2\x2\x182\x180\x3\x2\x2\x2\x182\x183");
		sb.Append("\x3\x2\x2\x2\x183\x185\x3\x2\x2\x2\x184\x182\x3\x2\x2\x2\x185");
		sb.Append("\x186\a;\x2\x2\x186\x188\a\xC6\x2\x2\x187\x189\a\x15B\x2\x2");
		sb.Append("\x188\x187\x3\x2\x2\x2\x188\x189\x3\x2\x2\x2\x189\x1BE\x3\x2");
		sb.Append("\x2\x2\x18A\x18B\a\xB7\x2\x2\x18B\x18C\t\x4\x2\x2\x18C\x18E");
		sb.Append("\x5p\x39\x2\x18D\x18F\a\x15B\x2\x2\x18E\x18D\x3\x2\x2\x2\x18E");
		sb.Append("\x18F\x3\x2\x2\x2\x18F\x1BE\x3\x2\x2\x2\x190\x191\a\xBA\x2\x2");
		sb.Append("\x191\x19B\x5~@\x2\x192\x19C\x5\x4\x3\x2\x193\x195\a\xE\x2\x2");
		sb.Append("\x194\x196\a\x15B\x2\x2\x195\x194\x3\x2\x2\x2\x195\x196\x3\x2");
		sb.Append("\x2\x2\x196\x19C\x3\x2\x2\x2\x197\x199\a\"\x2\x2\x198\x19A\a");
		sb.Append("\x15B\x2\x2\x199\x198\x3\x2\x2\x2\x199\x19A\x3\x2\x2\x2\x19A");
		sb.Append("\x19C\x3\x2\x2\x2\x19B\x192\x3\x2\x2\x2\x19B\x193\x3\x2\x2\x2");
		sb.Append("\x19B\x197\x3\x2\x2\x2\x19C\x1BE\x3\x2\x2\x2\x19D\x19E\a\x7F");
		sb.Append("\x2\x2\x19E\x1A0\x5p\x39\x2\x19F\x1A1\a\x15B\x2\x2\x1A0\x19F");
		sb.Append("\x3\x2\x2\x2\x1A0\x1A1\x3\x2\x2\x2\x1A1\x1BE\x3\x2\x2\x2\x1A2");
		sb.Append("\x1A3\a\x83\x2\x2\x1A3\x1A4\a\x158\x2\x2\x1A4\x1A5\t\x5\x2\x2");
		sb.Append("\x1A5\x1A8\a\x15A\x2\x2\x1A6\x1A9\x5\x100\x81\x2\x1A7\x1A9\a");
		sb.Append("\x140\x2\x2\x1A8\x1A6\x3\x2\x2\x2\x1A8\x1A7\x3\x2\x2\x2\x1A9");
		sb.Append("\x1AA\x3\x2\x2\x2\x1AA\x1AD\a\x15A\x2\x2\x1AB\x1AE\x5\x100\x81");
		sb.Append("\x2\x1AC\x1AE\a\x140\x2\x2\x1AD\x1AB\x3\x2\x2\x2\x1AD\x1AC\x3");
		sb.Append("\x2\x2\x2\x1AE\x1B6\x3\x2\x2\x2\x1AF\x1B2\a\x15A\x2\x2\x1B0");
		sb.Append("\x1B3\x5\xFE\x80\x2\x1B1\x1B3\a\x140\x2\x2\x1B2\x1B0\x3\x2\x2");
		sb.Append("\x2\x1B2\x1B1\x3\x2\x2\x2\x1B3\x1B5\x3\x2\x2\x2\x1B4\x1AF\x3");
		sb.Append("\x2\x2\x2\x1B5\x1B8\x3\x2\x2\x2\x1B6\x1B4\x3\x2\x2\x2\x1B6\x1B7");
		sb.Append("\x3\x2\x2\x2\x1B7\x1B9\x3\x2\x2\x2\x1B8\x1B6\x3\x2\x2\x2\x1B9");
		sb.Append("\x1BB\a\x159\x2\x2\x1BA\x1BC\a\x15B\x2\x2\x1BB\x1BA\x3\x2\x2");
		sb.Append("\x2\x1BB\x1BC\x3\x2\x2\x2\x1BC\x1BE\x3\x2\x2\x2\x1BD\x12E\x3");
		sb.Append("\x2\x2\x2\x1BD\x13C\x3\x2\x2\x2\x1BD\x140\x3\x2\x2\x2\x1BD\x144");
		sb.Append("\x3\x2\x2\x2\x1BD\x149\x3\x2\x2\x2\x1BD\x14E\x3\x2\x2\x2\x1BD");
		sb.Append("\x158\x3\x2\x2\x2\x1BD\x15F\x3\x2\x2\x2\x1BD\x16A\x3\x2\x2\x2");
		sb.Append("\x1BD\x18A\x3\x2\x2\x2\x1BD\x190\x3\x2\x2\x2\x1BD\x19D\x3\x2");
		sb.Append("\x2\x2\x1BD\x1A2\x3\x2\x2\x2\x1BE\v\x3\x2\x2\x2\x1BF\x1C8\x5");
		sb.Append("\x42\"\x2\x1C0\x1C8\x5\x44#\x2\x1C1\x1C8\x5\x46$\x2\x1C2\x1C8");
		sb.Append("\x5L\'\x2\x1C3\x1C8\x5N(\x2\x1C4\x1C8\x5P)\x2\x1C5\x1C8\x5R");
		sb.Append("*\x2\x1C6\x1C8\x5T+\x2\x1C7\x1BF\x3\x2\x2\x2\x1C7\x1C0\x3\x2");
		sb.Append("\x2\x2\x1C7\x1C1\x3\x2\x2\x2\x1C7\x1C2\x3\x2\x2\x2\x1C7\x1C3");
		sb.Append("\x3\x2\x2\x2\x1C7\x1C4\x3\x2\x2\x2\x1C7\x1C5\x3\x2\x2\x2\x1C7");
		sb.Append("\x1C6\x3\x2\x2\x2\x1C8\r\x3\x2\x2\x2\x1C9\x1CB\x5v<\x2\x1CA");
		sb.Append("\x1C9\x3\x2\x2\x2\x1CA\x1CB\x3\x2\x2\x2\x1CB\x1CC\x3\x2\x2\x2");
		sb.Append("\x1CC\x1D4\a\x31\x2\x2\x1CD\x1CE\a\xA6\x2\x2\x1CE\x1CF\a\x158");
		sb.Append("\x2\x2\x1CF\x1D0\x5p\x39\x2\x1D0\x1D2\a\x159\x2\x2\x1D1\x1D3");
		sb.Append("\az\x2\x2\x1D2\x1D1\x3\x2\x2\x2\x1D2\x1D3\x3\x2\x2\x2\x1D3\x1D5");
		sb.Append("\x3\x2\x2\x2\x1D4\x1CD\x3\x2\x2\x2\x1D4\x1D5\x3\x2\x2\x2\x1D5");
		sb.Append("\x1D7\x3\x2\x2\x2\x1D6\x1D8\aL\x2\x2\x1D7\x1D6\x3\x2\x2\x2\x1D7");
		sb.Append("\x1D8\x3\x2\x2\x2\x1D8\x1DC\x3\x2\x2\x2\x1D9\x1DD\x5\xBA^\x2");
		sb.Append("\x1DA\x1DD\x5\xE8u\x2\x1DB\x1DD\x5<\x1F\x2\x1DC\x1D9\x3\x2\x2");
		sb.Append("\x2\x1DC\x1DA\x3\x2\x2\x2\x1DC\x1DB\x3\x2\x2\x2\x1DD\x1DF\x3");
		sb.Append("\x2\x2\x2\x1DE\x1E0\x5\xBC_\x2\x1DF\x1DE\x3\x2\x2\x2\x1DF\x1E0");
		sb.Append("\x3\x2\x2\x2\x1E0\x1E2\x3\x2\x2\x2\x1E1\x1E3\x5\x16\f\x2\x1E2");
		sb.Append("\x1E1\x3\x2\x2\x2\x1E2\x1E3\x3\x2\x2\x2\x1E3\x1ED\x3\x2\x2\x2");
		sb.Append("\x1E4\x1E5\aL\x2\x2\x1E5\x1EA\x5\xA2R\x2\x1E6\x1E7\a\x15A\x2");
		sb.Append("\x2\x1E7\x1E9\x5\xA2R\x2\x1E8\x1E6\x3\x2\x2\x2\x1E9\x1EC\x3");
		sb.Append("\x2\x2\x2\x1EA\x1E8\x3\x2\x2\x2\x1EA\x1EB\x3\x2\x2\x2\x1EB\x1EE");
		sb.Append("\x3\x2\x2\x2\x1EC\x1EA\x3\x2\x2\x2\x1ED\x1E4\x3\x2\x2\x2\x1ED");
		sb.Append("\x1EE\x3\x2\x2\x2\x1EE\x1FC\x3\x2\x2\x2\x1EF\x1FA\a\xB9\x2\x2");
		sb.Append("\x1F0\x1FB\x5~@\x2\x1F1\x1F2\a&\x2\x2\x1F2\x1F8\al\x2\x2\x1F3");
		sb.Append("\x1F5\a\xE1\x2\x2\x1F4\x1F3\x3\x2\x2\x2\x1F4\x1F5\x3\x2\x2\x2");
		sb.Append("\x1F5\x1F6\x3\x2\x2\x2\x1F6\x1F9\x5\xF0y\x2\x1F7\x1F9\a\x140");
		sb.Append("\x2\x2\x1F8\x1F4\x3\x2\x2\x2\x1F8\x1F7\x3\x2\x2\x2\x1F9\x1FB");
		sb.Append("\x3\x2\x2\x2\x1FA\x1F0\x3\x2\x2\x2\x1FA\x1F1\x3\x2\x2\x2\x1FB");
		sb.Append("\x1FD\x3\x2\x2\x2\x1FC\x1EF\x3\x2\x2\x2\x1FC\x1FD\x3\x2\x2\x2");
		sb.Append("\x1FD\x1FF\x3\x2\x2\x2\x1FE\x200\x5\x8EH\x2\x1FF\x1FE\x3\x2");
		sb.Append("\x2\x2\x1FF\x200\x3\x2\x2\x2\x200\x202\x3\x2\x2\x2\x201\x203");
		sb.Append("\x5\x96L\x2\x202\x201\x3\x2\x2\x2\x202\x203\x3\x2\x2\x2\x203");
		sb.Append("\x205\x3\x2\x2\x2\x204\x206\a\x15B\x2\x2\x205\x204\x3\x2\x2");
		sb.Append("\x2\x205\x206\x3\x2\x2\x2\x206\xF\x3\x2\x2\x2\x207\x209\x5v");
		sb.Append("<\x2\x208\x207\x3\x2\x2\x2\x208\x209\x3\x2\x2\x2\x209\x20A\x3");
		sb.Append("\x2\x2\x2\x20A\x212\aZ\x2\x2\x20B\x20C\a\xA6\x2\x2\x20C\x20D");
		sb.Append("\a\x158\x2\x2\x20D\x20E\x5p\x39\x2\x20E\x210\a\x159\x2\x2\x20F");
		sb.Append("\x211\az\x2\x2\x210\x20F\x3\x2\x2\x2\x210\x211\x3\x2\x2\x2\x211");
		sb.Append("\x213\x3\x2\x2\x2\x212\x20B\x3\x2\x2\x2\x212\x213\x3\x2\x2\x2");
		sb.Append("\x213\x215\x3\x2\x2\x2\x214\x216\a\\\x2\x2\x215\x214\x3\x2\x2");
		sb.Append("\x2\x215\x216\x3\x2\x2\x2\x216\x219\x3\x2\x2\x2\x217\x21A\x5");
		sb.Append("\xE8u\x2\x218\x21A\x5<\x1F\x2\x219\x217\x3\x2\x2\x2\x219\x218");
		sb.Append("\x3\x2\x2\x2\x21A\x21C\x3\x2\x2\x2\x21B\x21D\x5\xBE`\x2\x21C");
		sb.Append("\x21B\x3\x2\x2\x2\x21C\x21D\x3\x2\x2\x2\x21D\x222\x3\x2\x2\x2");
		sb.Append("\x21E\x21F\a\x158\x2\x2\x21F\x220\x5\xECw\x2\x220\x221\a\x159");
		sb.Append("\x2\x2\x221\x223\x3\x2\x2\x2\x222\x21E\x3\x2\x2\x2\x222\x223");
		sb.Append("\x3\x2\x2\x2\x223\x225\x3\x2\x2\x2\x224\x226\x5\x16\f\x2\x225");
		sb.Append("\x224\x3\x2\x2\x2\x225\x226\x3\x2\x2\x2\x226\x239\x3\x2\x2\x2");
		sb.Append("\x227\x228\a\xB4\x2\x2\x228\x229\a\x158\x2\x2\x229\x22A\x5\xCA");
		sb.Append("\x66\x2\x22A\x232\a\x159\x2\x2\x22B\x22C\a\x15A\x2\x2\x22C\x22D");
		sb.Append("\a\x158\x2\x2\x22D\x22E\x5\xCA\x66\x2\x22E\x22F\a\x159\x2\x2");
		sb.Append("\x22F\x231\x3\x2\x2\x2\x230\x22B\x3\x2\x2\x2\x231\x234\x3\x2");
		sb.Append("\x2\x2\x232\x230\x3\x2\x2\x2\x232\x233\x3\x2\x2\x2\x233\x23A");
		sb.Append("\x3\x2\x2\x2\x234\x232\x3\x2\x2\x2\x235\x23A\x5\xB2Z\x2\x236");
		sb.Append("\x23A\x5\x46$\x2\x237\x238\a\x30\x2\x2\x238\x23A\a\xB4\x2\x2");
		sb.Append("\x239\x227\x3\x2\x2\x2\x239\x235\x3\x2\x2\x2\x239\x236\x3\x2");
		sb.Append("\x2\x2\x239\x237\x3\x2\x2\x2\x23A\x23C\x3\x2\x2\x2\x23B\x23D");
		sb.Append("\x5\x8EH\x2\x23C\x23B\x3\x2\x2\x2\x23C\x23D\x3\x2\x2\x2\x23D");
		sb.Append("\x23F\x3\x2\x2\x2\x23E\x240\x5\x96L\x2\x23F\x23E\x3\x2\x2\x2");
		sb.Append("\x23F\x240\x3\x2\x2\x2\x240\x242\x3\x2\x2\x2\x241\x243\a\x15B");
		sb.Append("\x2\x2\x242\x241\x3\x2\x2\x2\x242\x243\x3\x2\x2\x2\x243\x11");
		sb.Append("\x3\x2\x2\x2\x244\x246\x5v<\x2\x245\x244\x3\x2\x2\x2\x245\x246");
		sb.Append("\x3\x2\x2\x2\x246\x247\x3\x2\x2\x2\x247\x249\x5\x86\x44\x2\x248");
		sb.Append("\x24A\x5\x8CG\x2\x249\x248\x3\x2\x2\x2\x249\x24A\x3\x2\x2\x2");
		sb.Append("\x24A\x24C\x3\x2\x2\x2\x24B\x24D\x5\x8EH\x2\x24C\x24B\x3\x2");
		sb.Append("\x2\x2\x24C\x24D\x3\x2\x2\x2\x24D\x24F\x3\x2\x2\x2\x24E\x250");
		sb.Append("\x5\x96L\x2\x24F\x24E\x3\x2\x2\x2\x24F\x250\x3\x2\x2\x2\x250");
		sb.Append("\x252\x3\x2\x2\x2\x251\x253\a\x15B\x2\x2\x252\x251\x3\x2\x2");
		sb.Append("\x2\x252\x253\x3\x2\x2\x2\x253\x13\x3\x2\x2\x2\x254\x256\x5");
		sb.Append("v<\x2\x255\x254\x3\x2\x2\x2\x255\x256\x3\x2\x2\x2\x256\x257");
		sb.Append("\x3\x2\x2\x2\x257\x25F\a\xB0\x2\x2\x258\x259\a\xA6\x2\x2\x259");
		sb.Append("\x25A\a\x158\x2\x2\x25A\x25B\x5p\x39\x2\x25B\x25D\a\x159\x2");
		sb.Append("\x2\x25C\x25E\az\x2\x2\x25D\x25C\x3\x2\x2\x2\x25D\x25E\x3\x2");
		sb.Append("\x2\x2\x25E\x260\x3\x2\x2\x2\x25F\x258\x3\x2\x2\x2\x25F\x260");
		sb.Append("\x3\x2\x2\x2\x260\x263\x3\x2\x2\x2\x261\x264\x5\xE8u\x2\x262");
		sb.Append("\x264\x5<\x1F\x2\x263\x261\x3\x2\x2\x2\x263\x262\x3\x2\x2\x2");
		sb.Append("\x264\x266\x3\x2\x2\x2\x265\x267\x5\xBC_\x2\x266\x265\x3\x2");
		sb.Append("\x2\x2\x266\x267\x3\x2\x2\x2\x267\x268\x3\x2\x2\x2\x268\x269");
		sb.Append("\a\x9B\x2\x2\x269\x26E\x5z>\x2\x26A\x26B\a\x15A\x2\x2\x26B\x26D");
		sb.Append("\x5z>\x2\x26C\x26A\x3\x2\x2\x2\x26D\x270\x3\x2\x2\x2\x26E\x26C");
		sb.Append("\x3\x2\x2\x2\x26E\x26F\x3\x2\x2\x2\x26F\x272\x3\x2\x2\x2\x270");
		sb.Append("\x26E\x3\x2\x2\x2\x271\x273\x5\x16\f\x2\x272\x271\x3\x2\x2\x2");
		sb.Append("\x272\x273\x3\x2\x2\x2\x273\x27D\x3\x2\x2\x2\x274\x275\aL\x2");
		sb.Append("\x2\x275\x27A\x5\xA2R\x2\x276\x277\a\x15A\x2\x2\x277\x279\x5");
		sb.Append("\xA2R\x2\x278\x276\x3\x2\x2\x2\x279\x27C\x3\x2\x2\x2\x27A\x278");
		sb.Append("\x3\x2\x2\x2\x27A\x27B\x3\x2\x2\x2\x27B\x27E\x3\x2\x2\x2\x27C");
		sb.Append("\x27A\x3\x2\x2\x2\x27D\x274\x3\x2\x2\x2\x27D\x27E\x3\x2\x2\x2");
		sb.Append("\x27E\x28C\x3\x2\x2\x2\x27F\x28A\a\xB9\x2\x2\x280\x28B\x5|?");
		sb.Append("\x2\x281\x282\a&\x2\x2\x282\x288\al\x2\x2\x283\x285\a\xE1\x2");
		sb.Append("\x2\x284\x283\x3\x2\x2\x2\x284\x285\x3\x2\x2\x2\x285\x286\x3");
		sb.Append("\x2\x2\x2\x286\x289\x5\xF0y\x2\x287\x289\a\x140\x2\x2\x288\x284");
		sb.Append("\x3\x2\x2\x2\x288\x287\x3\x2\x2\x2\x289\x28B\x3\x2\x2\x2\x28A");
		sb.Append("\x280\x3\x2\x2\x2\x28A\x281\x3\x2\x2\x2\x28B\x28D\x3\x2\x2\x2");
		sb.Append("\x28C\x27F\x3\x2\x2\x2\x28C\x28D\x3\x2\x2\x2\x28D\x28F\x3\x2");
		sb.Append("\x2\x2\x28E\x290\x5\x8EH\x2\x28F\x28E\x3\x2\x2\x2\x28F\x290");
		sb.Append("\x3\x2\x2\x2\x290\x292\x3\x2\x2\x2\x291\x293\x5\x96L\x2\x292");
		sb.Append("\x291\x3\x2\x2\x2\x292\x293\x3\x2\x2\x2\x293\x295\x3\x2\x2\x2");
		sb.Append("\x294\x296\a\x15B\x2\x2\x295\x294\x3\x2\x2\x2\x295\x296\x3\x2");
		sb.Append("\x2\x2\x296\x15\x3\x2\x2\x2\x297\x298\a\x106\x2\x2\x298\x29D");
		sb.Append("\x5\x18\r\x2\x299\x29A\a\x15A\x2\x2\x29A\x29C\x5\x18\r\x2\x29B");
		sb.Append("\x299\x3\x2\x2\x2\x29C\x29F\x3\x2\x2\x2\x29D\x29B\x3\x2\x2\x2");
		sb.Append("\x29D\x29E\x3\x2\x2\x2\x29E\x2AB\x3\x2\x2\x2\x29F\x29D\x3\x2");
		sb.Append("\x2\x2\x2A0\x2A3\a\\\x2\x2\x2A1\x2A4\a\x140\x2\x2\x2A2\x2A4");
		sb.Append("\x5\xE2r\x2\x2A3\x2A1\x3\x2\x2\x2\x2A3\x2A2\x3\x2\x2\x2\x2A4");
		sb.Append("\x2A9\x3\x2\x2\x2\x2A5\x2A6\a\x158\x2\x2\x2A6\x2A7\x5\xECw\x2");
		sb.Append("\x2A7\x2A8\a\x159\x2\x2\x2A8\x2AA\x3\x2\x2\x2\x2A9\x2A5\x3\x2");
		sb.Append("\x2\x2\x2A9\x2AA\x3\x2\x2\x2\x2AA\x2AC\x3\x2\x2\x2\x2AB\x2A0");
		sb.Append("\x3\x2\x2\x2\x2AB\x2AC\x3\x2\x2\x2\x2AC\x17\x3\x2\x2\x2\x2AD");
		sb.Append("\x2B0\x5\x1A\xE\x2\x2AE\x2B0\x5p\x39\x2\x2AF\x2AD\x3\x2\x2\x2");
		sb.Append("\x2AF\x2AE\x3\x2\x2\x2\x2B0\x2B5\x3\x2\x2\x2\x2B1\x2B3\a\b\x2");
		sb.Append("\x2\x2B2\x2B1\x3\x2\x2\x2\x2B2\x2B3\x3\x2\x2\x2\x2B3\x2B4\x3");
		sb.Append("\x2\x2\x2\x2B4\x2B6\x5\xC8\x65\x2\x2B5\x2B2\x3\x2\x2\x2\x2B5");
		sb.Append("\x2B6\x3\x2\x2\x2\x2B6\x19\x3\x2\x2\x2\x2B7\x2BB\a\xD3\x2\x2");
		sb.Append("\x2B8\x2BB\a\xE7\x2\x2\x2B9\x2BB\x5\xE2r\x2\x2BA\x2B7\x3\x2");
		sb.Append("\x2\x2\x2BA\x2B8\x3\x2\x2\x2\x2BA\x2B9\x3\x2\x2\x2\x2BB\x2BC");
		sb.Append("\x3\x2\x2\x2\x2BC\x2BF\a\x153\x2\x2\x2BD\x2C0\a\x15D\x2\x2\x2BE");
		sb.Append("\x2C0\x5\xEEx\x2\x2BF\x2BD\x3\x2\x2\x2\x2BF\x2BE\x3\x2\x2\x2");
		sb.Append("\x2C0\x2C3\x3\x2\x2\x2\x2C1\x2C3\a\x13A\x2\x2\x2C2\x2BA\x3\x2");
		sb.Append("\x2\x2\x2C2\x2C1\x3\x2\x2\x2\x2C3\x1B\x3\x2\x2\x2\x2C4\x2C6");
		sb.Append("\a$\x2\x2\x2C5\x2C7\a\xAE\x2\x2\x2C6\x2C5\x3\x2\x2\x2\x2C6\x2C7");
		sb.Append("\x3\x2\x2\x2\x2C7\x2C9\x3\x2\x2\x2\x2C8\x2CA\x5\xF4{\x2\x2C9");
		sb.Append("\x2C8\x3\x2\x2\x2\x2C9\x2CA\x3\x2\x2\x2\x2CA\x2CB\x3\x2\x2\x2");
		sb.Append("\x2CB\x2CC\aX\x2\x2\x2CC\x2CD\x5\x104\x83\x2\x2CD\x2CE\ao\x2");
		sb.Append("\x2\x2CE\x2CF\x5\xACW\x2\x2CF\x2D0\a\x158\x2\x2\x2D0\x2D1\x5");
		sb.Append("\xECw\x2\x2D1\x2D3\a\x159\x2\x2\x2D2\x2D4\a\x15B\x2\x2\x2D3");
		sb.Append("\x2D2\x3\x2\x2\x2\x2D3\x2D4\x3\x2\x2\x2\x2D4\x1D\x3\x2\x2\x2");
		sb.Append("\x2D5\x2D6\a$\x2\x2\x2D6\x2D7\t\x6\x2\x2\x2D7\x2DA\x5\xE6t\x2");
		sb.Append("\x2D8\x2D9\a\x15B\x2\x2\x2D9\x2DB\a\x141\x2\x2\x2DA\x2D8\x3");
		sb.Append("\x2\x2\x2\x2DA\x2DB\x3\x2\x2\x2\x2DB\x2EA\x3\x2\x2\x2\x2DC\x2DE");
		sb.Append("\a\x158\x2\x2\x2DD\x2DC\x3\x2\x2\x2\x2DD\x2DE\x3\x2\x2\x2\x2DE");
		sb.Append("\x2DF\x3\x2\x2\x2\x2DF\x2E4\x5 \x11\x2\x2E0\x2E1\a\x15A\x2\x2");
		sb.Append("\x2E1\x2E3\x5 \x11\x2\x2E2\x2E0\x3\x2\x2\x2\x2E3\x2E6\x3\x2");
		sb.Append("\x2\x2\x2E4\x2E2\x3\x2\x2\x2\x2E4\x2E5\x3\x2\x2\x2\x2E5\x2E8");
		sb.Append("\x3\x2\x2\x2\x2E6\x2E4\x3\x2\x2\x2\x2E7\x2E9\a\x159\x2\x2\x2E8");
		sb.Append("\x2E7\x3\x2\x2\x2\x2E8\x2E9\x3\x2\x2\x2\x2E9\x2EB\x3\x2\x2\x2");
		sb.Append("\x2EA\x2DD\x3\x2\x2\x2\x2EA\x2EB\x3\x2\x2\x2\x2EB\x2F5\x3\x2");
		sb.Append("\x2\x2\x2EC\x2ED\a\xBB\x2\x2\x2ED\x2F2\x5\"\x12\x2\x2EE\x2EF");
		sb.Append("\a\x15A\x2\x2\x2EF\x2F1\x5\"\x12\x2\x2F0\x2EE\x3\x2\x2\x2\x2F1");
		sb.Append("\x2F4\x3\x2\x2\x2\x2F2\x2F0\x3\x2\x2\x2\x2F2\x2F3\x3\x2\x2\x2");
		sb.Append("\x2F3\x2F6\x3\x2\x2\x2\x2F4\x2F2\x3\x2\x2\x2\x2F5\x2EC\x3\x2");
		sb.Append("\x2\x2\x2F5\x2F6\x3\x2\x2\x2\x2F6\x2F9\x3\x2\x2\x2\x2F7\x2F8");
		sb.Append("\aG\x2\x2\x2F8\x2FA\a\x88\x2\x2\x2F9\x2F7\x3\x2\x2\x2\x2F9\x2FA");
		sb.Append("\x3\x2\x2\x2\x2FA\x2FB\x3\x2\x2\x2\x2FB\x2FD\a\b\x2\x2\x2FC");
		sb.Append("\x2FE\x5\x4\x3\x2\x2FD\x2FC\x3\x2\x2\x2\x2FE\x2FF\x3\x2\x2\x2");
		sb.Append("\x2FF\x2FD\x3\x2\x2\x2\x2FF\x300\x3\x2\x2\x2\x300\x1F\x3\x2");
		sb.Append("\x2\x2\x301\x305\a\x140\x2\x2\x302\x303\x5\x104\x83\x2\x303");
		sb.Append("\x304\a\x153\x2\x2\x304\x306\x3\x2\x2\x2\x305\x302\x3\x2\x2");
		sb.Append("\x2\x305\x306\x3\x2\x2\x2\x306\x308\x3\x2\x2\x2\x307\x309\a");
		sb.Append("\b\x2\x2\x308\x307\x3\x2\x2\x2\x308\x309\x3\x2\x2\x2\x309\x30A");
		sb.Append("\x3\x2\x2\x2\x30A\x30C\x5\xFA~\x2\x30B\x30D\a\xB5\x2\x2\x30C");
		sb.Append("\x30B\x3\x2\x2\x2\x30C\x30D\x3\x2\x2\x2\x30D\x310\x3\x2\x2\x2");
		sb.Append("\x30E\x30F\a\x147\x2\x2\x30F\x311\x5\xFC\x7F\x2\x310\x30E\x3");
		sb.Append("\x2\x2\x2\x310\x311\x3\x2\x2\x2\x311\x313\x3\x2\x2\x2\x312\x314");
		sb.Append("\t\a\x2\x2\x313\x312\x3\x2\x2\x2\x313\x314\x3\x2\x2\x2\x314");
		sb.Append("!\x3\x2\x2\x2\x315\x319\a\xD7\x2\x2\x316\x319\a\x111\x2\x2\x317");
		sb.Append("\x319\x5V,\x2\x318\x315\x3\x2\x2\x2\x318\x316\x3\x2\x2\x2\x318");
		sb.Append("\x317\x3\x2\x2\x2\x319#\x3\x2\x2\x2\x31A\x31B\a$\x2\x2\x31B");
		sb.Append("\x31C\a\x9F\x2\x2\x31C\x31D\x5\x104\x83\x2\x31D\x31E\ao\x2\x2");
		sb.Append("\x31E\x31F\x5\xACW\x2\x31F\x320\a\x158\x2\x2\x320\x321\x5\xEC");
		sb.Append("w\x2\x321\x332\a\x159\x2\x2\x322\x328\a\xBB\x2\x2\x323\x329");
		sb.Append("\a\xE0\x2\x2\x324\x325\a\x11B\x2\x2\x325\x326\a\x141\x2\x2\x326");
		sb.Append("\x329\t\b\x2\x2\x327\x329\a\x125\x2\x2\x328\x323\x3\x2\x2\x2");
		sb.Append("\x328\x324\x3\x2\x2\x2\x328\x327\x3\x2\x2\x2\x329\x32C\x3\x2");
		sb.Append("\x2\x2\x32A\x32B\a\x15A\x2\x2\x32B\x32D\a\xFE\x2\x2\x32C\x32A");
		sb.Append("\x3\x2\x2\x2\x32C\x32D\x3\x2\x2\x2\x32D\x330\x3\x2\x2\x2\x32E");
		sb.Append("\x32F\a\x15A\x2\x2\x32F\x331\x5\xF2z\x2\x330\x32E\x3\x2\x2\x2");
		sb.Append("\x330\x331\x3\x2\x2\x2\x331\x333\x3\x2\x2\x2\x332\x322\x3\x2");
		sb.Append("\x2\x2\x332\x333\x3\x2\x2\x2\x333\x335\x3\x2\x2\x2\x334\x336");
		sb.Append("\a\x15B\x2\x2\x335\x334\x3\x2\x2\x2\x335\x336\x3\x2\x2\x2\x336");
		sb.Append("%\x3\x2\x2\x2\x337\x338\a$\x2\x2\x338\x339\a\xA1\x2\x2\x339");
		sb.Append("\x33A\x5\xE2r\x2\x33A\x33B\a\x158\x2\x2\x33B\x342\x5\\/\x2\x33C");
		sb.Append("\x33E\a\x15A\x2\x2\x33D\x33C\x3\x2\x2\x2\x33D\x33E\x3\x2\x2");
		sb.Append("\x2\x33E\x33F\x3\x2\x2\x2\x33F\x341\x5\\/\x2\x340\x33D\x3\x2");
		sb.Append("\x2\x2\x341\x344\x3\x2\x2\x2\x342\x340\x3\x2\x2\x2\x342\x343");
		sb.Append("\x3\x2\x2\x2\x343\x346\x3\x2\x2\x2\x344\x342\x3\x2\x2\x2\x345");
		sb.Append("\x347\a\x15A\x2\x2\x346\x345\x3\x2\x2\x2\x346\x347\x3\x2\x2");
		sb.Append("\x2\x347\x348\x3\x2\x2\x2\x348\x34C\a\x159\x2\x2\x349\x34A\a");
		sb.Append("o\x2\x2\x34A\x34D\x5\x104\x83\x2\x34B\x34D\a\x30\x2\x2\x34C");
		sb.Append("\x349\x3\x2\x2\x2\x34C\x34B\x3\x2\x2\x2\x34C\x34D\x3\x2\x2\x2");
		sb.Append("\x34D\x34F\x3\x2\x2\x2\x34E\x350\a\x15B\x2\x2\x34F\x34E\x3\x2");
		sb.Append("\x2\x2\x34F\x350\x3\x2\x2\x2\x350\'\x3\x2\x2\x2\x351\x352\a");
		sb.Append("$\x2\x2\x352\x353\a\xB6\x2\x2\x353\x35F\x5\xE4s\x2\x354\x355");
		sb.Append("\a\x158\x2\x2\x355\x35A\x5\xEEx\x2\x356\x357\a\x15A\x2\x2\x357");
		sb.Append("\x359\x5\xEEx\x2\x358\x356\x3\x2\x2\x2\x359\x35C\x3\x2\x2\x2");
		sb.Append("\x35A\x358\x3\x2\x2\x2\x35A\x35B\x3\x2\x2\x2\x35B\x35D\x3\x2");
		sb.Append("\x2\x2\x35C\x35A\x3\x2\x2\x2\x35D\x35E\a\x159\x2\x2\x35E\x360");
		sb.Append("\x3\x2\x2\x2\x35F\x354\x3\x2\x2\x2\x35F\x360\x3\x2\x2\x2\x360");
		sb.Append("\x36A\x3\x2\x2\x2\x361\x362\a\xBB\x2\x2\x362\x367\x5*\x16\x2");
		sb.Append("\x363\x364\a\x15A\x2\x2\x364\x366\x5*\x16\x2\x365\x363\x3\x2");
		sb.Append("\x2\x2\x366\x369\x3\x2\x2\x2\x367\x365\x3\x2\x2\x2\x367\x368");
		sb.Append("\x3\x2\x2\x2\x368\x36B\x3\x2\x2\x2\x369\x367\x3\x2\x2\x2\x36A");
		sb.Append("\x361\x3\x2\x2\x2\x36A\x36B\x3\x2\x2\x2\x36B\x36C\x3\x2\x2\x2");
		sb.Append("\x36C\x36D\a\b\x2\x2\x36D\x371\x5\x12\n\x2\x36E\x36F\a\xBB\x2");
		sb.Append("\x2\x36F\x370\a\x16\x2\x2\x370\x372\au\x2\x2\x371\x36E\x3\x2");
		sb.Append("\x2\x2\x371\x372\x3\x2\x2\x2\x372\x374\x3\x2\x2\x2\x373\x375");
		sb.Append("\a\x15B\x2\x2\x374\x373\x3\x2\x2\x2\x374\x375\x3\x2\x2\x2\x375");
		sb.Append(")\x3\x2\x2\x2\x376\x377\t\t\x2\x2\x377+\x3\x2\x2\x2\x378\x379");
		sb.Append("\a\x5\x2\x2\x379\x37A\a\xA1\x2\x2\x37A\x37B\x5\xE2r\x2\x37B");
		sb.Append("\x37C\a\x9B\x2\x2\x37C\x37D\a\x158\x2\x2\x37D\x37E\a\xF0\x2");
		sb.Append("\x2\x37E\x37F\a\x147\x2\x2\x37F\x380\t\n\x2\x2\x380\x382\a\x159");
		sb.Append("\x2\x2\x381\x383\a\x15B\x2\x2\x382\x381\x3\x2\x2\x2\x382\x383");
		sb.Append("\x3\x2\x2\x2\x383\x38D\x3\x2\x2\x2\x384\x385\a\x5\x2\x2\x385");
		sb.Append("\x386\a\xA1\x2\x2\x386\x387\x5\xE2r\x2\x387\x388\a\x3\x2\x2");
		sb.Append("\x388\x38A\x5\\/\x2\x389\x38B\a\x15B\x2\x2\x38A\x389\x3\x2\x2");
		sb.Append("\x2\x38A\x38B\x3\x2\x2\x2\x38B\x38D\x3\x2\x2\x2\x38C\x378\x3");
		sb.Append("\x2\x2\x2\x38C\x384\x3\x2\x2\x2\x38D-\x3\x2\x2\x2\x38E\x38F");
		sb.Append("\a\x5\x2\x2\x38F\x392\a,\x2\x2\x390\x393\x5\x104\x83\x2\x391");
		sb.Append("\x393\a&\x2\x2\x392\x390\x3\x2\x2\x2\x392\x391\x3\x2\x2\x2\x393");
		sb.Append("\x39C\x3\x2\x2\x2\x394\x395\a\xF9\x2\x2\x395\x396\a\xFB\x2\x2");
		sb.Append("\x396\x397\a\x147\x2\x2\x397\x39D\x5\x104\x83\x2\x398\x399\a");
		sb.Append("\x1B\x2\x2\x399\x39D\x5\x104\x83\x2\x39A\x39B\a\x9B\x2\x2\x39B");
		sb.Append("\x39D\x5\x30\x19\x2\x39C\x394\x3\x2\x2\x2\x39C\x398\x3\x2\x2");
		sb.Append("\x2\x39C\x39A\x3\x2\x2\x2\x39D\x39F\x3\x2\x2\x2\x39E\x3A0\a");
		sb.Append("\x15B\x2\x2\x39F\x39E\x3\x2\x2\x2\x39F\x3A0\x3\x2\x2\x2\x3A0");
		sb.Append("/\x3\x2\x2\x2\x3A1\x3A4\x5\x104\x83\x2\x3A2\x3A5\x5\x104\x83");
		sb.Append("\x2\x3A3\x3A5\aM\x2\x2\x3A4\x3A2\x3\x2\x2\x2\x3A4\x3A3\x3\x2");
		sb.Append("\x2\x2\x3A4\x3A5\x3\x2\x2\x2\x3A5\x31\x3\x2\x2\x2\x3A6\x3A7");
		sb.Append("\a\x38\x2\x2\x3A7\x3AA\aX\x2\x2\x3A8\x3A9\aV\x2\x2\x3A9\x3AB");
		sb.Append("\a\x41\x2\x2\x3AA\x3A8\x3\x2\x2\x2\x3AA\x3AB\x3\x2\x2\x2\x3AB");
		sb.Append("\x3AC\x3\x2\x2\x2\x3AC\x3AE\x5\x104\x83\x2\x3AD\x3AF\a\x15B");
		sb.Append("\x2\x2\x3AE\x3AD\x3\x2\x2\x2\x3AE\x3AF\x3\x2\x2\x2\x3AF\x33");
		sb.Append("\x3\x2\x2\x2\x3B0\x3B1\a\x38\x2\x2\x3B1\x3B4\a\x81\x2\x2\x3B2");
		sb.Append("\x3B3\aV\x2\x2\x3B3\x3B5\a\x41\x2\x2\x3B4\x3B2\x3\x2\x2\x2\x3B4");
		sb.Append("\x3B5\x3\x2\x2\x2\x3B5\x3B6\x3\x2\x2\x2\x3B6\x3B8\x5\xE6t\x2");
		sb.Append("\x3B7\x3B9\a\x15B\x2\x2\x3B8\x3B7\x3\x2\x2\x2\x3B8\x3B9\x3\x2");
		sb.Append("\x2\x2\x3B9\x35\x3\x2\x2\x2\x3BA\x3BB\a\x38\x2\x2\x3BB\x3BF");
		sb.Append("\a\x9F\x2\x2\x3BC\x3BD\x5\xE2r\x2\x3BD\x3BE\a\x153\x2\x2\x3BE");
		sb.Append("\x3C0\x3\x2\x2\x2\x3BF\x3BC\x3\x2\x2\x2\x3BF\x3C0\x3\x2\x2\x2");
		sb.Append("\x3C0\x3C1\x3\x2\x2\x2\x3C1\x3C2\x5\x104\x83\x2\x3C2\x3C3\a");
		sb.Append("\x15B\x2\x2\x3C3\x37\x3\x2\x2\x2\x3C4\x3C5\a\x38\x2\x2\x3C5");
		sb.Append("\x3C8\a\xA1\x2\x2\x3C6\x3C7\aV\x2\x2\x3C7\x3C9\a\x41\x2\x2\x3C8");
		sb.Append("\x3C6\x3\x2\x2\x2\x3C8\x3C9\x3\x2\x2\x2\x3C9\x3CA\x3\x2\x2\x2");
		sb.Append("\x3CA\x3CC\x5\xE2r\x2\x3CB\x3CD\a\x15B\x2\x2\x3CC\x3CB\x3\x2");
		sb.Append("\x2\x2\x3CC\x3CD\x3\x2\x2\x2\x3CD\x39\x3\x2\x2\x2\x3CE\x3CF");
		sb.Append("\a\x38\x2\x2\x3CF\x3D2\a\xB6\x2\x2\x3D0\x3D1\aV\x2\x2\x3D1\x3D3");
		sb.Append("\a\x41\x2\x2\x3D2\x3D0\x3\x2\x2\x2\x3D2\x3D3\x3\x2\x2\x2\x3D3");
		sb.Append("\x3D4\x3\x2\x2\x2\x3D4\x3D9\x5\xE4s\x2\x3D5\x3D6\a\x15A\x2\x2");
		sb.Append("\x3D6\x3D8\x5\xE4s\x2\x3D7\x3D5\x3\x2\x2\x2\x3D8\x3DB\x3\x2");
		sb.Append("\x2\x2\x3D9\x3D7\x3\x2\x2\x2\x3D9\x3DA\x3\x2\x2\x2\x3DA\x3DD");
		sb.Append("\x3\x2\x2\x2\x3DB\x3D9\x3\x2\x2\x2\x3DC\x3DE\a\x15B\x2\x2\x3DD");
		sb.Append("\x3DC\x3\x2\x2\x2\x3DD\x3DE\x3\x2\x2\x2\x3DE;\x3\x2\x2\x2\x3DF");
		sb.Append("\x3E2\x5> \x2\x3E0\x3E2\x5@!\x2\x3E1\x3DF\x3\x2\x2\x2\x3E1\x3E0");
		sb.Append("\x3\x2\x2\x2\x3E2=\x3\x2\x2\x2\x3E3\x3E4\ar\x2\x2\x3E4\x3E5");
		sb.Append("\a\x158\x2\x2\x3E5\x3E6\x5\x104\x83\x2\x3E6\x3E7\a\x15A\x2\x2");
		sb.Append("\x3E7\x3E8\a\x143\x2\x2\x3E8\x3E9\a\x159\x2\x2\x3E9?\x3\x2\x2");
		sb.Append("\x2\x3EA\x3EB\aq\x2\x2\x3EB\x3EC\a\x158\x2\x2\x3EC\x3ED\a\x143");
		sb.Append("\x2\x2\x3ED\x3EE\a\x15A\x2\x2\x3EE\x3EF\a\x143\x2\x2\x3EF\x3F0");
		sb.Append("\a\x159\x2\x2\x3F0\x3F2\a\x153\x2\x2\x3F1\x3F3\x5\x104\x83\x2");
		sb.Append("\x3F2\x3F1\x3\x2\x2\x2\x3F2\x3F3\x3\x2\x2\x2\x3F3\x3F4\x3\x2");
		sb.Append("\x2\x2\x3F4\x3F6\a\x153\x2\x2\x3F5\x3F7\x5\x104\x83\x2\x3F6");
		sb.Append("\x3F5\x3\x2\x2\x2\x3F6\x3F7\x3\x2\x2\x2\x3F7\x3F8\x3\x2\x2\x2");
		sb.Append("\x3F8\x3F9\a\x153\x2\x2\x3F9\x3FA\x5\x104\x83\x2\x3FA\x41\x3");
		sb.Append("\x2\x2\x2\x3FB\x3FC\a/\x2\x2\x3FC\x401\x5X-\x2\x3FD\x3FE\a\x15A");
		sb.Append("\x2\x2\x3FE\x400\x5X-\x2\x3FF\x3FD\x3\x2\x2\x2\x400\x403\x3");
		sb.Append("\x2\x2\x2\x401\x3FF\x3\x2\x2\x2\x401\x402\x3\x2\x2\x2\x402\x405");
		sb.Append("\x3\x2\x2\x2\x403\x401\x3\x2\x2\x2\x404\x406\a\x15B\x2\x2\x405");
		sb.Append("\x404\x3\x2\x2\x2\x405\x406\x3\x2\x2\x2\x406\x411\x3\x2\x2\x2");
		sb.Append("\x407\x408\a/\x2\x2\x408\x40A\a\x140\x2\x2\x409\x40B\a\b\x2");
		sb.Append("\x2\x40A\x409\x3\x2\x2\x2\x40A\x40B\x3\x2\x2\x2\x40B\x40C\x3");
		sb.Append("\x2\x2\x2\x40C\x40E\x5Z.\x2\x40D\x40F\a\x15B\x2\x2\x40E\x40D");
		sb.Append("\x3\x2\x2\x2\x40E\x40F\x3\x2\x2\x2\x40F\x411\x3\x2\x2\x2\x410");
		sb.Append("\x3FB\x3\x2\x2\x2\x410\x407\x3\x2\x2\x2\x411\x43\x3\x2\x2\x2");
		sb.Append("\x412\x414\a\x18\x2\x2\x413\x415\a\xE1\x2\x2\x414\x413\x3\x2");
		sb.Append("\x2\x2\x414\x415\x3\x2\x2\x2\x415\x416\x3\x2\x2\x2\x416\x418");
		sb.Append("\x5\xF0y\x2\x417\x419\a\x15B\x2\x2\x418\x417\x3\x2\x2\x2\x418");
		sb.Append("\x419\x3\x2\x2\x2\x419\x42D\x3\x2\x2\x2\x41A\x41C\a.\x2\x2\x41B");
		sb.Append("\x41D\a\xE1\x2\x2\x41C\x41B\x3\x2\x2\x2\x41C\x41D\x3\x2\x2\x2");
		sb.Append("\x41D\x41E\x3\x2\x2\x2\x41E\x420\x5\xF0y\x2\x41F\x421\a\x15B");
		sb.Append("\x2\x2\x420\x41F\x3\x2\x2\x2\x420\x421\x3\x2\x2\x2\x421\x42D");
		sb.Append("\x3\x2\x2\x2\x422\x42D\x5h\x35\x2\x423\x42D\x5l\x37\x2\x424");
		sb.Append("\x426\ap\x2\x2\x425\x427\a\xE1\x2\x2\x426\x425\x3\x2\x2\x2\x426");
		sb.Append("\x427\x3\x2\x2\x2\x427\x428\x3\x2\x2\x2\x428\x42A\x5\xF0y\x2");
		sb.Append("\x429\x42B\a\x15B\x2\x2\x42A\x429\x3\x2\x2\x2\x42A\x42B\x3\x2");
		sb.Append("\x2\x2\x42B\x42D\x3\x2\x2\x2\x42C\x412\x3\x2\x2\x2\x42C\x41A");
		sb.Append("\x3\x2\x2\x2\x42C\x422\x3\x2\x2\x2\x42C\x423\x3\x2\x2\x2\x42C");
		sb.Append("\x424\x3\x2\x2\x2\x42D\x45\x3\x2\x2\x2\x42E\x431\t\v\x2\x2\x42F");
		sb.Append("\x430\a\x140\x2\x2\x430\x432\a\x147\x2\x2\x431\x42F\x3\x2\x2");
		sb.Append("\x2\x431\x432\x3\x2\x2\x2\x432\x433\x3\x2\x2\x2\x433\x43C\x5");
		sb.Append("\xE6t\x2\x434\x439\x5H%\x2\x435\x436\a\x15A\x2\x2\x436\x438");
		sb.Append("\x5H%\x2\x437\x435\x3\x2\x2\x2\x438\x43B\x3\x2\x2\x2\x439\x437");
		sb.Append("\x3\x2\x2\x2\x439\x43A\x3\x2\x2\x2\x43A\x43D\x3\x2\x2\x2\x43B");
		sb.Append("\x439\x3\x2\x2\x2\x43C\x434\x3\x2\x2\x2\x43C\x43D\x3\x2\x2\x2");
		sb.Append("\x43D\x43F\x3\x2\x2\x2\x43E\x440\a\x15B\x2\x2\x43F\x43E\x3\x2");
		sb.Append("\x2\x2\x43F\x440\x3\x2\x2\x2\x440\x458\x3\x2\x2\x2\x441\x442");
		sb.Append("\t\v\x2\x2\x442\x443\a\x158\x2\x2\x443\x448\x5J&\x2\x444\x445");
		sb.Append("\a\x160\x2\x2\x445\x447\x5J&\x2\x446\x444\x3\x2\x2\x2\x447\x44A");
		sb.Append("\x3\x2\x2\x2\x448\x446\x3\x2\x2\x2\x448\x449\x3\x2\x2\x2\x449");
		sb.Append("\x44B\x3\x2\x2\x2\x44A\x448\x3\x2\x2\x2\x44B\x452\a\x159\x2");
		sb.Append("\x2\x44C\x44E\a\b\x2\x2\x44D\x44C\x3\x2\x2\x2\x44D\x44E\x3\x2");
		sb.Append("\x2\x2\x44E\x44F\x3\x2\x2\x2\x44F\x450\t\f\x2\x2\x450\x451\a");
		sb.Append("\x147\x2\x2\x451\x453\a\x143\x2\x2\x452\x44D\x3\x2\x2\x2\x452");
		sb.Append("\x453\x3\x2\x2\x2\x453\x455\x3\x2\x2\x2\x454\x456\a\x15B\x2");
		sb.Append("\x2\x455\x454\x3\x2\x2\x2\x455\x456\x3\x2\x2\x2\x456\x458\x3");
		sb.Append("\x2\x2\x2\x457\x42E\x3\x2\x2\x2\x457\x441\x3\x2\x2\x2\x458G");
		sb.Append("\x3\x2\x2\x2\x459\x45A\a\x140\x2\x2\x45A\x45C\a\x147\x2\x2\x45B");
		sb.Append("\x459\x3\x2\x2\x2\x45B\x45C\x3\x2\x2\x2\x45C\x464\x3\x2\x2\x2");
		sb.Append("\x45D\x465\x5\xFE\x80\x2\x45E\x460\a\x140\x2\x2\x45F\x461\t");
		sb.Append("\r\x2\x2\x460\x45F\x3\x2\x2\x2\x460\x461\x3\x2\x2\x2\x461\x465");
		sb.Append("\x3\x2\x2\x2\x462\x465\a\x30\x2\x2\x463\x465\aj\x2\x2\x464\x45D");
		sb.Append("\x3\x2\x2\x2\x464\x45E\x3\x2\x2\x2\x464\x462\x3\x2\x2\x2\x464");
		sb.Append("\x463\x3\x2\x2\x2\x465I\x3\x2\x2\x2\x466\x467\t\x3\x2\x2\x467");
		sb.Append("K\x3\x2\x2\x2\x468\x46A\x5V,\x2\x469\x46B\a\x15B\x2\x2\x46A");
		sb.Append("\x469\x3\x2\x2\x2\x46A\x46B\x3\x2\x2\x2\x46B\x479\x3\x2\x2\x2");
		sb.Append("\x46C\x473\a\x8C\x2\x2\x46D\x46E\a\x158\x2\x2\x46E\x46F\a\xBB");
		sb.Append("\x2\x2\x46F\x470\a\xCB\x2\x2\x470\x471\a\x147\x2\x2\x471\x472");
		sb.Append("\a\x140\x2\x2\x472\x474\a\x159\x2\x2\x473\x46D\x3\x2\x2\x2\x473");
		sb.Append("\x474\x3\x2\x2\x2\x474\x476\x3\x2\x2\x2\x475\x477\a\x15B\x2");
		sb.Append("\x2\x476\x475\x3\x2\x2\x2\x476\x477\x3\x2\x2\x2\x477\x479\x3");
		sb.Append("\x2\x2\x2\x478\x468\x3\x2\x2\x2\x478\x46C\x3\x2\x2\x2\x479M");
		sb.Append("\x3\x2\x2\x2\x47A\x47B\a\x9B\x2\x2\x47B\x47E\a\x140\x2\x2\x47C");
		sb.Append("\x47D\a\x153\x2\x2\x47D\x47F\x5\x104\x83\x2\x47E\x47C\x3\x2");
		sb.Append("\x2\x2\x47E\x47F\x3\x2\x2\x2\x47F\x480\x3\x2\x2\x2\x480\x481");
		sb.Append("\a\x147\x2\x2\x481\x483\x5p\x39\x2\x482\x484\a\x15B\x2\x2\x483");
		sb.Append("\x482\x3\x2\x2\x2\x483\x484\x3\x2\x2\x2\x484\x4A2\x3\x2\x2\x2");
		sb.Append("\x485\x486\a\x9B\x2\x2\x486\x487\a\x140\x2\x2\x487\x488\x5\x10A");
		sb.Append("\x86\x2\x488\x48A\x5p\x39\x2\x489\x48B\a\x15B\x2\x2\x48A\x489");
		sb.Append("\x3\x2\x2\x2\x48A\x48B\x3\x2\x2\x2\x48B\x4A2\x3\x2\x2\x2\x48C");
		sb.Append("\x48D\a\x9B\x2\x2\x48D\x48E\a\x140\x2\x2\x48E\x48F\a\x147\x2");
		sb.Append("\x2\x48F\x490\a+\x2\x2\x490\x49B\x5j\x36\x2\x491\x499\aG\x2");
		sb.Append("\x2\x492\x493\a\x84\x2\x2\x493\x49A\a\x102\x2\x2\x494\x497\a");
		sb.Append("\xB0\x2\x2\x495\x496\al\x2\x2\x496\x498\x5\xECw\x2\x497\x495");
		sb.Append("\x3\x2\x2\x2\x497\x498\x3\x2\x2\x2\x498\x49A\x3\x2\x2\x2\x499");
		sb.Append("\x492\x3\x2\x2\x2\x499\x494\x3\x2\x2\x2\x49A\x49C\x3\x2\x2\x2");
		sb.Append("\x49B\x491\x3\x2\x2\x2\x49B\x49C\x3\x2\x2\x2\x49C\x49E\x3\x2");
		sb.Append("\x2\x2\x49D\x49F\a\x15B\x2\x2\x49E\x49D\x3\x2\x2\x2\x49E\x49F");
		sb.Append("\x3\x2\x2\x2\x49F\x4A2\x3\x2\x2\x2\x4A0\x4A2\x5n\x38\x2\x4A1");
		sb.Append("\x47A\x3\x2\x2\x2\x4A1\x485\x3\x2\x2\x2\x4A1\x48C\x3\x2\x2\x2");
		sb.Append("\x4A1\x4A0\x3\x2\x2\x2\x4A2O\x3\x2\x2\x2\x4A3\x4A4\a\f\x2\x2");
		sb.Append("\x4A4\x4A5\a\x36\x2\x2\x4A5\x4A8\t\xE\x2\x2\x4A6\x4A9\x5\x104");
		sb.Append("\x83\x2\x4A7\x4A9\a\x140\x2\x2\x4A8\x4A6\x3\x2\x2\x2\x4A8\x4A7");
		sb.Append("\x3\x2\x2\x2\x4A8\x4A9\x3\x2\x2\x2\x4A9\x4AB\x3\x2\x2\x2\x4AA");
		sb.Append("\x4AC\a\x15B\x2\x2\x4AB\x4AA\x3\x2\x2\x2\x4AB\x4AC\x3\x2\x2");
		sb.Append("\x2\x4AC\x4EF\x3\x2\x2\x2\x4AD\x4AE\a\f\x2\x2\x4AE\x4B8\t\xE");
		sb.Append("\x2\x2\x4AF\x4B2\x5\x104\x83\x2\x4B0\x4B2\a\x140\x2\x2\x4B1");
		sb.Append("\x4AF\x3\x2\x2\x2\x4B1\x4B0\x3\x2\x2\x2\x4B2\x4B6\x3\x2\x2\x2");
		sb.Append("\x4B3\x4B4\a\xBB\x2\x2\x4B4\x4B5\a\xF3\x2\x2\x4B5\x4B7\a\x143");
		sb.Append("\x2\x2\x4B6\x4B3\x3\x2\x2\x2\x4B6\x4B7\x3\x2\x2\x2\x4B7\x4B9");
		sb.Append("\x3\x2\x2\x2\x4B8\x4B1\x3\x2\x2\x2\x4B8\x4B9\x3\x2\x2\x2\x4B9");
		sb.Append("\x4BB\x3\x2\x2\x2\x4BA\x4BC\a\x15B\x2\x2\x4BB\x4BA\x3\x2\x2");
		sb.Append("\x2\x4BB\x4BC\x3\x2\x2\x2\x4BC\x4EF\x3\x2\x2\x2\x4BD\x4BE\a");
		sb.Append("\x1D\x2\x2\x4BE\x4C9\t\xE\x2\x2\x4BF\x4C2\x5\x104\x83\x2\x4C0");
		sb.Append("\x4C2\a\x140\x2\x2\x4C1\x4BF\x3\x2\x2\x2\x4C1\x4C0\x3\x2\x2");
		sb.Append("\x2\x4C2\x4C7\x3\x2\x2\x2\x4C3\x4C4\a\xBB\x2\x2\x4C4\x4C5\a");
		sb.Append("\x158\x2\x2\x4C5\x4C6\t\xF\x2\x2\x4C6\x4C8\a\x159\x2\x2\x4C7");
		sb.Append("\x4C3\x3\x2\x2\x2\x4C7\x4C8\x3\x2\x2\x2\x4C8\x4CA\x3\x2\x2\x2");
		sb.Append("\x4C9\x4C1\x3\x2\x2\x2\x4C9\x4CA\x3\x2\x2\x2\x4CA\x4CC\x3\x2");
		sb.Append("\x2\x2\x4CB\x4CD\a\x15B\x2\x2\x4CC\x4CB\x3\x2\x2\x2\x4CC\x4CD");
		sb.Append("\x3\x2\x2\x2\x4CD\x4EF\x3\x2\x2\x2\x4CE\x4D0\a\x1D\x2\x2\x4CF");
		sb.Append("\x4D1\a\x137\x2\x2\x4D0\x4CF\x3\x2\x2\x2\x4D0\x4D1\x3\x2\x2");
		sb.Append("\x2\x4D1\x4D3\x3\x2\x2\x2\x4D2\x4D4\a\x15B\x2\x2\x4D3\x4D2\x3");
		sb.Append("\x2\x2\x2\x4D3\x4D4\x3\x2\x2\x2\x4D4\x4EF\x3\x2\x2\x2\x4D5\x4D6");
		sb.Append("\a\x8F\x2\x2\x4D6\x4D9\t\xE\x2\x2\x4D7\x4DA\x5\x104\x83\x2\x4D8");
		sb.Append("\x4DA\a\x140\x2\x2\x4D9\x4D7\x3\x2\x2\x2\x4D9\x4D8\x3\x2\x2");
		sb.Append("\x2\x4D9\x4DA\x3\x2\x2\x2\x4DA\x4DC\x3\x2\x2\x2\x4DB\x4DD\a");
		sb.Append("\x15B\x2\x2\x4DC\x4DB\x3\x2\x2\x2\x4DC\x4DD\x3\x2\x2\x2\x4DD");
		sb.Append("\x4EF\x3\x2\x2\x2\x4DE\x4E0\a\x8F\x2\x2\x4DF\x4E1\a\x137\x2");
		sb.Append("\x2\x4E0\x4DF\x3\x2\x2\x2\x4E0\x4E1\x3\x2\x2\x2\x4E1\x4E3\x3");
		sb.Append("\x2\x2\x2\x4E2\x4E4\a\x15B\x2\x2\x4E3\x4E2\x3\x2\x2\x2\x4E3");
		sb.Append("\x4E4\x3\x2\x2\x2\x4E4\x4EF\x3\x2\x2\x2\x4E5\x4E6\a\x93\x2\x2");
		sb.Append("\x4E6\x4E9\t\xE\x2\x2\x4E7\x4EA\x5\x104\x83\x2\x4E8\x4EA\a\x140");
		sb.Append("\x2\x2\x4E9\x4E7\x3\x2\x2\x2\x4E9\x4E8\x3\x2\x2\x2\x4E9\x4EA");
		sb.Append("\x3\x2\x2\x2\x4EA\x4EC\x3\x2\x2\x2\x4EB\x4ED\a\x15B\x2\x2\x4EC");
		sb.Append("\x4EB\x3\x2\x2\x2\x4EC\x4ED\x3\x2\x2\x2\x4ED\x4EF\x3\x2\x2\x2");
		sb.Append("\x4EE\x4A3\x3\x2\x2\x2\x4EE\x4AD\x3\x2\x2\x2\x4EE\x4BD\x3\x2");
		sb.Append("\x2\x2\x4EE\x4CE\x3\x2\x2\x2\x4EE\x4D5\x3\x2\x2\x2\x4EE\x4DE");
		sb.Append("\x3\x2\x2\x2\x4EE\x4E5\x3\x2\x2\x2\x4EFQ\x3\x2\x2\x2\x4F0\x4F2");
		sb.Append("\a\xE2\x2\x2\x4F1\x4F3\a\x141\x2\x2\x4F2\x4F1\x3\x2\x2\x2\x4F2");
		sb.Append("\x4F3\x3\x2\x2\x2\x4F3S\x3\x2\x2\x2\x4F4\x4F5\a\xB2\x2\x2\x4F5");
		sb.Append("\x4F7\x5\x104\x83\x2\x4F6\x4F8\a\x15B\x2\x2\x4F7\x4F6\x3\x2");
		sb.Append("\x2\x2\x4F7\x4F8\x3\x2\x2\x2\x4F8U\x3\x2\x2\x2\x4F9\x4FA\t\v");
		sb.Append("\x2\x2\x4FA\x4FB\a\b\x2\x2\x4FB\x4FC\t\x10\x2\x2\x4FCW\x3\x2");
		sb.Append("\x2\x2\x4FD\x4FF\a\x140\x2\x2\x4FE\x500\a\b\x2\x2\x4FF\x4FE");
		sb.Append("\x3\x2\x2\x2\x4FF\x500\x3\x2\x2\x2\x500\x501\x3\x2\x2\x2\x501");
		sb.Append("\x504\x5\xFA~\x2\x502\x503\a\x147\x2\x2\x503\x505\x5p\x39\x2");
		sb.Append("\x504\x502\x3\x2\x2\x2\x504\x505\x3\x2\x2\x2\x505Y\x3\x2\x2");
		sb.Append("\x2\x506\x507\a\xA1\x2\x2\x507\x508\a\x158\x2\x2\x508\x50F\x5");
		sb.Append("\\/\x2\x509\x50B\a\x15A\x2\x2\x50A\x509\x3\x2\x2\x2\x50A\x50B");
		sb.Append("\x3\x2\x2\x2\x50B\x50C\x3\x2\x2\x2\x50C\x50E\x5\\/\x2\x50D\x50A");
		sb.Append("\x3\x2\x2\x2\x50E\x511\x3\x2\x2\x2\x50F\x50D\x3\x2\x2\x2\x50F");
		sb.Append("\x510\x3\x2\x2\x2\x510\x512\x3\x2\x2\x2\x511\x50F\x3\x2\x2\x2");
		sb.Append("\x512\x513\a\x159\x2\x2\x513[\x3\x2\x2\x2\x514\x517\x5^\x30");
		sb.Append("\x2\x515\x517\x5\x62\x32\x2\x516\x514\x3\x2\x2\x2\x516\x515");
		sb.Append("\x3\x2\x2\x2\x517]\x3\x2\x2\x2\x518\x51C\x5\xEEx\x2\x519\x51D");
		sb.Append("\x5\xFA~\x2\x51A\x51B\a\b\x2\x2\x51B\x51D\x5p\x39\x2\x51C\x519");
		sb.Append("\x3\x2\x2\x2\x51C\x51A\x3\x2\x2\x2\x51D\x520\x3\x2\x2\x2\x51E");
		sb.Append("\x51F\a\x1B\x2\x2\x51F\x521\x5\x104\x83\x2\x520\x51E\x3\x2\x2");
		sb.Append("\x2\x520\x521\x3\x2\x2\x2\x521\x523\x3\x2\x2\x2\x522\x524\x5");
		sb.Append("\xF6|\x2\x523\x522\x3\x2\x2\x2\x523\x524\x3\x2\x2\x2\x524\x53C");
		sb.Append("\x3\x2\x2\x2\x525\x526\a\x1F\x2\x2\x526\x528\x5\x104\x83\x2");
		sb.Append("\x527\x525\x3\x2\x2\x2\x527\x528\x3\x2\x2\x2\x528\x529\x3\x2");
		sb.Append("\x2\x2\x529\x52A\a\x30\x2\x2\x52A\x52D\x5r:\x2\x52B\x52C\a\xBB");
		sb.Append("\x2\x2\x52C\x52E\a\xB4\x2\x2\x52D\x52B\x3\x2\x2\x2\x52D\x52E");
		sb.Append("\x3\x2\x2\x2\x52E\x53D\x3\x2\x2\x2\x52F\x535\aS\x2\x2\x530\x531");
		sb.Append("\a\x158\x2\x2\x531\x532\a\x141\x2\x2\x532\x533\a\x15A\x2\x2");
		sb.Append("\x533\x534\a\x141\x2\x2\x534\x536\a\x159\x2\x2\x535\x530\x3");
		sb.Append("\x2\x2\x2\x535\x536\x3\x2\x2\x2\x536\x53A\x3\x2\x2\x2\x537\x538");
		sb.Append("\ai\x2\x2\x538\x539\aG\x2\x2\x539\x53B\a\x88\x2\x2\x53A\x537");
		sb.Append("\x3\x2\x2\x2\x53A\x53B\x3\x2\x2\x2\x53B\x53D\x3\x2\x2\x2\x53C");
		sb.Append("\x527\x3\x2\x2\x2\x53C\x52F\x3\x2\x2\x2\x53C\x53D\x3\x2\x2\x2");
		sb.Append("\x53D\x53F\x3\x2\x2\x2\x53E\x540\a\x91\x2\x2\x53F\x53E\x3\x2");
		sb.Append("\x2\x2\x53F\x540\x3\x2\x2\x2\x540\x544\x3\x2\x2\x2\x541\x543");
		sb.Append("\x5`\x31\x2\x542\x541\x3\x2\x2\x2\x543\x546\x3\x2\x2\x2\x544");
		sb.Append("\x542\x3\x2\x2\x2\x544\x545\x3\x2\x2\x2\x545_\x3\x2\x2\x2\x546");
		sb.Append("\x544\x3\x2\x2\x2\x547\x548\a\x1F\x2\x2\x548\x54A\x5\x104\x83");
		sb.Append("\x2\x549\x547\x3\x2\x2\x2\x549\x54A\x3\x2\x2\x2\x54A\x54C\x3");
		sb.Append("\x2\x2\x2\x54B\x54D\x5\xF6|\x2\x54C\x54B\x3\x2\x2\x2\x54C\x54D");
		sb.Append("\x3\x2\x2\x2\x54D\x563\x3\x2\x2\x2\x54E\x54F\a~\x2\x2\x54F\x552");
		sb.Append("\a_\x2\x2\x550\x552\a\xAE\x2\x2\x551\x54E\x3\x2\x2\x2\x551\x550");
		sb.Append("\x3\x2\x2\x2\x552\x554\x3\x2\x2\x2\x553\x555\x5\xF4{\x2\x554");
		sb.Append("\x553\x3\x2\x2\x2\x554\x555\x3\x2\x2\x2\x555\x557\x3\x2\x2\x2");
		sb.Append("\x556\x558\x5\x64\x33\x2\x557\x556\x3\x2\x2\x2\x557\x558\x3");
		sb.Append("\x2\x2\x2\x558\x564\x3\x2\x2\x2\x559\x55D\a\x16\x2\x2\x55A\x55B");
		sb.Append("\ai\x2\x2\x55B\x55C\aG\x2\x2\x55C\x55E\a\x88\x2\x2\x55D\x55A");
		sb.Append("\x3\x2\x2\x2\x55D\x55E\x3\x2\x2\x2\x55E\x55F\x3\x2\x2\x2\x55F");
		sb.Append("\x560\a\x158\x2\x2\x560\x561\x5~@\x2\x561\x562\a\x159\x2\x2");
		sb.Append("\x562\x564\x3\x2\x2\x2\x563\x551\x3\x2\x2\x2\x563\x559\x3\x2");
		sb.Append("\x2\x2\x564\x61\x3\x2\x2\x2\x565\x566\a\x1F\x2\x2\x566\x568");
		sb.Append("\x5\x104\x83\x2\x567\x565\x3\x2\x2\x2\x567\x568\x3\x2\x2\x2");
		sb.Append("\x568\x585\x3\x2\x2\x2\x569\x56A\a~\x2\x2\x56A\x56D\a_\x2\x2");
		sb.Append("\x56B\x56D\a\xAE\x2\x2\x56C\x569\x3\x2\x2\x2\x56C\x56B\x3\x2");
		sb.Append("\x2\x2\x56D\x56F\x3\x2\x2\x2\x56E\x570\x5\xF4{\x2\x56F\x56E");
		sb.Append("\x3\x2\x2\x2\x56F\x570\x3\x2\x2\x2\x570\x571\x3\x2\x2\x2\x571");
		sb.Append("\x572\a\x158\x2\x2\x572\x573\x5\xECw\x2\x573\x575\a\x159\x2");
		sb.Append("\x2\x574\x576\x5\x64\x33\x2\x575\x574\x3\x2\x2\x2\x575\x576");
		sb.Append("\x3\x2\x2\x2\x576\x579\x3\x2\x2\x2\x577\x578\ao\x2\x2\x578\x57A");
		sb.Append("\x5\x104\x83\x2\x579\x577\x3\x2\x2\x2\x579\x57A\x3\x2\x2\x2");
		sb.Append("\x57A\x586\x3\x2\x2\x2\x57B\x57F\a\x16\x2\x2\x57C\x57D\ai\x2");
		sb.Append("\x2\x57D\x57E\aG\x2\x2\x57E\x580\a\x88\x2\x2\x57F\x57C\x3\x2");
		sb.Append("\x2\x2\x57F\x580\x3\x2\x2\x2\x580\x581\x3\x2\x2\x2\x581\x582");
		sb.Append("\a\x158\x2\x2\x582\x583\x5~@\x2\x583\x584\a\x159\x2\x2\x584");
		sb.Append("\x586\x3\x2\x2\x2\x585\x56C\x3\x2\x2\x2\x585\x57B\x3\x2\x2\x2");
		sb.Append("\x586\x63\x3\x2\x2\x2\x587\x588\a\xBB\x2\x2\x588\x589\a\x158");
		sb.Append("\x2\x2\x589\x58E\x5\x66\x34\x2\x58A\x58B\a\x15A\x2\x2\x58B\x58D");
		sb.Append("\x5\x66\x34\x2\x58C\x58A\x3\x2\x2\x2\x58D\x590\x3\x2\x2\x2\x58E");
		sb.Append("\x58C\x3\x2\x2\x2\x58E\x58F\x3\x2\x2\x2\x58F\x591\x3\x2\x2\x2");
		sb.Append("\x590\x58E\x3\x2\x2\x2\x591\x592\a\x159\x2\x2\x592\x65\x3\x2");
		sb.Append("\x2\x2\x593\x594\x5\x106\x84\x2\x594\x598\a\x147\x2\x2\x595");
		sb.Append("\x599\x5\x106\x84\x2\x596\x599\x5\xF2z\x2\x597\x599\a\x141\x2");
		sb.Append("\x2\x598\x595\x3\x2\x2\x2\x598\x596\x3\x2\x2\x2\x598\x597\x3");
		sb.Append("\x2\x2\x2\x599g\x3\x2\x2\x2\x59A\x59B\a/\x2\x2\x59B\x59C\x5");
		sb.Append("\xF0y\x2\x59C\x59E\a+\x2\x2\x59D\x59F\a\x15B\x2\x2\x59E\x59D");
		sb.Append("\x3\x2\x2\x2\x59E\x59F\x3\x2\x2\x2\x59F\x5C8\x3\x2\x2\x2\x5A0");
		sb.Append("\x5A1\a/\x2\x2\x5A1\x5A3\x5\xF0y\x2\x5A2\x5A4\a\xE6\x2\x2\x5A3");
		sb.Append("\x5A2\x3\x2\x2\x2\x5A3\x5A4\x3\x2\x2\x2\x5A4\x5A6\x3\x2\x2\x2");
		sb.Append("\x5A5\x5A7\a\x11D\x2\x2\x5A6\x5A5\x3\x2\x2\x2\x5A6\x5A7\x3\x2");
		sb.Append("\x2\x2\x5A7\x5A8\x3\x2\x2\x2\x5A8\x5A9\a+\x2\x2\x5A9\x5AA\a");
		sb.Append("G\x2\x2\x5AA\x5B3\x5\x12\n\x2\x5AB\x5B1\aG\x2\x2\x5AC\x5AD\a");
		sb.Append("\x84\x2\x2\x5AD\x5B2\a\x102\x2\x2\x5AE\x5B2\a\xB0\x2\x2\x5AF");
		sb.Append("\x5B0\al\x2\x2\x5B0\x5B2\x5\xECw\x2\x5B1\x5AC\x3\x2\x2\x2\x5B1");
		sb.Append("\x5AE\x3\x2\x2\x2\x5B1\x5AF\x3\x2\x2\x2\x5B2\x5B4\x3\x2\x2\x2");
		sb.Append("\x5B3\x5AB\x3\x2\x2\x2\x5B3\x5B4\x3\x2\x2\x2\x5B4\x5B6\x3\x2");
		sb.Append("\x2\x2\x5B5\x5B7\a\x15B\x2\x2\x5B6\x5B5\x3\x2\x2\x2\x5B6\x5B7");
		sb.Append("\x3\x2\x2\x2\x5B7\x5C8\x3\x2\x2\x2\x5B8\x5B9\a/\x2\x2\x5B9\x5BA");
		sb.Append("\x5\xF0y\x2\x5BA\x5BB\a+\x2\x2\x5BB\x5C2\x5j\x36\x2\x5BC\x5BD");
		sb.Append("\aG\x2\x2\x5BD\x5C0\a\xB0\x2\x2\x5BE\x5BF\al\x2\x2\x5BF\x5C1");
		sb.Append("\x5\xECw\x2\x5C0\x5BE\x3\x2\x2\x2\x5C0\x5C1\x3\x2\x2\x2\x5C1");
		sb.Append("\x5C3\x3\x2\x2\x2\x5C2\x5BC\x3\x2\x2\x2\x5C2\x5C3\x3\x2\x2\x2");
		sb.Append("\x5C3\x5C5\x3\x2\x2\x2\x5C4\x5C6\a\x15B\x2\x2\x5C5\x5C4\x3\x2");
		sb.Append("\x2\x2\x5C5\x5C6\x3\x2\x2\x2\x5C6\x5C8\x3\x2\x2\x2\x5C7\x59A");
		sb.Append("\x3\x2\x2\x2\x5C7\x5A0\x3\x2\x2\x2\x5C7\x5B8\x3\x2\x2\x2\x5C8");
		sb.Append("i\x3\x2\x2\x2\x5C9\x5CB\t\x11\x2\x2\x5CA\x5C9\x3\x2\x2\x2\x5CA");
		sb.Append("\x5CB\x3\x2\x2\x2\x5CB\x5CD\x3\x2\x2\x2\x5CC\x5CE\t\x12\x2\x2");
		sb.Append("\x5CD\x5CC\x3\x2\x2\x2\x5CD\x5CE\x3\x2\x2\x2\x5CE\x5D0\x3\x2");
		sb.Append("\x2\x2\x5CF\x5D1\t\x13\x2\x2\x5D0\x5CF\x3\x2\x2\x2\x5D0\x5D1");
		sb.Append("\x3\x2\x2\x2\x5D1\x5D3\x3\x2\x2\x2\x5D2\x5D4\t\x14\x2\x2\x5D3");
		sb.Append("\x5D2\x3\x2\x2\x2\x5D3\x5D4\x3\x2\x2\x2\x5D4\x5D6\x3\x2\x2\x2");
		sb.Append("\x5D5\x5D7\a\x12E\x2\x2\x5D6\x5D5\x3\x2\x2\x2\x5D6\x5D7\x3\x2");
		sb.Append("\x2\x2\x5D7\x5D8\x3\x2\x2\x2\x5D8\x5D9\aG\x2\x2\x5D9\x5DA\x5");
		sb.Append("\x12\n\x2\x5DAk\x3\x2\x2\x2\x5DB\x5E7\a\x44\x2\x2\x5DC\x5E5");
		sb.Append("\a\xFA\x2\x2\x5DD\x5E5\a\x10C\x2\x2\x5DE\x5E5\a\xDB\x2\x2\x5DF");
		sb.Append("\x5E5\a\xED\x2\x2\x5E0\x5E1\a\xBE\x2\x2\x5E1\x5E5\x5p\x39\x2");
		sb.Append("\x5E2\x5E3\a\x112\x2\x2\x5E3\x5E5\x5p\x39\x2\x5E4\x5DC\x3\x2");
		sb.Append("\x2\x2\x5E4\x5DD\x3\x2\x2\x2\x5E4\x5DE\x3\x2\x2\x2\x5E4\x5DF");
		sb.Append("\x3\x2\x2\x2\x5E4\x5E0\x3\x2\x2\x2\x5E4\x5E2\x3\x2\x2\x2\x5E4");
		sb.Append("\x5E5\x3\x2\x2\x2\x5E5\x5E6\x3\x2\x2\x2\x5E6\x5E8\aL\x2\x2\x5E7");
		sb.Append("\x5E4\x3\x2\x2\x2\x5E7\x5E8\x3\x2\x2\x2\x5E8\x5EA\x3\x2\x2\x2");
		sb.Append("\x5E9\x5EB\a\xE1\x2\x2\x5EA\x5E9\x3\x2\x2\x2\x5EA\x5EB\x3\x2");
		sb.Append("\x2\x2\x5EB\x5EC\x3\x2\x2\x2\x5EC\x5F6\x5\xF0y\x2\x5ED\x5EE");
		sb.Append("\a\\\x2\x2\x5EE\x5F3\a\x140\x2\x2\x5EF\x5F0\a\x15A\x2\x2\x5F0");
		sb.Append("\x5F2\a\x140\x2\x2\x5F1\x5EF\x3\x2\x2\x2\x5F2\x5F5\x3\x2\x2");
		sb.Append("\x2\x5F3\x5F1\x3\x2\x2\x2\x5F3\x5F4\x3\x2\x2\x2\x5F4\x5F7\x3");
		sb.Append("\x2\x2\x2\x5F5\x5F3\x3\x2\x2\x2\x5F6\x5ED\x3\x2\x2\x2\x5F6\x5F7");
		sb.Append("\x3\x2\x2\x2\x5F7\x5F9\x3\x2\x2\x2\x5F8\x5FA\a\x15B\x2\x2\x5F9");
		sb.Append("\x5F8\x3\x2\x2\x2\x5F9\x5FA\x3\x2\x2\x2\x5FAm\x3\x2\x2\x2\x5FB");
		sb.Append("\x5FC\a\x9B\x2\x2\x5FC\x601\x5\x104\x83\x2\x5FD\x602\x5\x104");
		sb.Append("\x83\x2\x5FE\x602\x5\xFE\x80\x2\x5FF\x602\a\x140\x2\x2\x600");
		sb.Append("\x602\x5\xF2z\x2\x601\x5FD\x3\x2\x2\x2\x601\x5FE\x3\x2\x2\x2");
		sb.Append("\x601\x5FF\x3\x2\x2\x2\x601\x600\x3\x2\x2\x2\x602\x604\x3\x2");
		sb.Append("\x2\x2\x603\x605\a\x15B\x2\x2\x604\x603\x3\x2\x2\x2\x604\x605");
		sb.Append("\x3\x2\x2\x2\x605\x61F\x3\x2\x2\x2\x606\x607\a\x9B\x2\x2\x607");
		sb.Append("\x608\a\xA8\x2\x2\x608\x609\a\xE8\x2\x2\x609\x612\a\xEE\x2\x2");
		sb.Append("\x60A\x60B\a\x84\x2\x2\x60B\x613\a\x130\x2\x2\x60C\x60D\a\x84");
		sb.Append("\x2\x2\x60D\x613\a\xC9\x2\x2\x60E\x60F\a\x114\x2\x2\x60F\x613");
		sb.Append("\a\x84\x2\x2\x610\x613\a\x122\x2\x2\x611\x613\a\x120\x2\x2\x612");
		sb.Append("\x60A\x3\x2\x2\x2\x612\x60C\x3\x2\x2\x2\x612\x60E\x3\x2\x2\x2");
		sb.Append("\x612\x610\x3\x2\x2\x2\x612\x611\x3\x2\x2\x2\x613\x615\x3\x2");
		sb.Append("\x2\x2\x614\x616\a\x15B\x2\x2\x615\x614\x3\x2\x2\x2\x615\x616");
		sb.Append("\x3\x2\x2\x2\x616\x61F\x3\x2\x2\x2\x617\x618\a\x9B\x2\x2\x618");
		sb.Append("\x619\aU\x2\x2\x619\x61A\x5\xE2r\x2\x61A\x61C\x5\xF2z\x2\x61B");
		sb.Append("\x61D\a\x15B\x2\x2\x61C\x61B\x3\x2\x2\x2\x61C\x61D\x3\x2\x2");
		sb.Append("\x2\x61D\x61F\x3\x2\x2\x2\x61E\x5FB\x3\x2\x2\x2\x61E\x606\x3");
		sb.Append("\x2\x2\x2\x61E\x617\x3\x2\x2\x2\x61Fo\x3\x2\x2\x2\x620\x621");
		sb.Append("\b\x39\x1\x2\x621\x635\a\x30\x2\x2\x622\x635\aj\x2\x2\x623\x635");
		sb.Append("\a\x140\x2\x2\x624\x635\x5\xFE\x80\x2\x625\x635\x5\xB4[\x2\x626");
		sb.Append("\x635\x5\xCCg\x2\x627\x635\x5\xEAv\x2\x628\x629\a\x158\x2\x2");
		sb.Append("\x629\x62A\x5p\x39\x2\x62A\x62B\a\x159\x2\x2\x62B\x635\x3\x2");
		sb.Append("\x2\x2\x62C\x62D\a\x158\x2\x2\x62D\x62E\x5t;\x2\x62E\x62F\a");
		sb.Append("\x159\x2\x2\x62F\x635\x3\x2\x2\x2\x630\x631\a\x162\x2\x2\x631");
		sb.Append("\x635\x5p\x39\a\x632\x633\t\x15\x2\x2\x633\x635\x5p\x39\x5\x634");
		sb.Append("\x620\x3\x2\x2\x2\x634\x622\x3\x2\x2\x2\x634\x623\x3\x2\x2\x2");
		sb.Append("\x634\x624\x3\x2\x2\x2\x634\x625\x3\x2\x2\x2\x634\x626\x3\x2");
		sb.Append("\x2\x2\x634\x627\x3\x2\x2\x2\x634\x628\x3\x2\x2\x2\x634\x62C");
		sb.Append("\x3\x2\x2\x2\x634\x630\x3\x2\x2\x2\x634\x632\x3\x2\x2\x2\x635");
		sb.Append("\x645\x3\x2\x2\x2\x636\x637\f\x6\x2\x2\x637\x638\t\x16\x2\x2");
		sb.Append("\x638\x644\x5p\x39\a\x639\x63A\f\x4\x2\x2\x63A\x63B\t\x17\x2");
		sb.Append("\x2\x63B\x644\x5p\x39\x5\x63C\x63D\f\x3\x2\x2\x63D\x63E\x5\x108");
		sb.Append("\x85\x2\x63E\x63F\x5p\x39\x4\x63F\x644\x3\x2\x2\x2\x640\x641");
		sb.Append("\f\f\x2\x2\x641\x642\a\x1B\x2\x2\x642\x644\x5\x104\x83\x2\x643");
		sb.Append("\x636\x3\x2\x2\x2\x643\x639\x3\x2\x2\x2\x643\x63C\x3\x2\x2\x2");
		sb.Append("\x643\x640\x3\x2\x2\x2\x644\x647\x3\x2\x2\x2\x645\x643\x3\x2");
		sb.Append("\x2\x2\x645\x646\x3\x2\x2\x2\x646q\x3\x2\x2\x2\x647\x645\x3");
		sb.Append("\x2\x2\x2\x648\x651\aj\x2\x2\x649\x651\x5\xFE\x80\x2\x64A\x651");
		sb.Append("\x5\xB4[\x2\x64B\x651\a\x140\x2\x2\x64C\x64D\a\x158\x2\x2\x64D");
		sb.Append("\x64E\x5r:\x2\x64E\x64F\a\x159\x2\x2\x64F\x651\x3\x2\x2\x2\x650");
		sb.Append("\x648\x3\x2\x2\x2\x650\x649\x3\x2\x2\x2\x650\x64A\x3\x2\x2\x2");
		sb.Append("\x650\x64B\x3\x2\x2\x2\x650\x64C\x3\x2\x2\x2\x651s\x3\x2\x2");
		sb.Append("\x2\x652\x653\x5\x12\n\x2\x653u\x3\x2\x2\x2\x654\x657\a\xBB");
		sb.Append("\x2\x2\x655\x656\a\x139\x2\x2\x656\x658\a\x15A\x2\x2\x657\x655");
		sb.Append("\x3\x2\x2\x2\x657\x658\x3\x2\x2\x2\x658\x659\x3\x2\x2\x2\x659");
		sb.Append("\x65E\x5x=\x2\x65A\x65B\a\x15A\x2\x2\x65B\x65D\x5x=\x2\x65C");
		sb.Append("\x65A\x3\x2\x2\x2\x65D\x660\x3\x2\x2\x2\x65E\x65C\x3\x2\x2\x2");
		sb.Append("\x65E\x65F\x3\x2\x2\x2\x65Fw\x3\x2\x2\x2\x660\x65E\x3\x2\x2");
		sb.Append("\x2\x661\x666\x5\x104\x83\x2\x662\x663\a\x158\x2\x2\x663\x664");
		sb.Append("\x5\xECw\x2\x664\x665\a\x159\x2\x2\x665\x667\x3\x2\x2\x2\x666");
		sb.Append("\x662\x3\x2\x2\x2\x666\x667\x3\x2\x2\x2\x667\x668\x3\x2\x2\x2");
		sb.Append("\x668\x669\a\b\x2\x2\x669\x66A\a\x158\x2\x2\x66A\x66B\x5\x12");
		sb.Append("\n\x2\x66B\x66C\a\x159\x2\x2\x66Cy\x3\x2\x2\x2\x66D\x670\x5");
		sb.Append("\xEAv\x2\x66E\x670\a\x140\x2\x2\x66F\x66D\x3\x2\x2\x2\x66F\x66E");
		sb.Append("\x3\x2\x2\x2\x670\x673\x3\x2\x2\x2\x671\x674\a\x147\x2\x2\x672");
		sb.Append("\x674\x5\x10A\x86\x2\x673\x671\x3\x2\x2\x2\x673\x672\x3\x2\x2");
		sb.Append("\x2\x674\x675\x3\x2\x2\x2\x675\x67E\x5p\x39\x2\x676\x677\x5");
		sb.Append("\x104\x83\x2\x677\x678\a\x153\x2\x2\x678\x679\x5\x104\x83\x2");
		sb.Append("\x679\x67A\a\x158\x2\x2\x67A\x67B\x5\xCA\x66\x2\x67B\x67C\a");
		sb.Append("\x159\x2\x2\x67C\x67E\x3\x2\x2\x2\x67D\x66F\x3\x2\x2\x2\x67D");
		sb.Append("\x676\x3\x2\x2\x2\x67E{\x3\x2\x2\x2\x67F\x684\x5~@\x2\x680\x681");
		sb.Append("\a\x15A\x2\x2\x681\x683\x5~@\x2\x682\x680\x3\x2\x2\x2\x683\x686");
		sb.Append("\x3\x2\x2\x2\x684\x682\x3\x2\x2\x2\x684\x685\x3\x2\x2\x2\x685");
		sb.Append("}\x3\x2\x2\x2\x686\x684\x3\x2\x2\x2\x687\x68C\x5\x80\x41\x2");
		sb.Append("\x688\x689\a\x6\x2\x2\x689\x68B\x5\x80\x41\x2\x68A\x688\x3\x2");
		sb.Append("\x2\x2\x68B\x68E\x3\x2\x2\x2\x68C\x68A\x3\x2\x2\x2\x68C\x68D");
		sb.Append("\x3\x2\x2\x2\x68D\x7F\x3\x2\x2\x2\x68E\x68C\x3\x2\x2\x2\x68F");
		sb.Append("\x694\x5\x82\x42\x2\x690\x691\av\x2\x2\x691\x693\x5\x82\x42");
		sb.Append("\x2\x692\x690\x3\x2\x2\x2\x693\x696\x3\x2\x2\x2\x694\x692\x3");
		sb.Append("\x2\x2\x2\x694\x695\x3\x2\x2\x2\x695\x81\x3\x2\x2\x2\x696\x694");
		sb.Append("\x3\x2\x2\x2\x697\x699\ai\x2\x2\x698\x697\x3\x2\x2\x2\x698\x699");
		sb.Append("\x3\x2\x2\x2\x699\x69A\x3\x2\x2\x2\x69A\x69B\x5\x84\x43\x2\x69B");
		sb.Append("\x83\x3\x2\x2\x2\x69C\x69D\a\x41\x2\x2\x69D\x69E\a\x158\x2\x2");
		sb.Append("\x69E\x69F\x5t;\x2\x69F\x6A0\a\x159\x2\x2\x6A0\x6D4\x3\x2\x2");
		sb.Append("\x2\x6A1\x6A2\x5p\x39\x2\x6A2\x6A3\x5\x108\x85\x2\x6A3\x6A4");
		sb.Append("\x5p\x39\x2\x6A4\x6D4\x3\x2\x2\x2\x6A5\x6A6\x5p\x39\x2\x6A6");
		sb.Append("\x6A7\x5\x108\x85\x2\x6A7\x6A8\t\x18\x2\x2\x6A8\x6A9\a\x158");
		sb.Append("\x2\x2\x6A9\x6AA\x5t;\x2\x6AA\x6AB\a\x159\x2\x2\x6AB\x6D4\x3");
		sb.Append("\x2\x2\x2\x6AC\x6AE\x5p\x39\x2\x6AD\x6AF\ai\x2\x2\x6AE\x6AD");
		sb.Append("\x3\x2\x2\x2\x6AE\x6AF\x3\x2\x2\x2\x6AF\x6B0\x3\x2\x2\x2\x6B0");
		sb.Append("\x6B1\a\r\x2\x2\x6B1\x6B2\x5p\x39\x2\x6B2\x6B3\a\x6\x2\x2\x6B3");
		sb.Append("\x6B4\x5p\x39\x2\x6B4\x6D4\x3\x2\x2\x2\x6B5\x6B7\x5p\x39\x2");
		sb.Append("\x6B6\x6B8\ai\x2\x2\x6B7\x6B6\x3\x2\x2\x2\x6B7\x6B8\x3\x2\x2");
		sb.Append("\x2\x6B8\x6B9\x3\x2\x2\x2\x6B9\x6BA\aW\x2\x2\x6BA\x6BD\a\x158");
		sb.Append("\x2\x2\x6BB\x6BE\x5t;\x2\x6BC\x6BE\x5\xCA\x66\x2\x6BD\x6BB\x3");
		sb.Append("\x2\x2\x2\x6BD\x6BC\x3\x2\x2\x2\x6BE\x6BF\x3\x2\x2\x2\x6BF\x6C0");
		sb.Append("\a\x159\x2\x2\x6C0\x6D4\x3\x2\x2\x2\x6C1\x6C3\x5p\x39\x2\x6C2");
		sb.Append("\x6C4\ai\x2\x2\x6C3\x6C2\x3\x2\x2\x2\x6C3\x6C4\x3\x2\x2\x2\x6C4");
		sb.Append("\x6C5\x3\x2\x2\x2\x6C5\x6C6\a\x62\x2\x2\x6C6\x6C9\x5p\x39\x2");
		sb.Append("\x6C7\x6C8\a=\x2\x2\x6C8\x6CA\x5p\x39\x2\x6C9\x6C7\x3\x2\x2");
		sb.Append("\x2\x6C9\x6CA\x3\x2\x2\x2\x6CA\x6D4\x3\x2\x2\x2\x6CB\x6CC\x5");
		sb.Append("p\x39\x2\x6CC\x6CD\a]\x2\x2\x6CD\x6CE\x5\xF6|\x2\x6CE\x6D4\x3");
		sb.Append("\x2\x2\x2\x6CF\x6D0\a\x158\x2\x2\x6D0\x6D1\x5~@\x2\x6D1\x6D2");
		sb.Append("\a\x159\x2\x2\x6D2\x6D4\x3\x2\x2\x2\x6D3\x69C\x3\x2\x2\x2\x6D3");
		sb.Append("\x6A1\x3\x2\x2\x2\x6D3\x6A5\x3\x2\x2\x2\x6D3\x6AC\x3\x2\x2\x2");
		sb.Append("\x6D3\x6B5\x3\x2\x2\x2\x6D3\x6C1\x3\x2\x2\x2\x6D3\x6CB\x3\x2");
		sb.Append("\x2\x2\x6D3\x6CF\x3\x2\x2\x2\x6D4\x85\x3\x2\x2\x2\x6D5\x6DB");
		sb.Append("\x5\x8A\x46\x2\x6D6\x6D7\a\x158\x2\x2\x6D7\x6D8\x5\x86\x44\x2");
		sb.Append("\x6D8\x6D9\a\x159\x2\x2\x6D9\x6DB\x3\x2\x2\x2\x6DA\x6D5\x3\x2");
		sb.Append("\x2\x2\x6DA\x6D6\x3\x2\x2\x2\x6DB\x6DF\x3\x2\x2\x2\x6DC\x6DE");
		sb.Append("\x5\x88\x45\x2\x6DD\x6DC\x3\x2\x2\x2\x6DE\x6E1\x3\x2\x2\x2\x6DF");
		sb.Append("\x6DD\x3\x2\x2\x2\x6DF\x6E0\x3\x2\x2\x2\x6E0\x87\x3\x2\x2\x2");
		sb.Append("\x6E1\x6DF\x3\x2\x2\x2\x6E2\x6E4\a\xAD\x2\x2\x6E3\x6E5\a\x4");
		sb.Append("\x2\x2\x6E4\x6E3\x3\x2\x2\x2\x6E4\x6E5\x3\x2\x2\x2\x6E5\x6E9");
		sb.Append("\x3\x2\x2\x2\x6E6\x6E9\a>\x2\x2\x6E7\x6E9\a[\x2\x2\x6E8\x6E2");
		sb.Append("\x3\x2\x2\x2\x6E8\x6E6\x3\x2\x2\x2\x6E8\x6E7\x3\x2\x2\x2\x6E9");
		sb.Append("\x6F3\x3\x2\x2\x2\x6EA\x6F4\x5\x8A\x46\x2\x6EB\x6EC\a\x158\x2");
		sb.Append("\x2\x6EC\x6ED\x5\x86\x44\x2\x6ED\x6EE\a\x159\x2\x2\x6EE\x6F0");
		sb.Append("\x3\x2\x2\x2\x6EF\x6EB\x3\x2\x2\x2\x6F0\x6F1\x3\x2\x2\x2\x6F1");
		sb.Append("\x6EF\x3\x2\x2\x2\x6F1\x6F2\x3\x2\x2\x2\x6F2\x6F4\x3\x2\x2\x2");
		sb.Append("\x6F3\x6EA\x3\x2\x2\x2\x6F3\x6EF\x3\x2\x2\x2\x6F4\x89\x3\x2");
		sb.Append("\x2\x2\x6F5\x6F7\a\x96\x2\x2\x6F6\x6F8\t\x19\x2\x2\x6F7\x6F6");
		sb.Append("\x3\x2\x2\x2\x6F7\x6F8\x3\x2\x2\x2\x6F8\x702\x3\x2\x2\x2\x6F9");
		sb.Append("\x6FA\a\xA6\x2\x2\x6FA\x6FC\x5p\x39\x2\x6FB\x6FD\az\x2\x2\x6FC");
		sb.Append("\x6FB\x3\x2\x2\x2\x6FC\x6FD\x3\x2\x2\x2\x6FD\x700\x3\x2\x2\x2");
		sb.Append("\x6FE\x6FF\a\xBB\x2\x2\x6FF\x701\a\x12A\x2\x2\x700\x6FE\x3\x2");
		sb.Append("\x2\x2\x700\x701\x3\x2\x2\x2\x701\x703\x3\x2\x2\x2\x702\x6F9");
		sb.Append("\x3\x2\x2\x2\x702\x703\x3\x2\x2\x2\x703\x704\x3\x2\x2\x2\x704");
		sb.Append("\x707\x5\x9CO\x2\x705\x706\a\\\x2\x2\x706\x708\x5\xE2r\x2\x707");
		sb.Append("\x705\x3\x2\x2\x2\x707\x708\x3\x2\x2\x2\x708\x712\x3\x2\x2\x2");
		sb.Append("\x709\x70A\aL\x2\x2\x70A\x70F\x5\xA2R\x2\x70B\x70C\a\x15A\x2");
		sb.Append("\x2\x70C\x70E\x5\xA2R\x2\x70D\x70B\x3\x2\x2\x2\x70E\x711\x3");
		sb.Append("\x2\x2\x2\x70F\x70D\x3\x2\x2\x2\x70F\x710\x3\x2\x2\x2\x710\x713");
		sb.Append("\x3\x2\x2\x2\x711\x70F\x3\x2\x2\x2\x712\x709\x3\x2\x2\x2\x712");
		sb.Append("\x713\x3\x2\x2\x2\x713\x716\x3\x2\x2\x2\x714\x715\a\xB9\x2\x2");
		sb.Append("\x715\x717\x5~@\x2\x716\x714\x3\x2\x2\x2\x716\x717\x3\x2\x2");
		sb.Append("\x2\x717\x722\x3\x2\x2\x2\x718\x719\aQ\x2\x2\x719\x71A\a\x11");
		sb.Append("\x2\x2\x71A\x71F\x5\x94K\x2\x71B\x71C\a\x15A\x2\x2\x71C\x71E");
		sb.Append("\x5\x94K\x2\x71D\x71B\x3\x2\x2\x2\x71E\x721\x3\x2\x2\x2\x71F");
		sb.Append("\x71D\x3\x2\x2\x2\x71F\x720\x3\x2\x2\x2\x720\x723\x3\x2\x2\x2");
		sb.Append("\x721\x71F\x3\x2\x2\x2\x722\x718\x3\x2\x2\x2\x722\x723\x3\x2");
		sb.Append("\x2\x2\x723\x726\x3\x2\x2\x2\x724\x725\aR\x2\x2\x725\x727\x5");
		sb.Append("~@\x2\x726\x724\x3\x2\x2\x2\x726\x727\x3\x2\x2\x2\x727\x8B\x3");
		sb.Append("\x2\x2\x2\x728\x729\aw\x2\x2\x729\x72A\a\x11\x2\x2\x72A\x72F");
		sb.Append("\x5\x92J\x2\x72B\x72C\a\x15A\x2\x2\x72C\x72E\x5\x92J\x2\x72D");
		sb.Append("\x72B\x3\x2\x2\x2\x72E\x731\x3\x2\x2\x2\x72F\x72D\x3\x2\x2\x2");
		sb.Append("\x72F\x730\x3\x2\x2\x2\x730\x73D\x3\x2\x2\x2\x731\x72F\x3\x2");
		sb.Append("\x2\x2\x732\x733\a\x101\x2\x2\x733\x734\x5p\x39\x2\x734\x73B");
		sb.Append("\t\x1A\x2\x2\x735\x736\a\x44\x2\x2\x736\x737\t\x1B\x2\x2\x737");
		sb.Append("\x738\x5p\x39\x2\x738\x739\t\x1A\x2\x2\x739\x73A\a\x102\x2\x2");
		sb.Append("\x73A\x73C\x3\x2\x2\x2\x73B\x735\x3\x2\x2\x2\x73B\x73C\x3\x2");
		sb.Append("\x2\x2\x73C\x73E\x3\x2\x2\x2\x73D\x732\x3\x2\x2\x2\x73D\x73E");
		sb.Append("\x3\x2\x2\x2\x73E\x8D\x3\x2\x2\x2\x73F\x740\aG\x2\x2\x740\x753");
		sb.Append("\a\xF\x2\x2\x741\x742\aG\x2\x2\x742\x743\a\x138\x2\x2\x743\x745");
		sb.Append("\a\xC0\x2\x2\x744\x746\x5\x90I\x2\x745\x744\x3\x2\x2\x2\x745");
		sb.Append("\x746\x3\x2\x2\x2\x746\x753\x3\x2\x2\x2\x747\x748\aG\x2\x2\x748");
		sb.Append("\x749\a\x138\x2\x2\x749\x74D\a\x10A\x2\x2\x74A\x74B\a\x158\x2");
		sb.Append("\x2\x74B\x74C\a\x143\x2\x2\x74C\x74E\a\x159\x2\x2\x74D\x74A");
		sb.Append("\x3\x2\x2\x2\x74D\x74E\x3\x2\x2\x2\x74E\x750\x3\x2\x2\x2\x74F");
		sb.Append("\x751\x5\x90I\x2\x750\x74F\x3\x2\x2\x2\x750\x751\x3\x2\x2\x2");
		sb.Append("\x751\x753\x3\x2\x2\x2\x752\x73F\x3\x2\x2\x2\x752\x741\x3\x2");
		sb.Append("\x2\x2\x752\x747\x3\x2\x2\x2\x753\x8F\x3\x2\x2\x2\x754\x759");
		sb.Append("\a\x15A\x2\x2\x755\x756\a\x144\x2\x2\x756\x75A\a\xC2\x2\x2\x757");
		sb.Append("\x75A\a\x12D\x2\x2\x758\x75A\a\x116\x2\x2\x759\x755\x3\x2\x2");
		sb.Append("\x2\x759\x757\x3\x2\x2\x2\x759\x758\x3\x2\x2\x2\x75A\x91\x3");
		sb.Append("\x2\x2\x2\x75B\x75D\x5p\x39\x2\x75C\x75E\t\x1C\x2\x2\x75D\x75C");
		sb.Append("\x3\x2\x2\x2\x75D\x75E\x3\x2\x2\x2\x75E\x93\x3\x2\x2\x2\x75F");
		sb.Append("\x760\x5p\x39\x2\x760\x95\x3\x2\x2\x2\x761\x762\au\x2\x2\x762");
		sb.Append("\x763\a\x158\x2\x2\x763\x768\x5\x98M\x2\x764\x765\a\x15A\x2");
		sb.Append("\x2\x765\x767\x5\x98M\x2\x766\x764\x3\x2\x2\x2\x767\x76A\x3");
		sb.Append("\x2\x2\x2\x768\x766\x3\x2\x2\x2\x768\x769\x3\x2\x2\x2\x769\x76B");
		sb.Append("\x3\x2\x2\x2\x76A\x768\x3\x2\x2\x2\x76B\x76C\a\x159\x2\x2\x76C");
		sb.Append("\x97\x3\x2\x2\x2\x76D\x76E\a\xD9\x2\x2\x76E\x79B\a\x141\x2\x2");
		sb.Append("\x76F\x770\t\x1D\x2\x2\x770\x79B\aQ\x2\x2\x771\x772\t\x1E\x2");
		sb.Append("\x2\x772\x79B\a\xAD\x2\x2\x773\x774\t\x1F\x2\x2\x774\x79B\a");
		sb.Append("^\x2\x2\x775\x776\a\xD8\x2\x2\x776\x79B\a\x136\x2\x2\x777\x778");
		sb.Append("\a\xDC\x2\x2\x778\x79B\aw\x2\x2\x779\x79B\a\xEB\x2\x2\x77A\x77B");
		sb.Append("\a\xE9\x2\x2\x77B\x79B\a|\x2\x2\x77C\x77D\a\xEA\x2\x2\x77D\x79B");
		sb.Append("\a|\x2\x2\x77E\x77F\a\xF5\x2\x2\x77F\x79B\a\x141\x2\x2\x780");
		sb.Append("\x781\a\xF6\x2\x2\x781\x79B\a\x141\x2\x2\x782\x783\a\x104\x2");
		sb.Append("\x2\x783\x784\aG\x2\x2\x784\x785\a\x158\x2\x2\x785\x78A\x5\x9A");
		sb.Append("N\x2\x786\x787\a\x15A\x2\x2\x787\x789\x5\x9AN\x2\x788\x786\x3");
		sb.Append("\x2\x2\x2\x789\x78C\x3\x2\x2\x2\x78A\x788\x3\x2\x2\x2\x78A\x78B");
		sb.Append("\x3\x2\x2\x2\x78B\x78D\x3\x2\x2\x2\x78C\x78A\x3\x2\x2\x2\x78D");
		sb.Append("\x78E\a\x159\x2\x2\x78E\x79B\x3\x2\x2\x2\x78F\x790\a\x104\x2");
		sb.Append("\x2\x790\x791\aG\x2\x2\x791\x79B\a\x131\x2\x2\x792\x793\a\x108");
		sb.Append("\x2\x2\x793\x79B\t \x2\x2\x794\x79B\a\x111\x2\x2\x795\x796\a");
		sb.Append("\x115\x2\x2\x796\x79B\a|\x2\x2\x797\x798\a\xB2\x2\x2\x798\x799");
		sb.Append("\a|\x2\x2\x799\x79B\a\x143\x2\x2\x79A\x76D\x3\x2\x2\x2\x79A");
		sb.Append("\x76F\x3\x2\x2\x2\x79A\x771\x3\x2\x2\x2\x79A\x773\x3\x2\x2\x2");
		sb.Append("\x79A\x775\x3\x2\x2\x2\x79A\x777\x3\x2\x2\x2\x79A\x779\x3\x2");
		sb.Append("\x2\x2\x79A\x77A\x3\x2\x2\x2\x79A\x77C\x3\x2\x2\x2\x79A\x77E");
		sb.Append("\x3\x2\x2\x2\x79A\x780\x3\x2\x2\x2\x79A\x782\x3\x2\x2\x2\x79A");
		sb.Append("\x78F\x3\x2\x2\x2\x79A\x792\x3\x2\x2\x2\x79A\x794\x3\x2\x2\x2");
		sb.Append("\x79A\x795\x3\x2\x2\x2\x79A\x797\x3\x2\x2\x2\x79B\x99\x3\x2");
		sb.Append("\x2\x2\x79C\x7A0\a\x140\x2\x2\x79D\x7A1\a\x131\x2\x2\x79E\x79F");
		sb.Append("\a\x147\x2\x2\x79F\x7A1\x5\xFE\x80\x2\x7A0\x79D\x3\x2\x2\x2");
		sb.Append("\x7A0\x79E\x3\x2\x2\x2\x7A1\x9B\x3\x2\x2\x2\x7A2\x7A7\x5\x9E");
		sb.Append("P\x2\x7A3\x7A4\a\x15A\x2\x2\x7A4\x7A6\x5\x9EP\x2\x7A5\x7A3\x3");
		sb.Append("\x2\x2\x2\x7A6\x7A9\x3\x2\x2\x2\x7A7\x7A5\x3\x2\x2\x2\x7A7\x7A8");
		sb.Append("\x3\x2\x2\x2\x7A8\x9D\x3\x2\x2\x2\x7A9\x7A7\x3\x2\x2\x2\x7AA");
		sb.Append("\x7AB\x5\xE2r\x2\x7AB\x7AC\a\x153\x2\x2\x7AC\x7AE\x3\x2\x2\x2");
		sb.Append("\x7AD\x7AA\x3\x2\x2\x2\x7AD\x7AE\x3\x2\x2\x2\x7AE\x7B2\x3\x2");
		sb.Append("\x2\x2\x7AF\x7B3\a\x15D\x2\x2\x7B0\x7B1\a\x157\x2\x2\x7B1\x7B3");
		sb.Append("\t!\x2\x2\x7B2\x7AF\x3\x2\x2\x2\x7B2\x7B0\x3\x2\x2\x2\x7B3\x7C0");
		sb.Append("\x3\x2\x2\x2\x7B4\x7B5\x5\xC8\x65\x2\x7B5\x7B6\a\x147\x2\x2");
		sb.Append("\x7B6\x7B7\x5p\x39\x2\x7B7\x7C0\x3\x2\x2\x2\x7B8\x7BD\x5p\x39");
		sb.Append("\x2\x7B9\x7BB\a\b\x2\x2\x7BA\x7B9\x3\x2\x2\x2\x7BA\x7BB\x3\x2");
		sb.Append("\x2\x2\x7BB\x7BC\x3\x2\x2\x2\x7BC\x7BE\x5\xC8\x65\x2\x7BD\x7BA");
		sb.Append("\x3\x2\x2\x2\x7BD\x7BE\x3\x2\x2\x2\x7BE\x7C0\x3\x2\x2\x2\x7BF");
		sb.Append("\x7AD\x3\x2\x2\x2\x7BF\x7B4\x3\x2\x2\x2\x7BF\x7B8\x3\x2\x2\x2");
		sb.Append("\x7C0\x9F\x3\x2\x2\x2\x7C1\x7C2\a\x109\x2\x2\x7C2\x7C3\a\x11");
		sb.Append("\x2\x2\x7C3\x7C4\x5\xCA\x66\x2\x7C4\xA1\x3\x2\x2\x2\x7C5\x7CB");
		sb.Append("\x5\xA4S\x2\x7C6\x7C7\a\x158\x2\x2\x7C7\x7C8\x5\xA4S\x2\x7C8");
		sb.Append("\x7C9\a\x159\x2\x2\x7C9\x7CB\x3\x2\x2\x2\x7CA\x7C5\x3\x2\x2");
		sb.Append("\x2\x7CA\x7C6\x3\x2\x2\x2\x7CB\xA3\x3\x2\x2\x2\x7CC\x7D0\x5");
		sb.Append("\xA6T\x2\x7CD\x7CF\x5\xAAV\x2\x7CE\x7CD\x3\x2\x2\x2\x7CF\x7D2");
		sb.Append("\x3\x2\x2\x2\x7D0\x7CE\x3\x2\x2\x2\x7D0\x7D1\x3\x2\x2\x2\x7D1");
		sb.Append("\xA5\x3\x2\x2\x2\x7D2\x7D0\x3\x2\x2\x2\x7D3\x7D5\x5\xACW\x2");
		sb.Append("\x7D4\x7D6\x5\xB8]\x2\x7D5\x7D4\x3\x2\x2\x2\x7D5\x7D6\x3\x2");
		sb.Append("\x2\x2\x7D6\x7F7\x3\x2\x2\x2\x7D7\x7D9\x5\xAEX\x2\x7D8\x7DA");
		sb.Append("\x5\xB8]\x2\x7D9\x7D8\x3\x2\x2\x2\x7D9\x7DA\x3\x2\x2\x2\x7DA");
		sb.Append("\x7F7\x3\x2\x2\x2\x7DB\x7E0\x5\xB2Z\x2\x7DC\x7DE\x5\xB8]\x2");
		sb.Append("\x7DD\x7DF\x5\xC6\x64\x2\x7DE\x7DD\x3\x2\x2\x2\x7DE\x7DF\x3");
		sb.Append("\x2\x2\x2\x7DF\x7E1\x3\x2\x2\x2\x7E0\x7DC\x3\x2\x2\x2\x7E0\x7E1");
		sb.Append("\x3\x2\x2\x2\x7E1\x7F7\x3\x2\x2\x2\x7E2\x7E3\x5\xA8U\x2\x7E3");
		sb.Append("\x7E4\x5\xB8]\x2\x7E4\x7F7\x3\x2\x2\x2\x7E5\x7E7\x5\xB4[\x2");
		sb.Append("\x7E6\x7E8\x5\xB8]\x2\x7E7\x7E6\x3\x2\x2\x2\x7E7\x7E8\x3\x2");
		sb.Append("\x2\x2\x7E8\x7F7\x3\x2\x2\x2\x7E9\x7EB\a\x140\x2\x2\x7EA\x7EC");
		sb.Append("\x5\xB8]\x2\x7EB\x7EA\x3\x2\x2\x2\x7EB\x7EC\x3\x2\x2\x2\x7EC");
		sb.Append("\x7F7\x3\x2\x2\x2\x7ED\x7EE\a\x140\x2\x2\x7EE\x7EF\a\x153\x2");
		sb.Append("\x2\x7EF\x7F4\x5\xB4[\x2\x7F0\x7F2\x5\xB8]\x2\x7F1\x7F3\x5\xC6");
		sb.Append("\x64\x2\x7F2\x7F1\x3\x2\x2\x2\x7F2\x7F3\x3\x2\x2\x2\x7F3\x7F5");
		sb.Append("\x3\x2\x2\x2\x7F4\x7F0\x3\x2\x2\x2\x7F4\x7F5\x3\x2\x2\x2\x7F5");
		sb.Append("\x7F7\x3\x2\x2\x2\x7F6\x7D3\x3\x2\x2\x2\x7F6\x7D7\x3\x2\x2\x2");
		sb.Append("\x7F6\x7DB\x3\x2\x2\x2\x7F6\x7E2\x3\x2\x2\x2\x7F6\x7E5\x3\x2");
		sb.Append("\x2\x2\x7F6\x7E9\x3\x2\x2\x2\x7F6\x7ED\x3\x2\x2\x2\x7F7\xA7");
		sb.Append("\x3\x2\x2\x2\x7F8\x7F9\a\x14\x2\x2\x7F9\x7FA\a\x158\x2\x2\x7FA");
		sb.Append("\x7FB\a\x15\x2\x2\x7FB\x7FC\x5\xE2r\x2\x7FC\x7FD\a\x15A\x2\x2");
		sb.Append("\x7FD\x7FE\t\"\x2\x2\x7FE\x7FF\a\x159\x2\x2\x7FF\xA9\x3\x2\x2");
		sb.Append("\x2\x800\x802\aY\x2\x2\x801\x800\x3\x2\x2\x2\x801\x802\x3\x2");
		sb.Append("\x2\x2\x802\x808\x3\x2\x2\x2\x803\x805\t#\x2\x2\x804\x806\a");
		sb.Append("x\x2\x2\x805\x804\x3\x2\x2\x2\x805\x806\x3\x2\x2\x2\x806\x808");
		sb.Append("\x3\x2\x2\x2\x807\x801\x3\x2\x2\x2\x807\x803\x3\x2\x2\x2\x808");
		sb.Append("\x80A\x3\x2\x2\x2\x809\x80B\t$\x2\x2\x80A\x809\x3\x2\x2\x2\x80A");
		sb.Append("\x80B\x3\x2\x2\x2\x80B\x80C\x3\x2\x2\x2\x80C\x80D\a^\x2\x2\x80D");
		sb.Append("\x80E\x5\xA2R\x2\x80E\x80F\ao\x2\x2\x80F\x810\x5~@\x2\x810\x81B");
		sb.Append("\x3\x2\x2\x2\x811\x812\a%\x2\x2\x812\x813\a^\x2\x2\x813\x81B");
		sb.Append("\x5\xA2R\x2\x814\x815\a%\x2\x2\x815\x816\a\xBF\x2\x2\x816\x81B");
		sb.Append("\x5\xA2R\x2\x817\x818\ax\x2\x2\x818\x819\a\xBF\x2\x2\x819\x81B");
		sb.Append("\x5\xA2R\x2\x81A\x807\x3\x2\x2\x2\x81A\x811\x3\x2\x2\x2\x81A");
		sb.Append("\x814\x3\x2\x2\x2\x81A\x817\x3\x2\x2\x2\x81B\xAB\x3\x2\x2\x2");
		sb.Append("\x81C\x81E\x5\xE2r\x2\x81D\x81F\x5\xBC_\x2\x81E\x81D\x3\x2\x2");
		sb.Append("\x2\x81E\x81F\x3\x2\x2\x2\x81F\xAD\x3\x2\x2\x2\x820\x821\as");
		sb.Append("\x2\x2\x821\x822\a\x158\x2\x2\x822\x823\a\x10\x2\x2\x823\x824");
		sb.Append("\a\x143\x2\x2\x824\x82E\a\x15A\x2\x2\x825\x82A\x5\xB0Y\x2\x826");
		sb.Append("\x827\a\x15A\x2\x2\x827\x829\x5\xB0Y\x2\x828\x826\x3\x2\x2\x2");
		sb.Append("\x829\x82C\x3\x2\x2\x2\x82A\x828\x3\x2\x2\x2\x82A\x82B\x3\x2");
		sb.Append("\x2\x2\x82B\x82F\x3\x2\x2\x2\x82C\x82A\x3\x2\x2\x2\x82D\x82F");
		sb.Append("\x5\x104\x83\x2\x82E\x825\x3\x2\x2\x2\x82E\x82D\x3\x2\x2\x2");
		sb.Append("\x82F\x830\x3\x2\x2\x2\x830\x831\a\x159\x2\x2\x831\xAF\x3\x2");
		sb.Append("\x2\x2\x832\x833\x5\x104\x83\x2\x833\x834\a\x147\x2\x2\x834");
		sb.Append("\x835\t%\x2\x2\x835\xB1\x3\x2\x2\x2\x836\x83C\x5t;\x2\x837\x838");
		sb.Append("\a\x158\x2\x2\x838\x839\x5t;\x2\x839\x83A\a\x159\x2\x2\x83A");
		sb.Append("\x83C\x3\x2\x2\x2\x83B\x836\x3\x2\x2\x2\x83B\x837\x3\x2\x2\x2");
		sb.Append("\x83C\xB3\x3\x2\x2\x2\x83D\x89F\x5\xCEh\x2\x83E\x89F\x5\xD0");
		sb.Append("i\x2\x83F\x840\x5\xF8}\x2\x840\x842\a\x158\x2\x2\x841\x843\x5");
		sb.Append("\xCA\x66\x2\x842\x841\x3\x2\x2\x2\x842\x843\x3\x2\x2\x2\x843");
		sb.Append("\x844\x3\x2\x2\x2\x844\x845\a\x159\x2\x2\x845\x89F\x3\x2\x2");
		sb.Append("\x2\x846\x847\a\xC3\x2\x2\x847\x848\a\x158\x2\x2\x848\x849\a");
		sb.Append("\x15D\x2\x2\x849\x89F\a\x159\x2\x2\x84A\x84B\a\xC5\x2\x2\x84B");
		sb.Append("\x84C\a\x158\x2\x2\x84C\x84D\x5p\x39\x2\x84D\x84E\a\b\x2\x2");
		sb.Append("\x84E\x84F\x5\xFA~\x2\x84F\x850\a\x159\x2\x2\x850\x89F\x3\x2");
		sb.Append("\x2\x2\x851\x852\a#\x2\x2\x852\x853\a\x158\x2\x2\x853\x854\x5");
		sb.Append("\xFA~\x2\x854\x855\a\x15A\x2\x2\x855\x858\x5p\x39\x2\x856\x857");
		sb.Append("\a\x15A\x2\x2\x857\x859\x5p\x39\x2\x858\x856\x3\x2\x2\x2\x858");
		sb.Append("\x859\x3\x2\x2\x2\x859\x85A\x3\x2\x2\x2\x85A\x85B\a\x159\x2");
		sb.Append("\x2\x85B\x89F\x3\x2\x2\x2\x85C\x85D\a\xC7\x2\x2\x85D\x85E\a");
		sb.Append("\x158\x2\x2\x85E\x85F\a\x15D\x2\x2\x85F\x89F\a\x159\x2\x2\x860");
		sb.Append("\x861\a\x1A\x2\x2\x861\x862\a\x158\x2\x2\x862\x863\x5\xCA\x66");
		sb.Append("\x2\x863\x864\a\x159\x2\x2\x864\x89F\x3\x2\x2\x2\x865\x89F\a");
		sb.Append(")\x2\x2\x866\x89F\a*\x2\x2\x867\x868\a\xCE\x2\x2\x868\x869\a");
		sb.Append("\x158\x2\x2\x869\x86A\x5\xB6\\\x2\x86A\x86B\a\x15A\x2\x2\x86B");
		sb.Append("\x86C\x5p\x39\x2\x86C\x86D\a\x15A\x2\x2\x86D\x86E\x5p\x39\x2");
		sb.Append("\x86E\x86F\a\x159\x2\x2\x86F\x89F\x3\x2\x2\x2\x870\x871\a\xCF");
		sb.Append("\x2\x2\x871\x872\a\x158\x2\x2\x872\x873\x5\xB6\\\x2\x873\x874");
		sb.Append("\a\x15A\x2\x2\x874\x875\x5p\x39\x2\x875\x876\a\x15A\x2\x2\x876");
		sb.Append("\x877\x5p\x39\x2\x877\x878\a\x159\x2\x2\x878\x89F\x3\x2\x2\x2");
		sb.Append("\x879\x87A\a\xD0\x2\x2\x87A\x87B\a\x158\x2\x2\x87B\x87C\x5\xB6");
		sb.Append("\\\x2\x87C\x87D\a\x15A\x2\x2\x87D\x87E\x5p\x39\x2\x87E\x87F");
		sb.Append("\a\x159\x2\x2\x87F\x89F\x3\x2\x2\x2\x880\x881\a\xD1\x2\x2\x881");
		sb.Append("\x882\a\x158\x2\x2\x882\x883\x5\xB6\\\x2\x883\x884\a\x15A\x2");
		sb.Append("\x2\x884\x885\x5p\x39\x2\x885\x886\a\x159\x2\x2\x886\x89F\x3");
		sb.Append("\x2\x2\x2\x887\x888\aS\x2\x2\x888\x889\a\x158\x2\x2\x889\x88C");
		sb.Append("\x5\xFA~\x2\x88A\x88B\a\x15A\x2\x2\x88B\x88D\a\x141\x2\x2\x88C");
		sb.Append("\x88A\x3\x2\x2\x2\x88C\x88D\x3\x2\x2\x2\x88D\x890\x3\x2\x2\x2");
		sb.Append("\x88E\x88F\a\x15A\x2\x2\x88F\x891\a\x141\x2\x2\x890\x88E\x3");
		sb.Append("\x2\x2\x2\x890\x891\x3\x2\x2\x2\x891\x892\x3\x2\x2\x2\x892\x893");
		sb.Append("\a\x159\x2\x2\x893\x89F\x3\x2\x2\x2\x894\x89F\a\xF8\x2\x2\x895");
		sb.Append("\x896\ak\x2\x2\x896\x897\a\x158\x2\x2\x897\x898\x5p\x39\x2\x898");
		sb.Append("\x899\a\x15A\x2\x2\x899\x89A\x5p\x39\x2\x89A\x89B\a\x159\x2");
		sb.Append("\x2\x89B\x89F\x3\x2\x2\x2\x89C\x89F\a\x9A\x2\x2\x89D\x89F\a");
		sb.Append("\xA0\x2\x2\x89E\x83D\x3\x2\x2\x2\x89E\x83E\x3\x2\x2\x2\x89E");
		sb.Append("\x83F\x3\x2\x2\x2\x89E\x846\x3\x2\x2\x2\x89E\x84A\x3\x2\x2\x2");
		sb.Append("\x89E\x851\x3\x2\x2\x2\x89E\x85C\x3\x2\x2\x2\x89E\x860\x3\x2");
		sb.Append("\x2\x2\x89E\x865\x3\x2\x2\x2\x89E\x866\x3\x2\x2\x2\x89E\x867");
		sb.Append("\x3\x2\x2\x2\x89E\x870\x3\x2\x2\x2\x89E\x879\x3\x2\x2\x2\x89E");
		sb.Append("\x880\x3\x2\x2\x2\x89E\x887\x3\x2\x2\x2\x89E\x894\x3\x2\x2\x2");
		sb.Append("\x89E\x895\x3\x2\x2\x2\x89E\x89C\x3\x2\x2\x2\x89E\x89D\x3\x2");
		sb.Append("\x2\x2\x89F\xB5\x3\x2\x2\x2\x8A0\x8A1\a\x142\x2\x2\x8A1\xB7");
		sb.Append("\x3\x2\x2\x2\x8A2\x8A4\a\b\x2\x2\x8A3\x8A2\x3\x2\x2\x2\x8A3");
		sb.Append("\x8A4\x3\x2\x2\x2\x8A4\x8A5\x3\x2\x2\x2\x8A5\x8A6\x5\xBA^\x2");
		sb.Append("\x8A6\xB9\x3\x2\x2\x2\x8A7\x8A9\x5\x104\x83\x2\x8A8\x8AA\x5");
		sb.Append("\xBC_\x2\x8A9\x8A8\x3\x2\x2\x2\x8A9\x8AA\x3\x2\x2\x2\x8AA\xBB");
		sb.Append("\x3\x2\x2\x2\x8AB\x8AD\a\xBB\x2\x2\x8AC\x8AB\x3\x2\x2\x2\x8AC");
		sb.Append("\x8AD\x3\x2\x2\x2\x8AD\x8AE\x3\x2\x2\x2\x8AE\x8AF\a\x158\x2");
		sb.Append("\x2\x8AF\x8B4\x5\xC0\x61\x2\x8B0\x8B1\a\x15A\x2\x2\x8B1\x8B3");
		sb.Append("\x5\xC0\x61\x2\x8B2\x8B0\x3\x2\x2\x2\x8B3\x8B6\x3\x2\x2\x2\x8B4");
		sb.Append("\x8B2\x3\x2\x2\x2\x8B4\x8B5\x3\x2\x2\x2\x8B5\x8B7\x3\x2\x2\x2");
		sb.Append("\x8B6\x8B4\x3\x2\x2\x2\x8B7\x8B8\a\x159\x2\x2\x8B8\xBD\x3\x2");
		sb.Append("\x2\x2\x8B9\x8BA\a\xBB\x2\x2\x8BA\x8BB\a\x158\x2\x2\x8BB\x8C0");
		sb.Append("\x5\xC0\x61\x2\x8BC\x8BD\a\x15A\x2\x2\x8BD\x8BF\x5\xC0\x61\x2");
		sb.Append("\x8BE\x8BC\x3\x2\x2\x2\x8BF\x8C2\x3\x2\x2\x2\x8C0\x8BE\x3\x2");
		sb.Append("\x2\x2\x8C0\x8C1\x3\x2\x2\x2\x8C1\x8C3\x3\x2\x2\x2\x8C2\x8C0");
		sb.Append("\x3\x2\x2\x2\x8C3\x8C4\a\x159\x2\x2\x8C4\xBF\x3\x2\x2\x2\x8C5");
		sb.Append("\x8C7\a\xFD\x2\x2\x8C6\x8C5\x3\x2\x2\x2\x8C6\x8C7\x3\x2\x2\x2");
		sb.Append("\x8C7\x8EE\x3\x2\x2\x2\x8C8\x8C9\aX\x2\x2\x8C9\x8CA\a\x158\x2");
		sb.Append("\x2\x8CA\x8CF\x5\xC4\x63\x2\x8CB\x8CC\a\x15A\x2\x2\x8CC\x8CE");
		sb.Append("\x5\xC4\x63\x2\x8CD\x8CB\x3\x2\x2\x2\x8CE\x8D1\x3\x2\x2\x2\x8CF");
		sb.Append("\x8CD\x3\x2\x2\x2\x8CF\x8D0\x3\x2\x2\x2\x8D0\x8D2\x3\x2\x2\x2");
		sb.Append("\x8D1\x8CF\x3\x2\x2\x2\x8D2\x8D3\a\x159\x2\x2\x8D3\x8EF\x3\x2");
		sb.Append("\x2\x2\x8D4\x8D5\aX\x2\x2\x8D5\x8D6\a\x147\x2\x2\x8D6\x8EF\x5");
		sb.Append("\xC4\x63\x2\x8D7\x8E6\aH\x2\x2\x8D8\x8D9\a\x158\x2\x2\x8D9\x8DA");
		sb.Append("\x5\xC4\x63\x2\x8DA\x8DB\a\x158\x2\x2\x8DB\x8E0\x5\xC2\x62\x2");
		sb.Append("\x8DC\x8DD\a\x15A\x2\x2\x8DD\x8DF\x5\xC2\x62\x2\x8DE\x8DC\x3");
		sb.Append("\x2\x2\x2\x8DF\x8E2\x3\x2\x2\x2\x8E0\x8DE\x3\x2\x2\x2\x8E0\x8E1");
		sb.Append("\x3\x2\x2\x2\x8E1\x8E3\x3\x2\x2\x2\x8E2\x8E0\x3\x2\x2\x2\x8E3");
		sb.Append("\x8E4\a\x159\x2\x2\x8E4\x8E5\a\x159\x2\x2\x8E5\x8E7\x3\x2\x2");
		sb.Append("\x2\x8E6\x8D8\x3\x2\x2\x2\x8E6\x8E7\x3\x2\x2\x2\x8E7\x8EF\x3");
		sb.Append("\x2\x2\x2\x8E8\x8EF\a\x120\x2\x2\x8E9\x8EF\a\x122\x2\x2\x8EA");
		sb.Append("\x8EB\a\x123\x2\x2\x8EB\x8EC\a\x147\x2\x2\x8EC\x8EF\a\x141\x2");
		sb.Append("\x2\x8ED\x8EF\a\x142\x2\x2\x8EE\x8C8\x3\x2\x2\x2\x8EE\x8D4\x3");
		sb.Append("\x2\x2\x2\x8EE\x8D7\x3\x2\x2\x2\x8EE\x8E8\x3\x2\x2\x2\x8EE\x8E9");
		sb.Append("\x3\x2\x2\x2\x8EE\x8EA\x3\x2\x2\x2\x8EE\x8ED\x3\x2\x2\x2\x8EE");
		sb.Append("\x8EF\x3\x2\x2\x2\x8EF\xC1\x3\x2\x2\x2\x8F0\x8F1\a\x142\x2\x2");
		sb.Append("\x8F1\xC3\x3\x2\x2\x2\x8F2\x8F3\t&\x2\x2\x8F3\xC5\x3\x2\x2\x2");
		sb.Append("\x8F4\x8F5\a\x158\x2\x2\x8F5\x8FA\x5\xC8\x65\x2\x8F6\x8F7\a");
		sb.Append("\x15A\x2\x2\x8F7\x8F9\x5\xC8\x65\x2\x8F8\x8F6\x3\x2\x2\x2\x8F9");
		sb.Append("\x8FC\x3\x2\x2\x2\x8FA\x8F8\x3\x2\x2\x2\x8FA\x8FB\x3\x2\x2\x2");
		sb.Append("\x8FB\x8FD\x3\x2\x2\x2\x8FC\x8FA\x3\x2\x2\x2\x8FD\x8FE\a\x159");
		sb.Append("\x2\x2\x8FE\xC7\x3\x2\x2\x2\x8FF\x902\x5\x104\x83\x2\x900\x902");
		sb.Append("\a\x143\x2\x2\x901\x8FF\x3\x2\x2\x2\x901\x900\x3\x2\x2\x2\x902");
		sb.Append("\xC9\x3\x2\x2\x2\x903\x908\x5p\x39\x2\x904\x905\a\x15A\x2\x2");
		sb.Append("\x905\x907\x5p\x39\x2\x906\x904\x3\x2\x2\x2\x907\x90A\x3\x2");
		sb.Append("\x2\x2\x908\x906\x3\x2\x2\x2\x908\x909\x3\x2\x2\x2\x909\xCB");
		sb.Append("\x3\x2\x2\x2\x90A\x908\x3\x2\x2\x2\x90B\x90C\a\x13\x2\x2\x90C");
		sb.Append("\x912\x5p\x39\x2\x90D\x90E\a\xB8\x2\x2\x90E\x90F\x5p\x39\x2");
		sb.Append("\x90F\x910\a\xA4\x2\x2\x910\x911\x5p\x39\x2\x911\x913\x3\x2");
		sb.Append("\x2\x2\x912\x90D\x3\x2\x2\x2\x913\x914\x3\x2\x2\x2\x914\x912");
		sb.Append("\x3\x2\x2\x2\x914\x915\x3\x2\x2\x2\x915\x918\x3\x2\x2\x2\x916");
		sb.Append("\x917\a:\x2\x2\x917\x919\x5p\x39\x2\x918\x916\x3\x2\x2\x2\x918");
		sb.Append("\x919\x3\x2\x2\x2\x919\x91A\x3\x2\x2\x2\x91A\x91B\a;\x2\x2\x91B");
		sb.Append("\x92D\x3\x2\x2\x2\x91C\x922\a\x13\x2\x2\x91D\x91E\a\xB8\x2\x2");
		sb.Append("\x91E\x91F\x5~@\x2\x91F\x920\a\xA4\x2\x2\x920\x921\x5p\x39\x2");
		sb.Append("\x921\x923\x3\x2\x2\x2\x922\x91D\x3\x2\x2\x2\x923\x924\x3\x2");
		sb.Append("\x2\x2\x924\x922\x3\x2\x2\x2\x924\x925\x3\x2\x2\x2\x925\x928");
		sb.Append("\x3\x2\x2\x2\x926\x927\a:\x2\x2\x927\x929\x5p\x39\x2\x928\x926");
		sb.Append("\x3\x2\x2\x2\x928\x929\x3\x2\x2\x2\x929\x92A\x3\x2\x2\x2\x92A");
		sb.Append("\x92B\a;\x2\x2\x92B\x92D\x3\x2\x2\x2\x92C\x90B\x3\x2\x2\x2\x92C");
		sb.Append("\x91C\x3\x2\x2\x2\x92D\xCD\x3\x2\x2\x2\x92E\x92F\a\x10E\x2\x2");
		sb.Append("\x92F\x930\a\x158\x2\x2\x930\x931\a\x159\x2\x2\x931\x941\x5");
		sb.Append("\xD4k\x2\x932\x933\a\xD4\x2\x2\x933\x934\a\x158\x2\x2\x934\x935");
		sb.Append("\a\x159\x2\x2\x935\x941\x5\xD4k\x2\x936\x937\a\xFF\x2\x2\x937");
		sb.Append("\x938\a\x158\x2\x2\x938\x939\x5p\x39\x2\x939\x93A\a\x159\x2");
		sb.Append("\x2\x93A\x93B\x5\xD4k\x2\x93B\x941\x3\x2\x2\x2\x93C\x93D\a\x11A");
		sb.Append("\x2\x2\x93D\x93E\a\x158\x2\x2\x93E\x93F\a\x159\x2\x2\x93F\x941");
		sb.Append("\x5\xD4k\x2\x940\x92E\x3\x2\x2\x2\x940\x932\x3\x2\x2\x2\x940");
		sb.Append("\x936\x3\x2\x2\x2\x940\x93C\x3\x2\x2\x2\x941\xCF\x3\x2\x2\x2");
		sb.Append("\x942\x943\a\xC1\x2\x2\x943\x944\a\x158\x2\x2\x944\x945\x5\xD2");
		sb.Append("j\x2\x945\x947\a\x159\x2\x2\x946\x948\x5\xD4k\x2\x947\x946\x3");
		sb.Append("\x2\x2\x2\x947\x948\x3\x2\x2\x2\x948\x99E\x3\x2\x2\x2\x949\x94A");
		sb.Append("\a\xC8\x2\x2\x94A\x94B\a\x158\x2\x2\x94B\x94C\x5\xD2j\x2\x94C");
		sb.Append("\x94D\a\x159\x2\x2\x94D\x99E\x3\x2\x2\x2\x94E\x94F\a\xE3\x2");
		sb.Append("\x2\x94F\x950\a\x158\x2\x2\x950\x951\x5p\x39\x2\x951\x952\a");
		sb.Append("\x159\x2\x2\x952\x99E\x3\x2\x2\x2\x953\x954\a\xE4\x2\x2\x954");
		sb.Append("\x955\a\x158\x2\x2\x955\x956\x5\xCA\x66\x2\x956\x957\a\x159");
		sb.Append("\x2\x2\x957\x99E\x3\x2\x2\x2\x958\x959\a\xF4\x2\x2\x959\x95A");
		sb.Append("\a\x158\x2\x2\x95A\x95B\x5\xD2j\x2\x95B\x95D\a\x159\x2\x2\x95C");
		sb.Append("\x95E\x5\xD4k\x2\x95D\x95C\x3\x2\x2\x2\x95D\x95E\x3\x2\x2\x2");
		sb.Append("\x95E\x99E\x3\x2\x2\x2\x95F\x960\a\xF7\x2\x2\x960\x961\a\x158");
		sb.Append("\x2\x2\x961\x962\x5\xD2j\x2\x962\x964\a\x159\x2\x2\x963\x965");
		sb.Append("\x5\xD4k\x2\x964\x963\x3\x2\x2\x2\x964\x965\x3\x2\x2\x2\x965");
		sb.Append("\x99E\x3\x2\x2\x2\x966\x967\a\x128\x2\x2\x967\x968\a\x158\x2");
		sb.Append("\x2\x968\x969\x5\xD2j\x2\x969\x96B\a\x159\x2\x2\x96A\x96C\x5");
		sb.Append("\xD4k\x2\x96B\x96A\x3\x2\x2\x2\x96B\x96C\x3\x2\x2\x2\x96C\x99E");
		sb.Append("\x3\x2\x2\x2\x96D\x96E\a\x126\x2\x2\x96E\x96F\a\x158\x2\x2\x96F");
		sb.Append("\x970\x5\xD2j\x2\x970\x972\a\x159\x2\x2\x971\x973\x5\xD4k\x2");
		sb.Append("\x972\x971\x3\x2\x2\x2\x972\x973\x3\x2\x2\x2\x973\x99E\x3\x2");
		sb.Append("\x2\x2\x974\x975\a\x127\x2\x2\x975\x976\a\x158\x2\x2\x976\x977");
		sb.Append("\x5\xD2j\x2\x977\x979\a\x159\x2\x2\x978\x97A\x5\xD4k\x2\x979");
		sb.Append("\x978\x3\x2\x2\x2\x979\x97A\x3\x2\x2\x2\x97A\x99E\x3\x2\x2\x2");
		sb.Append("\x97B\x97C\a\x133\x2\x2\x97C\x97D\a\x158\x2\x2\x97D\x97E\x5");
		sb.Append("\xD2j\x2\x97E\x980\a\x159\x2\x2\x97F\x981\x5\xD4k\x2\x980\x97F");
		sb.Append("\x3\x2\x2\x2\x980\x981\x3\x2\x2\x2\x981\x99E\x3\x2\x2\x2\x982");
		sb.Append("\x983\a\x134\x2\x2\x983\x984\a\x158\x2\x2\x984\x985\x5\xD2j");
		sb.Append("\x2\x985\x987\a\x159\x2\x2\x986\x988\x5\xD4k\x2\x987\x986\x3");
		sb.Append("\x2\x2\x2\x987\x988\x3\x2\x2\x2\x988\x99E\x3\x2\x2\x2\x989\x98A");
		sb.Append("\a\xCC\x2\x2\x98A\x98D\a\x158\x2\x2\x98B\x98E\a\x15D\x2\x2\x98C");
		sb.Append("\x98E\x5\xD2j\x2\x98D\x98B\x3\x2\x2\x2\x98D\x98C\x3\x2\x2\x2");
		sb.Append("\x98E\x98F\x3\x2\x2\x2\x98F\x991\a\x159\x2\x2\x990\x992\x5\xD4");
		sb.Append("k\x2\x991\x990\x3\x2\x2\x2\x991\x992\x3\x2\x2\x2\x992\x99E\x3");
		sb.Append("\x2\x2\x2\x993\x994\a\xCD\x2\x2\x994\x997\a\x158\x2\x2\x995");
		sb.Append("\x998\a\x15D\x2\x2\x996\x998\x5\xD2j\x2\x997\x995\x3\x2\x2\x2");
		sb.Append("\x997\x996\x3\x2\x2\x2\x998\x999\x3\x2\x2\x2\x999\x99B\a\x159");
		sb.Append("\x2\x2\x99A\x99C\x5\xD4k\x2\x99B\x99A\x3\x2\x2\x2\x99B\x99C");
		sb.Append("\x3\x2\x2\x2\x99C\x99E\x3\x2\x2\x2\x99D\x942\x3\x2\x2\x2\x99D");
		sb.Append("\x949\x3\x2\x2\x2\x99D\x94E\x3\x2\x2\x2\x99D\x953\x3\x2\x2\x2");
		sb.Append("\x99D\x958\x3\x2\x2\x2\x99D\x95F\x3\x2\x2\x2\x99D\x966\x3\x2");
		sb.Append("\x2\x2\x99D\x96D\x3\x2\x2\x2\x99D\x974\x3\x2\x2\x2\x99D\x97B");
		sb.Append("\x3\x2\x2\x2\x99D\x982\x3\x2\x2\x2\x99D\x989\x3\x2\x2\x2\x99D");
		sb.Append("\x993\x3\x2\x2\x2\x99E\xD1\x3\x2\x2\x2\x99F\x9A1\t\x19\x2\x2");
		sb.Append("\x9A0\x99F\x3\x2\x2\x2\x9A0\x9A1\x3\x2\x2\x2\x9A1\x9A2\x3\x2");
		sb.Append("\x2\x2\x9A2\x9A3\x5p\x39\x2\x9A3\xD3\x3\x2\x2\x2\x9A4\x9A5\a");
		sb.Append("y\x2\x2\x9A5\x9A7\a\x158\x2\x2\x9A6\x9A8\x5\xA0Q\x2\x9A7\x9A6");
		sb.Append("\x3\x2\x2\x2\x9A7\x9A8\x3\x2\x2\x2\x9A8\x9AA\x3\x2\x2\x2\x9A9");
		sb.Append("\x9AB\x5\x8CG\x2\x9AA\x9A9\x3\x2\x2\x2\x9AA\x9AB\x3\x2\x2\x2");
		sb.Append("\x9AB\x9AD\x3\x2\x2\x2\x9AC\x9AE\x5\xD6l\x2\x9AD\x9AC\x3\x2");
		sb.Append("\x2\x2\x9AD\x9AE\x3\x2\x2\x2\x9AE\x9AF\x3\x2\x2\x2\x9AF\x9B0");
		sb.Append("\a\x159\x2\x2\x9B0\xD5\x3\x2\x2\x2\x9B1\x9B2\t\'\x2\x2\x9B2");
		sb.Append("\x9B3\x5\xD8m\x2\x9B3\xD7\x3\x2\x2\x2\x9B4\x9BB\x5\xDCo\x2\x9B5");
		sb.Append("\x9B6\a\r\x2\x2\x9B6\x9B7\x5\xDAn\x2\x9B7\x9B8\a\x6\x2\x2\x9B8");
		sb.Append("\x9B9\x5\xDAn\x2\x9B9\x9BB\x3\x2\x2\x2\x9BA\x9B4\x3\x2\x2\x2");
		sb.Append("\x9BA\x9B5\x3\x2\x2\x2\x9BB\xD9\x3\x2\x2\x2\x9BC\x9BF\x5\xDC");
		sb.Append("o\x2\x9BD\x9BF\x5\xDEp\x2\x9BE\x9BC\x3\x2\x2\x2\x9BE\x9BD\x3");
		sb.Append("\x2\x2\x2\x9BF\xDB\x3\x2\x2\x2\x9C0\x9C1\a\x12F\x2\x2\x9C1\x9C7");
		sb.Append("\a\x10B\x2\x2\x9C2\x9C3\a\x141\x2\x2\x9C3\x9C7\a\x10B\x2\x2");
		sb.Append("\x9C4\x9C5\a&\x2\x2\x9C5\x9C7\a\x117\x2\x2\x9C6\x9C0\x3\x2\x2");
		sb.Append("\x2\x9C6\x9C2\x3\x2\x2\x2\x9C6\x9C4\x3\x2\x2\x2\x9C7\xDD\x3");
		sb.Append("\x2\x2\x2\x9C8\x9C9\a\x12F\x2\x2\x9C9\x9CD\a\xDE\x2\x2\x9CA");
		sb.Append("\x9CB\a\x141\x2\x2\x9CB\x9CD\a\xDE\x2\x2\x9CC\x9C8\x3\x2\x2");
		sb.Append("\x2\x9CC\x9CA\x3\x2\x2\x2\x9CD\xDF\x3\x2\x2\x2\x9CE\x9CF\x5");
		sb.Append("\x104\x83\x2\x9CF\x9D0\a\x153\x2\x2\x9D0\x9D1\x5\x104\x83\x2");
		sb.Append("\x9D1\x9D2\a\x153\x2\x2\x9D2\x9D3\x5\x104\x83\x2\x9D3\x9D4\a");
		sb.Append("\x153\x2\x2\x9D4\x9E0\x3\x2\x2\x2\x9D5\x9D6\x5\x104\x83\x2\x9D6");
		sb.Append("\x9D8\a\x153\x2\x2\x9D7\x9D9\x5\x104\x83\x2\x9D8\x9D7\x3\x2");
		sb.Append("\x2\x2\x9D8\x9D9\x3\x2\x2\x2\x9D9\x9DA\x3\x2\x2\x2\x9DA\x9DB");
		sb.Append("\a\x153\x2\x2\x9DB\x9E0\x3\x2\x2\x2\x9DC\x9DD\x5\x104\x83\x2");
		sb.Append("\x9DD\x9DE\a\x153\x2\x2\x9DE\x9E0\x3\x2\x2\x2\x9DF\x9CE\x3\x2");
		sb.Append("\x2\x2\x9DF\x9D5\x3\x2\x2\x2\x9DF\x9DC\x3\x2\x2\x2\x9DF\x9E0");
		sb.Append("\x3\x2\x2\x2\x9E0\x9E1\x3\x2\x2\x2\x9E1\x9E2\x5\x104\x83\x2");
		sb.Append("\x9E2\xE1\x3\x2\x2\x2\x9E3\x9E4\x5\x104\x83\x2\x9E4\x9E6\a\x153");
		sb.Append("\x2\x2\x9E5\x9E7\x5\x104\x83\x2\x9E6\x9E5\x3\x2\x2\x2\x9E6\x9E7");
		sb.Append("\x3\x2\x2\x2\x9E7\x9E8\x3\x2\x2\x2\x9E8\x9E9\a\x153\x2\x2\x9E9");
		sb.Append("\x9EE\x3\x2\x2\x2\x9EA\x9EB\x5\x104\x83\x2\x9EB\x9EC\a\x153");
		sb.Append("\x2\x2\x9EC\x9EE\x3\x2\x2\x2\x9ED\x9E3\x3\x2\x2\x2\x9ED\x9EA");
		sb.Append("\x3\x2\x2\x2\x9ED\x9EE\x3\x2\x2\x2\x9EE\x9EF\x3\x2\x2\x2\x9EF");
		sb.Append("\x9F0\x5\x104\x83\x2\x9F0\xE3\x3\x2\x2\x2\x9F1\x9F2\x5\x104");
		sb.Append("\x83\x2\x9F2\x9F3\a\x153\x2\x2\x9F3\x9F5\x3\x2\x2\x2\x9F4\x9F1");
		sb.Append("\x3\x2\x2\x2\x9F4\x9F5\x3\x2\x2\x2\x9F5\x9F6\x3\x2\x2\x2\x9F6");
		sb.Append("\x9F7\x5\x104\x83\x2\x9F7\xE5\x3\x2\x2\x2\x9F8\x9F9\x5\x104");
		sb.Append("\x83\x2\x9F9\x9FB\a\x153\x2\x2\x9FA\x9FC\x5\x104\x83\x2\x9FB");
		sb.Append("\x9FA\x3\x2\x2\x2\x9FB\x9FC\x3\x2\x2\x2\x9FC\x9FD\x3\x2\x2\x2");
		sb.Append("\x9FD\x9FE\a\x153\x2\x2\x9FE\xA03\x3\x2\x2\x2\x9FF\xA00\x5\x104");
		sb.Append("\x83\x2\xA00\xA01\a\x153\x2\x2\xA01\xA03\x3\x2\x2\x2\xA02\x9F8");
		sb.Append("\x3\x2\x2\x2\xA02\x9FF\x3\x2\x2\x2\xA02\xA03\x3\x2\x2\x2\xA03");
		sb.Append("\xA04\x3\x2\x2\x2\xA04\xA05\x5\x104\x83\x2\xA05\xE7\x3\x2\x2");
		sb.Append("\x2\xA06\xA09\x5\xE0q\x2\xA07\xA09\a\x140\x2\x2\xA08\xA06\x3");
		sb.Append("\x2\x2\x2\xA08\xA07\x3\x2\x2\x2\xA09\xE9\x3\x2\x2\x2\xA0A\xA0B");
		sb.Append("\x5\xE2r\x2\xA0B\xA0C\a\x153\x2\x2\xA0C\xA0E\x3\x2\x2\x2\xA0D");
		sb.Append("\xA0A\x3\x2\x2\x2\xA0D\xA0E\x3\x2\x2\x2\xA0E\xA0F\x3\x2\x2\x2");
		sb.Append("\xA0F\xA10\x5\xEEx\x2\xA10\xEB\x3\x2\x2\x2\xA11\xA16\x5\xEE");
		sb.Append("x\x2\xA12\xA13\a\x15A\x2\x2\xA13\xA15\x5\xEEx\x2\xA14\xA12\x3");
		sb.Append("\x2\x2\x2\xA15\xA18\x3\x2\x2\x2\xA16\xA14\x3\x2\x2\x2\xA16\xA17");
		sb.Append("\x3\x2\x2\x2\xA17\xED\x3\x2\x2\x2\xA18\xA16\x3\x2\x2\x2\xA19");
		sb.Append("\xA1A\x5\x104\x83\x2\xA1A\xEF\x3\x2\x2\x2\xA1B\xA1E\x5\x104");
		sb.Append("\x83\x2\xA1C\xA1E\a\x140\x2\x2\xA1D\xA1B\x3\x2\x2\x2\xA1D\xA1C");
		sb.Append("\x3\x2\x2\x2\xA1E\xF1\x3\x2\x2\x2\xA1F\xA20\t\xF\x2\x2\xA20");
		sb.Append("\xF3\x3\x2\x2\x2\xA21\xA22\t(\x2\x2\xA22\xF5\x3\x2\x2\x2\xA23");
		sb.Append("\xA25\ai\x2\x2\xA24\xA23\x3\x2\x2\x2\xA24\xA25\x3\x2\x2\x2\xA25");
		sb.Append("\xA26\x3\x2\x2\x2\xA26\xA27\aj\x2\x2\xA27\xF7\x3\x2\x2\x2\xA28");
		sb.Append("\xA2E\x5\xE6t\x2\xA29\xA2E\a\x8E\x2\x2\xA2A\xA2E\a\x61\x2\x2");
		sb.Append("\xA2B\xA2E\a\xC3\x2\x2\xA2C\xA2E\a\xC7\x2\x2\xA2D\xA28\x3\x2");
		sb.Append("\x2\x2\xA2D\xA29\x3\x2\x2\x2\xA2D\xA2A\x3\x2\x2\x2\xA2D\xA2B");
		sb.Append("\x3\x2\x2\x2\xA2D\xA2C\x3\x2\x2\x2\xA2E\xF9\x3\x2\x2\x2\xA2F");
		sb.Append("\xA31\x5\x104\x83\x2\xA30\xA32\aS\x2\x2\xA31\xA30\x3\x2\x2\x2");
		sb.Append("\xA31\xA32\x3\x2\x2\x2\xA32\xA3A\x3\x2\x2\x2\xA33\xA34\a\x158");
		sb.Append("\x2\x2\xA34\xA37\t)\x2\x2\xA35\xA36\a\x15A\x2\x2\xA36\xA38\a");
		sb.Append("\x141\x2\x2\xA37\xA35\x3\x2\x2\x2\xA37\xA38\x3\x2\x2\x2\xA38");
		sb.Append("\xA39\x3\x2\x2\x2\xA39\xA3B\a\x159\x2\x2\xA3A\xA33\x3\x2\x2");
		sb.Append("\x2\xA3A\xA3B\x3\x2\x2\x2\xA3B\xFB\x3\x2\x2\x2\xA3C\xA3F\aj");
		sb.Append("\x2\x2\xA3D\xA3F\x5\xFE\x80\x2\xA3E\xA3C\x3\x2\x2\x2\xA3E\xA3D");
		sb.Append("\x3\x2\x2\x2\xA3F\xFD\x3\x2\x2\x2\xA40\xA4D\a\x143\x2\x2\xA41");
		sb.Append("\xA4D\a\x144\x2\x2\xA42\xA4D\x5\x100\x81\x2\xA43\xA45\x5\x102");
		sb.Append("\x82\x2\xA44\xA43\x3\x2\x2\x2\xA44\xA45\x3\x2\x2\x2\xA45\xA46");
		sb.Append("\x3\x2\x2\x2\xA46\xA4D\t*\x2\x2\xA47\xA49\x5\x102\x82\x2\xA48");
		sb.Append("\xA47\x3\x2\x2\x2\xA48\xA49\x3\x2\x2\x2\xA49\xA4A\x3\x2\x2\x2");
		sb.Append("\xA4A\xA4B\a\x157\x2\x2\xA4B\xA4D\t+\x2\x2\xA4C\xA40\x3\x2\x2");
		sb.Append("\x2\xA4C\xA41\x3\x2\x2\x2\xA4C\xA42\x3\x2\x2\x2\xA4C\xA44\x3");
		sb.Append("\x2\x2\x2\xA4C\xA48\x3\x2\x2\x2\xA4D\xFF\x3\x2\x2\x2\xA4E\xA50");
		sb.Append("\x5\x102\x82\x2\xA4F\xA4E\x3\x2\x2\x2\xA4F\xA50\x3\x2\x2\x2");
		sb.Append("\xA50\xA51\x3\x2\x2\x2\xA51\xA52\a\x141\x2\x2\xA52\x101\x3\x2");
		sb.Append("\x2\x2\xA53\xA54\t\x15\x2\x2\xA54\x103\x3\x2\x2\x2\xA55\xA59");
		sb.Append("\x5\x106\x84\x2\xA56\xA59\a\x13E\x2\x2\xA57\xA59\a\x13F\x2\x2");
		sb.Append("\xA58\xA55\x3\x2\x2\x2\xA58\xA56\x3\x2\x2\x2\xA58\xA57\x3\x2");
		sb.Append("\x2\x2\xA59\x105\x3\x2\x2\x2\xA5A\xA5B\t,\x2\x2\xA5B\x107\x3");
		sb.Append("\x2\x2\x2\xA5C\xA6C\a\x147\x2\x2\xA5D\xA6C\a\x148\x2\x2\xA5E");
		sb.Append("\xA6C\a\x149\x2\x2\xA5F\xA60\a\x149\x2\x2\xA60\xA6C\a\x147\x2");
		sb.Append("\x2\xA61\xA62\a\x148\x2\x2\xA62\xA6C\a\x147\x2\x2\xA63\xA64");
		sb.Append("\a\x149\x2\x2\xA64\xA6C\a\x148\x2\x2\xA65\xA66\a\x14A\x2\x2");
		sb.Append("\xA66\xA6C\a\x147\x2\x2\xA67\xA68\a\x14A\x2\x2\xA68\xA6C\a\x148");
		sb.Append("\x2\x2\xA69\xA6A\a\x14A\x2\x2\xA6A\xA6C\a\x149\x2\x2\xA6B\xA5C");
		sb.Append("\x3\x2\x2\x2\xA6B\xA5D\x3\x2\x2\x2\xA6B\xA5E\x3\x2\x2\x2\xA6B");
		sb.Append("\xA5F\x3\x2\x2\x2\xA6B\xA61\x3\x2\x2\x2\xA6B\xA63\x3\x2\x2\x2");
		sb.Append("\xA6B\xA65\x3\x2\x2\x2\xA6B\xA67\x3\x2\x2\x2\xA6B\xA69\x3\x2");
		sb.Append("\x2\x2\xA6C\x109\x3\x2\x2\x2\xA6D\xA6E\t-\x2\x2\xA6E\x10B\x3");
		sb.Append("\x2\x2\x2\x19A\x10F\x118\x11E\x12C\x130\x135\x13A\x13E\x142");
		sb.Append("\x147\x14C\x153\x156\x15A\x15D\x165\x168\x16D\x172\x178\x17D");
		sb.Append("\x182\x188\x18E\x195\x199\x19B\x1A0\x1A8\x1AD\x1B2\x1B6\x1BB");
		sb.Append("\x1BD\x1C7\x1CA\x1D2\x1D4\x1D7\x1DC\x1DF\x1E2\x1EA\x1ED\x1F4");
		sb.Append("\x1F8\x1FA\x1FC\x1FF\x202\x205\x208\x210\x212\x215\x219\x21C");
		sb.Append("\x222\x225\x232\x239\x23C\x23F\x242\x245\x249\x24C\x24F\x252");
		sb.Append("\x255\x25D\x25F\x263\x266\x26E\x272\x27A\x27D\x284\x288\x28A");
		sb.Append("\x28C\x28F\x292\x295\x29D\x2A3\x2A9\x2AB\x2AF\x2B2\x2B5\x2BA");
		sb.Append("\x2BF\x2C2\x2C6\x2C9\x2D3\x2DA\x2DD\x2E4\x2E8\x2EA\x2F2\x2F5");
		sb.Append("\x2F9\x2FF\x305\x308\x30C\x310\x313\x318\x328\x32C\x330\x332");
		sb.Append("\x335\x33D\x342\x346\x34C\x34F\x35A\x35F\x367\x36A\x371\x374");
		sb.Append("\x382\x38A\x38C\x392\x39C\x39F\x3A4\x3AA\x3AE\x3B4\x3B8\x3BF");
		sb.Append("\x3C8\x3CC\x3D2\x3D9\x3DD\x3E1\x3F2\x3F6\x401\x405\x40A\x40E");
		sb.Append("\x410\x414\x418\x41C\x420\x426\x42A\x42C\x431\x439\x43C\x43F");
		sb.Append("\x448\x44D\x452\x455\x457\x45B\x460\x464\x46A\x473\x476\x478");
		sb.Append("\x47E\x483\x48A\x497\x499\x49B\x49E\x4A1\x4A8\x4AB\x4B1\x4B6");
		sb.Append("\x4B8\x4BB\x4C1\x4C7\x4C9\x4CC\x4D0\x4D3\x4D9\x4DC\x4E0\x4E3");
		sb.Append("\x4E9\x4EC\x4EE\x4F2\x4F7\x4FF\x504\x50A\x50F\x516\x51C\x520");
		sb.Append("\x523\x527\x52D\x535\x53A\x53C\x53F\x544\x549\x54C\x551\x554");
		sb.Append("\x557\x55D\x563\x567\x56C\x56F\x575\x579\x57F\x585\x58E\x598");
		sb.Append("\x59E\x5A3\x5A6\x5B1\x5B3\x5B6\x5C0\x5C2\x5C5\x5C7\x5CA\x5CD");
		sb.Append("\x5D0\x5D3\x5D6\x5E4\x5E7\x5EA\x5F3\x5F6\x5F9\x601\x604\x612");
		sb.Append("\x615\x61C\x61E\x634\x643\x645\x650\x657\x65E\x666\x66F\x673");
		sb.Append("\x67D\x684\x68C\x694\x698\x6AE\x6B7\x6BD\x6C3\x6C9\x6D3\x6DA");
		sb.Append("\x6DF\x6E4\x6E8\x6F1\x6F3\x6F7\x6FC\x700\x702\x707\x70F\x712");
		sb.Append("\x716\x71F\x722\x726\x72F\x73B\x73D\x745\x74D\x750\x752\x759");
		sb.Append("\x75D\x768\x78A\x79A\x7A0\x7A7\x7AD\x7B2\x7BA\x7BD\x7BF\x7CA");
		sb.Append("\x7D0\x7D5\x7D9\x7DE\x7E0\x7E7\x7EB\x7F2\x7F4\x7F6\x801\x805");
		sb.Append("\x807\x80A\x81A\x81E\x82A\x82E\x83B\x842\x858\x88C\x890\x89E");
		sb.Append("\x8A3\x8A9\x8AC\x8B4\x8C0\x8C6\x8CF\x8E0\x8E6\x8EE\x8FA\x901");
		sb.Append("\x908\x914\x918\x924\x928\x92C\x940\x947\x95D\x964\x96B\x972");
		sb.Append("\x979\x980\x987\x98D\x991\x997\x99B\x99D\x9A0\x9A7\x9AA\x9AD");
		sb.Append("\x9BA\x9BE\x9C6\x9CC\x9D8\x9DF\x9E6\x9ED\x9F4\x9FB\xA02\xA08");
		sb.Append("\xA0D\xA16\xA1D\xA24\xA2D\xA31\xA37\xA3A\xA3E\xA44\xA48\xA4C");
		sb.Append("\xA4F\xA58\xA6B");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
