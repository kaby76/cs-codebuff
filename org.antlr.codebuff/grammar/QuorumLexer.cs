//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Quorum.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class QuorumLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OUTPUT=1, ON=2, CREATE=3, CONSTANT=4, ELSE_IF=5, ME=6, UNTIL=7, PUBLIC=8, 
		PRIVATE=9, ALERT=10, DETECT=11, ALWAYS=12, CHECK=13, PARENT=14, BLUEPRINT=15, 
		NATIVE=16, INHERITS=17, CAST=18, INPUT=19, SAY=20, NOW=21, WHILE=22, PACKAGE_NAME=23, 
		TIMES=24, REPEAT=25, ELSE=26, RETURNS=27, RETURN=28, AND=29, OR=30, NULL=31, 
		ACTION=32, COLON=33, INTEGER_KEYWORD=34, NUMBER_KEYWORD=35, TEXT=36, BOOLEAN_KEYWORD=37, 
		USE=38, NOT=39, NOTEQUALS=40, PERIOD=41, COMMA=42, EQUALITY=43, GREATER=44, 
		GREATER_EQUAL=45, LESS=46, LESS_EQUAL=47, PLUS=48, MINUS=49, MULTIPLY=50, 
		DIVIDE=51, MODULO=52, LEFT_SQR_BRACE=53, RIGHT_SQR_BRACE=54, LEFT_PAREN=55, 
		RIGHT_PAREN=56, DOUBLE_QUOTE=57, IF=58, END=59, CLASS=60, BOOLEAN=61, 
		INT=62, DECIMAL=63, ID=64, STRING=65, NEWLINE=66, WS=67, COMMENTS=68;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"OUTPUT", "ON", "CREATE", "CONSTANT", "ELSE_IF", "ME", "UNTIL", "PUBLIC", 
		"PRIVATE", "ALERT", "DETECT", "ALWAYS", "CHECK", "PARENT", "BLUEPRINT", 
		"NATIVE", "INHERITS", "CAST", "INPUT", "SAY", "NOW", "WHILE", "PACKAGE_NAME", 
		"TIMES", "REPEAT", "ELSE", "RETURNS", "RETURN", "AND", "OR", "NULL", "ACTION", 
		"COLON", "INTEGER_KEYWORD", "NUMBER_KEYWORD", "TEXT", "BOOLEAN_KEYWORD", 
		"USE", "NOT", "NOTEQUALS", "PERIOD", "COMMA", "EQUALITY", "GREATER", "GREATER_EQUAL", 
		"LESS", "LESS_EQUAL", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MODULO", 
		"LEFT_SQR_BRACE", "RIGHT_SQR_BRACE", "LEFT_PAREN", "RIGHT_PAREN", "DOUBLE_QUOTE", 
		"IF", "END", "CLASS", "BOOLEAN", "INT", "DECIMAL", "ID", "STRING", "NEWLINE", 
		"WS", "COMMENTS"
	};


	public QuorumLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'output'", "'on'", "'create'", "'constant'", "'elseif'", "'me'", 
		"'until'", "'public'", "'private'", "'alert'", "'detect'", "'always'", 
		"'check'", "'parent'", "'blueprint'", "'system'", "'is'", "'cast'", "'input'", 
		"'say'", "'now'", "'while'", "'package'", "'times'", "'repeat'", "'else'", 
		"'returns'", "'return'", "'and'", "'or'", "'undefined'", "'action'", "':'", 
		"'integer'", "'number'", "'text'", "'boolean'", "'use'", null, null, "'.'", 
		"','", "'='", "'>'", "'>='", "'<'", "'<='", "'+'", "'-'", "'*'", "'/'", 
		"'mod'", "'['", "']'", "'('", "')'", "'\"'", "'if'", "'end'", "'class'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OUTPUT", "ON", "CREATE", "CONSTANT", "ELSE_IF", "ME", "UNTIL", 
		"PUBLIC", "PRIVATE", "ALERT", "DETECT", "ALWAYS", "CHECK", "PARENT", "BLUEPRINT", 
		"NATIVE", "INHERITS", "CAST", "INPUT", "SAY", "NOW", "WHILE", "PACKAGE_NAME", 
		"TIMES", "REPEAT", "ELSE", "RETURNS", "RETURN", "AND", "OR", "NULL", "ACTION", 
		"COLON", "INTEGER_KEYWORD", "NUMBER_KEYWORD", "TEXT", "BOOLEAN_KEYWORD", 
		"USE", "NOT", "NOTEQUALS", "PERIOD", "COMMA", "EQUALITY", "GREATER", "GREATER_EQUAL", 
		"LESS", "LESS_EQUAL", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MODULO", 
		"LEFT_SQR_BRACE", "RIGHT_SQR_BRACE", "LEFT_PAREN", "RIGHT_PAREN", "DOUBLE_QUOTE", 
		"IF", "END", "CLASS", "BOOLEAN", "INT", "DECIMAL", "ID", "STRING", "NEWLINE", 
		"WS", "COMMENTS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Quorum.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static QuorumLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2\x46");
		sb.Append("\x210\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6");
		sb.Append("\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f");
		sb.Append("\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4");
		sb.Append("\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16");
		sb.Append("\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B");
		sb.Append("\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4");
		sb.Append(" \t \x4!\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4");
		sb.Append("(\t(\x4)\t)\x4*\t*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30");
		sb.Append("\t\x30\x4\x31\t\x31\x4\x32\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4");
		sb.Append("\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37\x4\x38\t\x38\x4\x39\t\x39");
		sb.Append("\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4@\t@\x4\x41\t\x41");
		sb.Append("\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45\x3\x2\x3");
		sb.Append("\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x4\x3");
		sb.Append("\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3");
		sb.Append("\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3");
		sb.Append("\x6\x3\x6\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\t");
		sb.Append("\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n");
		sb.Append("\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f");
		sb.Append("\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\xE\x3");
		sb.Append("\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3");
		sb.Append("\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3");
		sb.Append("\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11");
		sb.Append("\x3\x11\x3\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3");
		sb.Append("\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15");
		sb.Append("\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3");
		sb.Append("\x17\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18");
		sb.Append("\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3");
		sb.Append("\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1B");
		sb.Append("\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3");
		sb.Append("\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D");
		sb.Append("\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3");
		sb.Append("\x1F\x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3!\x3!\x3!\x3");
		sb.Append("!\x3!\x3!\x3!\x3\"\x3\"\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3$");
		sb.Append("\x3$\x3$\x3$\x3$\x3$\x3$\x3%\x3%\x3%\x3%\x3%\x3&\x3&\x3&\x3");
		sb.Append("&\x3&\x3&\x3&\x3&\x3\'\x3\'\x3\'\x3\'\x3(\x3(\x3(\x3(\x3(\x3");
		sb.Append("(\x5(\x17C\n(\x3)\x3)\x3)\x3)\x3)\x3*\x3*\x3+\x3+\x3,\x3,\x3");
		sb.Append("-\x3-\x3.\x3.\x3.\x3/\x3/\x3\x30\x3\x30\x3\x30\x3\x31\x3\x31");
		sb.Append("\x3\x32\x3\x32\x3\x33\x3\x33\x3\x34\x3\x34\x3\x35\x3\x35\x3");
		sb.Append("\x35\x3\x35\x3\x36\x3\x36\x3\x37\x3\x37\x3\x38\x3\x38\x3\x39");
		sb.Append("\x3\x39\x3:\x3:\x3;\x3;\x3;\x3<\x3<\x3<\x3<\x3=\x3=\x3=\x3=");
		sb.Append("\x3=\x3=\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x5>\x1BF\n>\x3");
		sb.Append("?\x6?\x1C2\n?\r?\xE?\x1C3\x3@\x6@\x1C7\n@\r@\xE@\x1C8\x3@\x3");
		sb.Append("@\a@\x1CD\n@\f@\xE@\x1D0\v@\x5@\x1D2\n@\x3\x41\x3\x41\a\x41");
		sb.Append("\x1D6\n\x41\f\x41\xE\x41\x1D9\v\x41\x3\x42\x3\x42\a\x42\x1DD");
		sb.Append("\n\x42\f\x42\xE\x42\x1E0\v\x42\x3\x42\x3\x42\x3\x43\x5\x43\x1E5");
		sb.Append("\n\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x44\x6\x44\x1EC\n\x44");
		sb.Append("\r\x44\xE\x44\x1ED\x3\x44\x3\x44\x3\x45\x3\x45\x3\x45\x3\x45");
		sb.Append("\a\x45\x1F6\n\x45\f\x45\xE\x45\x1F9\v\x45\x3\x45\x5\x45\x1FC");
		sb.Append("\n\x45\x3\x45\x3\x45\x5\x45\x200\n\x45\x3\x45\x3\x45\x3\x45");
		sb.Append("\x3\x45\a\x45\x206\n\x45\f\x45\xE\x45\x209\v\x45\x3\x45\x3\x45");
		sb.Append("\x5\x45\x20D\n\x45\x3\x45\x3\x45\x4\x1DE\x207\x2\x46\x3\x3\x5");
		sb.Append("\x4\a\x5\t\x6\v\a\r\b\xF\t\x11\n\x13\v\x15\f\x17\r\x19\xE\x1B");
		sb.Append("\xF\x1D\x10\x1F\x11!\x12#\x13%\x14\'\x15)\x16+\x17-\x18/\x19");
		sb.Append("\x31\x1A\x33\x1B\x35\x1C\x37\x1D\x39\x1E;\x1F= ?!\x41\"\x43");
		sb.Append("#\x45$G%I&K\'M(O)Q*S+U,W-Y.[/]\x30_\x31\x61\x32\x63\x33\x65");
		sb.Append("\x34g\x35i\x36k\x37m\x38o\x39q:s;u<w=y>{?}@\x7F\x41\x81\x42");
		sb.Append("\x83\x43\x85\x44\x87\x45\x89\x46\x3\x2\a\x4\x2PPpp\x4\x2\x43");
		sb.Append("\\\x63|\x6\x2\x32;\x43\\\x61\x61\x63|\x5\x2\v\f\xF\xF\"\"\x4");
		sb.Append("\x2\f\f\xF\xF\x21E\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a");
		sb.Append("\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2");
		sb.Append("\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2");
		sb.Append("\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2");
		sb.Append("\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3");
		sb.Append("\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2");
		sb.Append(")\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2/\x3\x2\x2\x2");
		sb.Append("\x2\x31\x3\x2\x2\x2\x2\x33\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2\x2");
		sb.Append("\x37\x3\x2\x2\x2\x2\x39\x3\x2\x2\x2\x2;\x3\x2\x2\x2\x2=\x3\x2");
		sb.Append("\x2\x2\x2?\x3\x2\x2\x2\x2\x41\x3\x2\x2\x2\x2\x43\x3\x2\x2\x2");
		sb.Append("\x2\x45\x3\x2\x2\x2\x2G\x3\x2\x2\x2\x2I\x3\x2\x2\x2\x2K\x3\x2");
		sb.Append("\x2\x2\x2M\x3\x2\x2\x2\x2O\x3\x2\x2\x2\x2Q\x3\x2\x2\x2\x2S\x3");
		sb.Append("\x2\x2\x2\x2U\x3\x2\x2\x2\x2W\x3\x2\x2\x2\x2Y\x3\x2\x2\x2\x2");
		sb.Append("[\x3\x2\x2\x2\x2]\x3\x2\x2\x2\x2_\x3\x2\x2\x2\x2\x61\x3\x2\x2");
		sb.Append("\x2\x2\x63\x3\x2\x2\x2\x2\x65\x3\x2\x2\x2\x2g\x3\x2\x2\x2\x2");
		sb.Append("i\x3\x2\x2\x2\x2k\x3\x2\x2\x2\x2m\x3\x2\x2\x2\x2o\x3\x2\x2\x2");
		sb.Append("\x2q\x3\x2\x2\x2\x2s\x3\x2\x2\x2\x2u\x3\x2\x2\x2\x2w\x3\x2\x2");
		sb.Append("\x2\x2y\x3\x2\x2\x2\x2{\x3\x2\x2\x2\x2}\x3\x2\x2\x2\x2\x7F\x3");
		sb.Append("\x2\x2\x2\x2\x81\x3\x2\x2\x2\x2\x83\x3\x2\x2\x2\x2\x85\x3\x2");
		sb.Append("\x2\x2\x2\x87\x3\x2\x2\x2\x2\x89\x3\x2\x2\x2\x3\x8B\x3\x2\x2");
		sb.Append("\x2\x5\x92\x3\x2\x2\x2\a\x95\x3\x2\x2\x2\t\x9C\x3\x2\x2\x2\v");
		sb.Append("\xA5\x3\x2\x2\x2\r\xAC\x3\x2\x2\x2\xF\xAF\x3\x2\x2\x2\x11\xB5");
		sb.Append("\x3\x2\x2\x2\x13\xBC\x3\x2\x2\x2\x15\xC4\x3\x2\x2\x2\x17\xCA");
		sb.Append("\x3\x2\x2\x2\x19\xD1\x3\x2\x2\x2\x1B\xD8\x3\x2\x2\x2\x1D\xDE");
		sb.Append("\x3\x2\x2\x2\x1F\xE5\x3\x2\x2\x2!\xEF\x3\x2\x2\x2#\xF6\x3\x2");
		sb.Append("\x2\x2%\xF9\x3\x2\x2\x2\'\xFE\x3\x2\x2\x2)\x104\x3\x2\x2\x2");
		sb.Append("+\x108\x3\x2\x2\x2-\x10C\x3\x2\x2\x2/\x112\x3\x2\x2\x2\x31\x11A");
		sb.Append("\x3\x2\x2\x2\x33\x120\x3\x2\x2\x2\x35\x127\x3\x2\x2\x2\x37\x12C");
		sb.Append("\x3\x2\x2\x2\x39\x134\x3\x2\x2\x2;\x13B\x3\x2\x2\x2=\x13F\x3");
		sb.Append("\x2\x2\x2?\x142\x3\x2\x2\x2\x41\x14C\x3\x2\x2\x2\x43\x153\x3");
		sb.Append("\x2\x2\x2\x45\x155\x3\x2\x2\x2G\x15D\x3\x2\x2\x2I\x164\x3\x2");
		sb.Append("\x2\x2K\x169\x3\x2\x2\x2M\x171\x3\x2\x2\x2O\x17B\x3\x2\x2\x2");
		sb.Append("Q\x17D\x3\x2\x2\x2S\x182\x3\x2\x2\x2U\x184\x3\x2\x2\x2W\x186");
		sb.Append("\x3\x2\x2\x2Y\x188\x3\x2\x2\x2[\x18A\x3\x2\x2\x2]\x18D\x3\x2");
		sb.Append("\x2\x2_\x18F\x3\x2\x2\x2\x61\x192\x3\x2\x2\x2\x63\x194\x3\x2");
		sb.Append("\x2\x2\x65\x196\x3\x2\x2\x2g\x198\x3\x2\x2\x2i\x19A\x3\x2\x2");
		sb.Append("\x2k\x19E\x3\x2\x2\x2m\x1A0\x3\x2\x2\x2o\x1A2\x3\x2\x2\x2q\x1A4");
		sb.Append("\x3\x2\x2\x2s\x1A6\x3\x2\x2\x2u\x1A8\x3\x2\x2\x2w\x1AB\x3\x2");
		sb.Append("\x2\x2y\x1AF\x3\x2\x2\x2{\x1BE\x3\x2\x2\x2}\x1C1\x3\x2\x2\x2");
		sb.Append("\x7F\x1C6\x3\x2\x2\x2\x81\x1D3\x3\x2\x2\x2\x83\x1DA\x3\x2\x2");
		sb.Append("\x2\x85\x1E4\x3\x2\x2\x2\x87\x1EB\x3\x2\x2\x2\x89\x20C\x3\x2");
		sb.Append("\x2\x2\x8B\x8C\aq\x2\x2\x8C\x8D\aw\x2\x2\x8D\x8E\av\x2\x2\x8E");
		sb.Append("\x8F\ar\x2\x2\x8F\x90\aw\x2\x2\x90\x91\av\x2\x2\x91\x4\x3\x2");
		sb.Append("\x2\x2\x92\x93\aq\x2\x2\x93\x94\ap\x2\x2\x94\x6\x3\x2\x2\x2");
		sb.Append("\x95\x96\a\x65\x2\x2\x96\x97\at\x2\x2\x97\x98\ag\x2\x2\x98\x99");
		sb.Append("\a\x63\x2\x2\x99\x9A\av\x2\x2\x9A\x9B\ag\x2\x2\x9B\b\x3\x2\x2");
		sb.Append("\x2\x9C\x9D\a\x65\x2\x2\x9D\x9E\aq\x2\x2\x9E\x9F\ap\x2\x2\x9F");
		sb.Append("\xA0\au\x2\x2\xA0\xA1\av\x2\x2\xA1\xA2\a\x63\x2\x2\xA2\xA3\a");
		sb.Append("p\x2\x2\xA3\xA4\av\x2\x2\xA4\n\x3\x2\x2\x2\xA5\xA6\ag\x2\x2");
		sb.Append("\xA6\xA7\an\x2\x2\xA7\xA8\au\x2\x2\xA8\xA9\ag\x2\x2\xA9\xAA");
		sb.Append("\ak\x2\x2\xAA\xAB\ah\x2\x2\xAB\f\x3\x2\x2\x2\xAC\xAD\ao\x2\x2");
		sb.Append("\xAD\xAE\ag\x2\x2\xAE\xE\x3\x2\x2\x2\xAF\xB0\aw\x2\x2\xB0\xB1");
		sb.Append("\ap\x2\x2\xB1\xB2\av\x2\x2\xB2\xB3\ak\x2\x2\xB3\xB4\an\x2\x2");
		sb.Append("\xB4\x10\x3\x2\x2\x2\xB5\xB6\ar\x2\x2\xB6\xB7\aw\x2\x2\xB7\xB8");
		sb.Append("\a\x64\x2\x2\xB8\xB9\an\x2\x2\xB9\xBA\ak\x2\x2\xBA\xBB\a\x65");
		sb.Append("\x2\x2\xBB\x12\x3\x2\x2\x2\xBC\xBD\ar\x2\x2\xBD\xBE\at\x2\x2");
		sb.Append("\xBE\xBF\ak\x2\x2\xBF\xC0\ax\x2\x2\xC0\xC1\a\x63\x2\x2\xC1\xC2");
		sb.Append("\av\x2\x2\xC2\xC3\ag\x2\x2\xC3\x14\x3\x2\x2\x2\xC4\xC5\a\x63");
		sb.Append("\x2\x2\xC5\xC6\an\x2\x2\xC6\xC7\ag\x2\x2\xC7\xC8\at\x2\x2\xC8");
		sb.Append("\xC9\av\x2\x2\xC9\x16\x3\x2\x2\x2\xCA\xCB\a\x66\x2\x2\xCB\xCC");
		sb.Append("\ag\x2\x2\xCC\xCD\av\x2\x2\xCD\xCE\ag\x2\x2\xCE\xCF\a\x65\x2");
		sb.Append("\x2\xCF\xD0\av\x2\x2\xD0\x18\x3\x2\x2\x2\xD1\xD2\a\x63\x2\x2");
		sb.Append("\xD2\xD3\an\x2\x2\xD3\xD4\ay\x2\x2\xD4\xD5\a\x63\x2\x2\xD5\xD6");
		sb.Append("\a{\x2\x2\xD6\xD7\au\x2\x2\xD7\x1A\x3\x2\x2\x2\xD8\xD9\a\x65");
		sb.Append("\x2\x2\xD9\xDA\aj\x2\x2\xDA\xDB\ag\x2\x2\xDB\xDC\a\x65\x2\x2");
		sb.Append("\xDC\xDD\am\x2\x2\xDD\x1C\x3\x2\x2\x2\xDE\xDF\ar\x2\x2\xDF\xE0");
		sb.Append("\a\x63\x2\x2\xE0\xE1\at\x2\x2\xE1\xE2\ag\x2\x2\xE2\xE3\ap\x2");
		sb.Append("\x2\xE3\xE4\av\x2\x2\xE4\x1E\x3\x2\x2\x2\xE5\xE6\a\x64\x2\x2");
		sb.Append("\xE6\xE7\an\x2\x2\xE7\xE8\aw\x2\x2\xE8\xE9\ag\x2\x2\xE9\xEA");
		sb.Append("\ar\x2\x2\xEA\xEB\at\x2\x2\xEB\xEC\ak\x2\x2\xEC\xED\ap\x2\x2");
		sb.Append("\xED\xEE\av\x2\x2\xEE \x3\x2\x2\x2\xEF\xF0\au\x2\x2\xF0\xF1");
		sb.Append("\a{\x2\x2\xF1\xF2\au\x2\x2\xF2\xF3\av\x2\x2\xF3\xF4\ag\x2\x2");
		sb.Append("\xF4\xF5\ao\x2\x2\xF5\"\x3\x2\x2\x2\xF6\xF7\ak\x2\x2\xF7\xF8");
		sb.Append("\au\x2\x2\xF8$\x3\x2\x2\x2\xF9\xFA\a\x65\x2\x2\xFA\xFB\a\x63");
		sb.Append("\x2\x2\xFB\xFC\au\x2\x2\xFC\xFD\av\x2\x2\xFD&\x3\x2\x2\x2\xFE");
		sb.Append("\xFF\ak\x2\x2\xFF\x100\ap\x2\x2\x100\x101\ar\x2\x2\x101\x102");
		sb.Append("\aw\x2\x2\x102\x103\av\x2\x2\x103(\x3\x2\x2\x2\x104\x105\au");
		sb.Append("\x2\x2\x105\x106\a\x63\x2\x2\x106\x107\a{\x2\x2\x107*\x3\x2");
		sb.Append("\x2\x2\x108\x109\ap\x2\x2\x109\x10A\aq\x2\x2\x10A\x10B\ay\x2");
		sb.Append("\x2\x10B,\x3\x2\x2\x2\x10C\x10D\ay\x2\x2\x10D\x10E\aj\x2\x2");
		sb.Append("\x10E\x10F\ak\x2\x2\x10F\x110\an\x2\x2\x110\x111\ag\x2\x2\x111");
		sb.Append(".\x3\x2\x2\x2\x112\x113\ar\x2\x2\x113\x114\a\x63\x2\x2\x114");
		sb.Append("\x115\a\x65\x2\x2\x115\x116\am\x2\x2\x116\x117\a\x63\x2\x2\x117");
		sb.Append("\x118\ai\x2\x2\x118\x119\ag\x2\x2\x119\x30\x3\x2\x2\x2\x11A");
		sb.Append("\x11B\av\x2\x2\x11B\x11C\ak\x2\x2\x11C\x11D\ao\x2\x2\x11D\x11E");
		sb.Append("\ag\x2\x2\x11E\x11F\au\x2\x2\x11F\x32\x3\x2\x2\x2\x120\x121");
		sb.Append("\at\x2\x2\x121\x122\ag\x2\x2\x122\x123\ar\x2\x2\x123\x124\a");
		sb.Append("g\x2\x2\x124\x125\a\x63\x2\x2\x125\x126\av\x2\x2\x126\x34\x3");
		sb.Append("\x2\x2\x2\x127\x128\ag\x2\x2\x128\x129\an\x2\x2\x129\x12A\a");
		sb.Append("u\x2\x2\x12A\x12B\ag\x2\x2\x12B\x36\x3\x2\x2\x2\x12C\x12D\a");
		sb.Append("t\x2\x2\x12D\x12E\ag\x2\x2\x12E\x12F\av\x2\x2\x12F\x130\aw\x2");
		sb.Append("\x2\x130\x131\at\x2\x2\x131\x132\ap\x2\x2\x132\x133\au\x2\x2");
		sb.Append("\x133\x38\x3\x2\x2\x2\x134\x135\at\x2\x2\x135\x136\ag\x2\x2");
		sb.Append("\x136\x137\av\x2\x2\x137\x138\aw\x2\x2\x138\x139\at\x2\x2\x139");
		sb.Append("\x13A\ap\x2\x2\x13A:\x3\x2\x2\x2\x13B\x13C\a\x63\x2\x2\x13C");
		sb.Append("\x13D\ap\x2\x2\x13D\x13E\a\x66\x2\x2\x13E<\x3\x2\x2\x2\x13F");
		sb.Append("\x140\aq\x2\x2\x140\x141\at\x2\x2\x141>\x3\x2\x2\x2\x142\x143");
		sb.Append("\aw\x2\x2\x143\x144\ap\x2\x2\x144\x145\a\x66\x2\x2\x145\x146");
		sb.Append("\ag\x2\x2\x146\x147\ah\x2\x2\x147\x148\ak\x2\x2\x148\x149\a");
		sb.Append("p\x2\x2\x149\x14A\ag\x2\x2\x14A\x14B\a\x66\x2\x2\x14B@\x3\x2");
		sb.Append("\x2\x2\x14C\x14D\a\x63\x2\x2\x14D\x14E\a\x65\x2\x2\x14E\x14F");
		sb.Append("\av\x2\x2\x14F\x150\ak\x2\x2\x150\x151\aq\x2\x2\x151\x152\a");
		sb.Append("p\x2\x2\x152\x42\x3\x2\x2\x2\x153\x154\a<\x2\x2\x154\x44\x3");
		sb.Append("\x2\x2\x2\x155\x156\ak\x2\x2\x156\x157\ap\x2\x2\x157\x158\a");
		sb.Append("v\x2\x2\x158\x159\ag\x2\x2\x159\x15A\ai\x2\x2\x15A\x15B\ag\x2");
		sb.Append("\x2\x15B\x15C\at\x2\x2\x15C\x46\x3\x2\x2\x2\x15D\x15E\ap\x2");
		sb.Append("\x2\x15E\x15F\aw\x2\x2\x15F\x160\ao\x2\x2\x160\x161\a\x64\x2");
		sb.Append("\x2\x161\x162\ag\x2\x2\x162\x163\at\x2\x2\x163H\x3\x2\x2\x2");
		sb.Append("\x164\x165\av\x2\x2\x165\x166\ag\x2\x2\x166\x167\az\x2\x2\x167");
		sb.Append("\x168\av\x2\x2\x168J\x3\x2\x2\x2\x169\x16A\a\x64\x2\x2\x16A");
		sb.Append("\x16B\aq\x2\x2\x16B\x16C\aq\x2\x2\x16C\x16D\an\x2\x2\x16D\x16E");
		sb.Append("\ag\x2\x2\x16E\x16F\a\x63\x2\x2\x16F\x170\ap\x2\x2\x170L\x3");
		sb.Append("\x2\x2\x2\x171\x172\aw\x2\x2\x172\x173\au\x2\x2\x173\x174\a");
		sb.Append("g\x2\x2\x174N\x3\x2\x2\x2\x175\x176\ap\x2\x2\x176\x177\aq\x2");
		sb.Append("\x2\x177\x17C\av\x2\x2\x178\x179\aP\x2\x2\x179\x17A\aq\x2\x2");
		sb.Append("\x17A\x17C\av\x2\x2\x17B\x175\x3\x2\x2\x2\x17B\x178\x3\x2\x2");
		sb.Append("\x2\x17CP\x3\x2\x2\x2\x17D\x17E\t\x2\x2\x2\x17E\x17F\aq\x2\x2");
		sb.Append("\x17F\x180\av\x2\x2\x180\x181\a?\x2\x2\x181R\x3\x2\x2\x2\x182");
		sb.Append("\x183\a\x30\x2\x2\x183T\x3\x2\x2\x2\x184\x185\a.\x2\x2\x185");
		sb.Append("V\x3\x2\x2\x2\x186\x187\a?\x2\x2\x187X\x3\x2\x2\x2\x188\x189");
		sb.Append("\a@\x2\x2\x189Z\x3\x2\x2\x2\x18A\x18B\a@\x2\x2\x18B\x18C\a?");
		sb.Append("\x2\x2\x18C\\\x3\x2\x2\x2\x18D\x18E\a>\x2\x2\x18E^\x3\x2\x2");
		sb.Append("\x2\x18F\x190\a>\x2\x2\x190\x191\a?\x2\x2\x191`\x3\x2\x2\x2");
		sb.Append("\x192\x193\a-\x2\x2\x193\x62\x3\x2\x2\x2\x194\x195\a/\x2\x2");
		sb.Append("\x195\x64\x3\x2\x2\x2\x196\x197\a,\x2\x2\x197\x66\x3\x2\x2\x2");
		sb.Append("\x198\x199\a\x31\x2\x2\x199h\x3\x2\x2\x2\x19A\x19B\ao\x2\x2");
		sb.Append("\x19B\x19C\aq\x2\x2\x19C\x19D\a\x66\x2\x2\x19Dj\x3\x2\x2\x2");
		sb.Append("\x19E\x19F\a]\x2\x2\x19Fl\x3\x2\x2\x2\x1A0\x1A1\a_\x2\x2\x1A1");
		sb.Append("n\x3\x2\x2\x2\x1A2\x1A3\a*\x2\x2\x1A3p\x3\x2\x2\x2\x1A4\x1A5");
		sb.Append("\a+\x2\x2\x1A5r\x3\x2\x2\x2\x1A6\x1A7\a$\x2\x2\x1A7t\x3\x2\x2");
		sb.Append("\x2\x1A8\x1A9\ak\x2\x2\x1A9\x1AA\ah\x2\x2\x1AAv\x3\x2\x2\x2");
		sb.Append("\x1AB\x1AC\ag\x2\x2\x1AC\x1AD\ap\x2\x2\x1AD\x1AE\a\x66\x2\x2");
		sb.Append("\x1AEx\x3\x2\x2\x2\x1AF\x1B0\a\x65\x2\x2\x1B0\x1B1\an\x2\x2");
		sb.Append("\x1B1\x1B2\a\x63\x2\x2\x1B2\x1B3\au\x2\x2\x1B3\x1B4\au\x2\x2");
		sb.Append("\x1B4z\x3\x2\x2\x2\x1B5\x1B6\av\x2\x2\x1B6\x1B7\at\x2\x2\x1B7");
		sb.Append("\x1B8\aw\x2\x2\x1B8\x1BF\ag\x2\x2\x1B9\x1BA\ah\x2\x2\x1BA\x1BB");
		sb.Append("\a\x63\x2\x2\x1BB\x1BC\an\x2\x2\x1BC\x1BD\au\x2\x2\x1BD\x1BF");
		sb.Append("\ag\x2\x2\x1BE\x1B5\x3\x2\x2\x2\x1BE\x1B9\x3\x2\x2\x2\x1BF|");
		sb.Append("\x3\x2\x2\x2\x1C0\x1C2\x4\x32;\x2\x1C1\x1C0\x3\x2\x2\x2\x1C2");
		sb.Append("\x1C3\x3\x2\x2\x2\x1C3\x1C1\x3\x2\x2\x2\x1C3\x1C4\x3\x2\x2\x2");
		sb.Append("\x1C4~\x3\x2\x2\x2\x1C5\x1C7\x4\x32;\x2\x1C6\x1C5\x3\x2\x2\x2");
		sb.Append("\x1C7\x1C8\x3\x2\x2\x2\x1C8\x1C6\x3\x2\x2\x2\x1C8\x1C9\x3\x2");
		sb.Append("\x2\x2\x1C9\x1D1\x3\x2\x2\x2\x1CA\x1CE\x5S*\x2\x1CB\x1CD\x4");
		sb.Append("\x32;\x2\x1CC\x1CB\x3\x2\x2\x2\x1CD\x1D0\x3\x2\x2\x2\x1CE\x1CC");
		sb.Append("\x3\x2\x2\x2\x1CE\x1CF\x3\x2\x2\x2\x1CF\x1D2\x3\x2\x2\x2\x1D0");
		sb.Append("\x1CE\x3\x2\x2\x2\x1D1\x1CA\x3\x2\x2\x2\x1D1\x1D2\x3\x2\x2\x2");
		sb.Append("\x1D2\x80\x3\x2\x2\x2\x1D3\x1D7\t\x3\x2\x2\x1D4\x1D6\t\x4\x2");
		sb.Append("\x2\x1D5\x1D4\x3\x2\x2\x2\x1D6\x1D9\x3\x2\x2\x2\x1D7\x1D5\x3");
		sb.Append("\x2\x2\x2\x1D7\x1D8\x3\x2\x2\x2\x1D8\x82\x3\x2\x2\x2\x1D9\x1D7");
		sb.Append("\x3\x2\x2\x2\x1DA\x1DE\x5s:\x2\x1DB\x1DD\v\x2\x2\x2\x1DC\x1DB");
		sb.Append("\x3\x2\x2\x2\x1DD\x1E0\x3\x2\x2\x2\x1DE\x1DF\x3\x2\x2\x2\x1DE");
		sb.Append("\x1DC\x3\x2\x2\x2\x1DF\x1E1\x3\x2\x2\x2\x1E0\x1DE\x3\x2\x2\x2");
		sb.Append("\x1E1\x1E2\x5s:\x2\x1E2\x84\x3\x2\x2\x2\x1E3\x1E5\a\xF\x2\x2");
		sb.Append("\x1E4\x1E3\x3\x2\x2\x2\x1E4\x1E5\x3\x2\x2\x2\x1E5\x1E6\x3\x2");
		sb.Append("\x2\x2\x1E6\x1E7\a\f\x2\x2\x1E7\x1E8\x3\x2\x2\x2\x1E8\x1E9\b");
		sb.Append("\x43\x2\x2\x1E9\x86\x3\x2\x2\x2\x1EA\x1EC\t\x5\x2\x2\x1EB\x1EA");
		sb.Append("\x3\x2\x2\x2\x1EC\x1ED\x3\x2\x2\x2\x1ED\x1EB\x3\x2\x2\x2\x1ED");
		sb.Append("\x1EE\x3\x2\x2\x2\x1EE\x1EF\x3\x2\x2\x2\x1EF\x1F0\b\x44\x2\x2");
		sb.Append("\x1F0\x88\x3\x2\x2\x2\x1F1\x1F2\a\x31\x2\x2\x1F2\x1F3\a\x31");
		sb.Append("\x2\x2\x1F3\x1F7\x3\x2\x2\x2\x1F4\x1F6\n\x6\x2\x2\x1F5\x1F4");
		sb.Append("\x3\x2\x2\x2\x1F6\x1F9\x3\x2\x2\x2\x1F7\x1F5\x3\x2\x2\x2\x1F7");
		sb.Append("\x1F8\x3\x2\x2\x2\x1F8\x1FF\x3\x2\x2\x2\x1F9\x1F7\x3\x2\x2\x2");
		sb.Append("\x1FA\x1FC\a\xF\x2\x2\x1FB\x1FA\x3\x2\x2\x2\x1FB\x1FC\x3\x2");
		sb.Append("\x2\x2\x1FC\x1FD\x3\x2\x2\x2\x1FD\x200\a\f\x2\x2\x1FE\x200\a");
		sb.Append("\x2\x2\x3\x1FF\x1FB\x3\x2\x2\x2\x1FF\x1FE\x3\x2\x2\x2\x200\x20D");
		sb.Append("\x3\x2\x2\x2\x201\x202\a\x31\x2\x2\x202\x203\a,\x2\x2\x203\x207");
		sb.Append("\x3\x2\x2\x2\x204\x206\v\x2\x2\x2\x205\x204\x3\x2\x2\x2\x206");
		sb.Append("\x209\x3\x2\x2\x2\x207\x208\x3\x2\x2\x2\x207\x205\x3\x2\x2\x2");
		sb.Append("\x208\x20A\x3\x2\x2\x2\x209\x207\x3\x2\x2\x2\x20A\x20B\a,\x2");
		sb.Append("\x2\x20B\x20D\a\x31\x2\x2\x20C\x1F1\x3\x2\x2\x2\x20C\x201\x3");
		sb.Append("\x2\x2\x2\x20D\x20E\x3\x2\x2\x2\x20E\x20F\b\x45\x2\x2\x20F\x8A");
		sb.Append("\x3\x2\x2\x2\x12\x2\x17B\x1BE\x1C3\x1C8\x1CE\x1D1\x1D7\x1DE");
		sb.Append("\x1E4\x1ED\x1F7\x1FB\x1FF\x207\x20C\x3\x2\x3\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
