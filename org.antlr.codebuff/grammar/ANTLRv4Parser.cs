//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ANTLRv4Parser.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class ANTLRv4Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		TOKEN_REF=1, RULE_REF=2, LEXER_CHAR_SET=3, DOC_COMMENT=4, BLOCK_COMMENT=5, 
		LINE_COMMENT=6, BEGIN_ARG_ACTION=7, OPTIONS=8, TOKENS=9, CHANNELS=10, 
		IMPORT=11, FRAGMENT=12, LEXER=13, PARSER=14, GRAMMAR=15, PROTECTED=16, 
		PUBLIC=17, PRIVATE=18, RETURNS=19, LOCALS=20, THROWS=21, CATCH=22, FINALLY=23, 
		MODE=24, COLON=25, COLONCOLON=26, COMMA=27, SEMI=28, LPAREN=29, RPAREN=30, 
		RARROW=31, LT=32, GT=33, ASSIGN=34, QUESTION=35, STAR=36, PLUS=37, PLUS_ASSIGN=38, 
		OR=39, DOLLAR=40, DOT=41, RANGE=42, AT=43, POUND=44, NOT=45, RBRACE=46, 
		INT=47, STRING_LITERAL=48, UNTERMINATED_STRING_LITERAL=49, WS=50, ACTION=51, 
		ERRCHAR=52, ARG_ACTION=53, UNTERMINATED_ARG_ACTION=54, UNTERMINATED_CHAR_SET=55;
	public const int
		RULE_grammarSpec = 0, RULE_grammarType = 1, RULE_prequelConstruct = 2, 
		RULE_optionsSpec = 3, RULE_option = 4, RULE_optionValue = 5, RULE_delegateGrammars = 6, 
		RULE_delegateGrammar = 7, RULE_tokensSpec = 8, RULE_channelsSpec = 9, 
		RULE_idList = 10, RULE_action = 11, RULE_actionScopeName = 12, RULE_modeSpec = 13, 
		RULE_rules = 14, RULE_ruleSpec = 15, RULE_parserRuleSpec = 16, RULE_exceptionGroup = 17, 
		RULE_exceptionHandler = 18, RULE_finallyClause = 19, RULE_rulePrequel = 20, 
		RULE_ruleReturns = 21, RULE_throwsSpec = 22, RULE_localsSpec = 23, RULE_ruleAction = 24, 
		RULE_ruleModifiers = 25, RULE_ruleModifier = 26, RULE_ruleBlock = 27, 
		RULE_ruleAltList = 28, RULE_labeledAlt = 29, RULE_lexerRule = 30, RULE_lexerRuleBlock = 31, 
		RULE_lexerAltList = 32, RULE_lexerAlt = 33, RULE_lexerElements = 34, RULE_lexerElement = 35, 
		RULE_labeledLexerElement = 36, RULE_lexerBlock = 37, RULE_lexerCommands = 38, 
		RULE_lexerCommand = 39, RULE_lexerCommandName = 40, RULE_lexerCommandExpr = 41, 
		RULE_altList = 42, RULE_alternative = 43, RULE_element = 44, RULE_labeledElement = 45, 
		RULE_ebnf = 46, RULE_blockSuffix = 47, RULE_ebnfSuffix = 48, RULE_lexerAtom = 49, 
		RULE_atom = 50, RULE_notSet = 51, RULE_blockSet = 52, RULE_setElement = 53, 
		RULE_block = 54, RULE_ruleref = 55, RULE_range = 56, RULE_terminal = 57, 
		RULE_elementOptions = 58, RULE_elementOption = 59, RULE_id = 60;
	public static readonly string[] ruleNames = {
		"grammarSpec", "grammarType", "prequelConstruct", "optionsSpec", "option", 
		"optionValue", "delegateGrammars", "delegateGrammar", "tokensSpec", "channelsSpec", 
		"idList", "action", "actionScopeName", "modeSpec", "rules", "ruleSpec", 
		"parserRuleSpec", "exceptionGroup", "exceptionHandler", "finallyClause", 
		"rulePrequel", "ruleReturns", "throwsSpec", "localsSpec", "ruleAction", 
		"ruleModifiers", "ruleModifier", "ruleBlock", "ruleAltList", "labeledAlt", 
		"lexerRule", "lexerRuleBlock", "lexerAltList", "lexerAlt", "lexerElements", 
		"lexerElement", "labeledLexerElement", "lexerBlock", "lexerCommands", 
		"lexerCommand", "lexerCommandName", "lexerCommandExpr", "altList", "alternative", 
		"element", "labeledElement", "ebnf", "blockSuffix", "ebnfSuffix", "lexerAtom", 
		"atom", "notSet", "blockSet", "setElement", "block", "ruleref", "range", 
		"terminal", "elementOptions", "elementOption", "id"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, "'import'", 
		"'fragment'", "'lexer'", "'parser'", "'grammar'", "'protected'", "'public'", 
		"'private'", "'returns'", "'locals'", "'throws'", "'catch'", "'finally'", 
		"'mode'", "':'", "'::'", "','", "';'", "'('", "')'", "'->'", "'<'", "'>'", 
		"'='", "'?'", "'*'", "'+'", "'+='", "'|'", "'$'", "'.'", "'..'", "'@'", 
		"'#'", "'~'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TOKEN_REF", "RULE_REF", "LEXER_CHAR_SET", "DOC_COMMENT", "BLOCK_COMMENT", 
		"LINE_COMMENT", "BEGIN_ARG_ACTION", "OPTIONS", "TOKENS", "CHANNELS", "IMPORT", 
		"FRAGMENT", "LEXER", "PARSER", "GRAMMAR", "PROTECTED", "PUBLIC", "PRIVATE", 
		"RETURNS", "LOCALS", "THROWS", "CATCH", "FINALLY", "MODE", "COLON", "COLONCOLON", 
		"COMMA", "SEMI", "LPAREN", "RPAREN", "RARROW", "LT", "GT", "ASSIGN", "QUESTION", 
		"STAR", "PLUS", "PLUS_ASSIGN", "OR", "DOLLAR", "DOT", "RANGE", "AT", "POUND", 
		"NOT", "RBRACE", "INT", "STRING_LITERAL", "UNTERMINATED_STRING_LITERAL", 
		"WS", "ACTION", "ERRCHAR", "ARG_ACTION", "UNTERMINATED_ARG_ACTION", "UNTERMINATED_CHAR_SET"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ANTLRv4Parser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static ANTLRv4Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

	public ANTLRv4Parser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class GrammarSpecContext : ParserRuleContext {
		public GrammarTypeContext grammarType() {
			return GetRuleContext<GrammarTypeContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(ANTLRv4Parser.SEMI, 0); }
		public RulesContext rules() {
			return GetRuleContext<RulesContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(ANTLRv4Parser.Eof, 0); }
		public ITerminalNode DOC_COMMENT() { return GetToken(ANTLRv4Parser.DOC_COMMENT, 0); }
		public PrequelConstructContext[] prequelConstruct() {
			return GetRuleContexts<PrequelConstructContext>();
		}
		public PrequelConstructContext prequelConstruct(int i) {
			return GetRuleContext<PrequelConstructContext>(i);
		}
		public ModeSpecContext[] modeSpec() {
			return GetRuleContexts<ModeSpecContext>();
		}
		public ModeSpecContext modeSpec(int i) {
			return GetRuleContext<ModeSpecContext>(i);
		}
		public GrammarSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammarSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterGrammarSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitGrammarSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrammarSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrammarSpecContext grammarSpec() {
		GrammarSpecContext _localctx = new GrammarSpecContext(Context, State);
		EnterRule(_localctx, 0, RULE_grammarSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOC_COMMENT) {
				{
				State = 122; Match(DOC_COMMENT);
				}
			}

			State = 125; grammarType();
			State = 126; id();
			State = 127; Match(SEMI);
			State = 131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPTIONS) | (1L << TOKENS) | (1L << CHANNELS) | (1L << IMPORT) | (1L << AT))) != 0)) {
				{
				{
				State = 128; prequelConstruct();
				}
				}
				State = 133;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 134; rules();
			State = 138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MODE) {
				{
				{
				State = 135; modeSpec();
				}
				}
				State = 140;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 141; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrammarTypeContext : ParserRuleContext {
		public ITerminalNode LEXER() { return GetToken(ANTLRv4Parser.LEXER, 0); }
		public ITerminalNode GRAMMAR() { return GetToken(ANTLRv4Parser.GRAMMAR, 0); }
		public ITerminalNode PARSER() { return GetToken(ANTLRv4Parser.PARSER, 0); }
		public GrammarTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammarType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterGrammarType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitGrammarType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrammarType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrammarTypeContext grammarType() {
		GrammarTypeContext _localctx = new GrammarTypeContext(Context, State);
		EnterRule(_localctx, 2, RULE_grammarType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LEXER:
				{
				State = 143; Match(LEXER);
				State = 144; Match(GRAMMAR);
				}
				break;
			case PARSER:
				{
				State = 145; Match(PARSER);
				State = 146; Match(GRAMMAR);
				}
				break;
			case GRAMMAR:
				{
				State = 147; Match(GRAMMAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrequelConstructContext : ParserRuleContext {
		public OptionsSpecContext optionsSpec() {
			return GetRuleContext<OptionsSpecContext>(0);
		}
		public DelegateGrammarsContext delegateGrammars() {
			return GetRuleContext<DelegateGrammarsContext>(0);
		}
		public TokensSpecContext tokensSpec() {
			return GetRuleContext<TokensSpecContext>(0);
		}
		public ChannelsSpecContext channelsSpec() {
			return GetRuleContext<ChannelsSpecContext>(0);
		}
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public PrequelConstructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prequelConstruct; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterPrequelConstruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitPrequelConstruct(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrequelConstruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrequelConstructContext prequelConstruct() {
		PrequelConstructContext _localctx = new PrequelConstructContext(Context, State);
		EnterRule(_localctx, 4, RULE_prequelConstruct);
		try {
			State = 155;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPTIONS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 150; optionsSpec();
				}
				break;
			case IMPORT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 151; delegateGrammars();
				}
				break;
			case TOKENS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 152; tokensSpec();
				}
				break;
			case CHANNELS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 153; channelsSpec();
				}
				break;
			case AT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 154; action();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionsSpecContext : ParserRuleContext {
		public ITerminalNode OPTIONS() { return GetToken(ANTLRv4Parser.OPTIONS, 0); }
		public ITerminalNode RBRACE() { return GetToken(ANTLRv4Parser.RBRACE, 0); }
		public OptionContext[] option() {
			return GetRuleContexts<OptionContext>();
		}
		public OptionContext option(int i) {
			return GetRuleContext<OptionContext>(i);
		}
		public ITerminalNode[] SEMI() { return GetTokens(ANTLRv4Parser.SEMI); }
		public ITerminalNode SEMI(int i) {
			return GetToken(ANTLRv4Parser.SEMI, i);
		}
		public OptionsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionsSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterOptionsSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitOptionsSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionsSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionsSpecContext optionsSpec() {
		OptionsSpecContext _localctx = new OptionsSpecContext(Context, State);
		EnterRule(_localctx, 6, RULE_optionsSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157; Match(OPTIONS);
			State = 163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOKEN_REF || _la==RULE_REF) {
				{
				{
				State = 158; option();
				State = 159; Match(SEMI);
				}
				}
				State = 165;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 166; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(ANTLRv4Parser.ASSIGN, 0); }
		public OptionValueContext optionValue() {
			return GetRuleContext<OptionValueContext>(0);
		}
		public OptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionContext option() {
		OptionContext _localctx = new OptionContext(Context, State);
		EnterRule(_localctx, 8, RULE_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168; id();
			State = 169; Match(ASSIGN);
			State = 170; optionValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionValueContext : ParserRuleContext {
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(ANTLRv4Parser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(ANTLRv4Parser.DOT, i);
		}
		public ITerminalNode STRING_LITERAL() { return GetToken(ANTLRv4Parser.STRING_LITERAL, 0); }
		public ITerminalNode ACTION() { return GetToken(ANTLRv4Parser.ACTION, 0); }
		public ITerminalNode INT() { return GetToken(ANTLRv4Parser.INT, 0); }
		public OptionValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterOptionValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitOptionValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionValueContext optionValue() {
		OptionValueContext _localctx = new OptionValueContext(Context, State);
		EnterRule(_localctx, 10, RULE_optionValue);
		int _la;
		try {
			State = 183;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 172; id();
				State = 177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DOT) {
					{
					{
					State = 173; Match(DOT);
					State = 174; id();
					}
					}
					State = 179;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 180; Match(STRING_LITERAL);
				}
				break;
			case ACTION:
				EnterOuterAlt(_localctx, 3);
				{
				State = 181; Match(ACTION);
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 182; Match(INT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelegateGrammarsContext : ParserRuleContext {
		public ITerminalNode IMPORT() { return GetToken(ANTLRv4Parser.IMPORT, 0); }
		public DelegateGrammarContext[] delegateGrammar() {
			return GetRuleContexts<DelegateGrammarContext>();
		}
		public DelegateGrammarContext delegateGrammar(int i) {
			return GetRuleContext<DelegateGrammarContext>(i);
		}
		public ITerminalNode SEMI() { return GetToken(ANTLRv4Parser.SEMI, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(ANTLRv4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ANTLRv4Parser.COMMA, i);
		}
		public DelegateGrammarsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegateGrammars; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterDelegateGrammars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitDelegateGrammars(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelegateGrammars(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DelegateGrammarsContext delegateGrammars() {
		DelegateGrammarsContext _localctx = new DelegateGrammarsContext(Context, State);
		EnterRule(_localctx, 12, RULE_delegateGrammars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185; Match(IMPORT);
			State = 186; delegateGrammar();
			State = 191;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 187; Match(COMMA);
				State = 188; delegateGrammar();
				}
				}
				State = 193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 194; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelegateGrammarContext : ParserRuleContext {
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode ASSIGN() { return GetToken(ANTLRv4Parser.ASSIGN, 0); }
		public DelegateGrammarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegateGrammar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterDelegateGrammar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitDelegateGrammar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelegateGrammar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DelegateGrammarContext delegateGrammar() {
		DelegateGrammarContext _localctx = new DelegateGrammarContext(Context, State);
		EnterRule(_localctx, 14, RULE_delegateGrammar);
		try {
			State = 201;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 196; id();
				State = 197; Match(ASSIGN);
				State = 198; id();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 200; id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TokensSpecContext : ParserRuleContext {
		public ITerminalNode TOKENS() { return GetToken(ANTLRv4Parser.TOKENS, 0); }
		public IdListContext idList() {
			return GetRuleContext<IdListContext>(0);
		}
		public ITerminalNode RBRACE() { return GetToken(ANTLRv4Parser.RBRACE, 0); }
		public TokensSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tokensSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterTokensSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitTokensSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTokensSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TokensSpecContext tokensSpec() {
		TokensSpecContext _localctx = new TokensSpecContext(Context, State);
		EnterRule(_localctx, 16, RULE_tokensSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203; Match(TOKENS);
			State = 204; idList();
			State = 205; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChannelsSpecContext : ParserRuleContext {
		public ITerminalNode CHANNELS() { return GetToken(ANTLRv4Parser.CHANNELS, 0); }
		public ITerminalNode RBRACE() { return GetToken(ANTLRv4Parser.RBRACE, 0); }
		public IdListContext idList() {
			return GetRuleContext<IdListContext>(0);
		}
		public ChannelsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_channelsSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterChannelsSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitChannelsSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChannelsSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChannelsSpecContext channelsSpec() {
		ChannelsSpecContext _localctx = new ChannelsSpecContext(Context, State);
		EnterRule(_localctx, 18, RULE_channelsSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207; Match(CHANNELS);
			State = 209;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOKEN_REF || _la==RULE_REF) {
				{
				State = 208; idList();
				}
			}

			State = 211; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdListContext : ParserRuleContext {
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(ANTLRv4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ANTLRv4Parser.COMMA, i);
		}
		public IdListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterIdList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitIdList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdListContext idList() {
		IdListContext _localctx = new IdListContext(Context, State);
		EnterRule(_localctx, 20, RULE_idList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 213; id();
			State = 218;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 214; Match(COMMA);
					State = 215; id();
					}
					} 
				}
				State = 220;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			State = 222;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 221; Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		public ITerminalNode AT() { return GetToken(ANTLRv4Parser.AT, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode ACTION() { return GetToken(ANTLRv4Parser.ACTION, 0); }
		public ActionScopeNameContext actionScopeName() {
			return GetRuleContext<ActionScopeNameContext>(0);
		}
		public ITerminalNode COLONCOLON() { return GetToken(ANTLRv4Parser.COLONCOLON, 0); }
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 22, RULE_action);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224; Match(AT);
			State = 228;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 225; actionScopeName();
				State = 226; Match(COLONCOLON);
				}
				break;
			}
			State = 230; id();
			State = 231; Match(ACTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionScopeNameContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode LEXER() { return GetToken(ANTLRv4Parser.LEXER, 0); }
		public ITerminalNode PARSER() { return GetToken(ANTLRv4Parser.PARSER, 0); }
		public ActionScopeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionScopeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterActionScopeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitActionScopeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionScopeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionScopeNameContext actionScopeName() {
		ActionScopeNameContext _localctx = new ActionScopeNameContext(Context, State);
		EnterRule(_localctx, 24, RULE_actionScopeName);
		try {
			State = 236;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 233; id();
				}
				break;
			case LEXER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 234; Match(LEXER);
				}
				break;
			case PARSER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 235; Match(PARSER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModeSpecContext : ParserRuleContext {
		public ITerminalNode MODE() { return GetToken(ANTLRv4Parser.MODE, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(ANTLRv4Parser.SEMI, 0); }
		public LexerRuleContext[] lexerRule() {
			return GetRuleContexts<LexerRuleContext>();
		}
		public LexerRuleContext lexerRule(int i) {
			return GetRuleContext<LexerRuleContext>(i);
		}
		public ModeSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modeSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterModeSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitModeSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModeSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModeSpecContext modeSpec() {
		ModeSpecContext _localctx = new ModeSpecContext(Context, State);
		EnterRule(_localctx, 26, RULE_modeSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238; Match(MODE);
			State = 239; id();
			State = 240; Match(SEMI);
			State = 244;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TOKEN_REF) | (1L << DOC_COMMENT) | (1L << FRAGMENT))) != 0)) {
				{
				{
				State = 241; lexerRule();
				}
				}
				State = 246;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulesContext : ParserRuleContext {
		public RuleSpecContext[] ruleSpec() {
			return GetRuleContexts<RuleSpecContext>();
		}
		public RuleSpecContext ruleSpec(int i) {
			return GetRuleContext<RuleSpecContext>(i);
		}
		public RulesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rules; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterRules(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitRules(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRules(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RulesContext rules() {
		RulesContext _localctx = new RulesContext(Context, State);
		EnterRule(_localctx, 28, RULE_rules);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TOKEN_REF) | (1L << RULE_REF) | (1L << DOC_COMMENT) | (1L << FRAGMENT) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << PRIVATE))) != 0)) {
				{
				{
				State = 247; ruleSpec();
				}
				}
				State = 252;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleSpecContext : ParserRuleContext {
		public ParserRuleSpecContext parserRuleSpec() {
			return GetRuleContext<ParserRuleSpecContext>(0);
		}
		public LexerRuleContext lexerRule() {
			return GetRuleContext<LexerRuleContext>(0);
		}
		public RuleSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterRuleSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitRuleSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleSpecContext ruleSpec() {
		RuleSpecContext _localctx = new RuleSpecContext(Context, State);
		EnterRule(_localctx, 30, RULE_ruleSpec);
		try {
			State = 255;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 253; parserRuleSpec();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 254; lexerRule();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParserRuleSpecContext : ParserRuleContext {
		public ITerminalNode RULE_REF() { return GetToken(ANTLRv4Parser.RULE_REF, 0); }
		public ITerminalNode COLON() { return GetToken(ANTLRv4Parser.COLON, 0); }
		public RuleBlockContext ruleBlock() {
			return GetRuleContext<RuleBlockContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(ANTLRv4Parser.SEMI, 0); }
		public ExceptionGroupContext exceptionGroup() {
			return GetRuleContext<ExceptionGroupContext>(0);
		}
		public ITerminalNode DOC_COMMENT() { return GetToken(ANTLRv4Parser.DOC_COMMENT, 0); }
		public RuleModifiersContext ruleModifiers() {
			return GetRuleContext<RuleModifiersContext>(0);
		}
		public ITerminalNode ARG_ACTION() { return GetToken(ANTLRv4Parser.ARG_ACTION, 0); }
		public RuleReturnsContext ruleReturns() {
			return GetRuleContext<RuleReturnsContext>(0);
		}
		public ThrowsSpecContext throwsSpec() {
			return GetRuleContext<ThrowsSpecContext>(0);
		}
		public LocalsSpecContext localsSpec() {
			return GetRuleContext<LocalsSpecContext>(0);
		}
		public RulePrequelContext[] rulePrequel() {
			return GetRuleContexts<RulePrequelContext>();
		}
		public RulePrequelContext rulePrequel(int i) {
			return GetRuleContext<RulePrequelContext>(i);
		}
		public ParserRuleSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parserRuleSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterParserRuleSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitParserRuleSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParserRuleSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParserRuleSpecContext parserRuleSpec() {
		ParserRuleSpecContext _localctx = new ParserRuleSpecContext(Context, State);
		EnterRule(_localctx, 32, RULE_parserRuleSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOC_COMMENT) {
				{
				State = 257; Match(DOC_COMMENT);
				}
			}

			State = 261;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FRAGMENT) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << PRIVATE))) != 0)) {
				{
				State = 260; ruleModifiers();
				}
			}

			State = 263; Match(RULE_REF);
			State = 265;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ARG_ACTION) {
				{
				State = 264; Match(ARG_ACTION);
				}
			}

			State = 268;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURNS) {
				{
				State = 267; ruleReturns();
				}
			}

			State = 271;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THROWS) {
				{
				State = 270; throwsSpec();
				}
			}

			State = 274;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOCALS) {
				{
				State = 273; localsSpec();
				}
			}

			State = 279;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OPTIONS || _la==AT) {
				{
				{
				State = 276; rulePrequel();
				}
				}
				State = 281;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 282; Match(COLON);
			State = 283; ruleBlock();
			State = 284; Match(SEMI);
			State = 285; exceptionGroup();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionGroupContext : ParserRuleContext {
		public ExceptionHandlerContext[] exceptionHandler() {
			return GetRuleContexts<ExceptionHandlerContext>();
		}
		public ExceptionHandlerContext exceptionHandler(int i) {
			return GetRuleContext<ExceptionHandlerContext>(i);
		}
		public FinallyClauseContext finallyClause() {
			return GetRuleContext<FinallyClauseContext>(0);
		}
		public ExceptionGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionGroup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterExceptionGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitExceptionGroup(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExceptionGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionGroupContext exceptionGroup() {
		ExceptionGroupContext _localctx = new ExceptionGroupContext(Context, State);
		EnterRule(_localctx, 34, RULE_exceptionGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CATCH) {
				{
				{
				State = 287; exceptionHandler();
				}
				}
				State = 292;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 294;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FINALLY) {
				{
				State = 293; finallyClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionHandlerContext : ParserRuleContext {
		public ITerminalNode CATCH() { return GetToken(ANTLRv4Parser.CATCH, 0); }
		public ITerminalNode ARG_ACTION() { return GetToken(ANTLRv4Parser.ARG_ACTION, 0); }
		public ITerminalNode ACTION() { return GetToken(ANTLRv4Parser.ACTION, 0); }
		public ExceptionHandlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionHandler; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterExceptionHandler(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitExceptionHandler(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExceptionHandler(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionHandlerContext exceptionHandler() {
		ExceptionHandlerContext _localctx = new ExceptionHandlerContext(Context, State);
		EnterRule(_localctx, 36, RULE_exceptionHandler);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296; Match(CATCH);
			State = 297; Match(ARG_ACTION);
			State = 298; Match(ACTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyClauseContext : ParserRuleContext {
		public ITerminalNode FINALLY() { return GetToken(ANTLRv4Parser.FINALLY, 0); }
		public ITerminalNode ACTION() { return GetToken(ANTLRv4Parser.ACTION, 0); }
		public FinallyClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterFinallyClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitFinallyClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinallyClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinallyClauseContext finallyClause() {
		FinallyClauseContext _localctx = new FinallyClauseContext(Context, State);
		EnterRule(_localctx, 38, RULE_finallyClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300; Match(FINALLY);
			State = 301; Match(ACTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulePrequelContext : ParserRuleContext {
		public OptionsSpecContext optionsSpec() {
			return GetRuleContext<OptionsSpecContext>(0);
		}
		public RuleActionContext ruleAction() {
			return GetRuleContext<RuleActionContext>(0);
		}
		public RulePrequelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rulePrequel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterRulePrequel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitRulePrequel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRulePrequel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RulePrequelContext rulePrequel() {
		RulePrequelContext _localctx = new RulePrequelContext(Context, State);
		EnterRule(_localctx, 40, RULE_rulePrequel);
		try {
			State = 305;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPTIONS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 303; optionsSpec();
				}
				break;
			case AT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 304; ruleAction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleReturnsContext : ParserRuleContext {
		public ITerminalNode RETURNS() { return GetToken(ANTLRv4Parser.RETURNS, 0); }
		public ITerminalNode ARG_ACTION() { return GetToken(ANTLRv4Parser.ARG_ACTION, 0); }
		public RuleReturnsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleReturns; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterRuleReturns(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitRuleReturns(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleReturns(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleReturnsContext ruleReturns() {
		RuleReturnsContext _localctx = new RuleReturnsContext(Context, State);
		EnterRule(_localctx, 42, RULE_ruleReturns);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307; Match(RETURNS);
			State = 308; Match(ARG_ACTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowsSpecContext : ParserRuleContext {
		public ITerminalNode THROWS() { return GetToken(ANTLRv4Parser.THROWS, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(ANTLRv4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ANTLRv4Parser.COMMA, i);
		}
		public ThrowsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwsSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterThrowsSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitThrowsSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowsSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrowsSpecContext throwsSpec() {
		ThrowsSpecContext _localctx = new ThrowsSpecContext(Context, State);
		EnterRule(_localctx, 44, RULE_throwsSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 310; Match(THROWS);
			State = 311; id();
			State = 316;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 312; Match(COMMA);
				State = 313; id();
				}
				}
				State = 318;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalsSpecContext : ParserRuleContext {
		public ITerminalNode LOCALS() { return GetToken(ANTLRv4Parser.LOCALS, 0); }
		public ITerminalNode ARG_ACTION() { return GetToken(ANTLRv4Parser.ARG_ACTION, 0); }
		public LocalsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localsSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLocalsSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLocalsSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalsSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalsSpecContext localsSpec() {
		LocalsSpecContext _localctx = new LocalsSpecContext(Context, State);
		EnterRule(_localctx, 46, RULE_localsSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319; Match(LOCALS);
			State = 320; Match(ARG_ACTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleActionContext : ParserRuleContext {
		public ITerminalNode AT() { return GetToken(ANTLRv4Parser.AT, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode ACTION() { return GetToken(ANTLRv4Parser.ACTION, 0); }
		public RuleActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterRuleAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitRuleAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleActionContext ruleAction() {
		RuleActionContext _localctx = new RuleActionContext(Context, State);
		EnterRule(_localctx, 48, RULE_ruleAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322; Match(AT);
			State = 323; id();
			State = 324; Match(ACTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleModifiersContext : ParserRuleContext {
		public RuleModifierContext[] ruleModifier() {
			return GetRuleContexts<RuleModifierContext>();
		}
		public RuleModifierContext ruleModifier(int i) {
			return GetRuleContext<RuleModifierContext>(i);
		}
		public RuleModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterRuleModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitRuleModifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleModifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleModifiersContext ruleModifiers() {
		RuleModifiersContext _localctx = new RuleModifiersContext(Context, State);
		EnterRule(_localctx, 50, RULE_ruleModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 327;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 326; ruleModifier();
				}
				}
				State = 329;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FRAGMENT) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << PRIVATE))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleModifierContext : ParserRuleContext {
		public ITerminalNode PUBLIC() { return GetToken(ANTLRv4Parser.PUBLIC, 0); }
		public ITerminalNode PRIVATE() { return GetToken(ANTLRv4Parser.PRIVATE, 0); }
		public ITerminalNode PROTECTED() { return GetToken(ANTLRv4Parser.PROTECTED, 0); }
		public ITerminalNode FRAGMENT() { return GetToken(ANTLRv4Parser.FRAGMENT, 0); }
		public RuleModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterRuleModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitRuleModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleModifierContext ruleModifier() {
		RuleModifierContext _localctx = new RuleModifierContext(Context, State);
		EnterRule(_localctx, 52, RULE_ruleModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FRAGMENT) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << PRIVATE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleBlockContext : ParserRuleContext {
		public RuleAltListContext ruleAltList() {
			return GetRuleContext<RuleAltListContext>(0);
		}
		public RuleBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterRuleBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitRuleBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleBlockContext ruleBlock() {
		RuleBlockContext _localctx = new RuleBlockContext(Context, State);
		EnterRule(_localctx, 54, RULE_ruleBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333; ruleAltList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleAltListContext : ParserRuleContext {
		public LabeledAltContext[] labeledAlt() {
			return GetRuleContexts<LabeledAltContext>();
		}
		public LabeledAltContext labeledAlt(int i) {
			return GetRuleContext<LabeledAltContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(ANTLRv4Parser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(ANTLRv4Parser.OR, i);
		}
		public RuleAltListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleAltList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterRuleAltList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitRuleAltList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleAltList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleAltListContext ruleAltList() {
		RuleAltListContext _localctx = new RuleAltListContext(Context, State);
		EnterRule(_localctx, 56, RULE_ruleAltList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335; labeledAlt();
			State = 340;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 336; Match(OR);
				State = 337; labeledAlt();
				}
				}
				State = 342;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledAltContext : ParserRuleContext {
		public AlternativeContext alternative() {
			return GetRuleContext<AlternativeContext>(0);
		}
		public ITerminalNode POUND() { return GetToken(ANTLRv4Parser.POUND, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public LabeledAltContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledAlt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLabeledAlt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLabeledAlt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledAlt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledAltContext labeledAlt() {
		LabeledAltContext _localctx = new LabeledAltContext(Context, State);
		EnterRule(_localctx, 58, RULE_labeledAlt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 343; alternative();
			State = 346;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==POUND) {
				{
				State = 344; Match(POUND);
				State = 345; id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerRuleContext : ParserRuleContext {
		public ITerminalNode TOKEN_REF() { return GetToken(ANTLRv4Parser.TOKEN_REF, 0); }
		public ITerminalNode COLON() { return GetToken(ANTLRv4Parser.COLON, 0); }
		public LexerRuleBlockContext lexerRuleBlock() {
			return GetRuleContext<LexerRuleBlockContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(ANTLRv4Parser.SEMI, 0); }
		public ITerminalNode DOC_COMMENT() { return GetToken(ANTLRv4Parser.DOC_COMMENT, 0); }
		public ITerminalNode FRAGMENT() { return GetToken(ANTLRv4Parser.FRAGMENT, 0); }
		public LexerRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerRule; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLexerRule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLexerRule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerRuleContext lexerRule() {
		LexerRuleContext _localctx = new LexerRuleContext(Context, State);
		EnterRule(_localctx, 60, RULE_lexerRule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 349;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOC_COMMENT) {
				{
				State = 348; Match(DOC_COMMENT);
				}
			}

			State = 352;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FRAGMENT) {
				{
				State = 351; Match(FRAGMENT);
				}
			}

			State = 354; Match(TOKEN_REF);
			State = 355; Match(COLON);
			State = 356; lexerRuleBlock();
			State = 357; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerRuleBlockContext : ParserRuleContext {
		public LexerAltListContext lexerAltList() {
			return GetRuleContext<LexerAltListContext>(0);
		}
		public LexerRuleBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerRuleBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLexerRuleBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLexerRuleBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerRuleBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerRuleBlockContext lexerRuleBlock() {
		LexerRuleBlockContext _localctx = new LexerRuleBlockContext(Context, State);
		EnterRule(_localctx, 62, RULE_lexerRuleBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 359; lexerAltList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerAltListContext : ParserRuleContext {
		public LexerAltContext[] lexerAlt() {
			return GetRuleContexts<LexerAltContext>();
		}
		public LexerAltContext lexerAlt(int i) {
			return GetRuleContext<LexerAltContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(ANTLRv4Parser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(ANTLRv4Parser.OR, i);
		}
		public LexerAltListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerAltList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLexerAltList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLexerAltList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerAltList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerAltListContext lexerAltList() {
		LexerAltListContext _localctx = new LexerAltListContext(Context, State);
		EnterRule(_localctx, 64, RULE_lexerAltList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 361; lexerAlt();
			State = 366;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 362; Match(OR);
				State = 363; lexerAlt();
				}
				}
				State = 368;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerAltContext : ParserRuleContext {
		public LexerElementsContext lexerElements() {
			return GetRuleContext<LexerElementsContext>(0);
		}
		public LexerCommandsContext lexerCommands() {
			return GetRuleContext<LexerCommandsContext>(0);
		}
		public LexerAltContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerAlt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLexerAlt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLexerAlt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerAlt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerAltContext lexerAlt() {
		LexerAltContext _localctx = new LexerAltContext(Context, State);
		EnterRule(_localctx, 66, RULE_lexerAlt);
		int _la;
		try {
			State = 374;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TOKEN_REF:
			case RULE_REF:
			case LEXER_CHAR_SET:
			case LPAREN:
			case DOT:
			case NOT:
			case STRING_LITERAL:
			case ACTION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 369; lexerElements();
				State = 371;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RARROW) {
					{
					State = 370; lexerCommands();
					}
				}

				}
				break;
			case SEMI:
			case RPAREN:
			case OR:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerElementsContext : ParserRuleContext {
		public LexerElementContext[] lexerElement() {
			return GetRuleContexts<LexerElementContext>();
		}
		public LexerElementContext lexerElement(int i) {
			return GetRuleContext<LexerElementContext>(i);
		}
		public LexerElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerElements; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLexerElements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLexerElements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerElementsContext lexerElements() {
		LexerElementsContext _localctx = new LexerElementsContext(Context, State);
		EnterRule(_localctx, 68, RULE_lexerElements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 377;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 376; lexerElement();
				}
				}
				State = 379;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TOKEN_REF) | (1L << RULE_REF) | (1L << LEXER_CHAR_SET) | (1L << LPAREN) | (1L << DOT) | (1L << NOT) | (1L << STRING_LITERAL) | (1L << ACTION))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerElementContext : ParserRuleContext {
		public LabeledLexerElementContext labeledLexerElement() {
			return GetRuleContext<LabeledLexerElementContext>(0);
		}
		public EbnfSuffixContext ebnfSuffix() {
			return GetRuleContext<EbnfSuffixContext>(0);
		}
		public LexerAtomContext lexerAtom() {
			return GetRuleContext<LexerAtomContext>(0);
		}
		public LexerBlockContext lexerBlock() {
			return GetRuleContext<LexerBlockContext>(0);
		}
		public ITerminalNode ACTION() { return GetToken(ANTLRv4Parser.ACTION, 0); }
		public ITerminalNode QUESTION() { return GetToken(ANTLRv4Parser.QUESTION, 0); }
		public LexerElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLexerElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLexerElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerElementContext lexerElement() {
		LexerElementContext _localctx = new LexerElementContext(Context, State);
		EnterRule(_localctx, 70, RULE_lexerElement);
		int _la;
		try {
			State = 397;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 381; labeledLexerElement();
				State = 383;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QUESTION) | (1L << STAR) | (1L << PLUS))) != 0)) {
					{
					State = 382; ebnfSuffix();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 385; lexerAtom();
				State = 387;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QUESTION) | (1L << STAR) | (1L << PLUS))) != 0)) {
					{
					State = 386; ebnfSuffix();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 389; lexerBlock();
				State = 391;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QUESTION) | (1L << STAR) | (1L << PLUS))) != 0)) {
					{
					State = 390; ebnfSuffix();
					}
				}

				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 393; Match(ACTION);
				State = 395;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QUESTION) {
					{
					State = 394; Match(QUESTION);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledLexerElementContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(ANTLRv4Parser.ASSIGN, 0); }
		public ITerminalNode PLUS_ASSIGN() { return GetToken(ANTLRv4Parser.PLUS_ASSIGN, 0); }
		public LexerAtomContext lexerAtom() {
			return GetRuleContext<LexerAtomContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public LabeledLexerElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledLexerElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLabeledLexerElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLabeledLexerElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledLexerElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledLexerElementContext labeledLexerElement() {
		LabeledLexerElementContext _localctx = new LabeledLexerElementContext(Context, State);
		EnterRule(_localctx, 72, RULE_labeledLexerElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 399; id();
			State = 400;
			_la = TokenStream.LA(1);
			if ( !(_la==ASSIGN || _la==PLUS_ASSIGN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 403;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TOKEN_REF:
			case RULE_REF:
			case LEXER_CHAR_SET:
			case DOT:
			case NOT:
			case STRING_LITERAL:
				{
				State = 401; lexerAtom();
				}
				break;
			case LPAREN:
				{
				State = 402; block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerBlockContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(ANTLRv4Parser.LPAREN, 0); }
		public LexerAltListContext lexerAltList() {
			return GetRuleContext<LexerAltListContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(ANTLRv4Parser.RPAREN, 0); }
		public LexerBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLexerBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLexerBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerBlockContext lexerBlock() {
		LexerBlockContext _localctx = new LexerBlockContext(Context, State);
		EnterRule(_localctx, 74, RULE_lexerBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 405; Match(LPAREN);
			State = 406; lexerAltList();
			State = 407; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerCommandsContext : ParserRuleContext {
		public ITerminalNode RARROW() { return GetToken(ANTLRv4Parser.RARROW, 0); }
		public LexerCommandContext[] lexerCommand() {
			return GetRuleContexts<LexerCommandContext>();
		}
		public LexerCommandContext lexerCommand(int i) {
			return GetRuleContext<LexerCommandContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(ANTLRv4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ANTLRv4Parser.COMMA, i);
		}
		public LexerCommandsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerCommands; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLexerCommands(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLexerCommands(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerCommands(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerCommandsContext lexerCommands() {
		LexerCommandsContext _localctx = new LexerCommandsContext(Context, State);
		EnterRule(_localctx, 76, RULE_lexerCommands);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 409; Match(RARROW);
			State = 410; lexerCommand();
			State = 415;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 411; Match(COMMA);
				State = 412; lexerCommand();
				}
				}
				State = 417;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerCommandContext : ParserRuleContext {
		public LexerCommandNameContext lexerCommandName() {
			return GetRuleContext<LexerCommandNameContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(ANTLRv4Parser.LPAREN, 0); }
		public LexerCommandExprContext lexerCommandExpr() {
			return GetRuleContext<LexerCommandExprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(ANTLRv4Parser.RPAREN, 0); }
		public LexerCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLexerCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLexerCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerCommandContext lexerCommand() {
		LexerCommandContext _localctx = new LexerCommandContext(Context, State);
		EnterRule(_localctx, 78, RULE_lexerCommand);
		try {
			State = 424;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 418; lexerCommandName();
				State = 419; Match(LPAREN);
				State = 420; lexerCommandExpr();
				State = 421; Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 423; lexerCommandName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerCommandNameContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode MODE() { return GetToken(ANTLRv4Parser.MODE, 0); }
		public LexerCommandNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerCommandName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLexerCommandName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLexerCommandName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerCommandName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerCommandNameContext lexerCommandName() {
		LexerCommandNameContext _localctx = new LexerCommandNameContext(Context, State);
		EnterRule(_localctx, 80, RULE_lexerCommandName);
		try {
			State = 428;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 426; id();
				}
				break;
			case MODE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 427; Match(MODE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerCommandExprContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode INT() { return GetToken(ANTLRv4Parser.INT, 0); }
		public LexerCommandExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerCommandExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLexerCommandExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLexerCommandExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerCommandExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerCommandExprContext lexerCommandExpr() {
		LexerCommandExprContext _localctx = new LexerCommandExprContext(Context, State);
		EnterRule(_localctx, 82, RULE_lexerCommandExpr);
		try {
			State = 432;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 430; id();
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 431; Match(INT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltListContext : ParserRuleContext {
		public AlternativeContext[] alternative() {
			return GetRuleContexts<AlternativeContext>();
		}
		public AlternativeContext alternative(int i) {
			return GetRuleContext<AlternativeContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(ANTLRv4Parser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(ANTLRv4Parser.OR, i);
		}
		public AltListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterAltList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitAltList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAltList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AltListContext altList() {
		AltListContext _localctx = new AltListContext(Context, State);
		EnterRule(_localctx, 84, RULE_altList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 434; alternative();
			State = 439;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 435; Match(OR);
				State = 436; alternative();
				}
				}
				State = 441;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlternativeContext : ParserRuleContext {
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public ElementContext[] element() {
			return GetRuleContexts<ElementContext>();
		}
		public ElementContext element(int i) {
			return GetRuleContext<ElementContext>(i);
		}
		public AlternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alternative; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterAlternative(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitAlternative(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlternative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlternativeContext alternative() {
		AlternativeContext _localctx = new AlternativeContext(Context, State);
		EnterRule(_localctx, 86, RULE_alternative);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 443;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 442; elementOptions();
				}
			}

			State = 448;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TOKEN_REF) | (1L << RULE_REF) | (1L << LPAREN) | (1L << DOT) | (1L << NOT) | (1L << STRING_LITERAL) | (1L << ACTION))) != 0)) {
				{
				{
				State = 445; element();
				}
				}
				State = 450;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		public LabeledElementContext labeledElement() {
			return GetRuleContext<LabeledElementContext>(0);
		}
		public EbnfSuffixContext ebnfSuffix() {
			return GetRuleContext<EbnfSuffixContext>(0);
		}
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public EbnfContext ebnf() {
			return GetRuleContext<EbnfContext>(0);
		}
		public ITerminalNode ACTION() { return GetToken(ANTLRv4Parser.ACTION, 0); }
		public ITerminalNode QUESTION() { return GetToken(ANTLRv4Parser.QUESTION, 0); }
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 88, RULE_element);
		int _la;
		try {
			State = 466;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 451; labeledElement();
				State = 454;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case QUESTION:
				case STAR:
				case PLUS:
					{
					State = 452; ebnfSuffix();
					}
					break;
				case TOKEN_REF:
				case RULE_REF:
				case SEMI:
				case LPAREN:
				case RPAREN:
				case OR:
				case DOT:
				case POUND:
				case NOT:
				case STRING_LITERAL:
				case ACTION:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 456; atom();
				State = 459;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case QUESTION:
				case STAR:
				case PLUS:
					{
					State = 457; ebnfSuffix();
					}
					break;
				case TOKEN_REF:
				case RULE_REF:
				case SEMI:
				case LPAREN:
				case RPAREN:
				case OR:
				case DOT:
				case POUND:
				case NOT:
				case STRING_LITERAL:
				case ACTION:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 461; ebnf();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 462; Match(ACTION);
				State = 464;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QUESTION) {
					{
					State = 463; Match(QUESTION);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledElementContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(ANTLRv4Parser.ASSIGN, 0); }
		public ITerminalNode PLUS_ASSIGN() { return GetToken(ANTLRv4Parser.PLUS_ASSIGN, 0); }
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public LabeledElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLabeledElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLabeledElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledElementContext labeledElement() {
		LabeledElementContext _localctx = new LabeledElementContext(Context, State);
		EnterRule(_localctx, 90, RULE_labeledElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 468; id();
			State = 469;
			_la = TokenStream.LA(1);
			if ( !(_la==ASSIGN || _la==PLUS_ASSIGN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 472;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TOKEN_REF:
			case RULE_REF:
			case DOT:
			case NOT:
			case STRING_LITERAL:
				{
				State = 470; atom();
				}
				break;
			case LPAREN:
				{
				State = 471; block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EbnfContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public BlockSuffixContext blockSuffix() {
			return GetRuleContext<BlockSuffixContext>(0);
		}
		public EbnfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ebnf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterEbnf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitEbnf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEbnf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EbnfContext ebnf() {
		EbnfContext _localctx = new EbnfContext(Context, State);
		EnterRule(_localctx, 92, RULE_ebnf);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 474; block();
			State = 476;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QUESTION) | (1L << STAR) | (1L << PLUS))) != 0)) {
				{
				State = 475; blockSuffix();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockSuffixContext : ParserRuleContext {
		public EbnfSuffixContext ebnfSuffix() {
			return GetRuleContext<EbnfSuffixContext>(0);
		}
		public BlockSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockSuffix; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterBlockSuffix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitBlockSuffix(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockSuffixContext blockSuffix() {
		BlockSuffixContext _localctx = new BlockSuffixContext(Context, State);
		EnterRule(_localctx, 94, RULE_blockSuffix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 478; ebnfSuffix();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EbnfSuffixContext : ParserRuleContext {
		public ITerminalNode[] QUESTION() { return GetTokens(ANTLRv4Parser.QUESTION); }
		public ITerminalNode QUESTION(int i) {
			return GetToken(ANTLRv4Parser.QUESTION, i);
		}
		public ITerminalNode STAR() { return GetToken(ANTLRv4Parser.STAR, 0); }
		public ITerminalNode PLUS() { return GetToken(ANTLRv4Parser.PLUS, 0); }
		public EbnfSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ebnfSuffix; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterEbnfSuffix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitEbnfSuffix(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEbnfSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EbnfSuffixContext ebnfSuffix() {
		EbnfSuffixContext _localctx = new EbnfSuffixContext(Context, State);
		EnterRule(_localctx, 96, RULE_ebnfSuffix);
		int _la;
		try {
			State = 492;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case QUESTION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 480; Match(QUESTION);
				State = 482;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QUESTION) {
					{
					State = 481; Match(QUESTION);
					}
				}

				}
				break;
			case STAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 484; Match(STAR);
				State = 486;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QUESTION) {
					{
					State = 485; Match(QUESTION);
					}
				}

				}
				break;
			case PLUS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 488; Match(PLUS);
				State = 490;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QUESTION) {
					{
					State = 489; Match(QUESTION);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerAtomContext : ParserRuleContext {
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public TerminalContext terminal() {
			return GetRuleContext<TerminalContext>(0);
		}
		public ITerminalNode RULE_REF() { return GetToken(ANTLRv4Parser.RULE_REF, 0); }
		public NotSetContext notSet() {
			return GetRuleContext<NotSetContext>(0);
		}
		public ITerminalNode LEXER_CHAR_SET() { return GetToken(ANTLRv4Parser.LEXER_CHAR_SET, 0); }
		public ITerminalNode DOT() { return GetToken(ANTLRv4Parser.DOT, 0); }
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public LexerAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerAtom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLexerAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLexerAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerAtomContext lexerAtom() {
		LexerAtomContext _localctx = new LexerAtomContext(Context, State);
		EnterRule(_localctx, 98, RULE_lexerAtom);
		int _la;
		try {
			State = 503;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 494; range();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 495; terminal();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 496; Match(RULE_REF);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 497; notSet();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 498; Match(LEXER_CHAR_SET);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 499; Match(DOT);
				State = 501;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 500; elementOptions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public TerminalContext terminal() {
			return GetRuleContext<TerminalContext>(0);
		}
		public RulerefContext ruleref() {
			return GetRuleContext<RulerefContext>(0);
		}
		public NotSetContext notSet() {
			return GetRuleContext<NotSetContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(ANTLRv4Parser.DOT, 0); }
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 100, RULE_atom);
		int _la;
		try {
			State = 513;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 505; range();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 506; terminal();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 507; ruleref();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 508; notSet();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 509; Match(DOT);
				State = 511;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 510; elementOptions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotSetContext : ParserRuleContext {
		public ITerminalNode NOT() { return GetToken(ANTLRv4Parser.NOT, 0); }
		public SetElementContext setElement() {
			return GetRuleContext<SetElementContext>(0);
		}
		public BlockSetContext blockSet() {
			return GetRuleContext<BlockSetContext>(0);
		}
		public NotSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notSet; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterNotSet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitNotSet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotSetContext notSet() {
		NotSetContext _localctx = new NotSetContext(Context, State);
		EnterRule(_localctx, 102, RULE_notSet);
		try {
			State = 519;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 515; Match(NOT);
				State = 516; setElement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 517; Match(NOT);
				State = 518; blockSet();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockSetContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(ANTLRv4Parser.LPAREN, 0); }
		public SetElementContext[] setElement() {
			return GetRuleContexts<SetElementContext>();
		}
		public SetElementContext setElement(int i) {
			return GetRuleContext<SetElementContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(ANTLRv4Parser.RPAREN, 0); }
		public ITerminalNode[] OR() { return GetTokens(ANTLRv4Parser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(ANTLRv4Parser.OR, i);
		}
		public BlockSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockSet; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterBlockSet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitBlockSet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockSetContext blockSet() {
		BlockSetContext _localctx = new BlockSetContext(Context, State);
		EnterRule(_localctx, 104, RULE_blockSet);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 521; Match(LPAREN);
			State = 522; setElement();
			State = 527;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 523; Match(OR);
				State = 524; setElement();
				}
				}
				State = 529;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 530; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetElementContext : ParserRuleContext {
		public ITerminalNode TOKEN_REF() { return GetToken(ANTLRv4Parser.TOKEN_REF, 0); }
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public ITerminalNode STRING_LITERAL() { return GetToken(ANTLRv4Parser.STRING_LITERAL, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public ITerminalNode LEXER_CHAR_SET() { return GetToken(ANTLRv4Parser.LEXER_CHAR_SET, 0); }
		public SetElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterSetElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitSetElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetElementContext setElement() {
		SetElementContext _localctx = new SetElementContext(Context, State);
		EnterRule(_localctx, 106, RULE_setElement);
		int _la;
		try {
			State = 542;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 532; Match(TOKEN_REF);
				State = 534;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 533; elementOptions();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 536; Match(STRING_LITERAL);
				State = 538;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 537; elementOptions();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 540; range();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 541; Match(LEXER_CHAR_SET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(ANTLRv4Parser.LPAREN, 0); }
		public AltListContext altList() {
			return GetRuleContext<AltListContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(ANTLRv4Parser.RPAREN, 0); }
		public ITerminalNode COLON() { return GetToken(ANTLRv4Parser.COLON, 0); }
		public OptionsSpecContext optionsSpec() {
			return GetRuleContext<OptionsSpecContext>(0);
		}
		public RuleActionContext[] ruleAction() {
			return GetRuleContexts<RuleActionContext>();
		}
		public RuleActionContext ruleAction(int i) {
			return GetRuleContext<RuleActionContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 108, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 544; Match(LPAREN);
			State = 555;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPTIONS) | (1L << COLON) | (1L << AT))) != 0)) {
				{
				State = 546;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPTIONS) {
					{
					State = 545; optionsSpec();
					}
				}

				State = 551;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT) {
					{
					{
					State = 548; ruleAction();
					}
					}
					State = 553;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 554; Match(COLON);
				}
			}

			State = 557; altList();
			State = 558; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulerefContext : ParserRuleContext {
		public ITerminalNode RULE_REF() { return GetToken(ANTLRv4Parser.RULE_REF, 0); }
		public ITerminalNode ARG_ACTION() { return GetToken(ANTLRv4Parser.ARG_ACTION, 0); }
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public RulerefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleref; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterRuleref(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitRuleref(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RulerefContext ruleref() {
		RulerefContext _localctx = new RulerefContext(Context, State);
		EnterRule(_localctx, 110, RULE_ruleref);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 560; Match(RULE_REF);
			State = 562;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ARG_ACTION) {
				{
				State = 561; Match(ARG_ACTION);
				}
			}

			State = 565;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 564; elementOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		public ITerminalNode[] STRING_LITERAL() { return GetTokens(ANTLRv4Parser.STRING_LITERAL); }
		public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(ANTLRv4Parser.STRING_LITERAL, i);
		}
		public ITerminalNode RANGE() { return GetToken(ANTLRv4Parser.RANGE, 0); }
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitRange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 112, RULE_range);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 567; Match(STRING_LITERAL);
			State = 568; Match(RANGE);
			State = 569; Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminalContext : ParserRuleContext {
		public ITerminalNode TOKEN_REF() { return GetToken(ANTLRv4Parser.TOKEN_REF, 0); }
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public ITerminalNode STRING_LITERAL() { return GetToken(ANTLRv4Parser.STRING_LITERAL, 0); }
		public TerminalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterTerminal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitTerminal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TerminalContext terminal() {
		TerminalContext _localctx = new TerminalContext(Context, State);
		EnterRule(_localctx, 114, RULE_terminal);
		int _la;
		try {
			State = 579;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TOKEN_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 571; Match(TOKEN_REF);
				State = 573;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 572; elementOptions();
					}
				}

				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 575; Match(STRING_LITERAL);
				State = 577;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 576; elementOptions();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementOptionsContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(ANTLRv4Parser.LT, 0); }
		public ElementOptionContext[] elementOption() {
			return GetRuleContexts<ElementOptionContext>();
		}
		public ElementOptionContext elementOption(int i) {
			return GetRuleContext<ElementOptionContext>(i);
		}
		public ITerminalNode GT() { return GetToken(ANTLRv4Parser.GT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(ANTLRv4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ANTLRv4Parser.COMMA, i);
		}
		public ElementOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterElementOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitElementOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementOptionsContext elementOptions() {
		ElementOptionsContext _localctx = new ElementOptionsContext(Context, State);
		EnterRule(_localctx, 116, RULE_elementOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 581; Match(LT);
			State = 582; elementOption();
			State = 587;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 583; Match(COMMA);
				State = 584; elementOption();
				}
				}
				State = 589;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 590; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementOptionContext : ParserRuleContext {
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode ASSIGN() { return GetToken(ANTLRv4Parser.ASSIGN, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(ANTLRv4Parser.STRING_LITERAL, 0); }
		public ElementOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterElementOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitElementOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementOptionContext elementOption() {
		ElementOptionContext _localctx = new ElementOptionContext(Context, State);
		EnterRule(_localctx, 118, RULE_elementOption);
		try {
			State = 599;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 592; id();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 593; id();
				State = 594; Match(ASSIGN);
				State = 597;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TOKEN_REF:
				case RULE_REF:
					{
					State = 595; id();
					}
					break;
				case STRING_LITERAL:
					{
					State = 596; Match(STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		public ITerminalNode RULE_REF() { return GetToken(ANTLRv4Parser.RULE_REF, 0); }
		public ITerminalNode TOKEN_REF() { return GetToken(ANTLRv4Parser.TOKEN_REF, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 120, RULE_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 601;
			_la = TokenStream.LA(1);
			if ( !(_la==TOKEN_REF || _la==RULE_REF) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x39");
		sb.Append("\x25E\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12");
		sb.Append("\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16\x4");
		sb.Append("\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B\t\x1B");
		sb.Append("\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t ");
		sb.Append("\x4!\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t");
		sb.Append("(\x4)\t)\x4*\t*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t");
		sb.Append("\x30\x4\x31\t\x31\x4\x32\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4");
		sb.Append("\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37\x4\x38\t\x38\x4\x39\t\x39");
		sb.Append("\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x3\x2\x5\x2~\n\x2\x3\x2");
		sb.Append("\x3\x2\x3\x2\x3\x2\a\x2\x84\n\x2\f\x2\xE\x2\x87\v\x2\x3\x2\x3");
		sb.Append("\x2\a\x2\x8B\n\x2\f\x2\xE\x2\x8E\v\x2\x3\x2\x3\x2\x3\x3\x3\x3");
		sb.Append("\x3\x3\x3\x3\x3\x3\x5\x3\x97\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3");
		sb.Append("\x4\x5\x4\x9E\n\x4\x3\x5\x3\x5\x3\x5\x3\x5\a\x5\xA4\n\x5\f\x5");
		sb.Append("\xE\x5\xA7\v\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3");
		sb.Append("\a\x3\a\a\a\xB2\n\a\f\a\xE\a\xB5\v\a\x3\a\x3\a\x3\a\x5\a\xBA");
		sb.Append("\n\a\x3\b\x3\b\x3\b\x3\b\a\b\xC0\n\b\f\b\xE\b\xC3\v\b\x3\b\x3");
		sb.Append("\b\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\xCC\n\t\x3\n\x3\n\x3\n\x3\n");
		sb.Append("\x3\v\x3\v\x5\v\xD4\n\v\x3\v\x3\v\x3\f\x3\f\x3\f\a\f\xDB\n\f");
		sb.Append("\f\f\xE\f\xDE\v\f\x3\f\x5\f\xE1\n\f\x3\r\x3\r\x3\r\x3\r\x5\r");
		sb.Append("\xE7\n\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x5\xE\xEF\n\xE\x3");
		sb.Append("\xF\x3\xF\x3\xF\x3\xF\a\xF\xF5\n\xF\f\xF\xE\xF\xF8\v\xF\x3\x10");
		sb.Append("\a\x10\xFB\n\x10\f\x10\xE\x10\xFE\v\x10\x3\x11\x3\x11\x5\x11");
		sb.Append("\x102\n\x11\x3\x12\x5\x12\x105\n\x12\x3\x12\x5\x12\x108\n\x12");
		sb.Append("\x3\x12\x3\x12\x5\x12\x10C\n\x12\x3\x12\x5\x12\x10F\n\x12\x3");
		sb.Append("\x12\x5\x12\x112\n\x12\x3\x12\x5\x12\x115\n\x12\x3\x12\a\x12");
		sb.Append("\x118\n\x12\f\x12\xE\x12\x11B\v\x12\x3\x12\x3\x12\x3\x12\x3");
		sb.Append("\x12\x3\x12\x3\x13\a\x13\x123\n\x13\f\x13\xE\x13\x126\v\x13");
		sb.Append("\x3\x13\x5\x13\x129\n\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x15");
		sb.Append("\x3\x15\x3\x15\x3\x16\x3\x16\x5\x16\x134\n\x16\x3\x17\x3\x17");
		sb.Append("\x3\x17\x3\x18\x3\x18\x3\x18\x3\x18\a\x18\x13D\n\x18\f\x18\xE");
		sb.Append("\x18\x140\v\x18\x3\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3");
		sb.Append("\x1A\x3\x1B\x6\x1B\x14A\n\x1B\r\x1B\xE\x1B\x14B\x3\x1C\x3\x1C");
		sb.Append("\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\a\x1E\x155\n\x1E\f\x1E\xE");
		sb.Append("\x1E\x158\v\x1E\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x15D\n\x1F\x3 \x5");
		sb.Append(" \x160\n \x3 \x5 \x163\n \x3 \x3 \x3 \x3 \x3 \x3!\x3!\x3\"\x3");
		sb.Append("\"\x3\"\a\"\x16F\n\"\f\"\xE\"\x172\v\"\x3#\x3#\x5#\x176\n#\x3");
		sb.Append("#\x5#\x179\n#\x3$\x6$\x17C\n$\r$\xE$\x17D\x3%\x3%\x5%\x182\n");
		sb.Append("%\x3%\x3%\x5%\x186\n%\x3%\x3%\x5%\x18A\n%\x3%\x3%\x5%\x18E\n");
		sb.Append("%\x5%\x190\n%\x3&\x3&\x3&\x3&\x5&\x196\n&\x3\'\x3\'\x3\'\x3");
		sb.Append("\'\x3(\x3(\x3(\x3(\a(\x1A0\n(\f(\xE(\x1A3\v(\x3)\x3)\x3)\x3");
		sb.Append(")\x3)\x3)\x5)\x1AB\n)\x3*\x3*\x5*\x1AF\n*\x3+\x3+\x5+\x1B3\n");
		sb.Append("+\x3,\x3,\x3,\a,\x1B8\n,\f,\xE,\x1BB\v,\x3-\x5-\x1BE\n-\x3-");
		sb.Append("\a-\x1C1\n-\f-\xE-\x1C4\v-\x3.\x3.\x3.\x5.\x1C9\n.\x3.\x3.\x3");
		sb.Append(".\x5.\x1CE\n.\x3.\x3.\x3.\x5.\x1D3\n.\x5.\x1D5\n.\x3/\x3/\x3");
		sb.Append("/\x3/\x5/\x1DB\n/\x3\x30\x3\x30\x5\x30\x1DF\n\x30\x3\x31\x3");
		sb.Append("\x31\x3\x32\x3\x32\x5\x32\x1E5\n\x32\x3\x32\x3\x32\x5\x32\x1E9");
		sb.Append("\n\x32\x3\x32\x3\x32\x5\x32\x1ED\n\x32\x5\x32\x1EF\n\x32\x3");
		sb.Append("\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x5\x33\x1F8\n");
		sb.Append("\x33\x5\x33\x1FA\n\x33\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3");
		sb.Append("\x34\x5\x34\x202\n\x34\x5\x34\x204\n\x34\x3\x35\x3\x35\x3\x35");
		sb.Append("\x3\x35\x5\x35\x20A\n\x35\x3\x36\x3\x36\x3\x36\x3\x36\a\x36");
		sb.Append("\x210\n\x36\f\x36\xE\x36\x213\v\x36\x3\x36\x3\x36\x3\x37\x3");
		sb.Append("\x37\x5\x37\x219\n\x37\x3\x37\x3\x37\x5\x37\x21D\n\x37\x3\x37");
		sb.Append("\x3\x37\x5\x37\x221\n\x37\x3\x38\x3\x38\x5\x38\x225\n\x38\x3");
		sb.Append("\x38\a\x38\x228\n\x38\f\x38\xE\x38\x22B\v\x38\x3\x38\x5\x38");
		sb.Append("\x22E\n\x38\x3\x38\x3\x38\x3\x38\x3\x39\x3\x39\x5\x39\x235\n");
		sb.Append("\x39\x3\x39\x5\x39\x238\n\x39\x3:\x3:\x3:\x3:\x3;\x3;\x5;\x240");
		sb.Append("\n;\x3;\x3;\x5;\x244\n;\x5;\x246\n;\x3<\x3<\x3<\x3<\a<\x24C");
		sb.Append("\n<\f<\xE<\x24F\v<\x3<\x3<\x3=\x3=\x3=\x3=\x3=\x5=\x258\n=\x5");
		sb.Append("=\x25A\n=\x3>\x3>\x3>\x2\x2?\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16");
		sb.Append("\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42\x44\x46");
		sb.Append("HJLNPRTVXZ\\^`\x62\x64\x66hjlnprtvxz\x2\x5\x4\x2\xE\xE\x12\x14");
		sb.Append("\x4\x2$$((\x3\x2\x3\x4\x286\x2}\x3\x2\x2\x2\x4\x96\x3\x2\x2");
		sb.Append("\x2\x6\x9D\x3\x2\x2\x2\b\x9F\x3\x2\x2\x2\n\xAA\x3\x2\x2\x2\f");
		sb.Append("\xB9\x3\x2\x2\x2\xE\xBB\x3\x2\x2\x2\x10\xCB\x3\x2\x2\x2\x12");
		sb.Append("\xCD\x3\x2\x2\x2\x14\xD1\x3\x2\x2\x2\x16\xD7\x3\x2\x2\x2\x18");
		sb.Append("\xE2\x3\x2\x2\x2\x1A\xEE\x3\x2\x2\x2\x1C\xF0\x3\x2\x2\x2\x1E");
		sb.Append("\xFC\x3\x2\x2\x2 \x101\x3\x2\x2\x2\"\x104\x3\x2\x2\x2$\x124");
		sb.Append("\x3\x2\x2\x2&\x12A\x3\x2\x2\x2(\x12E\x3\x2\x2\x2*\x133\x3\x2");
		sb.Append("\x2\x2,\x135\x3\x2\x2\x2.\x138\x3\x2\x2\x2\x30\x141\x3\x2\x2");
		sb.Append("\x2\x32\x144\x3\x2\x2\x2\x34\x149\x3\x2\x2\x2\x36\x14D\x3\x2");
		sb.Append("\x2\x2\x38\x14F\x3\x2\x2\x2:\x151\x3\x2\x2\x2<\x159\x3\x2\x2");
		sb.Append("\x2>\x15F\x3\x2\x2\x2@\x169\x3\x2\x2\x2\x42\x16B\x3\x2\x2\x2");
		sb.Append("\x44\x178\x3\x2\x2\x2\x46\x17B\x3\x2\x2\x2H\x18F\x3\x2\x2\x2");
		sb.Append("J\x191\x3\x2\x2\x2L\x197\x3\x2\x2\x2N\x19B\x3\x2\x2\x2P\x1AA");
		sb.Append("\x3\x2\x2\x2R\x1AE\x3\x2\x2\x2T\x1B2\x3\x2\x2\x2V\x1B4\x3\x2");
		sb.Append("\x2\x2X\x1BD\x3\x2\x2\x2Z\x1D4\x3\x2\x2\x2\\\x1D6\x3\x2\x2\x2");
		sb.Append("^\x1DC\x3\x2\x2\x2`\x1E0\x3\x2\x2\x2\x62\x1EE\x3\x2\x2\x2\x64");
		sb.Append("\x1F9\x3\x2\x2\x2\x66\x203\x3\x2\x2\x2h\x209\x3\x2\x2\x2j\x20B");
		sb.Append("\x3\x2\x2\x2l\x220\x3\x2\x2\x2n\x222\x3\x2\x2\x2p\x232\x3\x2");
		sb.Append("\x2\x2r\x239\x3\x2\x2\x2t\x245\x3\x2\x2\x2v\x247\x3\x2\x2\x2");
		sb.Append("x\x259\x3\x2\x2\x2z\x25B\x3\x2\x2\x2|~\a\x6\x2\x2}|\x3\x2\x2");
		sb.Append("\x2}~\x3\x2\x2\x2~\x7F\x3\x2\x2\x2\x7F\x80\x5\x4\x3\x2\x80\x81");
		sb.Append("\x5z>\x2\x81\x85\a\x1E\x2\x2\x82\x84\x5\x6\x4\x2\x83\x82\x3");
		sb.Append("\x2\x2\x2\x84\x87\x3\x2\x2\x2\x85\x83\x3\x2\x2\x2\x85\x86\x3");
		sb.Append("\x2\x2\x2\x86\x88\x3\x2\x2\x2\x87\x85\x3\x2\x2\x2\x88\x8C\x5");
		sb.Append("\x1E\x10\x2\x89\x8B\x5\x1C\xF\x2\x8A\x89\x3\x2\x2\x2\x8B\x8E");
		sb.Append("\x3\x2\x2\x2\x8C\x8A\x3\x2\x2\x2\x8C\x8D\x3\x2\x2\x2\x8D\x8F");
		sb.Append("\x3\x2\x2\x2\x8E\x8C\x3\x2\x2\x2\x8F\x90\a\x2\x2\x3\x90\x3\x3");
		sb.Append("\x2\x2\x2\x91\x92\a\xF\x2\x2\x92\x97\a\x11\x2\x2\x93\x94\a\x10");
		sb.Append("\x2\x2\x94\x97\a\x11\x2\x2\x95\x97\a\x11\x2\x2\x96\x91\x3\x2");
		sb.Append("\x2\x2\x96\x93\x3\x2\x2\x2\x96\x95\x3\x2\x2\x2\x97\x5\x3\x2");
		sb.Append("\x2\x2\x98\x9E\x5\b\x5\x2\x99\x9E\x5\xE\b\x2\x9A\x9E\x5\x12");
		sb.Append("\n\x2\x9B\x9E\x5\x14\v\x2\x9C\x9E\x5\x18\r\x2\x9D\x98\x3\x2");
		sb.Append("\x2\x2\x9D\x99\x3\x2\x2\x2\x9D\x9A\x3\x2\x2\x2\x9D\x9B\x3\x2");
		sb.Append("\x2\x2\x9D\x9C\x3\x2\x2\x2\x9E\a\x3\x2\x2\x2\x9F\xA5\a\n\x2");
		sb.Append("\x2\xA0\xA1\x5\n\x6\x2\xA1\xA2\a\x1E\x2\x2\xA2\xA4\x3\x2\x2");
		sb.Append("\x2\xA3\xA0\x3\x2\x2\x2\xA4\xA7\x3\x2\x2\x2\xA5\xA3\x3\x2\x2");
		sb.Append("\x2\xA5\xA6\x3\x2\x2\x2\xA6\xA8\x3\x2\x2\x2\xA7\xA5\x3\x2\x2");
		sb.Append("\x2\xA8\xA9\a\x30\x2\x2\xA9\t\x3\x2\x2\x2\xAA\xAB\x5z>\x2\xAB");
		sb.Append("\xAC\a$\x2\x2\xAC\xAD\x5\f\a\x2\xAD\v\x3\x2\x2\x2\xAE\xB3\x5");
		sb.Append("z>\x2\xAF\xB0\a+\x2\x2\xB0\xB2\x5z>\x2\xB1\xAF\x3\x2\x2\x2\xB2");
		sb.Append("\xB5\x3\x2\x2\x2\xB3\xB1\x3\x2\x2\x2\xB3\xB4\x3\x2\x2\x2\xB4");
		sb.Append("\xBA\x3\x2\x2\x2\xB5\xB3\x3\x2\x2\x2\xB6\xBA\a\x32\x2\x2\xB7");
		sb.Append("\xBA\a\x35\x2\x2\xB8\xBA\a\x31\x2\x2\xB9\xAE\x3\x2\x2\x2\xB9");
		sb.Append("\xB6\x3\x2\x2\x2\xB9\xB7\x3\x2\x2\x2\xB9\xB8\x3\x2\x2\x2\xBA");
		sb.Append("\r\x3\x2\x2\x2\xBB\xBC\a\r\x2\x2\xBC\xC1\x5\x10\t\x2\xBD\xBE");
		sb.Append("\a\x1D\x2\x2\xBE\xC0\x5\x10\t\x2\xBF\xBD\x3\x2\x2\x2\xC0\xC3");
		sb.Append("\x3\x2\x2\x2\xC1\xBF\x3\x2\x2\x2\xC1\xC2\x3\x2\x2\x2\xC2\xC4");
		sb.Append("\x3\x2\x2\x2\xC3\xC1\x3\x2\x2\x2\xC4\xC5\a\x1E\x2\x2\xC5\xF");
		sb.Append("\x3\x2\x2\x2\xC6\xC7\x5z>\x2\xC7\xC8\a$\x2\x2\xC8\xC9\x5z>\x2");
		sb.Append("\xC9\xCC\x3\x2\x2\x2\xCA\xCC\x5z>\x2\xCB\xC6\x3\x2\x2\x2\xCB");
		sb.Append("\xCA\x3\x2\x2\x2\xCC\x11\x3\x2\x2\x2\xCD\xCE\a\v\x2\x2\xCE\xCF");
		sb.Append("\x5\x16\f\x2\xCF\xD0\a\x30\x2\x2\xD0\x13\x3\x2\x2\x2\xD1\xD3");
		sb.Append("\a\f\x2\x2\xD2\xD4\x5\x16\f\x2\xD3\xD2\x3\x2\x2\x2\xD3\xD4\x3");
		sb.Append("\x2\x2\x2\xD4\xD5\x3\x2\x2\x2\xD5\xD6\a\x30\x2\x2\xD6\x15\x3");
		sb.Append("\x2\x2\x2\xD7\xDC\x5z>\x2\xD8\xD9\a\x1D\x2\x2\xD9\xDB\x5z>\x2");
		sb.Append("\xDA\xD8\x3\x2\x2\x2\xDB\xDE\x3\x2\x2\x2\xDC\xDA\x3\x2\x2\x2");
		sb.Append("\xDC\xDD\x3\x2\x2\x2\xDD\xE0\x3\x2\x2\x2\xDE\xDC\x3\x2\x2\x2");
		sb.Append("\xDF\xE1\a\x1D\x2\x2\xE0\xDF\x3\x2\x2\x2\xE0\xE1\x3\x2\x2\x2");
		sb.Append("\xE1\x17\x3\x2\x2\x2\xE2\xE6\a-\x2\x2\xE3\xE4\x5\x1A\xE\x2\xE4");
		sb.Append("\xE5\a\x1C\x2\x2\xE5\xE7\x3\x2\x2\x2\xE6\xE3\x3\x2\x2\x2\xE6");
		sb.Append("\xE7\x3\x2\x2\x2\xE7\xE8\x3\x2\x2\x2\xE8\xE9\x5z>\x2\xE9\xEA");
		sb.Append("\a\x35\x2\x2\xEA\x19\x3\x2\x2\x2\xEB\xEF\x5z>\x2\xEC\xEF\a\xF");
		sb.Append("\x2\x2\xED\xEF\a\x10\x2\x2\xEE\xEB\x3\x2\x2\x2\xEE\xEC\x3\x2");
		sb.Append("\x2\x2\xEE\xED\x3\x2\x2\x2\xEF\x1B\x3\x2\x2\x2\xF0\xF1\a\x1A");
		sb.Append("\x2\x2\xF1\xF2\x5z>\x2\xF2\xF6\a\x1E\x2\x2\xF3\xF5\x5> \x2\xF4");
		sb.Append("\xF3\x3\x2\x2\x2\xF5\xF8\x3\x2\x2\x2\xF6\xF4\x3\x2\x2\x2\xF6");
		sb.Append("\xF7\x3\x2\x2\x2\xF7\x1D\x3\x2\x2\x2\xF8\xF6\x3\x2\x2\x2\xF9");
		sb.Append("\xFB\x5 \x11\x2\xFA\xF9\x3\x2\x2\x2\xFB\xFE\x3\x2\x2\x2\xFC");
		sb.Append("\xFA\x3\x2\x2\x2\xFC\xFD\x3\x2\x2\x2\xFD\x1F\x3\x2\x2\x2\xFE");
		sb.Append("\xFC\x3\x2\x2\x2\xFF\x102\x5\"\x12\x2\x100\x102\x5> \x2\x101");
		sb.Append("\xFF\x3\x2\x2\x2\x101\x100\x3\x2\x2\x2\x102!\x3\x2\x2\x2\x103");
		sb.Append("\x105\a\x6\x2\x2\x104\x103\x3\x2\x2\x2\x104\x105\x3\x2\x2\x2");
		sb.Append("\x105\x107\x3\x2\x2\x2\x106\x108\x5\x34\x1B\x2\x107\x106\x3");
		sb.Append("\x2\x2\x2\x107\x108\x3\x2\x2\x2\x108\x109\x3\x2\x2\x2\x109\x10B");
		sb.Append("\a\x4\x2\x2\x10A\x10C\a\x37\x2\x2\x10B\x10A\x3\x2\x2\x2\x10B");
		sb.Append("\x10C\x3\x2\x2\x2\x10C\x10E\x3\x2\x2\x2\x10D\x10F\x5,\x17\x2");
		sb.Append("\x10E\x10D\x3\x2\x2\x2\x10E\x10F\x3\x2\x2\x2\x10F\x111\x3\x2");
		sb.Append("\x2\x2\x110\x112\x5.\x18\x2\x111\x110\x3\x2\x2\x2\x111\x112");
		sb.Append("\x3\x2\x2\x2\x112\x114\x3\x2\x2\x2\x113\x115\x5\x30\x19\x2\x114");
		sb.Append("\x113\x3\x2\x2\x2\x114\x115\x3\x2\x2\x2\x115\x119\x3\x2\x2\x2");
		sb.Append("\x116\x118\x5*\x16\x2\x117\x116\x3\x2\x2\x2\x118\x11B\x3\x2");
		sb.Append("\x2\x2\x119\x117\x3\x2\x2\x2\x119\x11A\x3\x2\x2\x2\x11A\x11C");
		sb.Append("\x3\x2\x2\x2\x11B\x119\x3\x2\x2\x2\x11C\x11D\a\x1B\x2\x2\x11D");
		sb.Append("\x11E\x5\x38\x1D\x2\x11E\x11F\a\x1E\x2\x2\x11F\x120\x5$\x13");
		sb.Append("\x2\x120#\x3\x2\x2\x2\x121\x123\x5&\x14\x2\x122\x121\x3\x2\x2");
		sb.Append("\x2\x123\x126\x3\x2\x2\x2\x124\x122\x3\x2\x2\x2\x124\x125\x3");
		sb.Append("\x2\x2\x2\x125\x128\x3\x2\x2\x2\x126\x124\x3\x2\x2\x2\x127\x129");
		sb.Append("\x5(\x15\x2\x128\x127\x3\x2\x2\x2\x128\x129\x3\x2\x2\x2\x129");
		sb.Append("%\x3\x2\x2\x2\x12A\x12B\a\x18\x2\x2\x12B\x12C\a\x37\x2\x2\x12C");
		sb.Append("\x12D\a\x35\x2\x2\x12D\'\x3\x2\x2\x2\x12E\x12F\a\x19\x2\x2\x12F");
		sb.Append("\x130\a\x35\x2\x2\x130)\x3\x2\x2\x2\x131\x134\x5\b\x5\x2\x132");
		sb.Append("\x134\x5\x32\x1A\x2\x133\x131\x3\x2\x2\x2\x133\x132\x3\x2\x2");
		sb.Append("\x2\x134+\x3\x2\x2\x2\x135\x136\a\x15\x2\x2\x136\x137\a\x37");
		sb.Append("\x2\x2\x137-\x3\x2\x2\x2\x138\x139\a\x17\x2\x2\x139\x13E\x5");
		sb.Append("z>\x2\x13A\x13B\a\x1D\x2\x2\x13B\x13D\x5z>\x2\x13C\x13A\x3\x2");
		sb.Append("\x2\x2\x13D\x140\x3\x2\x2\x2\x13E\x13C\x3\x2\x2\x2\x13E\x13F");
		sb.Append("\x3\x2\x2\x2\x13F/\x3\x2\x2\x2\x140\x13E\x3\x2\x2\x2\x141\x142");
		sb.Append("\a\x16\x2\x2\x142\x143\a\x37\x2\x2\x143\x31\x3\x2\x2\x2\x144");
		sb.Append("\x145\a-\x2\x2\x145\x146\x5z>\x2\x146\x147\a\x35\x2\x2\x147");
		sb.Append("\x33\x3\x2\x2\x2\x148\x14A\x5\x36\x1C\x2\x149\x148\x3\x2\x2");
		sb.Append("\x2\x14A\x14B\x3\x2\x2\x2\x14B\x149\x3\x2\x2\x2\x14B\x14C\x3");
		sb.Append("\x2\x2\x2\x14C\x35\x3\x2\x2\x2\x14D\x14E\t\x2\x2\x2\x14E\x37");
		sb.Append("\x3\x2\x2\x2\x14F\x150\x5:\x1E\x2\x150\x39\x3\x2\x2\x2\x151");
		sb.Append("\x156\x5<\x1F\x2\x152\x153\a)\x2\x2\x153\x155\x5<\x1F\x2\x154");
		sb.Append("\x152\x3\x2\x2\x2\x155\x158\x3\x2\x2\x2\x156\x154\x3\x2\x2\x2");
		sb.Append("\x156\x157\x3\x2\x2\x2\x157;\x3\x2\x2\x2\x158\x156\x3\x2\x2");
		sb.Append("\x2\x159\x15C\x5X-\x2\x15A\x15B\a.\x2\x2\x15B\x15D\x5z>\x2\x15C");
		sb.Append("\x15A\x3\x2\x2\x2\x15C\x15D\x3\x2\x2\x2\x15D=\x3\x2\x2\x2\x15E");
		sb.Append("\x160\a\x6\x2\x2\x15F\x15E\x3\x2\x2\x2\x15F\x160\x3\x2\x2\x2");
		sb.Append("\x160\x162\x3\x2\x2\x2\x161\x163\a\xE\x2\x2\x162\x161\x3\x2");
		sb.Append("\x2\x2\x162\x163\x3\x2\x2\x2\x163\x164\x3\x2\x2\x2\x164\x165");
		sb.Append("\a\x3\x2\x2\x165\x166\a\x1B\x2\x2\x166\x167\x5@!\x2\x167\x168");
		sb.Append("\a\x1E\x2\x2\x168?\x3\x2\x2\x2\x169\x16A\x5\x42\"\x2\x16A\x41");
		sb.Append("\x3\x2\x2\x2\x16B\x170\x5\x44#\x2\x16C\x16D\a)\x2\x2\x16D\x16F");
		sb.Append("\x5\x44#\x2\x16E\x16C\x3\x2\x2\x2\x16F\x172\x3\x2\x2\x2\x170");
		sb.Append("\x16E\x3\x2\x2\x2\x170\x171\x3\x2\x2\x2\x171\x43\x3\x2\x2\x2");
		sb.Append("\x172\x170\x3\x2\x2\x2\x173\x175\x5\x46$\x2\x174\x176\x5N(\x2");
		sb.Append("\x175\x174\x3\x2\x2\x2\x175\x176\x3\x2\x2\x2\x176\x179\x3\x2");
		sb.Append("\x2\x2\x177\x179\x3\x2\x2\x2\x178\x173\x3\x2\x2\x2\x178\x177");
		sb.Append("\x3\x2\x2\x2\x179\x45\x3\x2\x2\x2\x17A\x17C\x5H%\x2\x17B\x17A");
		sb.Append("\x3\x2\x2\x2\x17C\x17D\x3\x2\x2\x2\x17D\x17B\x3\x2\x2\x2\x17D");
		sb.Append("\x17E\x3\x2\x2\x2\x17EG\x3\x2\x2\x2\x17F\x181\x5J&\x2\x180\x182");
		sb.Append("\x5\x62\x32\x2\x181\x180\x3\x2\x2\x2\x181\x182\x3\x2\x2\x2\x182");
		sb.Append("\x190\x3\x2\x2\x2\x183\x185\x5\x64\x33\x2\x184\x186\x5\x62\x32");
		sb.Append("\x2\x185\x184\x3\x2\x2\x2\x185\x186\x3\x2\x2\x2\x186\x190\x3");
		sb.Append("\x2\x2\x2\x187\x189\x5L\'\x2\x188\x18A\x5\x62\x32\x2\x189\x188");
		sb.Append("\x3\x2\x2\x2\x189\x18A\x3\x2\x2\x2\x18A\x190\x3\x2\x2\x2\x18B");
		sb.Append("\x18D\a\x35\x2\x2\x18C\x18E\a%\x2\x2\x18D\x18C\x3\x2\x2\x2\x18D");
		sb.Append("\x18E\x3\x2\x2\x2\x18E\x190\x3\x2\x2\x2\x18F\x17F\x3\x2\x2\x2");
		sb.Append("\x18F\x183\x3\x2\x2\x2\x18F\x187\x3\x2\x2\x2\x18F\x18B\x3\x2");
		sb.Append("\x2\x2\x190I\x3\x2\x2\x2\x191\x192\x5z>\x2\x192\x195\t\x3\x2");
		sb.Append("\x2\x193\x196\x5\x64\x33\x2\x194\x196\x5n\x38\x2\x195\x193\x3");
		sb.Append("\x2\x2\x2\x195\x194\x3\x2\x2\x2\x196K\x3\x2\x2\x2\x197\x198");
		sb.Append("\a\x1F\x2\x2\x198\x199\x5\x42\"\x2\x199\x19A\a \x2\x2\x19AM");
		sb.Append("\x3\x2\x2\x2\x19B\x19C\a!\x2\x2\x19C\x1A1\x5P)\x2\x19D\x19E");
		sb.Append("\a\x1D\x2\x2\x19E\x1A0\x5P)\x2\x19F\x19D\x3\x2\x2\x2\x1A0\x1A3");
		sb.Append("\x3\x2\x2\x2\x1A1\x19F\x3\x2\x2\x2\x1A1\x1A2\x3\x2\x2\x2\x1A2");
		sb.Append("O\x3\x2\x2\x2\x1A3\x1A1\x3\x2\x2\x2\x1A4\x1A5\x5R*\x2\x1A5\x1A6");
		sb.Append("\a\x1F\x2\x2\x1A6\x1A7\x5T+\x2\x1A7\x1A8\a \x2\x2\x1A8\x1AB");
		sb.Append("\x3\x2\x2\x2\x1A9\x1AB\x5R*\x2\x1AA\x1A4\x3\x2\x2\x2\x1AA\x1A9");
		sb.Append("\x3\x2\x2\x2\x1ABQ\x3\x2\x2\x2\x1AC\x1AF\x5z>\x2\x1AD\x1AF\a");
		sb.Append("\x1A\x2\x2\x1AE\x1AC\x3\x2\x2\x2\x1AE\x1AD\x3\x2\x2\x2\x1AF");
		sb.Append("S\x3\x2\x2\x2\x1B0\x1B3\x5z>\x2\x1B1\x1B3\a\x31\x2\x2\x1B2\x1B0");
		sb.Append("\x3\x2\x2\x2\x1B2\x1B1\x3\x2\x2\x2\x1B3U\x3\x2\x2\x2\x1B4\x1B9");
		sb.Append("\x5X-\x2\x1B5\x1B6\a)\x2\x2\x1B6\x1B8\x5X-\x2\x1B7\x1B5\x3\x2");
		sb.Append("\x2\x2\x1B8\x1BB\x3\x2\x2\x2\x1B9\x1B7\x3\x2\x2\x2\x1B9\x1BA");
		sb.Append("\x3\x2\x2\x2\x1BAW\x3\x2\x2\x2\x1BB\x1B9\x3\x2\x2\x2\x1BC\x1BE");
		sb.Append("\x5v<\x2\x1BD\x1BC\x3\x2\x2\x2\x1BD\x1BE\x3\x2\x2\x2\x1BE\x1C2");
		sb.Append("\x3\x2\x2\x2\x1BF\x1C1\x5Z.\x2\x1C0\x1BF\x3\x2\x2\x2\x1C1\x1C4");
		sb.Append("\x3\x2\x2\x2\x1C2\x1C0\x3\x2\x2\x2\x1C2\x1C3\x3\x2\x2\x2\x1C3");
		sb.Append("Y\x3\x2\x2\x2\x1C4\x1C2\x3\x2\x2\x2\x1C5\x1C8\x5\\/\x2\x1C6");
		sb.Append("\x1C9\x5\x62\x32\x2\x1C7\x1C9\x3\x2\x2\x2\x1C8\x1C6\x3\x2\x2");
		sb.Append("\x2\x1C8\x1C7\x3\x2\x2\x2\x1C9\x1D5\x3\x2\x2\x2\x1CA\x1CD\x5");
		sb.Append("\x66\x34\x2\x1CB\x1CE\x5\x62\x32\x2\x1CC\x1CE\x3\x2\x2\x2\x1CD");
		sb.Append("\x1CB\x3\x2\x2\x2\x1CD\x1CC\x3\x2\x2\x2\x1CE\x1D5\x3\x2\x2\x2");
		sb.Append("\x1CF\x1D5\x5^\x30\x2\x1D0\x1D2\a\x35\x2\x2\x1D1\x1D3\a%\x2");
		sb.Append("\x2\x1D2\x1D1\x3\x2\x2\x2\x1D2\x1D3\x3\x2\x2\x2\x1D3\x1D5\x3");
		sb.Append("\x2\x2\x2\x1D4\x1C5\x3\x2\x2\x2\x1D4\x1CA\x3\x2\x2\x2\x1D4\x1CF");
		sb.Append("\x3\x2\x2\x2\x1D4\x1D0\x3\x2\x2\x2\x1D5[\x3\x2\x2\x2\x1D6\x1D7");
		sb.Append("\x5z>\x2\x1D7\x1DA\t\x3\x2\x2\x1D8\x1DB\x5\x66\x34\x2\x1D9\x1DB");
		sb.Append("\x5n\x38\x2\x1DA\x1D8\x3\x2\x2\x2\x1DA\x1D9\x3\x2\x2\x2\x1DB");
		sb.Append("]\x3\x2\x2\x2\x1DC\x1DE\x5n\x38\x2\x1DD\x1DF\x5`\x31\x2\x1DE");
		sb.Append("\x1DD\x3\x2\x2\x2\x1DE\x1DF\x3\x2\x2\x2\x1DF_\x3\x2\x2\x2\x1E0");
		sb.Append("\x1E1\x5\x62\x32\x2\x1E1\x61\x3\x2\x2\x2\x1E2\x1E4\a%\x2\x2");
		sb.Append("\x1E3\x1E5\a%\x2\x2\x1E4\x1E3\x3\x2\x2\x2\x1E4\x1E5\x3\x2\x2");
		sb.Append("\x2\x1E5\x1EF\x3\x2\x2\x2\x1E6\x1E8\a&\x2\x2\x1E7\x1E9\a%\x2");
		sb.Append("\x2\x1E8\x1E7\x3\x2\x2\x2\x1E8\x1E9\x3\x2\x2\x2\x1E9\x1EF\x3");
		sb.Append("\x2\x2\x2\x1EA\x1EC\a\'\x2\x2\x1EB\x1ED\a%\x2\x2\x1EC\x1EB\x3");
		sb.Append("\x2\x2\x2\x1EC\x1ED\x3\x2\x2\x2\x1ED\x1EF\x3\x2\x2\x2\x1EE\x1E2");
		sb.Append("\x3\x2\x2\x2\x1EE\x1E6\x3\x2\x2\x2\x1EE\x1EA\x3\x2\x2\x2\x1EF");
		sb.Append("\x63\x3\x2\x2\x2\x1F0\x1FA\x5r:\x2\x1F1\x1FA\x5t;\x2\x1F2\x1FA");
		sb.Append("\a\x4\x2\x2\x1F3\x1FA\x5h\x35\x2\x1F4\x1FA\a\x5\x2\x2\x1F5\x1F7");
		sb.Append("\a+\x2\x2\x1F6\x1F8\x5v<\x2\x1F7\x1F6\x3\x2\x2\x2\x1F7\x1F8");
		sb.Append("\x3\x2\x2\x2\x1F8\x1FA\x3\x2\x2\x2\x1F9\x1F0\x3\x2\x2\x2\x1F9");
		sb.Append("\x1F1\x3\x2\x2\x2\x1F9\x1F2\x3\x2\x2\x2\x1F9\x1F3\x3\x2\x2\x2");
		sb.Append("\x1F9\x1F4\x3\x2\x2\x2\x1F9\x1F5\x3\x2\x2\x2\x1FA\x65\x3\x2");
		sb.Append("\x2\x2\x1FB\x204\x5r:\x2\x1FC\x204\x5t;\x2\x1FD\x204\x5p\x39");
		sb.Append("\x2\x1FE\x204\x5h\x35\x2\x1FF\x201\a+\x2\x2\x200\x202\x5v<\x2");
		sb.Append("\x201\x200\x3\x2\x2\x2\x201\x202\x3\x2\x2\x2\x202\x204\x3\x2");
		sb.Append("\x2\x2\x203\x1FB\x3\x2\x2\x2\x203\x1FC\x3\x2\x2\x2\x203\x1FD");
		sb.Append("\x3\x2\x2\x2\x203\x1FE\x3\x2\x2\x2\x203\x1FF\x3\x2\x2\x2\x204");
		sb.Append("g\x3\x2\x2\x2\x205\x206\a/\x2\x2\x206\x20A\x5l\x37\x2\x207\x208");
		sb.Append("\a/\x2\x2\x208\x20A\x5j\x36\x2\x209\x205\x3\x2\x2\x2\x209\x207");
		sb.Append("\x3\x2\x2\x2\x20Ai\x3\x2\x2\x2\x20B\x20C\a\x1F\x2\x2\x20C\x211");
		sb.Append("\x5l\x37\x2\x20D\x20E\a)\x2\x2\x20E\x210\x5l\x37\x2\x20F\x20D");
		sb.Append("\x3\x2\x2\x2\x210\x213\x3\x2\x2\x2\x211\x20F\x3\x2\x2\x2\x211");
		sb.Append("\x212\x3\x2\x2\x2\x212\x214\x3\x2\x2\x2\x213\x211\x3\x2\x2\x2");
		sb.Append("\x214\x215\a \x2\x2\x215k\x3\x2\x2\x2\x216\x218\a\x3\x2\x2\x217");
		sb.Append("\x219\x5v<\x2\x218\x217\x3\x2\x2\x2\x218\x219\x3\x2\x2\x2\x219");
		sb.Append("\x221\x3\x2\x2\x2\x21A\x21C\a\x32\x2\x2\x21B\x21D\x5v<\x2\x21C");
		sb.Append("\x21B\x3\x2\x2\x2\x21C\x21D\x3\x2\x2\x2\x21D\x221\x3\x2\x2\x2");
		sb.Append("\x21E\x221\x5r:\x2\x21F\x221\a\x5\x2\x2\x220\x216\x3\x2\x2\x2");
		sb.Append("\x220\x21A\x3\x2\x2\x2\x220\x21E\x3\x2\x2\x2\x220\x21F\x3\x2");
		sb.Append("\x2\x2\x221m\x3\x2\x2\x2\x222\x22D\a\x1F\x2\x2\x223\x225\x5");
		sb.Append("\b\x5\x2\x224\x223\x3\x2\x2\x2\x224\x225\x3\x2\x2\x2\x225\x229");
		sb.Append("\x3\x2\x2\x2\x226\x228\x5\x32\x1A\x2\x227\x226\x3\x2\x2\x2\x228");
		sb.Append("\x22B\x3\x2\x2\x2\x229\x227\x3\x2\x2\x2\x229\x22A\x3\x2\x2\x2");
		sb.Append("\x22A\x22C\x3\x2\x2\x2\x22B\x229\x3\x2\x2\x2\x22C\x22E\a\x1B");
		sb.Append("\x2\x2\x22D\x224\x3\x2\x2\x2\x22D\x22E\x3\x2\x2\x2\x22E\x22F");
		sb.Append("\x3\x2\x2\x2\x22F\x230\x5V,\x2\x230\x231\a \x2\x2\x231o\x3\x2");
		sb.Append("\x2\x2\x232\x234\a\x4\x2\x2\x233\x235\a\x37\x2\x2\x234\x233");
		sb.Append("\x3\x2\x2\x2\x234\x235\x3\x2\x2\x2\x235\x237\x3\x2\x2\x2\x236");
		sb.Append("\x238\x5v<\x2\x237\x236\x3\x2\x2\x2\x237\x238\x3\x2\x2\x2\x238");
		sb.Append("q\x3\x2\x2\x2\x239\x23A\a\x32\x2\x2\x23A\x23B\a,\x2\x2\x23B");
		sb.Append("\x23C\a\x32\x2\x2\x23Cs\x3\x2\x2\x2\x23D\x23F\a\x3\x2\x2\x23E");
		sb.Append("\x240\x5v<\x2\x23F\x23E\x3\x2\x2\x2\x23F\x240\x3\x2\x2\x2\x240");
		sb.Append("\x246\x3\x2\x2\x2\x241\x243\a\x32\x2\x2\x242\x244\x5v<\x2\x243");
		sb.Append("\x242\x3\x2\x2\x2\x243\x244\x3\x2\x2\x2\x244\x246\x3\x2\x2\x2");
		sb.Append("\x245\x23D\x3\x2\x2\x2\x245\x241\x3\x2\x2\x2\x246u\x3\x2\x2");
		sb.Append("\x2\x247\x248\a\"\x2\x2\x248\x24D\x5x=\x2\x249\x24A\a\x1D\x2");
		sb.Append("\x2\x24A\x24C\x5x=\x2\x24B\x249\x3\x2\x2\x2\x24C\x24F\x3\x2");
		sb.Append("\x2\x2\x24D\x24B\x3\x2\x2\x2\x24D\x24E\x3\x2\x2\x2\x24E\x250");
		sb.Append("\x3\x2\x2\x2\x24F\x24D\x3\x2\x2\x2\x250\x251\a#\x2\x2\x251w");
		sb.Append("\x3\x2\x2\x2\x252\x25A\x5z>\x2\x253\x254\x5z>\x2\x254\x257\a");
		sb.Append("$\x2\x2\x255\x258\x5z>\x2\x256\x258\a\x32\x2\x2\x257\x255\x3");
		sb.Append("\x2\x2\x2\x257\x256\x3\x2\x2\x2\x258\x25A\x3\x2\x2\x2\x259\x252");
		sb.Append("\x3\x2\x2\x2\x259\x253\x3\x2\x2\x2\x25Ay\x3\x2\x2\x2\x25B\x25C");
		sb.Append("\t\x4\x2\x2\x25C{\x3\x2\x2\x2S}\x85\x8C\x96\x9D\xA5\xB3\xB9");
		sb.Append("\xC1\xCB\xD3\xDC\xE0\xE6\xEE\xF6\xFC\x101\x104\x107\x10B\x10E");
		sb.Append("\x111\x114\x119\x124\x128\x133\x13E\x14B\x156\x15C\x15F\x162");
		sb.Append("\x170\x175\x178\x17D\x181\x185\x189\x18D\x18F\x195\x1A1\x1AA");
		sb.Append("\x1AE\x1B2\x1B9\x1BD\x1C2\x1C8\x1CD\x1D2\x1D4\x1DA\x1DE\x1E4");
		sb.Append("\x1E8\x1EC\x1EE\x1F7\x1F9\x201\x203\x209\x211\x218\x21C\x220");
		sb.Append("\x224\x229\x22D\x234\x237\x23F\x243\x245\x24D\x257\x259");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
