//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Java8.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class Java8Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ABSTRACT=1, ASSERT=2, BOOLEAN=3, BREAK=4, BYTE=5, CASE=6, CATCH=7, CHAR=8, 
		CLASS=9, CONST=10, CONTINUE=11, DEFAULT=12, DO=13, DOUBLE=14, ELSE=15, 
		ENUM=16, EXTENDS=17, FINAL=18, FINALLY=19, FLOAT=20, FOR=21, IF=22, GOTO=23, 
		IMPLEMENTS=24, IMPORT=25, INSTANCEOF=26, INT=27, INTERFACE=28, LONG=29, 
		NATIVE=30, NEW=31, PACKAGE=32, PRIVATE=33, PROTECTED=34, PUBLIC=35, RETURN=36, 
		SHORT=37, STATIC=38, STRICTFP=39, SUPER=40, SWITCH=41, SYNCHRONIZED=42, 
		THIS=43, THROW=44, THROWS=45, TRANSIENT=46, TRY=47, VOID=48, VOLATILE=49, 
		WHILE=50, IntegerLiteral=51, FloatingPointLiteral=52, BooleanLiteral=53, 
		CharacterLiteral=54, StringLiteral=55, NullLiteral=56, LPAREN=57, RPAREN=58, 
		LBRACE=59, RBRACE=60, LBRACK=61, RBRACK=62, SEMI=63, COMMA=64, DOT=65, 
		ASSIGN=66, GT=67, LT=68, BANG=69, TILDE=70, QUESTION=71, COLON=72, EQUAL=73, 
		LE=74, GE=75, NOTEQUAL=76, AND=77, OR=78, INC=79, DEC=80, ADD=81, SUB=82, 
		MUL=83, DIV=84, BITAND=85, BITOR=86, CARET=87, MOD=88, ARROW=89, COLONCOLON=90, 
		ADD_ASSIGN=91, SUB_ASSIGN=92, MUL_ASSIGN=93, DIV_ASSIGN=94, AND_ASSIGN=95, 
		OR_ASSIGN=96, XOR_ASSIGN=97, MOD_ASSIGN=98, LSHIFT_ASSIGN=99, RSHIFT_ASSIGN=100, 
		URSHIFT_ASSIGN=101, Identifier=102, AT=103, ELLIPSIS=104, WS=105, COMMENT=106, 
		LINE_COMMENT=107;
	public const int
		RULE_literal = 0, RULE_type = 1, RULE_primitiveType = 2, RULE_numericType = 3, 
		RULE_integralType = 4, RULE_floatingPointType = 5, RULE_referenceType = 6, 
		RULE_classOrInterfaceType = 7, RULE_classType = 8, RULE_classType_lf_classOrInterfaceType = 9, 
		RULE_classType_lfno_classOrInterfaceType = 10, RULE_interfaceType = 11, 
		RULE_interfaceType_lf_classOrInterfaceType = 12, RULE_interfaceType_lfno_classOrInterfaceType = 13, 
		RULE_typeVariable = 14, RULE_arrayType = 15, RULE_dims = 16, RULE_typeParameter = 17, 
		RULE_typeParameterModifier = 18, RULE_typeBound = 19, RULE_additionalBound = 20, 
		RULE_typeArguments = 21, RULE_typeArgumentList = 22, RULE_typeArgument = 23, 
		RULE_wildcard = 24, RULE_wildcardBounds = 25, RULE_packageName = 26, RULE_typeName = 27, 
		RULE_packageOrTypeName = 28, RULE_expressionName = 29, RULE_methodName = 30, 
		RULE_ambiguousName = 31, RULE_compilationUnit = 32, RULE_packageDeclaration = 33, 
		RULE_packageModifier = 34, RULE_importDeclaration = 35, RULE_singleTypeImportDeclaration = 36, 
		RULE_typeImportOnDemandDeclaration = 37, RULE_singleStaticImportDeclaration = 38, 
		RULE_staticImportOnDemandDeclaration = 39, RULE_typeDeclaration = 40, 
		RULE_classDeclaration = 41, RULE_normalClassDeclaration = 42, RULE_classModifier = 43, 
		RULE_typeParameters = 44, RULE_typeParameterList = 45, RULE_superclass = 46, 
		RULE_superinterfaces = 47, RULE_interfaceTypeList = 48, RULE_classBody = 49, 
		RULE_classBodyDeclaration = 50, RULE_classMemberDeclaration = 51, RULE_fieldDeclaration = 52, 
		RULE_fieldModifier = 53, RULE_variableDeclaratorList = 54, RULE_variableDeclarator = 55, 
		RULE_variableDeclaratorId = 56, RULE_variableInitializer = 57, RULE_unannType = 58, 
		RULE_unannPrimitiveType = 59, RULE_unannReferenceType = 60, RULE_unannClassOrInterfaceType = 61, 
		RULE_unannClassType = 62, RULE_unannClassType_lf_unannClassOrInterfaceType = 63, 
		RULE_unannClassType_lfno_unannClassOrInterfaceType = 64, RULE_unannInterfaceType = 65, 
		RULE_unannInterfaceType_lf_unannClassOrInterfaceType = 66, RULE_unannInterfaceType_lfno_unannClassOrInterfaceType = 67, 
		RULE_unannTypeVariable = 68, RULE_unannArrayType = 69, RULE_methodDeclaration = 70, 
		RULE_methodModifier = 71, RULE_methodHeader = 72, RULE_result = 73, RULE_methodDeclarator = 74, 
		RULE_formalParameterList = 75, RULE_formalParameters = 76, RULE_formalParameter = 77, 
		RULE_variableModifier = 78, RULE_lastFormalParameter = 79, RULE_receiverParameter = 80, 
		RULE_throws_ = 81, RULE_exceptionTypeList = 82, RULE_exceptionType = 83, 
		RULE_methodBody = 84, RULE_instanceInitializer = 85, RULE_staticInitializer = 86, 
		RULE_constructorDeclaration = 87, RULE_constructorModifier = 88, RULE_constructorDeclarator = 89, 
		RULE_simpleTypeName = 90, RULE_constructorBody = 91, RULE_explicitConstructorInvocation = 92, 
		RULE_enumDeclaration = 93, RULE_enumBody = 94, RULE_enumConstantList = 95, 
		RULE_enumConstant = 96, RULE_enumConstantModifier = 97, RULE_enumBodyDeclarations = 98, 
		RULE_interfaceDeclaration = 99, RULE_normalInterfaceDeclaration = 100, 
		RULE_interfaceModifier = 101, RULE_extendsInterfaces = 102, RULE_interfaceBody = 103, 
		RULE_interfaceMemberDeclaration = 104, RULE_constantDeclaration = 105, 
		RULE_constantModifier = 106, RULE_interfaceMethodDeclaration = 107, RULE_interfaceMethodModifier = 108, 
		RULE_annotationTypeDeclaration = 109, RULE_annotationTypeBody = 110, RULE_annotationTypeMemberDeclaration = 111, 
		RULE_annotationTypeElementDeclaration = 112, RULE_annotationTypeElementModifier = 113, 
		RULE_defaultValue = 114, RULE_annotation = 115, RULE_normalAnnotation = 116, 
		RULE_elementValuePairList = 117, RULE_elementValuePair = 118, RULE_elementValue = 119, 
		RULE_elementValueArrayInitializer = 120, RULE_elementValueList = 121, 
		RULE_markerAnnotation = 122, RULE_singleElementAnnotation = 123, RULE_arrayInitializer = 124, 
		RULE_variableInitializerList = 125, RULE_block = 126, RULE_blockStatements = 127, 
		RULE_blockStatement = 128, RULE_localVariableDeclarationStatement = 129, 
		RULE_localVariableDeclaration = 130, RULE_statement = 131, RULE_statementNoShortIf = 132, 
		RULE_statementWithoutTrailingSubstatement = 133, RULE_emptyStatement = 134, 
		RULE_labeledStatement = 135, RULE_labeledStatementNoShortIf = 136, RULE_expressionStatement = 137, 
		RULE_statementExpression = 138, RULE_ifThenStatement = 139, RULE_ifThenElseStatement = 140, 
		RULE_ifThenElseStatementNoShortIf = 141, RULE_assertStatement = 142, RULE_switchStatement = 143, 
		RULE_switchBlock = 144, RULE_switchBlockStatementGroup = 145, RULE_switchLabels = 146, 
		RULE_switchLabel = 147, RULE_enumConstantName = 148, RULE_whileStatement = 149, 
		RULE_whileStatementNoShortIf = 150, RULE_doStatement = 151, RULE_forStatement = 152, 
		RULE_forStatementNoShortIf = 153, RULE_basicForStatement = 154, RULE_basicForStatementNoShortIf = 155, 
		RULE_forInit = 156, RULE_forUpdate = 157, RULE_statementExpressionList = 158, 
		RULE_enhancedForStatement = 159, RULE_enhancedForStatementNoShortIf = 160, 
		RULE_breakStatement = 161, RULE_continueStatement = 162, RULE_returnStatement = 163, 
		RULE_throwStatement = 164, RULE_synchronizedStatement = 165, RULE_tryStatement = 166, 
		RULE_catches = 167, RULE_catchClause = 168, RULE_catchFormalParameter = 169, 
		RULE_catchType = 170, RULE_finally_ = 171, RULE_tryWithResourcesStatement = 172, 
		RULE_resourceSpecification = 173, RULE_resourceList = 174, RULE_resource = 175, 
		RULE_primary = 176, RULE_primaryNoNewArray = 177, RULE_primaryNoNewArray_lf_arrayAccess = 178, 
		RULE_primaryNoNewArray_lfno_arrayAccess = 179, RULE_primaryNoNewArray_lf_primary = 180, 
		RULE_primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary = 181, RULE_primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary = 182, 
		RULE_primaryNoNewArray_lfno_primary = 183, RULE_primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary = 184, 
		RULE_primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary = 185, 
		RULE_classInstanceCreationExpression = 186, RULE_classInstanceCreationExpression_lf_primary = 187, 
		RULE_classInstanceCreationExpression_lfno_primary = 188, RULE_typeArgumentsOrDiamond = 189, 
		RULE_fieldAccess = 190, RULE_fieldAccess_lf_primary = 191, RULE_fieldAccess_lfno_primary = 192, 
		RULE_arrayAccess = 193, RULE_arrayAccess_lf_primary = 194, RULE_arrayAccess_lfno_primary = 195, 
		RULE_methodInvocation = 196, RULE_methodInvocation_lf_primary = 197, RULE_methodInvocation_lfno_primary = 198, 
		RULE_argumentList = 199, RULE_methodReference = 200, RULE_methodReference_lf_primary = 201, 
		RULE_methodReference_lfno_primary = 202, RULE_arrayCreationExpression = 203, 
		RULE_dimExprs = 204, RULE_dimExpr = 205, RULE_constantExpression = 206, 
		RULE_expression = 207, RULE_lambdaExpression = 208, RULE_lambdaParameters = 209, 
		RULE_inferredFormalParameterList = 210, RULE_lambdaBody = 211, RULE_assignmentExpression = 212, 
		RULE_assignment = 213, RULE_leftHandSide = 214, RULE_assignmentOperator = 215, 
		RULE_conditionalExpression = 216, RULE_conditionalOrExpression = 217, 
		RULE_conditionalAndExpression = 218, RULE_inclusiveOrExpression = 219, 
		RULE_exclusiveOrExpression = 220, RULE_andExpression = 221, RULE_equalityExpression = 222, 
		RULE_relationalExpression = 223, RULE_shiftExpression = 224, RULE_additiveExpression = 225, 
		RULE_multiplicativeExpression = 226, RULE_unaryExpression = 227, RULE_preIncrementExpression = 228, 
		RULE_preDecrementExpression = 229, RULE_unaryExpressionNotPlusMinus = 230, 
		RULE_postfixExpression = 231, RULE_postIncrementExpression = 232, RULE_postIncrementExpression_lf_postfixExpression = 233, 
		RULE_postDecrementExpression = 234, RULE_postDecrementExpression_lf_postfixExpression = 235, 
		RULE_castExpression = 236;
	public static readonly string[] ruleNames = {
		"literal", "type", "primitiveType", "numericType", "integralType", "floatingPointType", 
		"referenceType", "classOrInterfaceType", "classType", "classType_lf_classOrInterfaceType", 
		"classType_lfno_classOrInterfaceType", "interfaceType", "interfaceType_lf_classOrInterfaceType", 
		"interfaceType_lfno_classOrInterfaceType", "typeVariable", "arrayType", 
		"dims", "typeParameter", "typeParameterModifier", "typeBound", "additionalBound", 
		"typeArguments", "typeArgumentList", "typeArgument", "wildcard", "wildcardBounds", 
		"packageName", "typeName", "packageOrTypeName", "expressionName", "methodName", 
		"ambiguousName", "compilationUnit", "packageDeclaration", "packageModifier", 
		"importDeclaration", "singleTypeImportDeclaration", "typeImportOnDemandDeclaration", 
		"singleStaticImportDeclaration", "staticImportOnDemandDeclaration", "typeDeclaration", 
		"classDeclaration", "normalClassDeclaration", "classModifier", "typeParameters", 
		"typeParameterList", "superclass", "superinterfaces", "interfaceTypeList", 
		"classBody", "classBodyDeclaration", "classMemberDeclaration", "fieldDeclaration", 
		"fieldModifier", "variableDeclaratorList", "variableDeclarator", "variableDeclaratorId", 
		"variableInitializer", "unannType", "unannPrimitiveType", "unannReferenceType", 
		"unannClassOrInterfaceType", "unannClassType", "unannClassType_lf_unannClassOrInterfaceType", 
		"unannClassType_lfno_unannClassOrInterfaceType", "unannInterfaceType", 
		"unannInterfaceType_lf_unannClassOrInterfaceType", "unannInterfaceType_lfno_unannClassOrInterfaceType", 
		"unannTypeVariable", "unannArrayType", "methodDeclaration", "methodModifier", 
		"methodHeader", "result", "methodDeclarator", "formalParameterList", "formalParameters", 
		"formalParameter", "variableModifier", "lastFormalParameter", "receiverParameter", 
		"throws_", "exceptionTypeList", "exceptionType", "methodBody", "instanceInitializer", 
		"staticInitializer", "constructorDeclaration", "constructorModifier", 
		"constructorDeclarator", "simpleTypeName", "constructorBody", "explicitConstructorInvocation", 
		"enumDeclaration", "enumBody", "enumConstantList", "enumConstant", "enumConstantModifier", 
		"enumBodyDeclarations", "interfaceDeclaration", "normalInterfaceDeclaration", 
		"interfaceModifier", "extendsInterfaces", "interfaceBody", "interfaceMemberDeclaration", 
		"constantDeclaration", "constantModifier", "interfaceMethodDeclaration", 
		"interfaceMethodModifier", "annotationTypeDeclaration", "annotationTypeBody", 
		"annotationTypeMemberDeclaration", "annotationTypeElementDeclaration", 
		"annotationTypeElementModifier", "defaultValue", "annotation", "normalAnnotation", 
		"elementValuePairList", "elementValuePair", "elementValue", "elementValueArrayInitializer", 
		"elementValueList", "markerAnnotation", "singleElementAnnotation", "arrayInitializer", 
		"variableInitializerList", "block", "blockStatements", "blockStatement", 
		"localVariableDeclarationStatement", "localVariableDeclaration", "statement", 
		"statementNoShortIf", "statementWithoutTrailingSubstatement", "emptyStatement", 
		"labeledStatement", "labeledStatementNoShortIf", "expressionStatement", 
		"statementExpression", "ifThenStatement", "ifThenElseStatement", "ifThenElseStatementNoShortIf", 
		"assertStatement", "switchStatement", "switchBlock", "switchBlockStatementGroup", 
		"switchLabels", "switchLabel", "enumConstantName", "whileStatement", "whileStatementNoShortIf", 
		"doStatement", "forStatement", "forStatementNoShortIf", "basicForStatement", 
		"basicForStatementNoShortIf", "forInit", "forUpdate", "statementExpressionList", 
		"enhancedForStatement", "enhancedForStatementNoShortIf", "breakStatement", 
		"continueStatement", "returnStatement", "throwStatement", "synchronizedStatement", 
		"tryStatement", "catches", "catchClause", "catchFormalParameter", "catchType", 
		"finally_", "tryWithResourcesStatement", "resourceSpecification", "resourceList", 
		"resource", "primary", "primaryNoNewArray", "primaryNoNewArray_lf_arrayAccess", 
		"primaryNoNewArray_lfno_arrayAccess", "primaryNoNewArray_lf_primary", 
		"primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary", "primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary", 
		"primaryNoNewArray_lfno_primary", "primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary", 
		"primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary", "classInstanceCreationExpression", 
		"classInstanceCreationExpression_lf_primary", "classInstanceCreationExpression_lfno_primary", 
		"typeArgumentsOrDiamond", "fieldAccess", "fieldAccess_lf_primary", "fieldAccess_lfno_primary", 
		"arrayAccess", "arrayAccess_lf_primary", "arrayAccess_lfno_primary", "methodInvocation", 
		"methodInvocation_lf_primary", "methodInvocation_lfno_primary", "argumentList", 
		"methodReference", "methodReference_lf_primary", "methodReference_lfno_primary", 
		"arrayCreationExpression", "dimExprs", "dimExpr", "constantExpression", 
		"expression", "lambdaExpression", "lambdaParameters", "inferredFormalParameterList", 
		"lambdaBody", "assignmentExpression", "assignment", "leftHandSide", "assignmentOperator", 
		"conditionalExpression", "conditionalOrExpression", "conditionalAndExpression", 
		"inclusiveOrExpression", "exclusiveOrExpression", "andExpression", "equalityExpression", 
		"relationalExpression", "shiftExpression", "additiveExpression", "multiplicativeExpression", 
		"unaryExpression", "preIncrementExpression", "preDecrementExpression", 
		"unaryExpressionNotPlusMinus", "postfixExpression", "postIncrementExpression", 
		"postIncrementExpression_lf_postfixExpression", "postDecrementExpression", 
		"postDecrementExpression_lf_postfixExpression", "castExpression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'abstract'", "'assert'", "'boolean'", "'break'", "'byte'", "'case'", 
		"'catch'", "'char'", "'class'", "'const'", "'continue'", "'default'", 
		"'do'", "'double'", "'else'", "'enum'", "'extends'", "'final'", "'finally'", 
		"'float'", "'for'", "'if'", "'goto'", "'implements'", "'import'", "'instanceof'", 
		"'int'", "'interface'", "'long'", "'native'", "'new'", "'package'", "'private'", 
		"'protected'", "'public'", "'return'", "'short'", "'static'", "'strictfp'", 
		"'super'", "'switch'", "'synchronized'", "'this'", "'throw'", "'throws'", 
		"'transient'", "'try'", "'void'", "'volatile'", "'while'", null, null, 
		null, null, null, "'null'", "'('", "')'", "'{'", "'}'", "'['", "']'", 
		"';'", "','", "'.'", "'='", "'>'", "'<'", "'!'", "'~'", "'?'", "':'", 
		"'=='", "'<='", "'>='", "'!='", "'&&'", "'||'", "'++'", "'--'", "'+'", 
		"'-'", "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", "'->'", "'::'", "'+='", 
		"'-='", "'*='", "'/='", "'&='", "'|='", "'^='", "'%='", "'<<='", "'>>='", 
		"'>>>='", null, "'@'", "'...'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ABSTRACT", "ASSERT", "BOOLEAN", "BREAK", "BYTE", "CASE", "CATCH", 
		"CHAR", "CLASS", "CONST", "CONTINUE", "DEFAULT", "DO", "DOUBLE", "ELSE", 
		"ENUM", "EXTENDS", "FINAL", "FINALLY", "FLOAT", "FOR", "IF", "GOTO", "IMPLEMENTS", 
		"IMPORT", "INSTANCEOF", "INT", "INTERFACE", "LONG", "NATIVE", "NEW", "PACKAGE", 
		"PRIVATE", "PROTECTED", "PUBLIC", "RETURN", "SHORT", "STATIC", "STRICTFP", 
		"SUPER", "SWITCH", "SYNCHRONIZED", "THIS", "THROW", "THROWS", "TRANSIENT", 
		"TRY", "VOID", "VOLATILE", "WHILE", "IntegerLiteral", "FloatingPointLiteral", 
		"BooleanLiteral", "CharacterLiteral", "StringLiteral", "NullLiteral", 
		"LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMI", "COMMA", 
		"DOT", "ASSIGN", "GT", "LT", "BANG", "TILDE", "QUESTION", "COLON", "EQUAL", 
		"LE", "GE", "NOTEQUAL", "AND", "OR", "INC", "DEC", "ADD", "SUB", "MUL", 
		"DIV", "BITAND", "BITOR", "CARET", "MOD", "ARROW", "COLONCOLON", "ADD_ASSIGN", 
		"SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", 
		"MOD_ASSIGN", "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", "URSHIFT_ASSIGN", "Identifier", 
		"AT", "ELLIPSIS", "WS", "COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Java8.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static Java8Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

	public Java8Parser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode IntegerLiteral() { return GetToken(Java8Parser.IntegerLiteral, 0); }
		public ITerminalNode FloatingPointLiteral() { return GetToken(Java8Parser.FloatingPointLiteral, 0); }
		public ITerminalNode BooleanLiteral() { return GetToken(Java8Parser.BooleanLiteral, 0); }
		public ITerminalNode CharacterLiteral() { return GetToken(Java8Parser.CharacterLiteral, 0); }
		public ITerminalNode StringLiteral() { return GetToken(Java8Parser.StringLiteral, 0); }
		public ITerminalNode NullLiteral() { return GetToken(Java8Parser.NullLiteral, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 0, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 474;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 2, RULE_type);
		try {
			State = 478;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 476; primitiveType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 477; referenceType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public NumericTypeContext numericType() {
			return GetRuleContext<NumericTypeContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 4, RULE_primitiveType);
		int _la;
		try {
			State = 494;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 483;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT) {
					{
					{
					State = 480; annotation();
					}
					}
					State = 485;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 486; numericType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 490;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT) {
					{
					{
					State = 487; annotation();
					}
					}
					State = 492;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 493; Match(BOOLEAN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericTypeContext : ParserRuleContext {
		public IntegralTypeContext integralType() {
			return GetRuleContext<IntegralTypeContext>(0);
		}
		public FloatingPointTypeContext floatingPointType() {
			return GetRuleContext<FloatingPointTypeContext>(0);
		}
		public NumericTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterNumericType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitNumericType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericTypeContext numericType() {
		NumericTypeContext _localctx = new NumericTypeContext(Context, State);
		EnterRule(_localctx, 6, RULE_numericType);
		try {
			State = 498;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BYTE:
			case CHAR:
			case INT:
			case LONG:
			case SHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 496; integralType();
				}
				break;
			case DOUBLE:
			case FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 497; floatingPointType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegralTypeContext : ParserRuleContext {
		public IntegralTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integralType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterIntegralType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitIntegralType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegralType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegralTypeContext integralType() {
		IntegralTypeContext _localctx = new IntegralTypeContext(Context, State);
		EnterRule(_localctx, 8, RULE_integralType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 500;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BYTE) | (1L << CHAR) | (1L << INT) | (1L << LONG) | (1L << SHORT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatingPointTypeContext : ParserRuleContext {
		public FloatingPointTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatingPointType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterFloatingPointType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitFloatingPointType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatingPointType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatingPointTypeContext floatingPointType() {
		FloatingPointTypeContext _localctx = new FloatingPointTypeContext(Context, State);
		EnterRule(_localctx, 10, RULE_floatingPointType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 502;
			_la = TokenStream.LA(1);
			if ( !(_la==DOUBLE || _la==FLOAT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceTypeContext : ParserRuleContext {
		public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		public TypeVariableContext typeVariable() {
			return GetRuleContext<TypeVariableContext>(0);
		}
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public ReferenceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterReferenceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitReferenceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceTypeContext referenceType() {
		ReferenceTypeContext _localctx = new ReferenceTypeContext(Context, State);
		EnterRule(_localctx, 12, RULE_referenceType);
		try {
			State = 507;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 504; classOrInterfaceType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 505; typeVariable();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 506; arrayType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassOrInterfaceTypeContext : ParserRuleContext {
		public ClassType_lfno_classOrInterfaceTypeContext classType_lfno_classOrInterfaceType() {
			return GetRuleContext<ClassType_lfno_classOrInterfaceTypeContext>(0);
		}
		public InterfaceType_lfno_classOrInterfaceTypeContext interfaceType_lfno_classOrInterfaceType() {
			return GetRuleContext<InterfaceType_lfno_classOrInterfaceTypeContext>(0);
		}
		public ClassType_lf_classOrInterfaceTypeContext[] classType_lf_classOrInterfaceType() {
			return GetRuleContexts<ClassType_lf_classOrInterfaceTypeContext>();
		}
		public ClassType_lf_classOrInterfaceTypeContext classType_lf_classOrInterfaceType(int i) {
			return GetRuleContext<ClassType_lf_classOrInterfaceTypeContext>(i);
		}
		public InterfaceType_lf_classOrInterfaceTypeContext[] interfaceType_lf_classOrInterfaceType() {
			return GetRuleContexts<InterfaceType_lf_classOrInterfaceTypeContext>();
		}
		public InterfaceType_lf_classOrInterfaceTypeContext interfaceType_lf_classOrInterfaceType(int i) {
			return GetRuleContext<InterfaceType_lf_classOrInterfaceTypeContext>(i);
		}
		public ClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterClassOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitClassOrInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassOrInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassOrInterfaceTypeContext classOrInterfaceType() {
		ClassOrInterfaceTypeContext _localctx = new ClassOrInterfaceTypeContext(Context, State);
		EnterRule(_localctx, 14, RULE_classOrInterfaceType);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 511;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 509; classType_lfno_classOrInterfaceType();
				}
				break;
			case 2:
				{
				State = 510; interfaceType_lfno_classOrInterfaceType();
				}
				break;
			}
			State = 517;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 515;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
					case 1:
						{
						State = 513; classType_lf_classOrInterfaceType();
						}
						break;
					case 2:
						{
						State = 514; interfaceType_lf_classOrInterfaceType();
						}
						break;
					}
					} 
				}
				State = 519;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTypeContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		public ClassTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterClassType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitClassType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassTypeContext classType() {
		ClassTypeContext _localctx = new ClassTypeContext(Context, State);
		EnterRule(_localctx, 16, RULE_classType);
		int _la;
		try {
			State = 542;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 523;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT) {
					{
					{
					State = 520; annotation();
					}
					}
					State = 525;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 526; Match(Identifier);
				State = 528;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 527; typeArguments();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 530; classOrInterfaceType();
				State = 531; Match(DOT);
				State = 535;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT) {
					{
					{
					State = 532; annotation();
					}
					}
					State = 537;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 538; Match(Identifier);
				State = 540;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 539; typeArguments();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassType_lf_classOrInterfaceTypeContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ClassType_lf_classOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classType_lf_classOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterClassType_lf_classOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitClassType_lf_classOrInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassType_lf_classOrInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassType_lf_classOrInterfaceTypeContext classType_lf_classOrInterfaceType() {
		ClassType_lf_classOrInterfaceTypeContext _localctx = new ClassType_lf_classOrInterfaceTypeContext(Context, State);
		EnterRule(_localctx, 18, RULE_classType_lf_classOrInterfaceType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 544; Match(DOT);
			State = 548;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 545; annotation();
				}
				}
				State = 550;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 551; Match(Identifier);
			State = 553;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 552; typeArguments();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassType_lfno_classOrInterfaceTypeContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ClassType_lfno_classOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classType_lfno_classOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterClassType_lfno_classOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitClassType_lfno_classOrInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassType_lfno_classOrInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassType_lfno_classOrInterfaceTypeContext classType_lfno_classOrInterfaceType() {
		ClassType_lfno_classOrInterfaceTypeContext _localctx = new ClassType_lfno_classOrInterfaceTypeContext(Context, State);
		EnterRule(_localctx, 20, RULE_classType_lfno_classOrInterfaceType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 558;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 555; annotation();
				}
				}
				State = 560;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 561; Match(Identifier);
			State = 563;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 562; typeArguments();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceTypeContext : ParserRuleContext {
		public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public InterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceTypeContext interfaceType() {
		InterfaceTypeContext _localctx = new InterfaceTypeContext(Context, State);
		EnterRule(_localctx, 22, RULE_interfaceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 565; classType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceType_lf_classOrInterfaceTypeContext : ParserRuleContext {
		public ClassType_lf_classOrInterfaceTypeContext classType_lf_classOrInterfaceType() {
			return GetRuleContext<ClassType_lf_classOrInterfaceTypeContext>(0);
		}
		public InterfaceType_lf_classOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceType_lf_classOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInterfaceType_lf_classOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInterfaceType_lf_classOrInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceType_lf_classOrInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceType_lf_classOrInterfaceTypeContext interfaceType_lf_classOrInterfaceType() {
		InterfaceType_lf_classOrInterfaceTypeContext _localctx = new InterfaceType_lf_classOrInterfaceTypeContext(Context, State);
		EnterRule(_localctx, 24, RULE_interfaceType_lf_classOrInterfaceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 567; classType_lf_classOrInterfaceType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceType_lfno_classOrInterfaceTypeContext : ParserRuleContext {
		public ClassType_lfno_classOrInterfaceTypeContext classType_lfno_classOrInterfaceType() {
			return GetRuleContext<ClassType_lfno_classOrInterfaceTypeContext>(0);
		}
		public InterfaceType_lfno_classOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceType_lfno_classOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInterfaceType_lfno_classOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInterfaceType_lfno_classOrInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceType_lfno_classOrInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceType_lfno_classOrInterfaceTypeContext interfaceType_lfno_classOrInterfaceType() {
		InterfaceType_lfno_classOrInterfaceTypeContext _localctx = new InterfaceType_lfno_classOrInterfaceTypeContext(Context, State);
		EnterRule(_localctx, 26, RULE_interfaceType_lfno_classOrInterfaceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 569; classType_lfno_classOrInterfaceType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeVariableContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public TypeVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeVariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeVariableContext typeVariable() {
		TypeVariableContext _localctx = new TypeVariableContext(Context, State);
		EnterRule(_localctx, 28, RULE_typeVariable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 574;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 571; annotation();
				}
				}
				State = 576;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 577; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public DimsContext dims() {
			return GetRuleContext<DimsContext>(0);
		}
		public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		public TypeVariableContext typeVariable() {
			return GetRuleContext<TypeVariableContext>(0);
		}
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitArrayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(Context, State);
		EnterRule(_localctx, 30, RULE_arrayType);
		try {
			State = 588;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 579; primitiveType();
				State = 580; dims();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 582; classOrInterfaceType();
				State = 583; dims();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 585; typeVariable();
				State = 586; dims();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimsContext : ParserRuleContext {
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public DimsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dims; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterDims(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitDims(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDims(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DimsContext dims() {
		DimsContext _localctx = new DimsContext(Context, State);
		EnterRule(_localctx, 32, RULE_dims);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 593;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 590; annotation();
				}
				}
				State = 595;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 596; Match(LBRACK);
			State = 597; Match(RBRACK);
			State = 608;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 601;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==AT) {
						{
						{
						State = 598; annotation();
						}
						}
						State = 603;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 604; Match(LBRACK);
					State = 605; Match(RBRACK);
					}
					} 
				}
				State = 610;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeParameterModifierContext[] typeParameterModifier() {
			return GetRuleContexts<TypeParameterModifierContext>();
		}
		public TypeParameterModifierContext typeParameterModifier(int i) {
			return GetRuleContext<TypeParameterModifierContext>(i);
		}
		public TypeBoundContext typeBound() {
			return GetRuleContext<TypeBoundContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(Context, State);
		EnterRule(_localctx, 34, RULE_typeParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 614;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 611; typeParameterModifier();
				}
				}
				State = 616;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 617; Match(Identifier);
			State = 619;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 618; typeBound();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public TypeParameterModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeParameterModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeParameterModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterModifierContext typeParameterModifier() {
		TypeParameterModifierContext _localctx = new TypeParameterModifierContext(Context, State);
		EnterRule(_localctx, 36, RULE_typeParameterModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 621; annotation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeBoundContext : ParserRuleContext {
		public TypeVariableContext typeVariable() {
			return GetRuleContext<TypeVariableContext>(0);
		}
		public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		public AdditionalBoundContext[] additionalBound() {
			return GetRuleContexts<AdditionalBoundContext>();
		}
		public AdditionalBoundContext additionalBound(int i) {
			return GetRuleContext<AdditionalBoundContext>(i);
		}
		public TypeBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeBound; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeBound(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeBound(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeBound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeBoundContext typeBound() {
		TypeBoundContext _localctx = new TypeBoundContext(Context, State);
		EnterRule(_localctx, 38, RULE_typeBound);
		int _la;
		try {
			State = 633;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 623; Match(EXTENDS);
				State = 624; typeVariable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 625; Match(EXTENDS);
				State = 626; classOrInterfaceType();
				State = 630;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==BITAND) {
					{
					{
					State = 627; additionalBound();
					}
					}
					State = 632;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditionalBoundContext : ParserRuleContext {
		public InterfaceTypeContext interfaceType() {
			return GetRuleContext<InterfaceTypeContext>(0);
		}
		public AdditionalBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additionalBound; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAdditionalBound(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAdditionalBound(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditionalBound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditionalBoundContext additionalBound() {
		AdditionalBoundContext _localctx = new AdditionalBoundContext(Context, State);
		EnterRule(_localctx, 40, RULE_additionalBound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 635; Match(BITAND);
			State = 636; interfaceType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsContext : ParserRuleContext {
		public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public TypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsContext typeArguments() {
		TypeArgumentsContext _localctx = new TypeArgumentsContext(Context, State);
		EnterRule(_localctx, 42, RULE_typeArguments);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 638; Match(LT);
			State = 639; typeArgumentList();
			State = 640; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentListContext : ParserRuleContext {
		public TypeArgumentContext[] typeArgument() {
			return GetRuleContexts<TypeArgumentContext>();
		}
		public TypeArgumentContext typeArgument(int i) {
			return GetRuleContext<TypeArgumentContext>(i);
		}
		public TypeArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentListContext typeArgumentList() {
		TypeArgumentListContext _localctx = new TypeArgumentListContext(Context, State);
		EnterRule(_localctx, 44, RULE_typeArgumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 642; typeArgument();
			State = 647;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 643; Match(COMMA);
				State = 644; typeArgument();
				}
				}
				State = 649;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentContext : ParserRuleContext {
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public WildcardContext wildcard() {
			return GetRuleContext<WildcardContext>(0);
		}
		public TypeArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentContext typeArgument() {
		TypeArgumentContext _localctx = new TypeArgumentContext(Context, State);
		EnterRule(_localctx, 46, RULE_typeArgument);
		try {
			State = 652;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 650; referenceType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 651; wildcard();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WildcardContext : ParserRuleContext {
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public WildcardBoundsContext wildcardBounds() {
			return GetRuleContext<WildcardBoundsContext>(0);
		}
		public WildcardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wildcard; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterWildcard(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitWildcard(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWildcard(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WildcardContext wildcard() {
		WildcardContext _localctx = new WildcardContext(Context, State);
		EnterRule(_localctx, 48, RULE_wildcard);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 657;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 654; annotation();
				}
				}
				State = 659;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 660; Match(QUESTION);
			State = 662;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS || _la==SUPER) {
				{
				State = 661; wildcardBounds();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WildcardBoundsContext : ParserRuleContext {
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public WildcardBoundsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wildcardBounds; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterWildcardBounds(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitWildcardBounds(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWildcardBounds(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WildcardBoundsContext wildcardBounds() {
		WildcardBoundsContext _localctx = new WildcardBoundsContext(Context, State);
		EnterRule(_localctx, 50, RULE_wildcardBounds);
		try {
			State = 668;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EXTENDS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 664; Match(EXTENDS);
				State = 665; referenceType();
				}
				break;
			case SUPER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 666; Match(SUPER);
				State = 667; referenceType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public PackageNameContext packageName() {
			return GetRuleContext<PackageNameContext>(0);
		}
		public PackageNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPackageName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPackageName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackageName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackageNameContext packageName() {
		return packageName(0);
	}

	private PackageNameContext packageName(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PackageNameContext _localctx = new PackageNameContext(Context, _parentState);
		PackageNameContext _prevctx = _localctx;
		int _startState = 52;
		EnterRecursionRule(_localctx, 52, RULE_packageName, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 671; Match(Identifier);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 678;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PackageNameContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_packageName);
					State = 673;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 674; Match(DOT);
					State = 675; Match(Identifier);
					}
					} 
				}
				State = 680;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public PackageOrTypeNameContext packageOrTypeName() {
			return GetRuleContext<PackageOrTypeNameContext>(0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 54, RULE_typeName);
		try {
			State = 686;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 681; Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 682; packageOrTypeName(0);
				State = 683; Match(DOT);
				State = 684; Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageOrTypeNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public PackageOrTypeNameContext packageOrTypeName() {
			return GetRuleContext<PackageOrTypeNameContext>(0);
		}
		public PackageOrTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageOrTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPackageOrTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPackageOrTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackageOrTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackageOrTypeNameContext packageOrTypeName() {
		return packageOrTypeName(0);
	}

	private PackageOrTypeNameContext packageOrTypeName(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PackageOrTypeNameContext _localctx = new PackageOrTypeNameContext(Context, _parentState);
		PackageOrTypeNameContext _prevctx = _localctx;
		int _startState = 56;
		EnterRecursionRule(_localctx, 56, RULE_packageOrTypeName, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 689; Match(Identifier);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 696;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PackageOrTypeNameContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_packageOrTypeName);
					State = 691;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 692; Match(DOT);
					State = 693; Match(Identifier);
					}
					} 
				}
				State = 698;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExpressionNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public AmbiguousNameContext ambiguousName() {
			return GetRuleContext<AmbiguousNameContext>(0);
		}
		public ExpressionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterExpressionName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitExpressionName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionNameContext expressionName() {
		ExpressionNameContext _localctx = new ExpressionNameContext(Context, State);
		EnterRule(_localctx, 58, RULE_expressionName);
		try {
			State = 704;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 699; Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 700; ambiguousName(0);
				State = 701; Match(DOT);
				State = 702; Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public MethodNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMethodName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMethodName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodNameContext methodName() {
		MethodNameContext _localctx = new MethodNameContext(Context, State);
		EnterRule(_localctx, 60, RULE_methodName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 706; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmbiguousNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public AmbiguousNameContext ambiguousName() {
			return GetRuleContext<AmbiguousNameContext>(0);
		}
		public AmbiguousNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ambiguousName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAmbiguousName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAmbiguousName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmbiguousName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmbiguousNameContext ambiguousName() {
		return ambiguousName(0);
	}

	private AmbiguousNameContext ambiguousName(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AmbiguousNameContext _localctx = new AmbiguousNameContext(Context, _parentState);
		AmbiguousNameContext _prevctx = _localctx;
		int _startState = 62;
		EnterRecursionRule(_localctx, 62, RULE_ambiguousName, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 709; Match(Identifier);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 716;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AmbiguousNameContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_ambiguousName);
					State = 711;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 712; Match(DOT);
					State = 713; Match(Identifier);
					}
					} 
				}
				State = 718;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CompilationUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(Java8Parser.Eof, 0); }
		public PackageDeclarationContext packageDeclaration() {
			return GetRuleContext<PackageDeclarationContext>(0);
		}
		public ImportDeclarationContext[] importDeclaration() {
			return GetRuleContexts<ImportDeclarationContext>();
		}
		public ImportDeclarationContext importDeclaration(int i) {
			return GetRuleContext<ImportDeclarationContext>(i);
		}
		public TypeDeclarationContext[] typeDeclaration() {
			return GetRuleContexts<TypeDeclarationContext>();
		}
		public TypeDeclarationContext typeDeclaration(int i) {
			return GetRuleContext<TypeDeclarationContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 64, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 720;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				{
				State = 719; packageDeclaration();
				}
				break;
			}
			State = 725;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IMPORT) {
				{
				{
				State = 722; importDeclaration();
				}
				}
				State = 727;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 731;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << CLASS) | (1L << ENUM) | (1L << FINAL) | (1L << INTERFACE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC) | (1L << STRICTFP) | (1L << SEMI))) != 0) || _la==AT) {
				{
				{
				State = 728; typeDeclaration();
				}
				}
				State = 733;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 734; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageDeclarationContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(Java8Parser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(Java8Parser.Identifier, i);
		}
		public PackageModifierContext[] packageModifier() {
			return GetRuleContexts<PackageModifierContext>();
		}
		public PackageModifierContext packageModifier(int i) {
			return GetRuleContext<PackageModifierContext>(i);
		}
		public PackageDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPackageDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPackageDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackageDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackageDeclarationContext packageDeclaration() {
		PackageDeclarationContext _localctx = new PackageDeclarationContext(Context, State);
		EnterRule(_localctx, 66, RULE_packageDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 739;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 736; packageModifier();
				}
				}
				State = 741;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 742; Match(PACKAGE);
			State = 743; Match(Identifier);
			State = 748;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 744; Match(DOT);
				State = 745; Match(Identifier);
				}
				}
				State = 750;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 751; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public PackageModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPackageModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPackageModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackageModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackageModifierContext packageModifier() {
		PackageModifierContext _localctx = new PackageModifierContext(Context, State);
		EnterRule(_localctx, 68, RULE_packageModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 753; annotation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDeclarationContext : ParserRuleContext {
		public SingleTypeImportDeclarationContext singleTypeImportDeclaration() {
			return GetRuleContext<SingleTypeImportDeclarationContext>(0);
		}
		public TypeImportOnDemandDeclarationContext typeImportOnDemandDeclaration() {
			return GetRuleContext<TypeImportOnDemandDeclarationContext>(0);
		}
		public SingleStaticImportDeclarationContext singleStaticImportDeclaration() {
			return GetRuleContext<SingleStaticImportDeclarationContext>(0);
		}
		public StaticImportOnDemandDeclarationContext staticImportOnDemandDeclaration() {
			return GetRuleContext<StaticImportOnDemandDeclarationContext>(0);
		}
		public ImportDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterImportDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitImportDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportDeclarationContext importDeclaration() {
		ImportDeclarationContext _localctx = new ImportDeclarationContext(Context, State);
		EnterRule(_localctx, 70, RULE_importDeclaration);
		try {
			State = 759;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 755; singleTypeImportDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 756; typeImportOnDemandDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 757; singleStaticImportDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 758; staticImportOnDemandDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleTypeImportDeclarationContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public SingleTypeImportDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleTypeImportDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSingleTypeImportDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSingleTypeImportDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleTypeImportDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleTypeImportDeclarationContext singleTypeImportDeclaration() {
		SingleTypeImportDeclarationContext _localctx = new SingleTypeImportDeclarationContext(Context, State);
		EnterRule(_localctx, 72, RULE_singleTypeImportDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 761; Match(IMPORT);
			State = 762; typeName();
			State = 763; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeImportOnDemandDeclarationContext : ParserRuleContext {
		public PackageOrTypeNameContext packageOrTypeName() {
			return GetRuleContext<PackageOrTypeNameContext>(0);
		}
		public TypeImportOnDemandDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeImportOnDemandDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeImportOnDemandDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeImportOnDemandDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeImportOnDemandDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeImportOnDemandDeclarationContext typeImportOnDemandDeclaration() {
		TypeImportOnDemandDeclarationContext _localctx = new TypeImportOnDemandDeclarationContext(Context, State);
		EnterRule(_localctx, 74, RULE_typeImportOnDemandDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 765; Match(IMPORT);
			State = 766; packageOrTypeName(0);
			State = 767; Match(DOT);
			State = 768; Match(MUL);
			State = 769; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleStaticImportDeclarationContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public SingleStaticImportDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleStaticImportDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSingleStaticImportDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSingleStaticImportDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleStaticImportDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleStaticImportDeclarationContext singleStaticImportDeclaration() {
		SingleStaticImportDeclarationContext _localctx = new SingleStaticImportDeclarationContext(Context, State);
		EnterRule(_localctx, 76, RULE_singleStaticImportDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 771; Match(IMPORT);
			State = 772; Match(STATIC);
			State = 773; typeName();
			State = 774; Match(DOT);
			State = 775; Match(Identifier);
			State = 776; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StaticImportOnDemandDeclarationContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public StaticImportOnDemandDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_staticImportOnDemandDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterStaticImportOnDemandDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitStaticImportOnDemandDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStaticImportOnDemandDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StaticImportOnDemandDeclarationContext staticImportOnDemandDeclaration() {
		StaticImportOnDemandDeclarationContext _localctx = new StaticImportOnDemandDeclarationContext(Context, State);
		EnterRule(_localctx, 78, RULE_staticImportOnDemandDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 778; Match(IMPORT);
			State = 779; Match(STATIC);
			State = 780; typeName();
			State = 781; Match(DOT);
			State = 782; Match(MUL);
			State = 783; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(Context, State);
		EnterRule(_localctx, 80, RULE_typeDeclaration);
		try {
			State = 788;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 785; classDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 786; interfaceDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 787; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		public NormalClassDeclarationContext normalClassDeclaration() {
			return GetRuleContext<NormalClassDeclarationContext>(0);
		}
		public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 82, RULE_classDeclaration);
		try {
			State = 792;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 790; normalClassDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 791; enumDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalClassDeclarationContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ClassModifierContext[] classModifier() {
			return GetRuleContexts<ClassModifierContext>();
		}
		public ClassModifierContext classModifier(int i) {
			return GetRuleContext<ClassModifierContext>(i);
		}
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public SuperclassContext superclass() {
			return GetRuleContext<SuperclassContext>(0);
		}
		public SuperinterfacesContext superinterfaces() {
			return GetRuleContext<SuperinterfacesContext>(0);
		}
		public NormalClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalClassDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterNormalClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitNormalClassDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NormalClassDeclarationContext normalClassDeclaration() {
		NormalClassDeclarationContext _localctx = new NormalClassDeclarationContext(Context, State);
		EnterRule(_localctx, 84, RULE_normalClassDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 797;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << FINAL) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC) | (1L << STRICTFP))) != 0) || _la==AT) {
				{
				{
				State = 794; classModifier();
				}
				}
				State = 799;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 800; Match(CLASS);
			State = 801; Match(Identifier);
			State = 803;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 802; typeParameters();
				}
			}

			State = 806;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 805; superclass();
				}
			}

			State = 809;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IMPLEMENTS) {
				{
				State = 808; superinterfaces();
				}
			}

			State = 811; classBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public ClassModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterClassModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitClassModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassModifierContext classModifier() {
		ClassModifierContext _localctx = new ClassModifierContext(Context, State);
		EnterRule(_localctx, 86, RULE_classModifier);
		try {
			State = 821;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 813; annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 814; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 815; Match(PROTECTED);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 816; Match(PRIVATE);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 817; Match(ABSTRACT);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 6);
				{
				State = 818; Match(STATIC);
				}
				break;
			case FINAL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 819; Match(FINAL);
				}
				break;
			case STRICTFP:
				EnterOuterAlt(_localctx, 8);
				{
				State = 820; Match(STRICTFP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParametersContext : ParserRuleContext {
		public TypeParameterListContext typeParameterList() {
			return GetRuleContext<TypeParameterListContext>(0);
		}
		public TypeParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParametersContext typeParameters() {
		TypeParametersContext _localctx = new TypeParametersContext(Context, State);
		EnterRule(_localctx, 88, RULE_typeParameters);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 823; Match(LT);
			State = 824; typeParameterList();
			State = 825; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterListContext : ParserRuleContext {
		public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		public TypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterListContext typeParameterList() {
		TypeParameterListContext _localctx = new TypeParameterListContext(Context, State);
		EnterRule(_localctx, 90, RULE_typeParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 827; typeParameter();
			State = 832;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 828; Match(COMMA);
				State = 829; typeParameter();
				}
				}
				State = 834;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuperclassContext : ParserRuleContext {
		public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public SuperclassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_superclass; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSuperclass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSuperclass(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuperclass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SuperclassContext superclass() {
		SuperclassContext _localctx = new SuperclassContext(Context, State);
		EnterRule(_localctx, 92, RULE_superclass);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 835; Match(EXTENDS);
			State = 836; classType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuperinterfacesContext : ParserRuleContext {
		public InterfaceTypeListContext interfaceTypeList() {
			return GetRuleContext<InterfaceTypeListContext>(0);
		}
		public SuperinterfacesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_superinterfaces; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSuperinterfaces(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSuperinterfaces(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuperinterfaces(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SuperinterfacesContext superinterfaces() {
		SuperinterfacesContext _localctx = new SuperinterfacesContext(Context, State);
		EnterRule(_localctx, 94, RULE_superinterfaces);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 838; Match(IMPLEMENTS);
			State = 839; interfaceTypeList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceTypeListContext : ParserRuleContext {
		public InterfaceTypeContext[] interfaceType() {
			return GetRuleContexts<InterfaceTypeContext>();
		}
		public InterfaceTypeContext interfaceType(int i) {
			return GetRuleContext<InterfaceTypeContext>(i);
		}
		public InterfaceTypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceTypeList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInterfaceTypeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInterfaceTypeList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceTypeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceTypeListContext interfaceTypeList() {
		InterfaceTypeListContext _localctx = new InterfaceTypeListContext(Context, State);
		EnterRule(_localctx, 96, RULE_interfaceTypeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 841; interfaceType();
			State = 846;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 842; Match(COMMA);
				State = 843; interfaceType();
				}
				}
				State = 848;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		public ClassBodyDeclarationContext[] classBodyDeclaration() {
			return GetRuleContexts<ClassBodyDeclarationContext>();
		}
		public ClassBodyDeclarationContext classBodyDeclaration(int i) {
			return GetRuleContext<ClassBodyDeclarationContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 98, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 849; Match(LBRACE);
			State = 853;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << DOUBLE) | (1L << ENUM) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << INTERFACE) | (1L << LONG) | (1L << NATIVE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << SYNCHRONIZED) | (1L << TRANSIENT) | (1L << VOID) | (1L << VOLATILE) | (1L << LBRACE) | (1L << SEMI))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (LT - 68)) | (1L << (Identifier - 68)) | (1L << (AT - 68)))) != 0)) {
				{
				{
				State = 850; classBodyDeclaration();
				}
				}
				State = 855;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 856; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyDeclarationContext : ParserRuleContext {
		public ClassMemberDeclarationContext classMemberDeclaration() {
			return GetRuleContext<ClassMemberDeclarationContext>(0);
		}
		public InstanceInitializerContext instanceInitializer() {
			return GetRuleContext<InstanceInitializerContext>(0);
		}
		public StaticInitializerContext staticInitializer() {
			return GetRuleContext<StaticInitializerContext>(0);
		}
		public ConstructorDeclarationContext constructorDeclaration() {
			return GetRuleContext<ConstructorDeclarationContext>(0);
		}
		public ClassBodyDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBodyDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterClassBodyDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitClassBodyDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBodyDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyDeclarationContext classBodyDeclaration() {
		ClassBodyDeclarationContext _localctx = new ClassBodyDeclarationContext(Context, State);
		EnterRule(_localctx, 100, RULE_classBodyDeclaration);
		try {
			State = 862;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 858; classMemberDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 859; instanceInitializer();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 860; staticInitializer();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 861; constructorDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassMemberDeclarationContext : ParserRuleContext {
		public FieldDeclarationContext fieldDeclaration() {
			return GetRuleContext<FieldDeclarationContext>(0);
		}
		public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		public ClassMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterClassMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitClassMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassMemberDeclarationContext classMemberDeclaration() {
		ClassMemberDeclarationContext _localctx = new ClassMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 102, RULE_classMemberDeclaration);
		try {
			State = 869;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 864; fieldDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 865; methodDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 866; classDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 867; interfaceDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 868; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclarationContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public VariableDeclaratorListContext variableDeclaratorList() {
			return GetRuleContext<VariableDeclaratorListContext>(0);
		}
		public FieldModifierContext[] fieldModifier() {
			return GetRuleContexts<FieldModifierContext>();
		}
		public FieldModifierContext fieldModifier(int i) {
			return GetRuleContext<FieldModifierContext>(i);
		}
		public FieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterFieldDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitFieldDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclarationContext fieldDeclaration() {
		FieldDeclarationContext _localctx = new FieldDeclarationContext(Context, State);
		EnterRule(_localctx, 104, RULE_fieldDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 874;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FINAL) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC) | (1L << TRANSIENT) | (1L << VOLATILE))) != 0) || _la==AT) {
				{
				{
				State = 871; fieldModifier();
				}
				}
				State = 876;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 877; unannType();
			State = 878; variableDeclaratorList();
			State = 879; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public FieldModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterFieldModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitFieldModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldModifierContext fieldModifier() {
		FieldModifierContext _localctx = new FieldModifierContext(Context, State);
		EnterRule(_localctx, 106, RULE_fieldModifier);
		try {
			State = 889;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 881; annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 882; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 883; Match(PROTECTED);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 884; Match(PRIVATE);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 5);
				{
				State = 885; Match(STATIC);
				}
				break;
			case FINAL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 886; Match(FINAL);
				}
				break;
			case TRANSIENT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 887; Match(TRANSIENT);
				}
				break;
			case VOLATILE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 888; Match(VOLATILE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorListContext : ParserRuleContext {
		public VariableDeclaratorContext[] variableDeclarator() {
			return GetRuleContexts<VariableDeclaratorContext>();
		}
		public VariableDeclaratorContext variableDeclarator(int i) {
			return GetRuleContext<VariableDeclaratorContext>(i);
		}
		public VariableDeclaratorListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaratorList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterVariableDeclaratorList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitVariableDeclaratorList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaratorList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorListContext variableDeclaratorList() {
		VariableDeclaratorListContext _localctx = new VariableDeclaratorListContext(Context, State);
		EnterRule(_localctx, 108, RULE_variableDeclaratorList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 891; variableDeclarator();
			State = 896;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 892; Match(COMMA);
				State = 893; variableDeclarator();
				}
				}
				State = 898;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorContext : ParserRuleContext {
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public VariableInitializerContext variableInitializer() {
			return GetRuleContext<VariableInitializerContext>(0);
		}
		public VariableDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterVariableDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitVariableDeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorContext variableDeclarator() {
		VariableDeclaratorContext _localctx = new VariableDeclaratorContext(Context, State);
		EnterRule(_localctx, 110, RULE_variableDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 899; variableDeclaratorId();
			State = 902;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 900; Match(ASSIGN);
				State = 901; variableInitializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorIdContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public DimsContext dims() {
			return GetRuleContext<DimsContext>(0);
		}
		public VariableDeclaratorIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaratorId; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterVariableDeclaratorId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitVariableDeclaratorId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaratorId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorIdContext variableDeclaratorId() {
		VariableDeclaratorIdContext _localctx = new VariableDeclaratorIdContext(Context, State);
		EnterRule(_localctx, 112, RULE_variableDeclaratorId);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 904; Match(Identifier);
			State = 906;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACK || _la==AT) {
				{
				State = 905; dims();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableInitializerContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		public VariableInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterVariableInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitVariableInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableInitializerContext variableInitializer() {
		VariableInitializerContext _localctx = new VariableInitializerContext(Context, State);
		EnterRule(_localctx, 114, RULE_variableInitializer);
		try {
			State = 910;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case NEW:
			case SHORT:
			case SUPER:
			case THIS:
			case VOID:
			case IntegerLiteral:
			case FloatingPointLiteral:
			case BooleanLiteral:
			case CharacterLiteral:
			case StringLiteral:
			case NullLiteral:
			case LPAREN:
			case BANG:
			case TILDE:
			case INC:
			case DEC:
			case ADD:
			case SUB:
			case Identifier:
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 908; expression();
				}
				break;
			case LBRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 909; arrayInitializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannTypeContext : ParserRuleContext {
		public UnannPrimitiveTypeContext unannPrimitiveType() {
			return GetRuleContext<UnannPrimitiveTypeContext>(0);
		}
		public UnannReferenceTypeContext unannReferenceType() {
			return GetRuleContext<UnannReferenceTypeContext>(0);
		}
		public UnannTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnannType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnannType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnannType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnannTypeContext unannType() {
		UnannTypeContext _localctx = new UnannTypeContext(Context, State);
		EnterRule(_localctx, 116, RULE_unannType);
		try {
			State = 914;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 912; unannPrimitiveType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 913; unannReferenceType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannPrimitiveTypeContext : ParserRuleContext {
		public NumericTypeContext numericType() {
			return GetRuleContext<NumericTypeContext>(0);
		}
		public UnannPrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannPrimitiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnannPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnannPrimitiveType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnannPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnannPrimitiveTypeContext unannPrimitiveType() {
		UnannPrimitiveTypeContext _localctx = new UnannPrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 118, RULE_unannPrimitiveType);
		try {
			State = 918;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 916; numericType();
				}
				break;
			case BOOLEAN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 917; Match(BOOLEAN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannReferenceTypeContext : ParserRuleContext {
		public UnannClassOrInterfaceTypeContext unannClassOrInterfaceType() {
			return GetRuleContext<UnannClassOrInterfaceTypeContext>(0);
		}
		public UnannTypeVariableContext unannTypeVariable() {
			return GetRuleContext<UnannTypeVariableContext>(0);
		}
		public UnannArrayTypeContext unannArrayType() {
			return GetRuleContext<UnannArrayTypeContext>(0);
		}
		public UnannReferenceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannReferenceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnannReferenceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnannReferenceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnannReferenceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnannReferenceTypeContext unannReferenceType() {
		UnannReferenceTypeContext _localctx = new UnannReferenceTypeContext(Context, State);
		EnterRule(_localctx, 120, RULE_unannReferenceType);
		try {
			State = 923;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 920; unannClassOrInterfaceType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 921; unannTypeVariable();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 922; unannArrayType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannClassOrInterfaceTypeContext : ParserRuleContext {
		public UnannClassType_lfno_unannClassOrInterfaceTypeContext unannClassType_lfno_unannClassOrInterfaceType() {
			return GetRuleContext<UnannClassType_lfno_unannClassOrInterfaceTypeContext>(0);
		}
		public UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext unannInterfaceType_lfno_unannClassOrInterfaceType() {
			return GetRuleContext<UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext>(0);
		}
		public UnannClassType_lf_unannClassOrInterfaceTypeContext[] unannClassType_lf_unannClassOrInterfaceType() {
			return GetRuleContexts<UnannClassType_lf_unannClassOrInterfaceTypeContext>();
		}
		public UnannClassType_lf_unannClassOrInterfaceTypeContext unannClassType_lf_unannClassOrInterfaceType(int i) {
			return GetRuleContext<UnannClassType_lf_unannClassOrInterfaceTypeContext>(i);
		}
		public UnannInterfaceType_lf_unannClassOrInterfaceTypeContext[] unannInterfaceType_lf_unannClassOrInterfaceType() {
			return GetRuleContexts<UnannInterfaceType_lf_unannClassOrInterfaceTypeContext>();
		}
		public UnannInterfaceType_lf_unannClassOrInterfaceTypeContext unannInterfaceType_lf_unannClassOrInterfaceType(int i) {
			return GetRuleContext<UnannInterfaceType_lf_unannClassOrInterfaceTypeContext>(i);
		}
		public UnannClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannClassOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnannClassOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnannClassOrInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnannClassOrInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnannClassOrInterfaceTypeContext unannClassOrInterfaceType() {
		UnannClassOrInterfaceTypeContext _localctx = new UnannClassOrInterfaceTypeContext(Context, State);
		EnterRule(_localctx, 122, RULE_unannClassOrInterfaceType);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 927;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				{
				State = 925; unannClassType_lfno_unannClassOrInterfaceType();
				}
				break;
			case 2:
				{
				State = 926; unannInterfaceType_lfno_unannClassOrInterfaceType();
				}
				break;
			}
			State = 933;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 931;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
					case 1:
						{
						State = 929; unannClassType_lf_unannClassOrInterfaceType();
						}
						break;
					case 2:
						{
						State = 930; unannInterfaceType_lf_unannClassOrInterfaceType();
						}
						break;
					}
					} 
				}
				State = 935;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannClassTypeContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public UnannClassOrInterfaceTypeContext unannClassOrInterfaceType() {
			return GetRuleContext<UnannClassOrInterfaceTypeContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public UnannClassTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannClassType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnannClassType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnannClassType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnannClassType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnannClassTypeContext unannClassType() {
		UnannClassTypeContext _localctx = new UnannClassTypeContext(Context, State);
		EnterRule(_localctx, 124, RULE_unannClassType);
		int _la;
		try {
			State = 952;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 936; Match(Identifier);
				State = 938;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 937; typeArguments();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 940; unannClassOrInterfaceType();
				State = 941; Match(DOT);
				State = 945;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT) {
					{
					{
					State = 942; annotation();
					}
					}
					State = 947;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 948; Match(Identifier);
				State = 950;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 949; typeArguments();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannClassType_lf_unannClassOrInterfaceTypeContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public UnannClassType_lf_unannClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannClassType_lf_unannClassOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnannClassType_lf_unannClassOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnannClassType_lf_unannClassOrInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnannClassType_lf_unannClassOrInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnannClassType_lf_unannClassOrInterfaceTypeContext unannClassType_lf_unannClassOrInterfaceType() {
		UnannClassType_lf_unannClassOrInterfaceTypeContext _localctx = new UnannClassType_lf_unannClassOrInterfaceTypeContext(Context, State);
		EnterRule(_localctx, 126, RULE_unannClassType_lf_unannClassOrInterfaceType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 954; Match(DOT);
			State = 958;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 955; annotation();
				}
				}
				State = 960;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 961; Match(Identifier);
			State = 963;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 962; typeArguments();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannClassType_lfno_unannClassOrInterfaceTypeContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public UnannClassType_lfno_unannClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannClassType_lfno_unannClassOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnannClassType_lfno_unannClassOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnannClassType_lfno_unannClassOrInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnannClassType_lfno_unannClassOrInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnannClassType_lfno_unannClassOrInterfaceTypeContext unannClassType_lfno_unannClassOrInterfaceType() {
		UnannClassType_lfno_unannClassOrInterfaceTypeContext _localctx = new UnannClassType_lfno_unannClassOrInterfaceTypeContext(Context, State);
		EnterRule(_localctx, 128, RULE_unannClassType_lfno_unannClassOrInterfaceType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 965; Match(Identifier);
			State = 967;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 966; typeArguments();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannInterfaceTypeContext : ParserRuleContext {
		public UnannClassTypeContext unannClassType() {
			return GetRuleContext<UnannClassTypeContext>(0);
		}
		public UnannInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnannInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnannInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnannInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnannInterfaceTypeContext unannInterfaceType() {
		UnannInterfaceTypeContext _localctx = new UnannInterfaceTypeContext(Context, State);
		EnterRule(_localctx, 130, RULE_unannInterfaceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 969; unannClassType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannInterfaceType_lf_unannClassOrInterfaceTypeContext : ParserRuleContext {
		public UnannClassType_lf_unannClassOrInterfaceTypeContext unannClassType_lf_unannClassOrInterfaceType() {
			return GetRuleContext<UnannClassType_lf_unannClassOrInterfaceTypeContext>(0);
		}
		public UnannInterfaceType_lf_unannClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannInterfaceType_lf_unannClassOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnannInterfaceType_lf_unannClassOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnannInterfaceType_lf_unannClassOrInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnannInterfaceType_lf_unannClassOrInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnannInterfaceType_lf_unannClassOrInterfaceTypeContext unannInterfaceType_lf_unannClassOrInterfaceType() {
		UnannInterfaceType_lf_unannClassOrInterfaceTypeContext _localctx = new UnannInterfaceType_lf_unannClassOrInterfaceTypeContext(Context, State);
		EnterRule(_localctx, 132, RULE_unannInterfaceType_lf_unannClassOrInterfaceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 971; unannClassType_lf_unannClassOrInterfaceType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext : ParserRuleContext {
		public UnannClassType_lfno_unannClassOrInterfaceTypeContext unannClassType_lfno_unannClassOrInterfaceType() {
			return GetRuleContext<UnannClassType_lfno_unannClassOrInterfaceTypeContext>(0);
		}
		public UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannInterfaceType_lfno_unannClassOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnannInterfaceType_lfno_unannClassOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnannInterfaceType_lfno_unannClassOrInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnannInterfaceType_lfno_unannClassOrInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext unannInterfaceType_lfno_unannClassOrInterfaceType() {
		UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext _localctx = new UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext(Context, State);
		EnterRule(_localctx, 134, RULE_unannInterfaceType_lfno_unannClassOrInterfaceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 973; unannClassType_lfno_unannClassOrInterfaceType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannTypeVariableContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public UnannTypeVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannTypeVariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnannTypeVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnannTypeVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnannTypeVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnannTypeVariableContext unannTypeVariable() {
		UnannTypeVariableContext _localctx = new UnannTypeVariableContext(Context, State);
		EnterRule(_localctx, 136, RULE_unannTypeVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 975; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannArrayTypeContext : ParserRuleContext {
		public UnannPrimitiveTypeContext unannPrimitiveType() {
			return GetRuleContext<UnannPrimitiveTypeContext>(0);
		}
		public DimsContext dims() {
			return GetRuleContext<DimsContext>(0);
		}
		public UnannClassOrInterfaceTypeContext unannClassOrInterfaceType() {
			return GetRuleContext<UnannClassOrInterfaceTypeContext>(0);
		}
		public UnannTypeVariableContext unannTypeVariable() {
			return GetRuleContext<UnannTypeVariableContext>(0);
		}
		public UnannArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannArrayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnannArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnannArrayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnannArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnannArrayTypeContext unannArrayType() {
		UnannArrayTypeContext _localctx = new UnannArrayTypeContext(Context, State);
		EnterRule(_localctx, 138, RULE_unannArrayType);
		try {
			State = 986;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 977; unannPrimitiveType();
				State = 978; dims();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 980; unannClassOrInterfaceType();
				State = 981; dims();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 983; unannTypeVariable();
				State = 984; dims();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		public MethodHeaderContext methodHeader() {
			return GetRuleContext<MethodHeaderContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public MethodModifierContext[] methodModifier() {
			return GetRuleContexts<MethodModifierContext>();
		}
		public MethodModifierContext methodModifier(int i) {
			return GetRuleContext<MethodModifierContext>(i);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State);
		EnterRule(_localctx, 140, RULE_methodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 991;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << FINAL) | (1L << NATIVE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC) | (1L << STRICTFP) | (1L << SYNCHRONIZED))) != 0) || _la==AT) {
				{
				{
				State = 988; methodModifier();
				}
				}
				State = 993;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 994; methodHeader();
			State = 995; methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public MethodModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMethodModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMethodModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodModifierContext methodModifier() {
		MethodModifierContext _localctx = new MethodModifierContext(Context, State);
		EnterRule(_localctx, 142, RULE_methodModifier);
		try {
			State = 1007;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 997; annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 998; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 999; Match(PROTECTED);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1000; Match(PRIVATE);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1001; Match(ABSTRACT);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1002; Match(STATIC);
				}
				break;
			case FINAL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1003; Match(FINAL);
				}
				break;
			case SYNCHRONIZED:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1004; Match(SYNCHRONIZED);
				}
				break;
			case NATIVE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1005; Match(NATIVE);
				}
				break;
			case STRICTFP:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1006; Match(STRICTFP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodHeaderContext : ParserRuleContext {
		public ResultContext result() {
			return GetRuleContext<ResultContext>(0);
		}
		public MethodDeclaratorContext methodDeclarator() {
			return GetRuleContext<MethodDeclaratorContext>(0);
		}
		public Throws_Context throws_() {
			return GetRuleContext<Throws_Context>(0);
		}
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public MethodHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodHeader; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMethodHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMethodHeader(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodHeaderContext methodHeader() {
		MethodHeaderContext _localctx = new MethodHeaderContext(Context, State);
		EnterRule(_localctx, 144, RULE_methodHeader);
		int _la;
		try {
			State = 1026;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
			case VOID:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1009; result();
				State = 1010; methodDeclarator();
				State = 1012;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==THROWS) {
					{
					State = 1011; throws_();
					}
				}

				}
				break;
			case LT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1014; typeParameters();
				State = 1018;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT) {
					{
					{
					State = 1015; annotation();
					}
					}
					State = 1020;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1021; result();
				State = 1022; methodDeclarator();
				State = 1024;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==THROWS) {
					{
					State = 1023; throws_();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResultContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public ResultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_result; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterResult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitResult(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResult(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResultContext result() {
		ResultContext _localctx = new ResultContext(Context, State);
		EnterRule(_localctx, 146, RULE_result);
		try {
			State = 1030;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1028; unannType();
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1029; Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclaratorContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public DimsContext dims() {
			return GetRuleContext<DimsContext>(0);
		}
		public MethodDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMethodDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMethodDeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclaratorContext methodDeclarator() {
		MethodDeclaratorContext _localctx = new MethodDeclaratorContext(Context, State);
		EnterRule(_localctx, 148, RULE_methodDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1032; Match(Identifier);
			State = 1033; Match(LPAREN);
			State = 1035;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << SHORT))) != 0) || _la==Identifier || _la==AT) {
				{
				State = 1034; formalParameterList();
				}
			}

			State = 1037; Match(RPAREN);
			State = 1039;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACK || _la==AT) {
				{
				State = 1038; dims();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		public LastFormalParameterContext lastFormalParameter() {
			return GetRuleContext<LastFormalParameterContext>(0);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterFormalParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitFormalParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(Context, State);
		EnterRule(_localctx, 150, RULE_formalParameterList);
		try {
			State = 1046;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1041; formalParameters();
				State = 1042; Match(COMMA);
				State = 1043; lastFormalParameter();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1045; lastFormalParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParametersContext : ParserRuleContext {
		public FormalParameterContext[] formalParameter() {
			return GetRuleContexts<FormalParameterContext>();
		}
		public FormalParameterContext formalParameter(int i) {
			return GetRuleContext<FormalParameterContext>(i);
		}
		public ReceiverParameterContext receiverParameter() {
			return GetRuleContext<ReceiverParameterContext>(0);
		}
		public FormalParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterFormalParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitFormalParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParametersContext formalParameters() {
		FormalParametersContext _localctx = new FormalParametersContext(Context, State);
		EnterRule(_localctx, 152, RULE_formalParameters);
		try {
			int _alt;
			State = 1064;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1048; formalParameter();
				State = 1053;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,85,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1049; Match(COMMA);
						State = 1050; formalParameter();
						}
						} 
					}
					State = 1055;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,85,Context);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1056; receiverParameter();
				State = 1061;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1057; Match(COMMA);
						State = 1058; formalParameter();
						}
						} 
					}
					State = 1063;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public FormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterFormalParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitFormalParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterContext formalParameter() {
		FormalParameterContext _localctx = new FormalParameterContext(Context, State);
		EnterRule(_localctx, 154, RULE_formalParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1069;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FINAL || _la==AT) {
				{
				{
				State = 1066; variableModifier();
				}
				}
				State = 1071;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1072; unannType();
			State = 1073; variableDeclaratorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public VariableModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterVariableModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitVariableModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableModifierContext variableModifier() {
		VariableModifierContext _localctx = new VariableModifierContext(Context, State);
		EnterRule(_localctx, 156, RULE_variableModifier);
		try {
			State = 1077;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1075; annotation();
				}
				break;
			case FINAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1076; Match(FINAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastFormalParameterContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public FormalParameterContext formalParameter() {
			return GetRuleContext<FormalParameterContext>(0);
		}
		public LastFormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastFormalParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterLastFormalParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitLastFormalParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastFormalParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LastFormalParameterContext lastFormalParameter() {
		LastFormalParameterContext _localctx = new LastFormalParameterContext(Context, State);
		EnterRule(_localctx, 158, RULE_lastFormalParameter);
		int _la;
		try {
			State = 1096;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,92,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1082;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==FINAL || _la==AT) {
					{
					{
					State = 1079; variableModifier();
					}
					}
					State = 1084;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1085; unannType();
				State = 1089;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT) {
					{
					{
					State = 1086; annotation();
					}
					}
					State = 1091;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1092; Match(ELLIPSIS);
				State = 1093; variableDeclaratorId();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1095; formalParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReceiverParameterContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public ReceiverParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_receiverParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterReceiverParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitReceiverParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReceiverParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReceiverParameterContext receiverParameter() {
		ReceiverParameterContext _localctx = new ReceiverParameterContext(Context, State);
		EnterRule(_localctx, 160, RULE_receiverParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 1098; annotation();
				}
				}
				State = 1103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1104; unannType();
			State = 1107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 1105; Match(Identifier);
				State = 1106; Match(DOT);
				}
			}

			State = 1109; Match(THIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Throws_Context : ParserRuleContext {
		public ExceptionTypeListContext exceptionTypeList() {
			return GetRuleContext<ExceptionTypeListContext>(0);
		}
		public Throws_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throws_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterThrows_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitThrows_(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrows_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Throws_Context throws_() {
		Throws_Context _localctx = new Throws_Context(Context, State);
		EnterRule(_localctx, 162, RULE_throws_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1111; Match(THROWS);
			State = 1112; exceptionTypeList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionTypeListContext : ParserRuleContext {
		public ExceptionTypeContext[] exceptionType() {
			return GetRuleContexts<ExceptionTypeContext>();
		}
		public ExceptionTypeContext exceptionType(int i) {
			return GetRuleContext<ExceptionTypeContext>(i);
		}
		public ExceptionTypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionTypeList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterExceptionTypeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitExceptionTypeList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExceptionTypeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionTypeListContext exceptionTypeList() {
		ExceptionTypeListContext _localctx = new ExceptionTypeListContext(Context, State);
		EnterRule(_localctx, 164, RULE_exceptionTypeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1114; exceptionType();
			State = 1119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1115; Match(COMMA);
				State = 1116; exceptionType();
				}
				}
				State = 1121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionTypeContext : ParserRuleContext {
		public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public TypeVariableContext typeVariable() {
			return GetRuleContext<TypeVariableContext>(0);
		}
		public ExceptionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterExceptionType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitExceptionType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExceptionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionTypeContext exceptionType() {
		ExceptionTypeContext _localctx = new ExceptionTypeContext(Context, State);
		EnterRule(_localctx, 166, RULE_exceptionType);
		try {
			State = 1124;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1122; classType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1123; typeVariable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMethodBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMethodBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(Context, State);
		EnterRule(_localctx, 168, RULE_methodBody);
		try {
			State = 1128;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1126; block();
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1127; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstanceInitializerContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public InstanceInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instanceInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInstanceInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInstanceInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstanceInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstanceInitializerContext instanceInitializer() {
		InstanceInitializerContext _localctx = new InstanceInitializerContext(Context, State);
		EnterRule(_localctx, 170, RULE_instanceInitializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1130; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StaticInitializerContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StaticInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_staticInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterStaticInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitStaticInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStaticInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StaticInitializerContext staticInitializer() {
		StaticInitializerContext _localctx = new StaticInitializerContext(Context, State);
		EnterRule(_localctx, 172, RULE_staticInitializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1132; Match(STATIC);
			State = 1133; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorDeclarationContext : ParserRuleContext {
		public ConstructorDeclaratorContext constructorDeclarator() {
			return GetRuleContext<ConstructorDeclaratorContext>(0);
		}
		public ConstructorBodyContext constructorBody() {
			return GetRuleContext<ConstructorBodyContext>(0);
		}
		public ConstructorModifierContext[] constructorModifier() {
			return GetRuleContexts<ConstructorModifierContext>();
		}
		public ConstructorModifierContext constructorModifier(int i) {
			return GetRuleContext<ConstructorModifierContext>(i);
		}
		public Throws_Context throws_() {
			return GetRuleContext<Throws_Context>(0);
		}
		public ConstructorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterConstructorDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitConstructorDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorDeclarationContext constructorDeclaration() {
		ConstructorDeclarationContext _localctx = new ConstructorDeclarationContext(Context, State);
		EnterRule(_localctx, 174, RULE_constructorDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || _la==AT) {
				{
				{
				State = 1135; constructorModifier();
				}
				}
				State = 1140;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1141; constructorDeclarator();
			State = 1143;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THROWS) {
				{
				State = 1142; throws_();
				}
			}

			State = 1145; constructorBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public ConstructorModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterConstructorModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitConstructorModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorModifierContext constructorModifier() {
		ConstructorModifierContext _localctx = new ConstructorModifierContext(Context, State);
		EnterRule(_localctx, 176, RULE_constructorModifier);
		try {
			State = 1151;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1147; annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1148; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1149; Match(PROTECTED);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1150; Match(PRIVATE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorDeclaratorContext : ParserRuleContext {
		public SimpleTypeNameContext simpleTypeName() {
			return GetRuleContext<SimpleTypeNameContext>(0);
		}
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public ConstructorDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterConstructorDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitConstructorDeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorDeclaratorContext constructorDeclarator() {
		ConstructorDeclaratorContext _localctx = new ConstructorDeclaratorContext(Context, State);
		EnterRule(_localctx, 178, RULE_constructorDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1154;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 1153; typeParameters();
				}
			}

			State = 1156; simpleTypeName();
			State = 1157; Match(LPAREN);
			State = 1159;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << SHORT))) != 0) || _la==Identifier || _la==AT) {
				{
				State = 1158; formalParameterList();
				}
			}

			State = 1161; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public SimpleTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSimpleTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSimpleTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeNameContext simpleTypeName() {
		SimpleTypeNameContext _localctx = new SimpleTypeNameContext(Context, State);
		EnterRule(_localctx, 180, RULE_simpleTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1163; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorBodyContext : ParserRuleContext {
		public ExplicitConstructorInvocationContext explicitConstructorInvocation() {
			return GetRuleContext<ExplicitConstructorInvocationContext>(0);
		}
		public BlockStatementsContext blockStatements() {
			return GetRuleContext<BlockStatementsContext>(0);
		}
		public ConstructorBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterConstructorBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitConstructorBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorBodyContext constructorBody() {
		ConstructorBodyContext _localctx = new ConstructorBodyContext(Context, State);
		EnterRule(_localctx, 182, RULE_constructorBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1165; Match(LBRACE);
			State = 1167;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
			case 1:
				{
				State = 1166; explicitConstructorInvocation();
				}
				break;
			}
			State = 1170;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ASSERT) | (1L << BOOLEAN) | (1L << BREAK) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << CONTINUE) | (1L << DO) | (1L << DOUBLE) | (1L << ENUM) | (1L << FINAL) | (1L << FLOAT) | (1L << FOR) | (1L << IF) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << RETURN) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << SUPER) | (1L << SWITCH) | (1L << SYNCHRONIZED) | (1L << THIS) | (1L << THROW) | (1L << TRY) | (1L << VOID) | (1L << WHILE) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN) | (1L << LBRACE) | (1L << SEMI))) != 0) || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (INC - 79)) | (1L << (DEC - 79)) | (1L << (Identifier - 79)) | (1L << (AT - 79)))) != 0)) {
				{
				State = 1169; blockStatements();
				}
			}

			State = 1172; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitConstructorInvocationContext : ParserRuleContext {
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public ExplicitConstructorInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitConstructorInvocation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterExplicitConstructorInvocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitExplicitConstructorInvocation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitConstructorInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitConstructorInvocationContext explicitConstructorInvocation() {
		ExplicitConstructorInvocationContext _localctx = new ExplicitConstructorInvocationContext(Context, State);
		EnterRule(_localctx, 184, RULE_explicitConstructorInvocation);
		int _la;
		try {
			State = 1220;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,113,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 1174; typeArguments();
					}
				}

				State = 1177; Match(THIS);
				State = 1178; Match(LPAREN);
				State = 1180;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 1179; argumentList();
					}
				}

				State = 1182; Match(RPAREN);
				State = 1183; Match(SEMI);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1185;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 1184; typeArguments();
					}
				}

				State = 1187; Match(SUPER);
				State = 1188; Match(LPAREN);
				State = 1190;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 1189; argumentList();
					}
				}

				State = 1192; Match(RPAREN);
				State = 1193; Match(SEMI);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1194; expressionName();
				State = 1195; Match(DOT);
				State = 1197;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 1196; typeArguments();
					}
				}

				State = 1199; Match(SUPER);
				State = 1200; Match(LPAREN);
				State = 1202;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 1201; argumentList();
					}
				}

				State = 1204; Match(RPAREN);
				State = 1205; Match(SEMI);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1207; primary();
				State = 1208; Match(DOT);
				State = 1210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 1209; typeArguments();
					}
				}

				State = 1212; Match(SUPER);
				State = 1213; Match(LPAREN);
				State = 1215;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 1214; argumentList();
					}
				}

				State = 1217; Match(RPAREN);
				State = 1218; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public EnumBodyContext enumBody() {
			return GetRuleContext<EnumBodyContext>(0);
		}
		public ClassModifierContext[] classModifier() {
			return GetRuleContexts<ClassModifierContext>();
		}
		public ClassModifierContext classModifier(int i) {
			return GetRuleContext<ClassModifierContext>(i);
		}
		public SuperinterfacesContext superinterfaces() {
			return GetRuleContext<SuperinterfacesContext>(0);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterEnumDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitEnumDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(Context, State);
		EnterRule(_localctx, 186, RULE_enumDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << FINAL) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC) | (1L << STRICTFP))) != 0) || _la==AT) {
				{
				{
				State = 1222; classModifier();
				}
				}
				State = 1227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1228; Match(ENUM);
			State = 1229; Match(Identifier);
			State = 1231;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IMPLEMENTS) {
				{
				State = 1230; superinterfaces();
				}
			}

			State = 1233; enumBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBodyContext : ParserRuleContext {
		public EnumConstantListContext enumConstantList() {
			return GetRuleContext<EnumConstantListContext>(0);
		}
		public EnumBodyDeclarationsContext enumBodyDeclarations() {
			return GetRuleContext<EnumBodyDeclarationsContext>(0);
		}
		public EnumBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterEnumBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitEnumBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumBodyContext enumBody() {
		EnumBodyContext _localctx = new EnumBodyContext(Context, State);
		EnterRule(_localctx, 188, RULE_enumBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1235; Match(LBRACE);
			State = 1237;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier || _la==AT) {
				{
				State = 1236; enumConstantList();
				}
			}

			State = 1240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1239; Match(COMMA);
				}
			}

			State = 1243;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMI) {
				{
				State = 1242; enumBodyDeclarations();
				}
			}

			State = 1245; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumConstantListContext : ParserRuleContext {
		public EnumConstantContext[] enumConstant() {
			return GetRuleContexts<EnumConstantContext>();
		}
		public EnumConstantContext enumConstant(int i) {
			return GetRuleContext<EnumConstantContext>(i);
		}
		public EnumConstantListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumConstantList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterEnumConstantList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitEnumConstantList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumConstantList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumConstantListContext enumConstantList() {
		EnumConstantListContext _localctx = new EnumConstantListContext(Context, State);
		EnterRule(_localctx, 190, RULE_enumConstantList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1247; enumConstant();
			State = 1252;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,119,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1248; Match(COMMA);
					State = 1249; enumConstant();
					}
					} 
				}
				State = 1254;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,119,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumConstantContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public EnumConstantModifierContext[] enumConstantModifier() {
			return GetRuleContexts<EnumConstantModifierContext>();
		}
		public EnumConstantModifierContext enumConstantModifier(int i) {
			return GetRuleContext<EnumConstantModifierContext>(i);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public EnumConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumConstant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterEnumConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitEnumConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumConstantContext enumConstant() {
		EnumConstantContext _localctx = new EnumConstantContext(Context, State);
		EnterRule(_localctx, 192, RULE_enumConstant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1258;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 1255; enumConstantModifier();
				}
				}
				State = 1260;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1261; Match(Identifier);
			State = 1267;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 1262; Match(LPAREN);
				State = 1264;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 1263; argumentList();
					}
				}

				State = 1266; Match(RPAREN);
				}
			}

			State = 1270;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACE) {
				{
				State = 1269; classBody();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumConstantModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public EnumConstantModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumConstantModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterEnumConstantModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitEnumConstantModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumConstantModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumConstantModifierContext enumConstantModifier() {
		EnumConstantModifierContext _localctx = new EnumConstantModifierContext(Context, State);
		EnterRule(_localctx, 194, RULE_enumConstantModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1272; annotation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBodyDeclarationsContext : ParserRuleContext {
		public ClassBodyDeclarationContext[] classBodyDeclaration() {
			return GetRuleContexts<ClassBodyDeclarationContext>();
		}
		public ClassBodyDeclarationContext classBodyDeclaration(int i) {
			return GetRuleContext<ClassBodyDeclarationContext>(i);
		}
		public EnumBodyDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBodyDeclarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterEnumBodyDeclarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitEnumBodyDeclarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumBodyDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumBodyDeclarationsContext enumBodyDeclarations() {
		EnumBodyDeclarationsContext _localctx = new EnumBodyDeclarationsContext(Context, State);
		EnterRule(_localctx, 196, RULE_enumBodyDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1274; Match(SEMI);
			State = 1278;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << DOUBLE) | (1L << ENUM) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << INTERFACE) | (1L << LONG) | (1L << NATIVE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << SYNCHRONIZED) | (1L << TRANSIENT) | (1L << VOID) | (1L << VOLATILE) | (1L << LBRACE) | (1L << SEMI))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (LT - 68)) | (1L << (Identifier - 68)) | (1L << (AT - 68)))) != 0)) {
				{
				{
				State = 1275; classBodyDeclaration();
				}
				}
				State = 1280;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceDeclarationContext : ParserRuleContext {
		public NormalInterfaceDeclarationContext normalInterfaceDeclaration() {
			return GetRuleContext<NormalInterfaceDeclarationContext>(0);
		}
		public AnnotationTypeDeclarationContext annotationTypeDeclaration() {
			return GetRuleContext<AnnotationTypeDeclarationContext>(0);
		}
		public InterfaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInterfaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInterfaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceDeclarationContext interfaceDeclaration() {
		InterfaceDeclarationContext _localctx = new InterfaceDeclarationContext(Context, State);
		EnterRule(_localctx, 198, RULE_interfaceDeclaration);
		try {
			State = 1283;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,125,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1281; normalInterfaceDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1282; annotationTypeDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalInterfaceDeclarationContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public InterfaceBodyContext interfaceBody() {
			return GetRuleContext<InterfaceBodyContext>(0);
		}
		public InterfaceModifierContext[] interfaceModifier() {
			return GetRuleContexts<InterfaceModifierContext>();
		}
		public InterfaceModifierContext interfaceModifier(int i) {
			return GetRuleContext<InterfaceModifierContext>(i);
		}
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public ExtendsInterfacesContext extendsInterfaces() {
			return GetRuleContext<ExtendsInterfacesContext>(0);
		}
		public NormalInterfaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalInterfaceDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterNormalInterfaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitNormalInterfaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalInterfaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NormalInterfaceDeclarationContext normalInterfaceDeclaration() {
		NormalInterfaceDeclarationContext _localctx = new NormalInterfaceDeclarationContext(Context, State);
		EnterRule(_localctx, 200, RULE_normalInterfaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1288;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC) | (1L << STRICTFP))) != 0) || _la==AT) {
				{
				{
				State = 1285; interfaceModifier();
				}
				}
				State = 1290;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1291; Match(INTERFACE);
			State = 1292; Match(Identifier);
			State = 1294;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 1293; typeParameters();
				}
			}

			State = 1297;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 1296; extendsInterfaces();
				}
			}

			State = 1299; interfaceBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public InterfaceModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInterfaceModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInterfaceModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceModifierContext interfaceModifier() {
		InterfaceModifierContext _localctx = new InterfaceModifierContext(Context, State);
		EnterRule(_localctx, 202, RULE_interfaceModifier);
		try {
			State = 1308;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1301; annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1302; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1303; Match(PROTECTED);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1304; Match(PRIVATE);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1305; Match(ABSTRACT);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1306; Match(STATIC);
				}
				break;
			case STRICTFP:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1307; Match(STRICTFP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtendsInterfacesContext : ParserRuleContext {
		public InterfaceTypeListContext interfaceTypeList() {
			return GetRuleContext<InterfaceTypeListContext>(0);
		}
		public ExtendsInterfacesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extendsInterfaces; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterExtendsInterfaces(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitExtendsInterfaces(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtendsInterfaces(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtendsInterfacesContext extendsInterfaces() {
		ExtendsInterfacesContext _localctx = new ExtendsInterfacesContext(Context, State);
		EnterRule(_localctx, 204, RULE_extendsInterfaces);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1310; Match(EXTENDS);
			State = 1311; interfaceTypeList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceBodyContext : ParserRuleContext {
		public InterfaceMemberDeclarationContext[] interfaceMemberDeclaration() {
			return GetRuleContexts<InterfaceMemberDeclarationContext>();
		}
		public InterfaceMemberDeclarationContext interfaceMemberDeclaration(int i) {
			return GetRuleContext<InterfaceMemberDeclarationContext>(i);
		}
		public InterfaceBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInterfaceBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInterfaceBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceBodyContext interfaceBody() {
		InterfaceBodyContext _localctx = new InterfaceBodyContext(Context, State);
		EnterRule(_localctx, 206, RULE_interfaceBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1313; Match(LBRACE);
			State = 1317;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << DEFAULT) | (1L << DOUBLE) | (1L << ENUM) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << INTERFACE) | (1L << LONG) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << VOID) | (1L << SEMI))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (LT - 68)) | (1L << (Identifier - 68)) | (1L << (AT - 68)))) != 0)) {
				{
				{
				State = 1314; interfaceMemberDeclaration();
				}
				}
				State = 1319;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1320; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMemberDeclarationContext : ParserRuleContext {
		public ConstantDeclarationContext constantDeclaration() {
			return GetRuleContext<ConstantDeclarationContext>(0);
		}
		public InterfaceMethodDeclarationContext interfaceMethodDeclaration() {
			return GetRuleContext<InterfaceMethodDeclarationContext>(0);
		}
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		public InterfaceMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInterfaceMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInterfaceMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMemberDeclarationContext interfaceMemberDeclaration() {
		InterfaceMemberDeclarationContext _localctx = new InterfaceMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 208, RULE_interfaceMemberDeclaration);
		try {
			State = 1327;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,131,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1322; constantDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1323; interfaceMethodDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1324; classDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1325; interfaceDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1326; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantDeclarationContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public VariableDeclaratorListContext variableDeclaratorList() {
			return GetRuleContext<VariableDeclaratorListContext>(0);
		}
		public ConstantModifierContext[] constantModifier() {
			return GetRuleContexts<ConstantModifierContext>();
		}
		public ConstantModifierContext constantModifier(int i) {
			return GetRuleContext<ConstantModifierContext>(i);
		}
		public ConstantDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterConstantDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitConstantDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantDeclarationContext constantDeclaration() {
		ConstantDeclarationContext _localctx = new ConstantDeclarationContext(Context, State);
		EnterRule(_localctx, 210, RULE_constantDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1332;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FINAL) | (1L << PUBLIC) | (1L << STATIC))) != 0) || _la==AT) {
				{
				{
				State = 1329; constantModifier();
				}
				}
				State = 1334;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1335; unannType();
			State = 1336; variableDeclaratorList();
			State = 1337; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public ConstantModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterConstantModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitConstantModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantModifierContext constantModifier() {
		ConstantModifierContext _localctx = new ConstantModifierContext(Context, State);
		EnterRule(_localctx, 212, RULE_constantModifier);
		try {
			State = 1343;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1339; annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1340; Match(PUBLIC);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1341; Match(STATIC);
				}
				break;
			case FINAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1342; Match(FINAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMethodDeclarationContext : ParserRuleContext {
		public MethodHeaderContext methodHeader() {
			return GetRuleContext<MethodHeaderContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public InterfaceMethodModifierContext[] interfaceMethodModifier() {
			return GetRuleContexts<InterfaceMethodModifierContext>();
		}
		public InterfaceMethodModifierContext interfaceMethodModifier(int i) {
			return GetRuleContext<InterfaceMethodModifierContext>(i);
		}
		public InterfaceMethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMethodDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInterfaceMethodDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInterfaceMethodDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMethodDeclarationContext interfaceMethodDeclaration() {
		InterfaceMethodDeclarationContext _localctx = new InterfaceMethodDeclarationContext(Context, State);
		EnterRule(_localctx, 214, RULE_interfaceMethodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1348;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << DEFAULT) | (1L << PUBLIC) | (1L << STATIC) | (1L << STRICTFP))) != 0) || _la==AT) {
				{
				{
				State = 1345; interfaceMethodModifier();
				}
				}
				State = 1350;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1351; methodHeader();
			State = 1352; methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMethodModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public InterfaceMethodModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMethodModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInterfaceMethodModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInterfaceMethodModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceMethodModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMethodModifierContext interfaceMethodModifier() {
		InterfaceMethodModifierContext _localctx = new InterfaceMethodModifierContext(Context, State);
		EnterRule(_localctx, 216, RULE_interfaceMethodModifier);
		try {
			State = 1360;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1354; annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1355; Match(PUBLIC);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1356; Match(ABSTRACT);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1357; Match(DEFAULT);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1358; Match(STATIC);
				}
				break;
			case STRICTFP:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1359; Match(STRICTFP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeDeclarationContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public AnnotationTypeBodyContext annotationTypeBody() {
			return GetRuleContext<AnnotationTypeBodyContext>(0);
		}
		public InterfaceModifierContext[] interfaceModifier() {
			return GetRuleContexts<InterfaceModifierContext>();
		}
		public InterfaceModifierContext interfaceModifier(int i) {
			return GetRuleContext<InterfaceModifierContext>(i);
		}
		public AnnotationTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAnnotationTypeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAnnotationTypeDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeDeclarationContext annotationTypeDeclaration() {
		AnnotationTypeDeclarationContext _localctx = new AnnotationTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 218, RULE_annotationTypeDeclaration);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1365;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,136,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1362; interfaceModifier();
					}
					} 
				}
				State = 1367;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,136,Context);
			}
			State = 1368; Match(AT);
			State = 1369; Match(INTERFACE);
			State = 1370; Match(Identifier);
			State = 1371; annotationTypeBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeBodyContext : ParserRuleContext {
		public AnnotationTypeMemberDeclarationContext[] annotationTypeMemberDeclaration() {
			return GetRuleContexts<AnnotationTypeMemberDeclarationContext>();
		}
		public AnnotationTypeMemberDeclarationContext annotationTypeMemberDeclaration(int i) {
			return GetRuleContext<AnnotationTypeMemberDeclarationContext>(i);
		}
		public AnnotationTypeBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAnnotationTypeBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAnnotationTypeBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationTypeBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeBodyContext annotationTypeBody() {
		AnnotationTypeBodyContext _localctx = new AnnotationTypeBodyContext(Context, State);
		EnterRule(_localctx, 220, RULE_annotationTypeBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1373; Match(LBRACE);
			State = 1377;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << DOUBLE) | (1L << ENUM) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << INTERFACE) | (1L << LONG) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << SEMI))) != 0) || _la==Identifier || _la==AT) {
				{
				{
				State = 1374; annotationTypeMemberDeclaration();
				}
				}
				State = 1379;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1380; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeMemberDeclarationContext : ParserRuleContext {
		public AnnotationTypeElementDeclarationContext annotationTypeElementDeclaration() {
			return GetRuleContext<AnnotationTypeElementDeclarationContext>(0);
		}
		public ConstantDeclarationContext constantDeclaration() {
			return GetRuleContext<ConstantDeclarationContext>(0);
		}
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		public AnnotationTypeMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAnnotationTypeMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAnnotationTypeMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationTypeMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeMemberDeclarationContext annotationTypeMemberDeclaration() {
		AnnotationTypeMemberDeclarationContext _localctx = new AnnotationTypeMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 222, RULE_annotationTypeMemberDeclaration);
		try {
			State = 1387;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,138,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1382; annotationTypeElementDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1383; constantDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1384; classDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1385; interfaceDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1386; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeElementDeclarationContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public AnnotationTypeElementModifierContext[] annotationTypeElementModifier() {
			return GetRuleContexts<AnnotationTypeElementModifierContext>();
		}
		public AnnotationTypeElementModifierContext annotationTypeElementModifier(int i) {
			return GetRuleContext<AnnotationTypeElementModifierContext>(i);
		}
		public DimsContext dims() {
			return GetRuleContext<DimsContext>(0);
		}
		public DefaultValueContext defaultValue() {
			return GetRuleContext<DefaultValueContext>(0);
		}
		public AnnotationTypeElementDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeElementDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAnnotationTypeElementDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAnnotationTypeElementDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationTypeElementDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeElementDeclarationContext annotationTypeElementDeclaration() {
		AnnotationTypeElementDeclarationContext _localctx = new AnnotationTypeElementDeclarationContext(Context, State);
		EnterRule(_localctx, 224, RULE_annotationTypeElementDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1392;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ABSTRACT || _la==PUBLIC || _la==AT) {
				{
				{
				State = 1389; annotationTypeElementModifier();
				}
				}
				State = 1394;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1395; unannType();
			State = 1396; Match(Identifier);
			State = 1397; Match(LPAREN);
			State = 1398; Match(RPAREN);
			State = 1400;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACK || _la==AT) {
				{
				State = 1399; dims();
				}
			}

			State = 1403;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 1402; defaultValue();
				}
			}

			State = 1405; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeElementModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public AnnotationTypeElementModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeElementModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAnnotationTypeElementModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAnnotationTypeElementModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationTypeElementModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeElementModifierContext annotationTypeElementModifier() {
		AnnotationTypeElementModifierContext _localctx = new AnnotationTypeElementModifierContext(Context, State);
		EnterRule(_localctx, 226, RULE_annotationTypeElementModifier);
		try {
			State = 1410;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1407; annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1408; Match(PUBLIC);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1409; Match(ABSTRACT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultValueContext : ParserRuleContext {
		public ElementValueContext elementValue() {
			return GetRuleContext<ElementValueContext>(0);
		}
		public DefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterDefaultValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitDefaultValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultValueContext defaultValue() {
		DefaultValueContext _localctx = new DefaultValueContext(Context, State);
		EnterRule(_localctx, 228, RULE_defaultValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1412; Match(DEFAULT);
			State = 1413; elementValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		public NormalAnnotationContext normalAnnotation() {
			return GetRuleContext<NormalAnnotationContext>(0);
		}
		public MarkerAnnotationContext markerAnnotation() {
			return GetRuleContext<MarkerAnnotationContext>(0);
		}
		public SingleElementAnnotationContext singleElementAnnotation() {
			return GetRuleContext<SingleElementAnnotationContext>(0);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 230, RULE_annotation);
		try {
			State = 1418;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,143,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1415; normalAnnotation();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1416; markerAnnotation();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1417; singleElementAnnotation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalAnnotationContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ElementValuePairListContext elementValuePairList() {
			return GetRuleContext<ElementValuePairListContext>(0);
		}
		public NormalAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalAnnotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterNormalAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitNormalAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NormalAnnotationContext normalAnnotation() {
		NormalAnnotationContext _localctx = new NormalAnnotationContext(Context, State);
		EnterRule(_localctx, 232, RULE_normalAnnotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1420; Match(AT);
			State = 1421; typeName();
			State = 1422; Match(LPAREN);
			State = 1424;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 1423; elementValuePairList();
				}
			}

			State = 1426; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValuePairListContext : ParserRuleContext {
		public ElementValuePairContext[] elementValuePair() {
			return GetRuleContexts<ElementValuePairContext>();
		}
		public ElementValuePairContext elementValuePair(int i) {
			return GetRuleContext<ElementValuePairContext>(i);
		}
		public ElementValuePairListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValuePairList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterElementValuePairList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitElementValuePairList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementValuePairList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementValuePairListContext elementValuePairList() {
		ElementValuePairListContext _localctx = new ElementValuePairListContext(Context, State);
		EnterRule(_localctx, 234, RULE_elementValuePairList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1428; elementValuePair();
			State = 1433;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1429; Match(COMMA);
				State = 1430; elementValuePair();
				}
				}
				State = 1435;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValuePairContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public ElementValueContext elementValue() {
			return GetRuleContext<ElementValueContext>(0);
		}
		public ElementValuePairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValuePair; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterElementValuePair(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitElementValuePair(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementValuePair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementValuePairContext elementValuePair() {
		ElementValuePairContext _localctx = new ElementValuePairContext(Context, State);
		EnterRule(_localctx, 236, RULE_elementValuePair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1436; Match(Identifier);
			State = 1437; Match(ASSIGN);
			State = 1438; elementValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValueContext : ParserRuleContext {
		public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public ElementValueArrayInitializerContext elementValueArrayInitializer() {
			return GetRuleContext<ElementValueArrayInitializerContext>(0);
		}
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public ElementValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterElementValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitElementValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementValueContext elementValue() {
		ElementValueContext _localctx = new ElementValueContext(Context, State);
		EnterRule(_localctx, 238, RULE_elementValue);
		try {
			State = 1443;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,146,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1440; conditionalExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1441; elementValueArrayInitializer();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1442; annotation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValueArrayInitializerContext : ParserRuleContext {
		public ElementValueListContext elementValueList() {
			return GetRuleContext<ElementValueListContext>(0);
		}
		public ElementValueArrayInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValueArrayInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterElementValueArrayInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitElementValueArrayInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementValueArrayInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementValueArrayInitializerContext elementValueArrayInitializer() {
		ElementValueArrayInitializerContext _localctx = new ElementValueArrayInitializerContext(Context, State);
		EnterRule(_localctx, 240, RULE_elementValueArrayInitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1445; Match(LBRACE);
			State = 1447;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN) | (1L << LBRACE))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
				{
				State = 1446; elementValueList();
				}
			}

			State = 1450;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1449; Match(COMMA);
				}
			}

			State = 1452; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValueListContext : ParserRuleContext {
		public ElementValueContext[] elementValue() {
			return GetRuleContexts<ElementValueContext>();
		}
		public ElementValueContext elementValue(int i) {
			return GetRuleContext<ElementValueContext>(i);
		}
		public ElementValueListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValueList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterElementValueList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitElementValueList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementValueList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementValueListContext elementValueList() {
		ElementValueListContext _localctx = new ElementValueListContext(Context, State);
		EnterRule(_localctx, 242, RULE_elementValueList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1454; elementValue();
			State = 1459;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,149,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1455; Match(COMMA);
					State = 1456; elementValue();
					}
					} 
				}
				State = 1461;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,149,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MarkerAnnotationContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public MarkerAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_markerAnnotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMarkerAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMarkerAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMarkerAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MarkerAnnotationContext markerAnnotation() {
		MarkerAnnotationContext _localctx = new MarkerAnnotationContext(Context, State);
		EnterRule(_localctx, 244, RULE_markerAnnotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1462; Match(AT);
			State = 1463; typeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleElementAnnotationContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ElementValueContext elementValue() {
			return GetRuleContext<ElementValueContext>(0);
		}
		public SingleElementAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleElementAnnotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSingleElementAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSingleElementAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleElementAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleElementAnnotationContext singleElementAnnotation() {
		SingleElementAnnotationContext _localctx = new SingleElementAnnotationContext(Context, State);
		EnterRule(_localctx, 246, RULE_singleElementAnnotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1465; Match(AT);
			State = 1466; typeName();
			State = 1467; Match(LPAREN);
			State = 1468; elementValue();
			State = 1469; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayInitializerContext : ParserRuleContext {
		public VariableInitializerListContext variableInitializerList() {
			return GetRuleContext<VariableInitializerListContext>(0);
		}
		public ArrayInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterArrayInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitArrayInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayInitializerContext arrayInitializer() {
		ArrayInitializerContext _localctx = new ArrayInitializerContext(Context, State);
		EnterRule(_localctx, 248, RULE_arrayInitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1471; Match(LBRACE);
			State = 1473;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN) | (1L << LBRACE))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
				{
				State = 1472; variableInitializerList();
				}
			}

			State = 1476;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1475; Match(COMMA);
				}
			}

			State = 1478; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableInitializerListContext : ParserRuleContext {
		public VariableInitializerContext[] variableInitializer() {
			return GetRuleContexts<VariableInitializerContext>();
		}
		public VariableInitializerContext variableInitializer(int i) {
			return GetRuleContext<VariableInitializerContext>(i);
		}
		public VariableInitializerListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableInitializerList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterVariableInitializerList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitVariableInitializerList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableInitializerList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableInitializerListContext variableInitializerList() {
		VariableInitializerListContext _localctx = new VariableInitializerListContext(Context, State);
		EnterRule(_localctx, 250, RULE_variableInitializerList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1480; variableInitializer();
			State = 1485;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,152,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1481; Match(COMMA);
					State = 1482; variableInitializer();
					}
					} 
				}
				State = 1487;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,152,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public BlockStatementsContext blockStatements() {
			return GetRuleContext<BlockStatementsContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 252, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1488; Match(LBRACE);
			State = 1490;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ASSERT) | (1L << BOOLEAN) | (1L << BREAK) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << CONTINUE) | (1L << DO) | (1L << DOUBLE) | (1L << ENUM) | (1L << FINAL) | (1L << FLOAT) | (1L << FOR) | (1L << IF) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << RETURN) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << SUPER) | (1L << SWITCH) | (1L << SYNCHRONIZED) | (1L << THIS) | (1L << THROW) | (1L << TRY) | (1L << VOID) | (1L << WHILE) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN) | (1L << LBRACE) | (1L << SEMI))) != 0) || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (INC - 79)) | (1L << (DEC - 79)) | (1L << (Identifier - 79)) | (1L << (AT - 79)))) != 0)) {
				{
				State = 1489; blockStatements();
				}
			}

			State = 1492; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementsContext : ParserRuleContext {
		public BlockStatementContext[] blockStatement() {
			return GetRuleContexts<BlockStatementContext>();
		}
		public BlockStatementContext blockStatement(int i) {
			return GetRuleContext<BlockStatementContext>(i);
		}
		public BlockStatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatements; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterBlockStatements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitBlockStatements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementsContext blockStatements() {
		BlockStatementsContext _localctx = new BlockStatementsContext(Context, State);
		EnterRule(_localctx, 254, RULE_blockStatements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1494; blockStatement();
			State = 1498;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ASSERT) | (1L << BOOLEAN) | (1L << BREAK) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << CONTINUE) | (1L << DO) | (1L << DOUBLE) | (1L << ENUM) | (1L << FINAL) | (1L << FLOAT) | (1L << FOR) | (1L << IF) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << RETURN) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << SUPER) | (1L << SWITCH) | (1L << SYNCHRONIZED) | (1L << THIS) | (1L << THROW) | (1L << TRY) | (1L << VOID) | (1L << WHILE) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN) | (1L << LBRACE) | (1L << SEMI))) != 0) || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (INC - 79)) | (1L << (DEC - 79)) | (1L << (Identifier - 79)) | (1L << (AT - 79)))) != 0)) {
				{
				{
				State = 1495; blockStatement();
				}
				}
				State = 1500;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		public LocalVariableDeclarationStatementContext localVariableDeclarationStatement() {
			return GetRuleContext<LocalVariableDeclarationStatementContext>(0);
		}
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(Context, State);
		EnterRule(_localctx, 256, RULE_blockStatement);
		try {
			State = 1504;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,155,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1501; localVariableDeclarationStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1502; classDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1503; statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationStatementContext : ParserRuleContext {
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public LocalVariableDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclarationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVariableDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationStatementContext localVariableDeclarationStatement() {
		LocalVariableDeclarationStatementContext _localctx = new LocalVariableDeclarationStatementContext(Context, State);
		EnterRule(_localctx, 258, RULE_localVariableDeclarationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1506; localVariableDeclaration();
			State = 1507; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public VariableDeclaratorListContext variableDeclaratorList() {
			return GetRuleContext<VariableDeclaratorListContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public LocalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationContext localVariableDeclaration() {
		LocalVariableDeclarationContext _localctx = new LocalVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 260, RULE_localVariableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1512;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FINAL || _la==AT) {
				{
				{
				State = 1509; variableModifier();
				}
				}
				State = 1514;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1515; unannType();
			State = 1516; variableDeclaratorList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementWithoutTrailingSubstatementContext statementWithoutTrailingSubstatement() {
			return GetRuleContext<StatementWithoutTrailingSubstatementContext>(0);
		}
		public LabeledStatementContext labeledStatement() {
			return GetRuleContext<LabeledStatementContext>(0);
		}
		public IfThenStatementContext ifThenStatement() {
			return GetRuleContext<IfThenStatementContext>(0);
		}
		public IfThenElseStatementContext ifThenElseStatement() {
			return GetRuleContext<IfThenElseStatementContext>(0);
		}
		public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 262, RULE_statement);
		try {
			State = 1524;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,157,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1518; statementWithoutTrailingSubstatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1519; labeledStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1520; ifThenStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1521; ifThenElseStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1522; whileStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1523; forStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementNoShortIfContext : ParserRuleContext {
		public StatementWithoutTrailingSubstatementContext statementWithoutTrailingSubstatement() {
			return GetRuleContext<StatementWithoutTrailingSubstatementContext>(0);
		}
		public LabeledStatementNoShortIfContext labeledStatementNoShortIf() {
			return GetRuleContext<LabeledStatementNoShortIfContext>(0);
		}
		public IfThenElseStatementNoShortIfContext ifThenElseStatementNoShortIf() {
			return GetRuleContext<IfThenElseStatementNoShortIfContext>(0);
		}
		public WhileStatementNoShortIfContext whileStatementNoShortIf() {
			return GetRuleContext<WhileStatementNoShortIfContext>(0);
		}
		public ForStatementNoShortIfContext forStatementNoShortIf() {
			return GetRuleContext<ForStatementNoShortIfContext>(0);
		}
		public StatementNoShortIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementNoShortIf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterStatementNoShortIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitStatementNoShortIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementNoShortIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementNoShortIfContext statementNoShortIf() {
		StatementNoShortIfContext _localctx = new StatementNoShortIfContext(Context, State);
		EnterRule(_localctx, 264, RULE_statementNoShortIf);
		try {
			State = 1531;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,158,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1526; statementWithoutTrailingSubstatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1527; labeledStatementNoShortIf();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1528; ifThenElseStatementNoShortIf();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1529; whileStatementNoShortIf();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1530; forStatementNoShortIf();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementWithoutTrailingSubstatementContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public EmptyStatementContext emptyStatement() {
			return GetRuleContext<EmptyStatementContext>(0);
		}
		public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public AssertStatementContext assertStatement() {
			return GetRuleContext<AssertStatementContext>(0);
		}
		public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		public DoStatementContext doStatement() {
			return GetRuleContext<DoStatementContext>(0);
		}
		public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public SynchronizedStatementContext synchronizedStatement() {
			return GetRuleContext<SynchronizedStatementContext>(0);
		}
		public ThrowStatementContext throwStatement() {
			return GetRuleContext<ThrowStatementContext>(0);
		}
		public TryStatementContext tryStatement() {
			return GetRuleContext<TryStatementContext>(0);
		}
		public StatementWithoutTrailingSubstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementWithoutTrailingSubstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterStatementWithoutTrailingSubstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitStatementWithoutTrailingSubstatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementWithoutTrailingSubstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementWithoutTrailingSubstatementContext statementWithoutTrailingSubstatement() {
		StatementWithoutTrailingSubstatementContext _localctx = new StatementWithoutTrailingSubstatementContext(Context, State);
		EnterRule(_localctx, 266, RULE_statementWithoutTrailingSubstatement);
		try {
			State = 1545;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1533; block();
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1534; emptyStatement();
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case NEW:
			case SHORT:
			case SUPER:
			case THIS:
			case VOID:
			case IntegerLiteral:
			case FloatingPointLiteral:
			case BooleanLiteral:
			case CharacterLiteral:
			case StringLiteral:
			case NullLiteral:
			case LPAREN:
			case INC:
			case DEC:
			case Identifier:
			case AT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1535; expressionStatement();
				}
				break;
			case ASSERT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1536; assertStatement();
				}
				break;
			case SWITCH:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1537; switchStatement();
				}
				break;
			case DO:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1538; doStatement();
				}
				break;
			case BREAK:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1539; breakStatement();
				}
				break;
			case CONTINUE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1540; continueStatement();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1541; returnStatement();
				}
				break;
			case SYNCHRONIZED:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1542; synchronizedStatement();
				}
				break;
			case THROW:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1543; throwStatement();
				}
				break;
			case TRY:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1544; tryStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyStatementContext : ParserRuleContext {
		public EmptyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterEmptyStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitEmptyStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyStatementContext emptyStatement() {
		EmptyStatementContext _localctx = new EmptyStatementContext(Context, State);
		EnterRule(_localctx, 268, RULE_emptyStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1547; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledStatementContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public LabeledStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterLabeledStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitLabeledStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledStatementContext labeledStatement() {
		LabeledStatementContext _localctx = new LabeledStatementContext(Context, State);
		EnterRule(_localctx, 270, RULE_labeledStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1549; Match(Identifier);
			State = 1550; Match(COLON);
			State = 1551; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledStatementNoShortIfContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public StatementNoShortIfContext statementNoShortIf() {
			return GetRuleContext<StatementNoShortIfContext>(0);
		}
		public LabeledStatementNoShortIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledStatementNoShortIf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterLabeledStatementNoShortIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitLabeledStatementNoShortIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledStatementNoShortIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledStatementNoShortIfContext labeledStatementNoShortIf() {
		LabeledStatementNoShortIfContext _localctx = new LabeledStatementNoShortIfContext(Context, State);
		EnterRule(_localctx, 272, RULE_labeledStatementNoShortIf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1553; Match(Identifier);
			State = 1554; Match(COLON);
			State = 1555; statementNoShortIf();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		public StatementExpressionContext statementExpression() {
			return GetRuleContext<StatementExpressionContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 274, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1557; statementExpression();
			State = 1558; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementExpressionContext : ParserRuleContext {
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public PreIncrementExpressionContext preIncrementExpression() {
			return GetRuleContext<PreIncrementExpressionContext>(0);
		}
		public PreDecrementExpressionContext preDecrementExpression() {
			return GetRuleContext<PreDecrementExpressionContext>(0);
		}
		public PostIncrementExpressionContext postIncrementExpression() {
			return GetRuleContext<PostIncrementExpressionContext>(0);
		}
		public PostDecrementExpressionContext postDecrementExpression() {
			return GetRuleContext<PostDecrementExpressionContext>(0);
		}
		public MethodInvocationContext methodInvocation() {
			return GetRuleContext<MethodInvocationContext>(0);
		}
		public ClassInstanceCreationExpressionContext classInstanceCreationExpression() {
			return GetRuleContext<ClassInstanceCreationExpressionContext>(0);
		}
		public StatementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterStatementExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitStatementExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementExpressionContext statementExpression() {
		StatementExpressionContext _localctx = new StatementExpressionContext(Context, State);
		EnterRule(_localctx, 276, RULE_statementExpression);
		try {
			State = 1567;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,160,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1560; assignment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1561; preIncrementExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1562; preDecrementExpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1563; postIncrementExpression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1564; postDecrementExpression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1565; methodInvocation();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1566; classInstanceCreationExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfThenStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public IfThenStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifThenStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterIfThenStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitIfThenStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfThenStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfThenStatementContext ifThenStatement() {
		IfThenStatementContext _localctx = new IfThenStatementContext(Context, State);
		EnterRule(_localctx, 278, RULE_ifThenStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1569; Match(IF);
			State = 1570; Match(LPAREN);
			State = 1571; expression();
			State = 1572; Match(RPAREN);
			State = 1573; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfThenElseStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementNoShortIfContext statementNoShortIf() {
			return GetRuleContext<StatementNoShortIfContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public IfThenElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifThenElseStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterIfThenElseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitIfThenElseStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfThenElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfThenElseStatementContext ifThenElseStatement() {
		IfThenElseStatementContext _localctx = new IfThenElseStatementContext(Context, State);
		EnterRule(_localctx, 280, RULE_ifThenElseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1575; Match(IF);
			State = 1576; Match(LPAREN);
			State = 1577; expression();
			State = 1578; Match(RPAREN);
			State = 1579; statementNoShortIf();
			State = 1580; Match(ELSE);
			State = 1581; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfThenElseStatementNoShortIfContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementNoShortIfContext[] statementNoShortIf() {
			return GetRuleContexts<StatementNoShortIfContext>();
		}
		public StatementNoShortIfContext statementNoShortIf(int i) {
			return GetRuleContext<StatementNoShortIfContext>(i);
		}
		public IfThenElseStatementNoShortIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifThenElseStatementNoShortIf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterIfThenElseStatementNoShortIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitIfThenElseStatementNoShortIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfThenElseStatementNoShortIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfThenElseStatementNoShortIfContext ifThenElseStatementNoShortIf() {
		IfThenElseStatementNoShortIfContext _localctx = new IfThenElseStatementNoShortIfContext(Context, State);
		EnterRule(_localctx, 282, RULE_ifThenElseStatementNoShortIf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1583; Match(IF);
			State = 1584; Match(LPAREN);
			State = 1585; expression();
			State = 1586; Match(RPAREN);
			State = 1587; statementNoShortIf();
			State = 1588; Match(ELSE);
			State = 1589; statementNoShortIf();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssertStatementContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AssertStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assertStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAssertStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAssertStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssertStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssertStatementContext assertStatement() {
		AssertStatementContext _localctx = new AssertStatementContext(Context, State);
		EnterRule(_localctx, 284, RULE_assertStatement);
		try {
			State = 1601;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,161,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1591; Match(ASSERT);
				State = 1592; expression();
				State = 1593; Match(SEMI);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1595; Match(ASSERT);
				State = 1596; expression();
				State = 1597; Match(COLON);
				State = 1598; expression();
				State = 1599; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SwitchBlockContext switchBlock() {
			return GetRuleContext<SwitchBlockContext>(0);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 286, RULE_switchStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1603; Match(SWITCH);
			State = 1604; Match(LPAREN);
			State = 1605; expression();
			State = 1606; Match(RPAREN);
			State = 1607; switchBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBlockContext : ParserRuleContext {
		public SwitchBlockStatementGroupContext[] switchBlockStatementGroup() {
			return GetRuleContexts<SwitchBlockStatementGroupContext>();
		}
		public SwitchBlockStatementGroupContext switchBlockStatementGroup(int i) {
			return GetRuleContext<SwitchBlockStatementGroupContext>(i);
		}
		public SwitchLabelContext[] switchLabel() {
			return GetRuleContexts<SwitchLabelContext>();
		}
		public SwitchLabelContext switchLabel(int i) {
			return GetRuleContext<SwitchLabelContext>(i);
		}
		public SwitchBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSwitchBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSwitchBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBlockContext switchBlock() {
		SwitchBlockContext _localctx = new SwitchBlockContext(Context, State);
		EnterRule(_localctx, 288, RULE_switchBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1609; Match(LBRACE);
			State = 1613;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,162,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1610; switchBlockStatementGroup();
					}
					} 
				}
				State = 1615;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,162,Context);
			}
			State = 1619;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CASE || _la==DEFAULT) {
				{
				{
				State = 1616; switchLabel();
				}
				}
				State = 1621;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1622; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBlockStatementGroupContext : ParserRuleContext {
		public SwitchLabelsContext switchLabels() {
			return GetRuleContext<SwitchLabelsContext>(0);
		}
		public BlockStatementsContext blockStatements() {
			return GetRuleContext<BlockStatementsContext>(0);
		}
		public SwitchBlockStatementGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBlockStatementGroup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSwitchBlockStatementGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSwitchBlockStatementGroup(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchBlockStatementGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBlockStatementGroupContext switchBlockStatementGroup() {
		SwitchBlockStatementGroupContext _localctx = new SwitchBlockStatementGroupContext(Context, State);
		EnterRule(_localctx, 290, RULE_switchBlockStatementGroup);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1624; switchLabels();
			State = 1625; blockStatements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchLabelsContext : ParserRuleContext {
		public SwitchLabelContext[] switchLabel() {
			return GetRuleContexts<SwitchLabelContext>();
		}
		public SwitchLabelContext switchLabel(int i) {
			return GetRuleContext<SwitchLabelContext>(i);
		}
		public SwitchLabelsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchLabels; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSwitchLabels(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSwitchLabels(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchLabels(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchLabelsContext switchLabels() {
		SwitchLabelsContext _localctx = new SwitchLabelsContext(Context, State);
		EnterRule(_localctx, 292, RULE_switchLabels);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1627; switchLabel();
			State = 1631;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CASE || _la==DEFAULT) {
				{
				{
				State = 1628; switchLabel();
				}
				}
				State = 1633;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchLabelContext : ParserRuleContext {
		public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public EnumConstantNameContext enumConstantName() {
			return GetRuleContext<EnumConstantNameContext>(0);
		}
		public SwitchLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSwitchLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSwitchLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchLabelContext switchLabel() {
		SwitchLabelContext _localctx = new SwitchLabelContext(Context, State);
		EnterRule(_localctx, 294, RULE_switchLabel);
		try {
			State = 1644;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,165,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1634; Match(CASE);
				State = 1635; constantExpression();
				State = 1636; Match(COLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1638; Match(CASE);
				State = 1639; enumConstantName();
				State = 1640; Match(COLON);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1642; Match(DEFAULT);
				State = 1643; Match(COLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumConstantNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public EnumConstantNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumConstantName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterEnumConstantName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitEnumConstantName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumConstantName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumConstantNameContext enumConstantName() {
		EnumConstantNameContext _localctx = new EnumConstantNameContext(Context, State);
		EnterRule(_localctx, 296, RULE_enumConstantName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1646; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 298, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1648; Match(WHILE);
			State = 1649; Match(LPAREN);
			State = 1650; expression();
			State = 1651; Match(RPAREN);
			State = 1652; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementNoShortIfContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementNoShortIfContext statementNoShortIf() {
			return GetRuleContext<StatementNoShortIfContext>(0);
		}
		public WhileStatementNoShortIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatementNoShortIf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterWhileStatementNoShortIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitWhileStatementNoShortIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatementNoShortIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementNoShortIfContext whileStatementNoShortIf() {
		WhileStatementNoShortIfContext _localctx = new WhileStatementNoShortIfContext(Context, State);
		EnterRule(_localctx, 300, RULE_whileStatementNoShortIf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1654; Match(WHILE);
			State = 1655; Match(LPAREN);
			State = 1656; expression();
			State = 1657; Match(RPAREN);
			State = 1658; statementNoShortIf();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoStatementContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterDoStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitDoStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoStatementContext doStatement() {
		DoStatementContext _localctx = new DoStatementContext(Context, State);
		EnterRule(_localctx, 302, RULE_doStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1660; Match(DO);
			State = 1661; statement();
			State = 1662; Match(WHILE);
			State = 1663; Match(LPAREN);
			State = 1664; expression();
			State = 1665; Match(RPAREN);
			State = 1666; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public BasicForStatementContext basicForStatement() {
			return GetRuleContext<BasicForStatementContext>(0);
		}
		public EnhancedForStatementContext enhancedForStatement() {
			return GetRuleContext<EnhancedForStatementContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 304, RULE_forStatement);
		try {
			State = 1670;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,166,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1668; basicForStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1669; enhancedForStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementNoShortIfContext : ParserRuleContext {
		public BasicForStatementNoShortIfContext basicForStatementNoShortIf() {
			return GetRuleContext<BasicForStatementNoShortIfContext>(0);
		}
		public EnhancedForStatementNoShortIfContext enhancedForStatementNoShortIf() {
			return GetRuleContext<EnhancedForStatementNoShortIfContext>(0);
		}
		public ForStatementNoShortIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatementNoShortIf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterForStatementNoShortIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitForStatementNoShortIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatementNoShortIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementNoShortIfContext forStatementNoShortIf() {
		ForStatementNoShortIfContext _localctx = new ForStatementNoShortIfContext(Context, State);
		EnterRule(_localctx, 306, RULE_forStatementNoShortIf);
		try {
			State = 1674;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,167,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1672; basicForStatementNoShortIf();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1673; enhancedForStatementNoShortIf();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicForStatementContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ForInitContext forInit() {
			return GetRuleContext<ForInitContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForUpdateContext forUpdate() {
			return GetRuleContext<ForUpdateContext>(0);
		}
		public BasicForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicForStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterBasicForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitBasicForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BasicForStatementContext basicForStatement() {
		BasicForStatementContext _localctx = new BasicForStatementContext(Context, State);
		EnterRule(_localctx, 308, RULE_basicForStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1676; Match(FOR);
			State = 1677; Match(LPAREN);
			State = 1679;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (INC - 79)) | (1L << (DEC - 79)) | (1L << (Identifier - 79)) | (1L << (AT - 79)))) != 0)) {
				{
				State = 1678; forInit();
				}
			}

			State = 1681; Match(SEMI);
			State = 1683;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
				{
				State = 1682; expression();
				}
			}

			State = 1685; Match(SEMI);
			State = 1687;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (INC - 79)) | (1L << (DEC - 79)) | (1L << (Identifier - 79)) | (1L << (AT - 79)))) != 0)) {
				{
				State = 1686; forUpdate();
				}
			}

			State = 1689; Match(RPAREN);
			State = 1690; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicForStatementNoShortIfContext : ParserRuleContext {
		public StatementNoShortIfContext statementNoShortIf() {
			return GetRuleContext<StatementNoShortIfContext>(0);
		}
		public ForInitContext forInit() {
			return GetRuleContext<ForInitContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForUpdateContext forUpdate() {
			return GetRuleContext<ForUpdateContext>(0);
		}
		public BasicForStatementNoShortIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicForStatementNoShortIf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterBasicForStatementNoShortIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitBasicForStatementNoShortIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicForStatementNoShortIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BasicForStatementNoShortIfContext basicForStatementNoShortIf() {
		BasicForStatementNoShortIfContext _localctx = new BasicForStatementNoShortIfContext(Context, State);
		EnterRule(_localctx, 310, RULE_basicForStatementNoShortIf);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1692; Match(FOR);
			State = 1693; Match(LPAREN);
			State = 1695;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (INC - 79)) | (1L << (DEC - 79)) | (1L << (Identifier - 79)) | (1L << (AT - 79)))) != 0)) {
				{
				State = 1694; forInit();
				}
			}

			State = 1697; Match(SEMI);
			State = 1699;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
				{
				State = 1698; expression();
				}
			}

			State = 1701; Match(SEMI);
			State = 1703;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (INC - 79)) | (1L << (DEC - 79)) | (1L << (Identifier - 79)) | (1L << (AT - 79)))) != 0)) {
				{
				State = 1702; forUpdate();
				}
			}

			State = 1705; Match(RPAREN);
			State = 1706; statementNoShortIf();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitContext : ParserRuleContext {
		public StatementExpressionListContext statementExpressionList() {
			return GetRuleContext<StatementExpressionListContext>(0);
		}
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public ForInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterForInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitForInit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInitContext forInit() {
		ForInitContext _localctx = new ForInitContext(Context, State);
		EnterRule(_localctx, 312, RULE_forInit);
		try {
			State = 1710;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,174,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1708; statementExpressionList();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1709; localVariableDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForUpdateContext : ParserRuleContext {
		public StatementExpressionListContext statementExpressionList() {
			return GetRuleContext<StatementExpressionListContext>(0);
		}
		public ForUpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forUpdate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterForUpdate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitForUpdate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForUpdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForUpdateContext forUpdate() {
		ForUpdateContext _localctx = new ForUpdateContext(Context, State);
		EnterRule(_localctx, 314, RULE_forUpdate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1712; statementExpressionList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementExpressionListContext : ParserRuleContext {
		public StatementExpressionContext[] statementExpression() {
			return GetRuleContexts<StatementExpressionContext>();
		}
		public StatementExpressionContext statementExpression(int i) {
			return GetRuleContext<StatementExpressionContext>(i);
		}
		public StatementExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementExpressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterStatementExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitStatementExpressionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementExpressionListContext statementExpressionList() {
		StatementExpressionListContext _localctx = new StatementExpressionListContext(Context, State);
		EnterRule(_localctx, 316, RULE_statementExpressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1714; statementExpression();
			State = 1719;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1715; Match(COMMA);
				State = 1716; statementExpression();
				}
				}
				State = 1721;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnhancedForStatementContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public EnhancedForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enhancedForStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterEnhancedForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitEnhancedForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnhancedForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnhancedForStatementContext enhancedForStatement() {
		EnhancedForStatementContext _localctx = new EnhancedForStatementContext(Context, State);
		EnterRule(_localctx, 318, RULE_enhancedForStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1722; Match(FOR);
			State = 1723; Match(LPAREN);
			State = 1727;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FINAL || _la==AT) {
				{
				{
				State = 1724; variableModifier();
				}
				}
				State = 1729;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1730; unannType();
			State = 1731; variableDeclaratorId();
			State = 1732; Match(COLON);
			State = 1733; expression();
			State = 1734; Match(RPAREN);
			State = 1735; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnhancedForStatementNoShortIfContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementNoShortIfContext statementNoShortIf() {
			return GetRuleContext<StatementNoShortIfContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public EnhancedForStatementNoShortIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enhancedForStatementNoShortIf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterEnhancedForStatementNoShortIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitEnhancedForStatementNoShortIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnhancedForStatementNoShortIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnhancedForStatementNoShortIfContext enhancedForStatementNoShortIf() {
		EnhancedForStatementNoShortIfContext _localctx = new EnhancedForStatementNoShortIfContext(Context, State);
		EnterRule(_localctx, 320, RULE_enhancedForStatementNoShortIf);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1737; Match(FOR);
			State = 1738; Match(LPAREN);
			State = 1742;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FINAL || _la==AT) {
				{
				{
				State = 1739; variableModifier();
				}
				}
				State = 1744;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1745; unannType();
			State = 1746; variableDeclaratorId();
			State = 1747; Match(COLON);
			State = 1748; expression();
			State = 1749; Match(RPAREN);
			State = 1750; statementNoShortIf();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 322, RULE_breakStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1752; Match(BREAK);
			State = 1754;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 1753; Match(Identifier);
				}
			}

			State = 1756; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 324, RULE_continueStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1758; Match(CONTINUE);
			State = 1760;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 1759; Match(Identifier);
				}
			}

			State = 1762; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 326, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1764; Match(RETURN);
			State = 1766;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
				{
				State = 1765; expression();
				}
			}

			State = 1768; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ThrowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrowStatementContext throwStatement() {
		ThrowStatementContext _localctx = new ThrowStatementContext(Context, State);
		EnterRule(_localctx, 328, RULE_throwStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1770; Match(THROW);
			State = 1771; expression();
			State = 1772; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SynchronizedStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SynchronizedStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_synchronizedStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSynchronizedStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSynchronizedStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSynchronizedStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SynchronizedStatementContext synchronizedStatement() {
		SynchronizedStatementContext _localctx = new SynchronizedStatementContext(Context, State);
		EnterRule(_localctx, 330, RULE_synchronizedStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1774; Match(SYNCHRONIZED);
			State = 1775; Match(LPAREN);
			State = 1776; expression();
			State = 1777; Match(RPAREN);
			State = 1778; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryStatementContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public CatchesContext catches() {
			return GetRuleContext<CatchesContext>(0);
		}
		public Finally_Context finally_() {
			return GetRuleContext<Finally_Context>(0);
		}
		public TryWithResourcesStatementContext tryWithResourcesStatement() {
			return GetRuleContext<TryWithResourcesStatementContext>(0);
		}
		public TryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTryStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTryStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryStatementContext tryStatement() {
		TryStatementContext _localctx = new TryStatementContext(Context, State);
		EnterRule(_localctx, 332, RULE_tryStatement);
		int _la;
		try {
			State = 1792;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,182,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1780; Match(TRY);
				State = 1781; block();
				State = 1782; catches();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1784; Match(TRY);
				State = 1785; block();
				State = 1787;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CATCH) {
					{
					State = 1786; catches();
					}
				}

				State = 1789; finally_();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1791; tryWithResourcesStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchesContext : ParserRuleContext {
		public CatchClauseContext[] catchClause() {
			return GetRuleContexts<CatchClauseContext>();
		}
		public CatchClauseContext catchClause(int i) {
			return GetRuleContext<CatchClauseContext>(i);
		}
		public CatchesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catches; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterCatches(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitCatches(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatches(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchesContext catches() {
		CatchesContext _localctx = new CatchesContext(Context, State);
		EnterRule(_localctx, 334, RULE_catches);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1794; catchClause();
			State = 1798;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CATCH) {
				{
				{
				State = 1795; catchClause();
				}
				}
				State = 1800;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchClauseContext : ParserRuleContext {
		public CatchFormalParameterContext catchFormalParameter() {
			return GetRuleContext<CatchFormalParameterContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public CatchClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterCatchClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitCatchClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchClauseContext catchClause() {
		CatchClauseContext _localctx = new CatchClauseContext(Context, State);
		EnterRule(_localctx, 336, RULE_catchClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1801; Match(CATCH);
			State = 1802; Match(LPAREN);
			State = 1803; catchFormalParameter();
			State = 1804; Match(RPAREN);
			State = 1805; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchFormalParameterContext : ParserRuleContext {
		public CatchTypeContext catchType() {
			return GetRuleContext<CatchTypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public CatchFormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchFormalParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterCatchFormalParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitCatchFormalParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchFormalParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchFormalParameterContext catchFormalParameter() {
		CatchFormalParameterContext _localctx = new CatchFormalParameterContext(Context, State);
		EnterRule(_localctx, 338, RULE_catchFormalParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1810;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FINAL || _la==AT) {
				{
				{
				State = 1807; variableModifier();
				}
				}
				State = 1812;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1813; catchType();
			State = 1814; variableDeclaratorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchTypeContext : ParserRuleContext {
		public UnannClassTypeContext unannClassType() {
			return GetRuleContext<UnannClassTypeContext>(0);
		}
		public ClassTypeContext[] classType() {
			return GetRuleContexts<ClassTypeContext>();
		}
		public ClassTypeContext classType(int i) {
			return GetRuleContext<ClassTypeContext>(i);
		}
		public CatchTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterCatchType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitCatchType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchTypeContext catchType() {
		CatchTypeContext _localctx = new CatchTypeContext(Context, State);
		EnterRule(_localctx, 340, RULE_catchType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1816; unannClassType();
			State = 1821;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BITOR) {
				{
				{
				State = 1817; Match(BITOR);
				State = 1818; classType();
				}
				}
				State = 1823;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Finally_Context : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Finally_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finally_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterFinally_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitFinally_(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinally_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Finally_Context finally_() {
		Finally_Context _localctx = new Finally_Context(Context, State);
		EnterRule(_localctx, 342, RULE_finally_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1824; Match(FINALLY);
			State = 1825; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryWithResourcesStatementContext : ParserRuleContext {
		public ResourceSpecificationContext resourceSpecification() {
			return GetRuleContext<ResourceSpecificationContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public CatchesContext catches() {
			return GetRuleContext<CatchesContext>(0);
		}
		public Finally_Context finally_() {
			return GetRuleContext<Finally_Context>(0);
		}
		public TryWithResourcesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryWithResourcesStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTryWithResourcesStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTryWithResourcesStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryWithResourcesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryWithResourcesStatementContext tryWithResourcesStatement() {
		TryWithResourcesStatementContext _localctx = new TryWithResourcesStatementContext(Context, State);
		EnterRule(_localctx, 344, RULE_tryWithResourcesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1827; Match(TRY);
			State = 1828; resourceSpecification();
			State = 1829; block();
			State = 1831;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CATCH) {
				{
				State = 1830; catches();
				}
			}

			State = 1834;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FINALLY) {
				{
				State = 1833; finally_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceSpecificationContext : ParserRuleContext {
		public ResourceListContext resourceList() {
			return GetRuleContext<ResourceListContext>(0);
		}
		public ResourceSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceSpecification; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterResourceSpecification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitResourceSpecification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResourceSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourceSpecificationContext resourceSpecification() {
		ResourceSpecificationContext _localctx = new ResourceSpecificationContext(Context, State);
		EnterRule(_localctx, 346, RULE_resourceSpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1836; Match(LPAREN);
			State = 1837; resourceList();
			State = 1839;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMI) {
				{
				State = 1838; Match(SEMI);
				}
			}

			State = 1841; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceListContext : ParserRuleContext {
		public ResourceContext[] resource() {
			return GetRuleContexts<ResourceContext>();
		}
		public ResourceContext resource(int i) {
			return GetRuleContext<ResourceContext>(i);
		}
		public ResourceListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterResourceList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitResourceList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResourceList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourceListContext resourceList() {
		ResourceListContext _localctx = new ResourceListContext(Context, State);
		EnterRule(_localctx, 348, RULE_resourceList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1843; resource();
			State = 1848;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,189,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1844; Match(SEMI);
					State = 1845; resource();
					}
					} 
				}
				State = 1850;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,189,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public ResourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resource; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterResource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitResource(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourceContext resource() {
		ResourceContext _localctx = new ResourceContext(Context, State);
		EnterRule(_localctx, 350, RULE_resource);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1854;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FINAL || _la==AT) {
				{
				{
				State = 1851; variableModifier();
				}
				}
				State = 1856;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1857; unannType();
			State = 1858; variableDeclaratorId();
			State = 1859; Match(ASSIGN);
			State = 1860; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public PrimaryNoNewArray_lfno_primaryContext primaryNoNewArray_lfno_primary() {
			return GetRuleContext<PrimaryNoNewArray_lfno_primaryContext>(0);
		}
		public ArrayCreationExpressionContext arrayCreationExpression() {
			return GetRuleContext<ArrayCreationExpressionContext>(0);
		}
		public PrimaryNoNewArray_lf_primaryContext[] primaryNoNewArray_lf_primary() {
			return GetRuleContexts<PrimaryNoNewArray_lf_primaryContext>();
		}
		public PrimaryNoNewArray_lf_primaryContext primaryNoNewArray_lf_primary(int i) {
			return GetRuleContext<PrimaryNoNewArray_lf_primaryContext>(i);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 352, RULE_primary);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1864;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,191,Context) ) {
			case 1:
				{
				State = 1862; primaryNoNewArray_lfno_primary();
				}
				break;
			case 2:
				{
				State = 1863; arrayCreationExpression();
				}
				break;
			}
			State = 1869;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,192,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1866; primaryNoNewArray_lf_primary();
					}
					} 
				}
				State = 1871;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,192,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArrayContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ClassInstanceCreationExpressionContext classInstanceCreationExpression() {
			return GetRuleContext<ClassInstanceCreationExpressionContext>(0);
		}
		public FieldAccessContext fieldAccess() {
			return GetRuleContext<FieldAccessContext>(0);
		}
		public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		public MethodInvocationContext methodInvocation() {
			return GetRuleContext<MethodInvocationContext>(0);
		}
		public MethodReferenceContext methodReference() {
			return GetRuleContext<MethodReferenceContext>(0);
		}
		public PrimaryNoNewArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryNoNewArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArrayContext primaryNoNewArray() {
		PrimaryNoNewArrayContext _localctx = new PrimaryNoNewArrayContext(Context, State);
		EnterRule(_localctx, 354, RULE_primaryNoNewArray);
		int _la;
		try {
			State = 1901;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,194,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1872; literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1873; typeName();
				State = 1878;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LBRACK) {
					{
					{
					State = 1874; Match(LBRACK);
					State = 1875; Match(RBRACK);
					}
					}
					State = 1880;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1881; Match(DOT);
				State = 1882; Match(CLASS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1884; Match(VOID);
				State = 1885; Match(DOT);
				State = 1886; Match(CLASS);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1887; Match(THIS);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1888; typeName();
				State = 1889; Match(DOT);
				State = 1890; Match(THIS);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1892; Match(LPAREN);
				State = 1893; expression();
				State = 1894; Match(RPAREN);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1896; classInstanceCreationExpression();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1897; fieldAccess();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1898; arrayAccess();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1899; methodInvocation();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1900; methodReference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArray_lf_arrayAccessContext : ParserRuleContext {
		public PrimaryNoNewArray_lf_arrayAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray_lf_arrayAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray_lf_arrayAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray_lf_arrayAccess(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryNoNewArray_lf_arrayAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArray_lf_arrayAccessContext primaryNoNewArray_lf_arrayAccess() {
		PrimaryNoNewArray_lf_arrayAccessContext _localctx = new PrimaryNoNewArray_lf_arrayAccessContext(Context, State);
		EnterRule(_localctx, 356, RULE_primaryNoNewArray_lf_arrayAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArray_lfno_arrayAccessContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ClassInstanceCreationExpressionContext classInstanceCreationExpression() {
			return GetRuleContext<ClassInstanceCreationExpressionContext>(0);
		}
		public FieldAccessContext fieldAccess() {
			return GetRuleContext<FieldAccessContext>(0);
		}
		public MethodInvocationContext methodInvocation() {
			return GetRuleContext<MethodInvocationContext>(0);
		}
		public MethodReferenceContext methodReference() {
			return GetRuleContext<MethodReferenceContext>(0);
		}
		public PrimaryNoNewArray_lfno_arrayAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray_lfno_arrayAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray_lfno_arrayAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray_lfno_arrayAccess(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryNoNewArray_lfno_arrayAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArray_lfno_arrayAccessContext primaryNoNewArray_lfno_arrayAccess() {
		PrimaryNoNewArray_lfno_arrayAccessContext _localctx = new PrimaryNoNewArray_lfno_arrayAccessContext(Context, State);
		EnterRule(_localctx, 358, RULE_primaryNoNewArray_lfno_arrayAccess);
		int _la;
		try {
			State = 1933;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,196,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1905; literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1906; typeName();
				State = 1911;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LBRACK) {
					{
					{
					State = 1907; Match(LBRACK);
					State = 1908; Match(RBRACK);
					}
					}
					State = 1913;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1914; Match(DOT);
				State = 1915; Match(CLASS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1917; Match(VOID);
				State = 1918; Match(DOT);
				State = 1919; Match(CLASS);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1920; Match(THIS);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1921; typeName();
				State = 1922; Match(DOT);
				State = 1923; Match(THIS);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1925; Match(LPAREN);
				State = 1926; expression();
				State = 1927; Match(RPAREN);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1929; classInstanceCreationExpression();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1930; fieldAccess();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1931; methodInvocation();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1932; methodReference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArray_lf_primaryContext : ParserRuleContext {
		public ClassInstanceCreationExpression_lf_primaryContext classInstanceCreationExpression_lf_primary() {
			return GetRuleContext<ClassInstanceCreationExpression_lf_primaryContext>(0);
		}
		public FieldAccess_lf_primaryContext fieldAccess_lf_primary() {
			return GetRuleContext<FieldAccess_lf_primaryContext>(0);
		}
		public ArrayAccess_lf_primaryContext arrayAccess_lf_primary() {
			return GetRuleContext<ArrayAccess_lf_primaryContext>(0);
		}
		public MethodInvocation_lf_primaryContext methodInvocation_lf_primary() {
			return GetRuleContext<MethodInvocation_lf_primaryContext>(0);
		}
		public MethodReference_lf_primaryContext methodReference_lf_primary() {
			return GetRuleContext<MethodReference_lf_primaryContext>(0);
		}
		public PrimaryNoNewArray_lf_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray_lf_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray_lf_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray_lf_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryNoNewArray_lf_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArray_lf_primaryContext primaryNoNewArray_lf_primary() {
		PrimaryNoNewArray_lf_primaryContext _localctx = new PrimaryNoNewArray_lf_primaryContext(Context, State);
		EnterRule(_localctx, 360, RULE_primaryNoNewArray_lf_primary);
		try {
			State = 1940;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,197,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1935; classInstanceCreationExpression_lf_primary();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1936; fieldAccess_lf_primary();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1937; arrayAccess_lf_primary();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1938; methodInvocation_lf_primary();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1939; methodReference_lf_primary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext : ParserRuleContext {
		public PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary() {
		PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext _localctx = new PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext(Context, State);
		EnterRule(_localctx, 362, RULE_primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext : ParserRuleContext {
		public ClassInstanceCreationExpression_lf_primaryContext classInstanceCreationExpression_lf_primary() {
			return GetRuleContext<ClassInstanceCreationExpression_lf_primaryContext>(0);
		}
		public FieldAccess_lf_primaryContext fieldAccess_lf_primary() {
			return GetRuleContext<FieldAccess_lf_primaryContext>(0);
		}
		public MethodInvocation_lf_primaryContext methodInvocation_lf_primary() {
			return GetRuleContext<MethodInvocation_lf_primaryContext>(0);
		}
		public MethodReference_lf_primaryContext methodReference_lf_primary() {
			return GetRuleContext<MethodReference_lf_primaryContext>(0);
		}
		public PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary() {
		PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext _localctx = new PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext(Context, State);
		EnterRule(_localctx, 364, RULE_primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary);
		try {
			State = 1948;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,198,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1944; classInstanceCreationExpression_lf_primary();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1945; fieldAccess_lf_primary();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1946; methodInvocation_lf_primary();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1947; methodReference_lf_primary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArray_lfno_primaryContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public UnannPrimitiveTypeContext unannPrimitiveType() {
			return GetRuleContext<UnannPrimitiveTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ClassInstanceCreationExpression_lfno_primaryContext classInstanceCreationExpression_lfno_primary() {
			return GetRuleContext<ClassInstanceCreationExpression_lfno_primaryContext>(0);
		}
		public FieldAccess_lfno_primaryContext fieldAccess_lfno_primary() {
			return GetRuleContext<FieldAccess_lfno_primaryContext>(0);
		}
		public ArrayAccess_lfno_primaryContext arrayAccess_lfno_primary() {
			return GetRuleContext<ArrayAccess_lfno_primaryContext>(0);
		}
		public MethodInvocation_lfno_primaryContext methodInvocation_lfno_primary() {
			return GetRuleContext<MethodInvocation_lfno_primaryContext>(0);
		}
		public MethodReference_lfno_primaryContext methodReference_lfno_primary() {
			return GetRuleContext<MethodReference_lfno_primaryContext>(0);
		}
		public PrimaryNoNewArray_lfno_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray_lfno_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray_lfno_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray_lfno_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryNoNewArray_lfno_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArray_lfno_primaryContext primaryNoNewArray_lfno_primary() {
		PrimaryNoNewArray_lfno_primaryContext _localctx = new PrimaryNoNewArray_lfno_primaryContext(Context, State);
		EnterRule(_localctx, 366, RULE_primaryNoNewArray_lfno_primary);
		int _la;
		try {
			State = 1990;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,201,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1950; literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1951; typeName();
				State = 1956;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LBRACK) {
					{
					{
					State = 1952; Match(LBRACK);
					State = 1953; Match(RBRACK);
					}
					}
					State = 1958;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1959; Match(DOT);
				State = 1960; Match(CLASS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1962; unannPrimitiveType();
				State = 1967;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LBRACK) {
					{
					{
					State = 1963; Match(LBRACK);
					State = 1964; Match(RBRACK);
					}
					}
					State = 1969;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1970; Match(DOT);
				State = 1971; Match(CLASS);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1973; Match(VOID);
				State = 1974; Match(DOT);
				State = 1975; Match(CLASS);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1976; Match(THIS);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1977; typeName();
				State = 1978; Match(DOT);
				State = 1979; Match(THIS);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1981; Match(LPAREN);
				State = 1982; expression();
				State = 1983; Match(RPAREN);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1985; classInstanceCreationExpression_lfno_primary();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1986; fieldAccess_lfno_primary();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1987; arrayAccess_lfno_primary();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1988; methodInvocation_lfno_primary();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1989; methodReference_lfno_primary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext : ParserRuleContext {
		public PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary() {
		PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext _localctx = new PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext(Context, State);
		EnterRule(_localctx, 368, RULE_primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public UnannPrimitiveTypeContext unannPrimitiveType() {
			return GetRuleContext<UnannPrimitiveTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ClassInstanceCreationExpression_lfno_primaryContext classInstanceCreationExpression_lfno_primary() {
			return GetRuleContext<ClassInstanceCreationExpression_lfno_primaryContext>(0);
		}
		public FieldAccess_lfno_primaryContext fieldAccess_lfno_primary() {
			return GetRuleContext<FieldAccess_lfno_primaryContext>(0);
		}
		public MethodInvocation_lfno_primaryContext methodInvocation_lfno_primary() {
			return GetRuleContext<MethodInvocation_lfno_primaryContext>(0);
		}
		public MethodReference_lfno_primaryContext methodReference_lfno_primary() {
			return GetRuleContext<MethodReference_lfno_primaryContext>(0);
		}
		public PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary() {
		PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext _localctx = new PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext(Context, State);
		EnterRule(_localctx, 370, RULE_primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary);
		int _la;
		try {
			State = 2033;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,204,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1994; literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1995; typeName();
				State = 2000;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LBRACK) {
					{
					{
					State = 1996; Match(LBRACK);
					State = 1997; Match(RBRACK);
					}
					}
					State = 2002;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2003; Match(DOT);
				State = 2004; Match(CLASS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2006; unannPrimitiveType();
				State = 2011;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LBRACK) {
					{
					{
					State = 2007; Match(LBRACK);
					State = 2008; Match(RBRACK);
					}
					}
					State = 2013;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2014; Match(DOT);
				State = 2015; Match(CLASS);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2017; Match(VOID);
				State = 2018; Match(DOT);
				State = 2019; Match(CLASS);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2020; Match(THIS);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2021; typeName();
				State = 2022; Match(DOT);
				State = 2023; Match(THIS);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2025; Match(LPAREN);
				State = 2026; expression();
				State = 2027; Match(RPAREN);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2029; classInstanceCreationExpression_lfno_primary();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2030; fieldAccess_lfno_primary();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2031; methodInvocation_lfno_primary();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2032; methodReference_lfno_primary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassInstanceCreationExpressionContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(Java8Parser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(Java8Parser.Identifier, i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public TypeArgumentsOrDiamondContext typeArgumentsOrDiamond() {
			return GetRuleContext<TypeArgumentsOrDiamondContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public ClassInstanceCreationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classInstanceCreationExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterClassInstanceCreationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitClassInstanceCreationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassInstanceCreationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassInstanceCreationExpressionContext classInstanceCreationExpression() {
		ClassInstanceCreationExpressionContext _localctx = new ClassInstanceCreationExpressionContext(Context, State);
		EnterRule(_localctx, 372, RULE_classInstanceCreationExpression);
		int _la;
		try {
			State = 2118;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,222,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2035; Match(NEW);
				State = 2037;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2036; typeArguments();
					}
				}

				State = 2042;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT) {
					{
					{
					State = 2039; annotation();
					}
					}
					State = 2044;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2045; Match(Identifier);
				State = 2056;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DOT) {
					{
					{
					State = 2046; Match(DOT);
					State = 2050;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==AT) {
						{
						{
						State = 2047; annotation();
						}
						}
						State = 2052;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2053; Match(Identifier);
					}
					}
					State = 2058;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2060;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2059; typeArgumentsOrDiamond();
					}
				}

				State = 2062; Match(LPAREN);
				State = 2064;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2063; argumentList();
					}
				}

				State = 2066; Match(RPAREN);
				State = 2068;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LBRACE) {
					{
					State = 2067; classBody();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2070; expressionName();
				State = 2071; Match(DOT);
				State = 2072; Match(NEW);
				State = 2074;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2073; typeArguments();
					}
				}

				State = 2079;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT) {
					{
					{
					State = 2076; annotation();
					}
					}
					State = 2081;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2082; Match(Identifier);
				State = 2084;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2083; typeArgumentsOrDiamond();
					}
				}

				State = 2086; Match(LPAREN);
				State = 2088;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2087; argumentList();
					}
				}

				State = 2090; Match(RPAREN);
				State = 2092;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LBRACE) {
					{
					State = 2091; classBody();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2094; primary();
				State = 2095; Match(DOT);
				State = 2096; Match(NEW);
				State = 2098;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2097; typeArguments();
					}
				}

				State = 2103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT) {
					{
					{
					State = 2100; annotation();
					}
					}
					State = 2105;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2106; Match(Identifier);
				State = 2108;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2107; typeArgumentsOrDiamond();
					}
				}

				State = 2110; Match(LPAREN);
				State = 2112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2111; argumentList();
					}
				}

				State = 2114; Match(RPAREN);
				State = 2116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LBRACE) {
					{
					State = 2115; classBody();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassInstanceCreationExpression_lf_primaryContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public TypeArgumentsOrDiamondContext typeArgumentsOrDiamond() {
			return GetRuleContext<TypeArgumentsOrDiamondContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ClassInstanceCreationExpression_lf_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classInstanceCreationExpression_lf_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterClassInstanceCreationExpression_lf_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitClassInstanceCreationExpression_lf_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassInstanceCreationExpression_lf_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassInstanceCreationExpression_lf_primaryContext classInstanceCreationExpression_lf_primary() {
		ClassInstanceCreationExpression_lf_primaryContext _localctx = new ClassInstanceCreationExpression_lf_primaryContext(Context, State);
		EnterRule(_localctx, 374, RULE_classInstanceCreationExpression_lf_primary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2120; Match(DOT);
			State = 2121; Match(NEW);
			State = 2123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 2122; typeArguments();
				}
			}

			State = 2128;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 2125; annotation();
				}
				}
				State = 2130;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2131; Match(Identifier);
			State = 2133;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 2132; typeArgumentsOrDiamond();
				}
			}

			State = 2135; Match(LPAREN);
			State = 2137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
				{
				State = 2136; argumentList();
				}
			}

			State = 2139; Match(RPAREN);
			State = 2141;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,227,Context) ) {
			case 1:
				{
				State = 2140; classBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassInstanceCreationExpression_lfno_primaryContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(Java8Parser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(Java8Parser.Identifier, i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public TypeArgumentsOrDiamondContext typeArgumentsOrDiamond() {
			return GetRuleContext<TypeArgumentsOrDiamondContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public ClassInstanceCreationExpression_lfno_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classInstanceCreationExpression_lfno_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterClassInstanceCreationExpression_lfno_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitClassInstanceCreationExpression_lfno_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassInstanceCreationExpression_lfno_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassInstanceCreationExpression_lfno_primaryContext classInstanceCreationExpression_lfno_primary() {
		ClassInstanceCreationExpression_lfno_primaryContext _localctx = new ClassInstanceCreationExpression_lfno_primaryContext(Context, State);
		EnterRule(_localctx, 376, RULE_classInstanceCreationExpression_lfno_primary);
		int _la;
		try {
			State = 2202;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2143; Match(NEW);
				State = 2145;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2144; typeArguments();
					}
				}

				State = 2150;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT) {
					{
					{
					State = 2147; annotation();
					}
					}
					State = 2152;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2153; Match(Identifier);
				State = 2164;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DOT) {
					{
					{
					State = 2154; Match(DOT);
					State = 2158;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==AT) {
						{
						{
						State = 2155; annotation();
						}
						}
						State = 2160;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2161; Match(Identifier);
					}
					}
					State = 2166;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2167; typeArgumentsOrDiamond();
					}
				}

				State = 2170; Match(LPAREN);
				State = 2172;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2171; argumentList();
					}
				}

				State = 2174; Match(RPAREN);
				State = 2176;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,234,Context) ) {
				case 1:
					{
					State = 2175; classBody();
					}
					break;
				}
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2178; expressionName();
				State = 2179; Match(DOT);
				State = 2180; Match(NEW);
				State = 2182;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2181; typeArguments();
					}
				}

				State = 2187;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT) {
					{
					{
					State = 2184; annotation();
					}
					}
					State = 2189;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2190; Match(Identifier);
				State = 2192;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2191; typeArgumentsOrDiamond();
					}
				}

				State = 2194; Match(LPAREN);
				State = 2196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2195; argumentList();
					}
				}

				State = 2198; Match(RPAREN);
				State = 2200;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,239,Context) ) {
				case 1:
					{
					State = 2199; classBody();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsOrDiamondContext : ParserRuleContext {
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeArgumentsOrDiamondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgumentsOrDiamond; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeArgumentsOrDiamond(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeArgumentsOrDiamond(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgumentsOrDiamond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsOrDiamondContext typeArgumentsOrDiamond() {
		TypeArgumentsOrDiamondContext _localctx = new TypeArgumentsOrDiamondContext(Context, State);
		EnterRule(_localctx, 378, RULE_typeArgumentsOrDiamond);
		try {
			State = 2207;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,241,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2204; typeArguments();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2205; Match(LT);
				State = 2206; Match(GT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldAccessContext : ParserRuleContext {
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public FieldAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterFieldAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitFieldAccess(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldAccessContext fieldAccess() {
		FieldAccessContext _localctx = new FieldAccessContext(Context, State);
		EnterRule(_localctx, 380, RULE_fieldAccess);
		try {
			State = 2222;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,242,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2209; primary();
				State = 2210; Match(DOT);
				State = 2211; Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2213; Match(SUPER);
				State = 2214; Match(DOT);
				State = 2215; Match(Identifier);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2216; typeName();
				State = 2217; Match(DOT);
				State = 2218; Match(SUPER);
				State = 2219; Match(DOT);
				State = 2220; Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldAccess_lf_primaryContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public FieldAccess_lf_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldAccess_lf_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterFieldAccess_lf_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitFieldAccess_lf_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldAccess_lf_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldAccess_lf_primaryContext fieldAccess_lf_primary() {
		FieldAccess_lf_primaryContext _localctx = new FieldAccess_lf_primaryContext(Context, State);
		EnterRule(_localctx, 382, RULE_fieldAccess_lf_primary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2224; Match(DOT);
			State = 2225; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldAccess_lfno_primaryContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public FieldAccess_lfno_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldAccess_lfno_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterFieldAccess_lfno_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitFieldAccess_lfno_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldAccess_lfno_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldAccess_lfno_primaryContext fieldAccess_lfno_primary() {
		FieldAccess_lfno_primaryContext _localctx = new FieldAccess_lfno_primaryContext(Context, State);
		EnterRule(_localctx, 384, RULE_fieldAccess_lfno_primary);
		try {
			State = 2236;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SUPER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2227; Match(SUPER);
				State = 2228; Match(DOT);
				State = 2229; Match(Identifier);
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2230; typeName();
				State = 2231; Match(DOT);
				State = 2232; Match(SUPER);
				State = 2233; Match(DOT);
				State = 2234; Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAccessContext : ParserRuleContext {
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PrimaryNoNewArray_lfno_arrayAccessContext primaryNoNewArray_lfno_arrayAccess() {
			return GetRuleContext<PrimaryNoNewArray_lfno_arrayAccessContext>(0);
		}
		public PrimaryNoNewArray_lf_arrayAccessContext[] primaryNoNewArray_lf_arrayAccess() {
			return GetRuleContexts<PrimaryNoNewArray_lf_arrayAccessContext>();
		}
		public PrimaryNoNewArray_lf_arrayAccessContext primaryNoNewArray_lf_arrayAccess(int i) {
			return GetRuleContext<PrimaryNoNewArray_lf_arrayAccessContext>(i);
		}
		public ArrayAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterArrayAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitArrayAccess(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccessContext arrayAccess() {
		ArrayAccessContext _localctx = new ArrayAccessContext(Context, State);
		EnterRule(_localctx, 386, RULE_arrayAccess);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2248;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,244,Context) ) {
			case 1:
				{
				State = 2238; expressionName();
				State = 2239; Match(LBRACK);
				State = 2240; expression();
				State = 2241; Match(RBRACK);
				}
				break;
			case 2:
				{
				State = 2243; primaryNoNewArray_lfno_arrayAccess();
				State = 2244; Match(LBRACK);
				State = 2245; expression();
				State = 2246; Match(RBRACK);
				}
				break;
			}
			State = 2257;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LBRACK) {
				{
				{
				State = 2250; primaryNoNewArray_lf_arrayAccess();
				State = 2251; Match(LBRACK);
				State = 2252; expression();
				State = 2253; Match(RBRACK);
				}
				}
				State = 2259;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAccess_lf_primaryContext : ParserRuleContext {
		public PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary() {
			return GetRuleContext<PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext[] primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary() {
			return GetRuleContexts<PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext>();
		}
		public PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(int i) {
			return GetRuleContext<PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext>(i);
		}
		public ArrayAccess_lf_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccess_lf_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterArrayAccess_lf_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitArrayAccess_lf_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccess_lf_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccess_lf_primaryContext arrayAccess_lf_primary() {
		ArrayAccess_lf_primaryContext _localctx = new ArrayAccess_lf_primaryContext(Context, State);
		EnterRule(_localctx, 388, RULE_arrayAccess_lf_primary);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2260; primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary();
			State = 2261; Match(LBRACK);
			State = 2262; expression();
			State = 2263; Match(RBRACK);
			}
			State = 2272;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,246,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2265; primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary();
					State = 2266; Match(LBRACK);
					State = 2267; expression();
					State = 2268; Match(RBRACK);
					}
					} 
				}
				State = 2274;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,246,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAccess_lfno_primaryContext : ParserRuleContext {
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary() {
			return GetRuleContext<PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext>(0);
		}
		public PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext[] primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary() {
			return GetRuleContexts<PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext>();
		}
		public PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(int i) {
			return GetRuleContext<PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext>(i);
		}
		public ArrayAccess_lfno_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccess_lfno_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterArrayAccess_lfno_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitArrayAccess_lfno_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccess_lfno_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccess_lfno_primaryContext arrayAccess_lfno_primary() {
		ArrayAccess_lfno_primaryContext _localctx = new ArrayAccess_lfno_primaryContext(Context, State);
		EnterRule(_localctx, 390, RULE_arrayAccess_lfno_primary);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2285;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,247,Context) ) {
			case 1:
				{
				State = 2275; expressionName();
				State = 2276; Match(LBRACK);
				State = 2277; expression();
				State = 2278; Match(RBRACK);
				}
				break;
			case 2:
				{
				State = 2280; primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary();
				State = 2281; Match(LBRACK);
				State = 2282; expression();
				State = 2283; Match(RBRACK);
				}
				break;
			}
			State = 2294;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,248,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2287; primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary();
					State = 2288; Match(LBRACK);
					State = 2289; expression();
					State = 2290; Match(RBRACK);
					}
					} 
				}
				State = 2296;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,248,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodInvocationContext : ParserRuleContext {
		public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public MethodInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodInvocation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMethodInvocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMethodInvocation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodInvocationContext methodInvocation() {
		MethodInvocationContext _localctx = new MethodInvocationContext(Context, State);
		EnterRule(_localctx, 392, RULE_methodInvocation);
		int _la;
		try {
			State = 2365;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,260,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2297; methodName();
				State = 2298; Match(LPAREN);
				State = 2300;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2299; argumentList();
					}
				}

				State = 2302; Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2304; typeName();
				State = 2305; Match(DOT);
				State = 2307;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2306; typeArguments();
					}
				}

				State = 2309; Match(Identifier);
				State = 2310; Match(LPAREN);
				State = 2312;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2311; argumentList();
					}
				}

				State = 2314; Match(RPAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2316; expressionName();
				State = 2317; Match(DOT);
				State = 2319;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2318; typeArguments();
					}
				}

				State = 2321; Match(Identifier);
				State = 2322; Match(LPAREN);
				State = 2324;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2323; argumentList();
					}
				}

				State = 2326; Match(RPAREN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2328; primary();
				State = 2329; Match(DOT);
				State = 2331;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2330; typeArguments();
					}
				}

				State = 2333; Match(Identifier);
				State = 2334; Match(LPAREN);
				State = 2336;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2335; argumentList();
					}
				}

				State = 2338; Match(RPAREN);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2340; Match(SUPER);
				State = 2341; Match(DOT);
				State = 2343;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2342; typeArguments();
					}
				}

				State = 2345; Match(Identifier);
				State = 2346; Match(LPAREN);
				State = 2348;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2347; argumentList();
					}
				}

				State = 2350; Match(RPAREN);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2351; typeName();
				State = 2352; Match(DOT);
				State = 2353; Match(SUPER);
				State = 2354; Match(DOT);
				State = 2356;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2355; typeArguments();
					}
				}

				State = 2358; Match(Identifier);
				State = 2359; Match(LPAREN);
				State = 2361;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2360; argumentList();
					}
				}

				State = 2363; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodInvocation_lf_primaryContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public MethodInvocation_lf_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodInvocation_lf_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMethodInvocation_lf_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMethodInvocation_lf_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodInvocation_lf_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodInvocation_lf_primaryContext methodInvocation_lf_primary() {
		MethodInvocation_lf_primaryContext _localctx = new MethodInvocation_lf_primaryContext(Context, State);
		EnterRule(_localctx, 394, RULE_methodInvocation_lf_primary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2367; Match(DOT);
			State = 2369;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 2368; typeArguments();
				}
			}

			State = 2371; Match(Identifier);
			State = 2372; Match(LPAREN);
			State = 2374;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
				{
				State = 2373; argumentList();
				}
			}

			State = 2376; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodInvocation_lfno_primaryContext : ParserRuleContext {
		public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public MethodInvocation_lfno_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodInvocation_lfno_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMethodInvocation_lfno_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMethodInvocation_lfno_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodInvocation_lfno_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodInvocation_lfno_primaryContext methodInvocation_lfno_primary() {
		MethodInvocation_lfno_primaryContext _localctx = new MethodInvocation_lfno_primaryContext(Context, State);
		EnterRule(_localctx, 396, RULE_methodInvocation_lfno_primary);
		int _la;
		try {
			State = 2434;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,272,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2378; methodName();
				State = 2379; Match(LPAREN);
				State = 2381;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2380; argumentList();
					}
				}

				State = 2383; Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2385; typeName();
				State = 2386; Match(DOT);
				State = 2388;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2387; typeArguments();
					}
				}

				State = 2390; Match(Identifier);
				State = 2391; Match(LPAREN);
				State = 2393;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2392; argumentList();
					}
				}

				State = 2395; Match(RPAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2397; expressionName();
				State = 2398; Match(DOT);
				State = 2400;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2399; typeArguments();
					}
				}

				State = 2402; Match(Identifier);
				State = 2403; Match(LPAREN);
				State = 2405;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2404; argumentList();
					}
				}

				State = 2407; Match(RPAREN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2409; Match(SUPER);
				State = 2410; Match(DOT);
				State = 2412;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2411; typeArguments();
					}
				}

				State = 2414; Match(Identifier);
				State = 2415; Match(LPAREN);
				State = 2417;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2416; argumentList();
					}
				}

				State = 2419; Match(RPAREN);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2420; typeName();
				State = 2421; Match(DOT);
				State = 2422; Match(SUPER);
				State = 2423; Match(DOT);
				State = 2425;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2424; typeArguments();
					}
				}

				State = 2427; Match(Identifier);
				State = 2428; Match(LPAREN);
				State = 2430;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2429; argumentList();
					}
				}

				State = 2432; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 398, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2436; expression();
			State = 2441;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2437; Match(COMMA);
				State = 2438; expression();
				}
				}
				State = 2443;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodReferenceContext : ParserRuleContext {
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public MethodReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMethodReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMethodReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodReferenceContext methodReference() {
		MethodReferenceContext _localctx = new MethodReferenceContext(Context, State);
		EnterRule(_localctx, 400, RULE_methodReference);
		int _la;
		try {
			State = 2491;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,280,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2444; expressionName();
				State = 2445; Match(COLONCOLON);
				State = 2447;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2446; typeArguments();
					}
				}

				State = 2449; Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2451; referenceType();
				State = 2452; Match(COLONCOLON);
				State = 2454;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2453; typeArguments();
					}
				}

				State = 2456; Match(Identifier);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2458; primary();
				State = 2459; Match(COLONCOLON);
				State = 2461;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2460; typeArguments();
					}
				}

				State = 2463; Match(Identifier);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2465; Match(SUPER);
				State = 2466; Match(COLONCOLON);
				State = 2468;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2467; typeArguments();
					}
				}

				State = 2470; Match(Identifier);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2471; typeName();
				State = 2472; Match(DOT);
				State = 2473; Match(SUPER);
				State = 2474; Match(COLONCOLON);
				State = 2476;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2475; typeArguments();
					}
				}

				State = 2478; Match(Identifier);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2480; classType();
				State = 2481; Match(COLONCOLON);
				State = 2483;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2482; typeArguments();
					}
				}

				State = 2485; Match(NEW);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2487; arrayType();
				State = 2488; Match(COLONCOLON);
				State = 2489; Match(NEW);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodReference_lf_primaryContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public MethodReference_lf_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodReference_lf_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMethodReference_lf_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMethodReference_lf_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodReference_lf_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodReference_lf_primaryContext methodReference_lf_primary() {
		MethodReference_lf_primaryContext _localctx = new MethodReference_lf_primaryContext(Context, State);
		EnterRule(_localctx, 402, RULE_methodReference_lf_primary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2493; Match(COLONCOLON);
			State = 2495;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 2494; typeArguments();
				}
			}

			State = 2497; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodReference_lfno_primaryContext : ParserRuleContext {
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public MethodReference_lfno_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodReference_lfno_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMethodReference_lfno_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMethodReference_lfno_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodReference_lfno_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodReference_lfno_primaryContext methodReference_lfno_primary() {
		MethodReference_lfno_primaryContext _localctx = new MethodReference_lfno_primaryContext(Context, State);
		EnterRule(_localctx, 404, RULE_methodReference_lfno_primary);
		int _la;
		try {
			State = 2539;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,287,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2499; expressionName();
				State = 2500; Match(COLONCOLON);
				State = 2502;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2501; typeArguments();
					}
				}

				State = 2504; Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2506; referenceType();
				State = 2507; Match(COLONCOLON);
				State = 2509;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2508; typeArguments();
					}
				}

				State = 2511; Match(Identifier);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2513; Match(SUPER);
				State = 2514; Match(COLONCOLON);
				State = 2516;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2515; typeArguments();
					}
				}

				State = 2518; Match(Identifier);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2519; typeName();
				State = 2520; Match(DOT);
				State = 2521; Match(SUPER);
				State = 2522; Match(COLONCOLON);
				State = 2524;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2523; typeArguments();
					}
				}

				State = 2526; Match(Identifier);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2528; classType();
				State = 2529; Match(COLONCOLON);
				State = 2531;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2530; typeArguments();
					}
				}

				State = 2533; Match(NEW);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2535; arrayType();
				State = 2536; Match(COLONCOLON);
				State = 2537; Match(NEW);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayCreationExpressionContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public DimExprsContext dimExprs() {
			return GetRuleContext<DimExprsContext>(0);
		}
		public DimsContext dims() {
			return GetRuleContext<DimsContext>(0);
		}
		public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		public ArrayCreationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayCreationExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterArrayCreationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitArrayCreationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayCreationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayCreationExpressionContext arrayCreationExpression() {
		ArrayCreationExpressionContext _localctx = new ArrayCreationExpressionContext(Context, State);
		EnterRule(_localctx, 406, RULE_arrayCreationExpression);
		try {
			State = 2563;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,290,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2541; Match(NEW);
				State = 2542; primitiveType();
				State = 2543; dimExprs();
				State = 2545;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,288,Context) ) {
				case 1:
					{
					State = 2544; dims();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2547; Match(NEW);
				State = 2548; classOrInterfaceType();
				State = 2549; dimExprs();
				State = 2551;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,289,Context) ) {
				case 1:
					{
					State = 2550; dims();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2553; Match(NEW);
				State = 2554; primitiveType();
				State = 2555; dims();
				State = 2556; arrayInitializer();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2558; Match(NEW);
				State = 2559; classOrInterfaceType();
				State = 2560; dims();
				State = 2561; arrayInitializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimExprsContext : ParserRuleContext {
		public DimExprContext[] dimExpr() {
			return GetRuleContexts<DimExprContext>();
		}
		public DimExprContext dimExpr(int i) {
			return GetRuleContext<DimExprContext>(i);
		}
		public DimExprsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dimExprs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterDimExprs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitDimExprs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDimExprs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DimExprsContext dimExprs() {
		DimExprsContext _localctx = new DimExprsContext(Context, State);
		EnterRule(_localctx, 408, RULE_dimExprs);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2565; dimExpr();
			State = 2569;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,291,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2566; dimExpr();
					}
					} 
				}
				State = 2571;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,291,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimExprContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public DimExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dimExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterDimExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitDimExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDimExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DimExprContext dimExpr() {
		DimExprContext _localctx = new DimExprContext(Context, State);
		EnterRule(_localctx, 410, RULE_dimExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2575;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 2572; annotation();
				}
				}
				State = 2577;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2578; Match(LBRACK);
			State = 2579; expression();
			State = 2580; Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConstantExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantExpressionContext constantExpression() {
		ConstantExpressionContext _localctx = new ConstantExpressionContext(Context, State);
		EnterRule(_localctx, 412, RULE_constantExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2582; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public LambdaExpressionContext lambdaExpression() {
			return GetRuleContext<LambdaExpressionContext>(0);
		}
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 414, RULE_expression);
		try {
			State = 2586;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,293,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2584; lambdaExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2585; assignmentExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaExpressionContext : ParserRuleContext {
		public LambdaParametersContext lambdaParameters() {
			return GetRuleContext<LambdaParametersContext>(0);
		}
		public LambdaBodyContext lambdaBody() {
			return GetRuleContext<LambdaBodyContext>(0);
		}
		public LambdaExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterLambdaExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitLambdaExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaExpressionContext lambdaExpression() {
		LambdaExpressionContext _localctx = new LambdaExpressionContext(Context, State);
		EnterRule(_localctx, 416, RULE_lambdaExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2588; lambdaParameters();
			State = 2589; Match(ARROW);
			State = 2590; lambdaBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaParametersContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public InferredFormalParameterListContext inferredFormalParameterList() {
			return GetRuleContext<InferredFormalParameterListContext>(0);
		}
		public LambdaParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterLambdaParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitLambdaParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaParametersContext lambdaParameters() {
		LambdaParametersContext _localctx = new LambdaParametersContext(Context, State);
		EnterRule(_localctx, 418, RULE_lambdaParameters);
		int _la;
		try {
			State = 2602;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,295,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2592; Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2593; Match(LPAREN);
				State = 2595;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << SHORT))) != 0) || _la==Identifier || _la==AT) {
					{
					State = 2594; formalParameterList();
					}
				}

				State = 2597; Match(RPAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2598; Match(LPAREN);
				State = 2599; inferredFormalParameterList();
				State = 2600; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InferredFormalParameterListContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(Java8Parser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(Java8Parser.Identifier, i);
		}
		public InferredFormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inferredFormalParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInferredFormalParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInferredFormalParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInferredFormalParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InferredFormalParameterListContext inferredFormalParameterList() {
		InferredFormalParameterListContext _localctx = new InferredFormalParameterListContext(Context, State);
		EnterRule(_localctx, 420, RULE_inferredFormalParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2604; Match(Identifier);
			State = 2609;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2605; Match(COMMA);
				State = 2606; Match(Identifier);
				}
				}
				State = 2611;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaBodyContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public LambdaBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterLambdaBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitLambdaBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaBodyContext lambdaBody() {
		LambdaBodyContext _localctx = new LambdaBodyContext(Context, State);
		EnterRule(_localctx, 422, RULE_lambdaBody);
		try {
			State = 2614;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case NEW:
			case SHORT:
			case SUPER:
			case THIS:
			case VOID:
			case IntegerLiteral:
			case FloatingPointLiteral:
			case BooleanLiteral:
			case CharacterLiteral:
			case StringLiteral:
			case NullLiteral:
			case LPAREN:
			case BANG:
			case TILDE:
			case INC:
			case DEC:
			case ADD:
			case SUB:
			case Identifier:
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2612; expression();
				}
				break;
			case LBRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2613; block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 424, RULE_assignmentExpression);
		try {
			State = 2618;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,298,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2616; conditionalExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2617; assignment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public LeftHandSideContext leftHandSide() {
			return GetRuleContext<LeftHandSideContext>(0);
		}
		public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 426, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2620; leftHandSide();
			State = 2621; assignmentOperator();
			State = 2622; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeftHandSideContext : ParserRuleContext {
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public FieldAccessContext fieldAccess() {
			return GetRuleContext<FieldAccessContext>(0);
		}
		public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		public LeftHandSideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leftHandSide; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterLeftHandSide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitLeftHandSide(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeftHandSide(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LeftHandSideContext leftHandSide() {
		LeftHandSideContext _localctx = new LeftHandSideContext(Context, State);
		EnterRule(_localctx, 428, RULE_leftHandSide);
		try {
			State = 2627;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,299,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2624; expressionName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2625; fieldAccess();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2626; arrayAccess();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 430, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2629;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (ASSIGN - 66)) | (1L << (ADD_ASSIGN - 66)) | (1L << (SUB_ASSIGN - 66)) | (1L << (MUL_ASSIGN - 66)) | (1L << (DIV_ASSIGN - 66)) | (1L << (AND_ASSIGN - 66)) | (1L << (OR_ASSIGN - 66)) | (1L << (XOR_ASSIGN - 66)) | (1L << (MOD_ASSIGN - 66)) | (1L << (LSHIFT_ASSIGN - 66)) | (1L << (RSHIFT_ASSIGN - 66)) | (1L << (URSHIFT_ASSIGN - 66)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalExpressionContext : ParserRuleContext {
		public ConditionalOrExpressionContext conditionalOrExpression() {
			return GetRuleContext<ConditionalOrExpressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public ConditionalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterConditionalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitConditionalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalExpressionContext conditionalExpression() {
		ConditionalExpressionContext _localctx = new ConditionalExpressionContext(Context, State);
		EnterRule(_localctx, 432, RULE_conditionalExpression);
		try {
			State = 2638;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,300,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2631; conditionalOrExpression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2632; conditionalOrExpression(0);
				State = 2633; Match(QUESTION);
				State = 2634; expression();
				State = 2635; Match(COLON);
				State = 2636; conditionalExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalOrExpressionContext : ParserRuleContext {
		public ConditionalAndExpressionContext conditionalAndExpression() {
			return GetRuleContext<ConditionalAndExpressionContext>(0);
		}
		public ConditionalOrExpressionContext conditionalOrExpression() {
			return GetRuleContext<ConditionalOrExpressionContext>(0);
		}
		public ConditionalOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterConditionalOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitConditionalOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalOrExpressionContext conditionalOrExpression() {
		return conditionalOrExpression(0);
	}

	private ConditionalOrExpressionContext conditionalOrExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ConditionalOrExpressionContext _localctx = new ConditionalOrExpressionContext(Context, _parentState);
		ConditionalOrExpressionContext _prevctx = _localctx;
		int _startState = 434;
		EnterRecursionRule(_localctx, 434, RULE_conditionalOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2641; conditionalAndExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2648;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,301,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ConditionalOrExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_conditionalOrExpression);
					State = 2643;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2644; Match(OR);
					State = 2645; conditionalAndExpression(0);
					}
					} 
				}
				State = 2650;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,301,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConditionalAndExpressionContext : ParserRuleContext {
		public InclusiveOrExpressionContext inclusiveOrExpression() {
			return GetRuleContext<InclusiveOrExpressionContext>(0);
		}
		public ConditionalAndExpressionContext conditionalAndExpression() {
			return GetRuleContext<ConditionalAndExpressionContext>(0);
		}
		public ConditionalAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalAndExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterConditionalAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitConditionalAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalAndExpressionContext conditionalAndExpression() {
		return conditionalAndExpression(0);
	}

	private ConditionalAndExpressionContext conditionalAndExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ConditionalAndExpressionContext _localctx = new ConditionalAndExpressionContext(Context, _parentState);
		ConditionalAndExpressionContext _prevctx = _localctx;
		int _startState = 436;
		EnterRecursionRule(_localctx, 436, RULE_conditionalAndExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2652; inclusiveOrExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2659;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,302,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ConditionalAndExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_conditionalAndExpression);
					State = 2654;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2655; Match(AND);
					State = 2656; inclusiveOrExpression(0);
					}
					} 
				}
				State = 2661;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,302,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class InclusiveOrExpressionContext : ParserRuleContext {
		public ExclusiveOrExpressionContext exclusiveOrExpression() {
			return GetRuleContext<ExclusiveOrExpressionContext>(0);
		}
		public InclusiveOrExpressionContext inclusiveOrExpression() {
			return GetRuleContext<InclusiveOrExpressionContext>(0);
		}
		public InclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inclusiveOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInclusiveOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInclusiveOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclusiveOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InclusiveOrExpressionContext inclusiveOrExpression() {
		return inclusiveOrExpression(0);
	}

	private InclusiveOrExpressionContext inclusiveOrExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		InclusiveOrExpressionContext _localctx = new InclusiveOrExpressionContext(Context, _parentState);
		InclusiveOrExpressionContext _prevctx = _localctx;
		int _startState = 438;
		EnterRecursionRule(_localctx, 438, RULE_inclusiveOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2663; exclusiveOrExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2670;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,303,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new InclusiveOrExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_inclusiveOrExpression);
					State = 2665;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2666; Match(BITOR);
					State = 2667; exclusiveOrExpression(0);
					}
					} 
				}
				State = 2672;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,303,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExclusiveOrExpressionContext : ParserRuleContext {
		public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		public ExclusiveOrExpressionContext exclusiveOrExpression() {
			return GetRuleContext<ExclusiveOrExpressionContext>(0);
		}
		public ExclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusiveOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterExclusiveOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitExclusiveOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExclusiveOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExclusiveOrExpressionContext exclusiveOrExpression() {
		return exclusiveOrExpression(0);
	}

	private ExclusiveOrExpressionContext exclusiveOrExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExclusiveOrExpressionContext _localctx = new ExclusiveOrExpressionContext(Context, _parentState);
		ExclusiveOrExpressionContext _prevctx = _localctx;
		int _startState = 440;
		EnterRecursionRule(_localctx, 440, RULE_exclusiveOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2674; andExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2681;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,304,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExclusiveOrExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_exclusiveOrExpression);
					State = 2676;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2677; Match(CARET);
					State = 2678; andExpression(0);
					}
					} 
				}
				State = 2683;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,304,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		return andExpression(0);
	}

	private AndExpressionContext andExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AndExpressionContext _localctx = new AndExpressionContext(Context, _parentState);
		AndExpressionContext _prevctx = _localctx;
		int _startState = 442;
		EnterRecursionRule(_localctx, 442, RULE_andExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2685; equalityExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2692;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,305,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AndExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_andExpression);
					State = 2687;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2688; Match(BITAND);
					State = 2689; equalityExpression(0);
					}
					} 
				}
				State = 2694;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,305,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		return equalityExpression(0);
	}

	private EqualityExpressionContext equalityExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, _parentState);
		EqualityExpressionContext _prevctx = _localctx;
		int _startState = 444;
		EnterRecursionRule(_localctx, 444, RULE_equalityExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2696; relationalExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2706;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,307,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2704;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,306,Context) ) {
					case 1:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 2698;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 2699; Match(EQUAL);
						State = 2700; relationalExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 2701;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 2702; Match(NOTEQUAL);
						State = 2703; relationalExpression(0);
						}
						break;
					}
					} 
				}
				State = 2708;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,307,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		public ShiftExpressionContext shiftExpression() {
			return GetRuleContext<ShiftExpressionContext>(0);
		}
		public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		return relationalExpression(0);
	}

	private RelationalExpressionContext relationalExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		RelationalExpressionContext _localctx = new RelationalExpressionContext(Context, _parentState);
		RelationalExpressionContext _prevctx = _localctx;
		int _startState = 446;
		EnterRecursionRule(_localctx, 446, RULE_relationalExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2710; shiftExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2729;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,309,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2727;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,308,Context) ) {
					case 1:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 2712;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 2713; Match(LT);
						State = 2714; shiftExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 2715;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 2716; Match(GT);
						State = 2717; shiftExpression(0);
						}
						break;
					case 3:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 2718;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 2719; Match(LE);
						State = 2720; shiftExpression(0);
						}
						break;
					case 4:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 2721;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 2722; Match(GE);
						State = 2723; shiftExpression(0);
						}
						break;
					case 5:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 2724;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 2725; Match(INSTANCEOF);
						State = 2726; referenceType();
						}
						break;
					}
					} 
				}
				State = 2731;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,309,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ShiftExpressionContext : ParserRuleContext {
		public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		public ShiftExpressionContext shiftExpression() {
			return GetRuleContext<ShiftExpressionContext>(0);
		}
		public ShiftExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterShiftExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitShiftExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShiftExpressionContext shiftExpression() {
		return shiftExpression(0);
	}

	private ShiftExpressionContext shiftExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ShiftExpressionContext _localctx = new ShiftExpressionContext(Context, _parentState);
		ShiftExpressionContext _prevctx = _localctx;
		int _startState = 448;
		EnterRecursionRule(_localctx, 448, RULE_shiftExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2733; additiveExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2750;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,311,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2748;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,310,Context) ) {
					case 1:
						{
						_localctx = new ShiftExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_shiftExpression);
						State = 2735;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 2736; Match(LT);
						State = 2737; Match(LT);
						State = 2738; additiveExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new ShiftExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_shiftExpression);
						State = 2739;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 2740; Match(GT);
						State = 2741; Match(GT);
						State = 2742; additiveExpression(0);
						}
						break;
					case 3:
						{
						_localctx = new ShiftExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_shiftExpression);
						State = 2743;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 2744; Match(GT);
						State = 2745; Match(GT);
						State = 2746; Match(GT);
						State = 2747; additiveExpression(0);
						}
						break;
					}
					} 
				}
				State = 2752;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,311,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		return additiveExpression(0);
	}

	private AdditiveExpressionContext additiveExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, _parentState);
		AdditiveExpressionContext _prevctx = _localctx;
		int _startState = 450;
		EnterRecursionRule(_localctx, 450, RULE_additiveExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2754; multiplicativeExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2764;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,313,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2762;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,312,Context) ) {
					case 1:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 2756;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 2757; Match(ADD);
						State = 2758; multiplicativeExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 2759;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 2760; Match(SUB);
						State = 2761; multiplicativeExpression(0);
						}
						break;
					}
					} 
				}
				State = 2766;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,313,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		return multiplicativeExpression(0);
	}

	private MultiplicativeExpressionContext multiplicativeExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, _parentState);
		MultiplicativeExpressionContext _prevctx = _localctx;
		int _startState = 452;
		EnterRecursionRule(_localctx, 452, RULE_multiplicativeExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2768; unaryExpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2781;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,315,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2779;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,314,Context) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 2770;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 2771; Match(MUL);
						State = 2772; unaryExpression();
						}
						break;
					case 2:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 2773;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 2774; Match(DIV);
						State = 2775; unaryExpression();
						}
						break;
					case 3:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 2776;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 2777; Match(MOD);
						State = 2778; unaryExpression();
						}
						break;
					}
					} 
				}
				State = 2783;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,315,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		public PreIncrementExpressionContext preIncrementExpression() {
			return GetRuleContext<PreIncrementExpressionContext>(0);
		}
		public PreDecrementExpressionContext preDecrementExpression() {
			return GetRuleContext<PreDecrementExpressionContext>(0);
		}
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public UnaryExpressionNotPlusMinusContext unaryExpressionNotPlusMinus() {
			return GetRuleContext<UnaryExpressionNotPlusMinusContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 454, RULE_unaryExpression);
		try {
			State = 2791;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2784; preIncrementExpression();
				}
				break;
			case DEC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2785; preDecrementExpression();
				}
				break;
			case ADD:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2786; Match(ADD);
				State = 2787; unaryExpression();
				}
				break;
			case SUB:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2788; Match(SUB);
				State = 2789; unaryExpression();
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case NEW:
			case SHORT:
			case SUPER:
			case THIS:
			case VOID:
			case IntegerLiteral:
			case FloatingPointLiteral:
			case BooleanLiteral:
			case CharacterLiteral:
			case StringLiteral:
			case NullLiteral:
			case LPAREN:
			case BANG:
			case TILDE:
			case Identifier:
			case AT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2790; unaryExpressionNotPlusMinus();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreIncrementExpressionContext : ParserRuleContext {
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public PreIncrementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preIncrementExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPreIncrementExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPreIncrementExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreIncrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreIncrementExpressionContext preIncrementExpression() {
		PreIncrementExpressionContext _localctx = new PreIncrementExpressionContext(Context, State);
		EnterRule(_localctx, 456, RULE_preIncrementExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2793; Match(INC);
			State = 2794; unaryExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreDecrementExpressionContext : ParserRuleContext {
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public PreDecrementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preDecrementExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPreDecrementExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPreDecrementExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreDecrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreDecrementExpressionContext preDecrementExpression() {
		PreDecrementExpressionContext _localctx = new PreDecrementExpressionContext(Context, State);
		EnterRule(_localctx, 458, RULE_preDecrementExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2796; Match(DEC);
			State = 2797; unaryExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionNotPlusMinusContext : ParserRuleContext {
		public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		public UnaryExpressionNotPlusMinusContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpressionNotPlusMinus; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnaryExpressionNotPlusMinus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnaryExpressionNotPlusMinus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpressionNotPlusMinus(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionNotPlusMinusContext unaryExpressionNotPlusMinus() {
		UnaryExpressionNotPlusMinusContext _localctx = new UnaryExpressionNotPlusMinusContext(Context, State);
		EnterRule(_localctx, 460, RULE_unaryExpressionNotPlusMinus);
		try {
			State = 2805;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,317,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2799; postfixExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2800; Match(TILDE);
				State = 2801; unaryExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2802; Match(BANG);
				State = 2803; unaryExpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2804; castExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixExpressionContext : ParserRuleContext {
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public PostIncrementExpression_lf_postfixExpressionContext[] postIncrementExpression_lf_postfixExpression() {
			return GetRuleContexts<PostIncrementExpression_lf_postfixExpressionContext>();
		}
		public PostIncrementExpression_lf_postfixExpressionContext postIncrementExpression_lf_postfixExpression(int i) {
			return GetRuleContext<PostIncrementExpression_lf_postfixExpressionContext>(i);
		}
		public PostDecrementExpression_lf_postfixExpressionContext[] postDecrementExpression_lf_postfixExpression() {
			return GetRuleContexts<PostDecrementExpression_lf_postfixExpressionContext>();
		}
		public PostDecrementExpression_lf_postfixExpressionContext postDecrementExpression_lf_postfixExpression(int i) {
			return GetRuleContext<PostDecrementExpression_lf_postfixExpressionContext>(i);
		}
		public PostfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPostfixExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPostfixExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixExpressionContext postfixExpression() {
		PostfixExpressionContext _localctx = new PostfixExpressionContext(Context, State);
		EnterRule(_localctx, 462, RULE_postfixExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2809;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,318,Context) ) {
			case 1:
				{
				State = 2807; primary();
				}
				break;
			case 2:
				{
				State = 2808; expressionName();
				}
				break;
			}
			State = 2815;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,320,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 2813;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case INC:
						{
						State = 2811; postIncrementExpression_lf_postfixExpression();
						}
						break;
					case DEC:
						{
						State = 2812; postDecrementExpression_lf_postfixExpression();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 2817;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,320,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostIncrementExpressionContext : ParserRuleContext {
		public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		public PostIncrementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postIncrementExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPostIncrementExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPostIncrementExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostIncrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostIncrementExpressionContext postIncrementExpression() {
		PostIncrementExpressionContext _localctx = new PostIncrementExpressionContext(Context, State);
		EnterRule(_localctx, 464, RULE_postIncrementExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2818; postfixExpression();
			State = 2819; Match(INC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostIncrementExpression_lf_postfixExpressionContext : ParserRuleContext {
		public PostIncrementExpression_lf_postfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postIncrementExpression_lf_postfixExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPostIncrementExpression_lf_postfixExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPostIncrementExpression_lf_postfixExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostIncrementExpression_lf_postfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostIncrementExpression_lf_postfixExpressionContext postIncrementExpression_lf_postfixExpression() {
		PostIncrementExpression_lf_postfixExpressionContext _localctx = new PostIncrementExpression_lf_postfixExpressionContext(Context, State);
		EnterRule(_localctx, 466, RULE_postIncrementExpression_lf_postfixExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2821; Match(INC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostDecrementExpressionContext : ParserRuleContext {
		public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		public PostDecrementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postDecrementExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPostDecrementExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPostDecrementExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostDecrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostDecrementExpressionContext postDecrementExpression() {
		PostDecrementExpressionContext _localctx = new PostDecrementExpressionContext(Context, State);
		EnterRule(_localctx, 468, RULE_postDecrementExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2823; postfixExpression();
			State = 2824; Match(DEC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostDecrementExpression_lf_postfixExpressionContext : ParserRuleContext {
		public PostDecrementExpression_lf_postfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postDecrementExpression_lf_postfixExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPostDecrementExpression_lf_postfixExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPostDecrementExpression_lf_postfixExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostDecrementExpression_lf_postfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostDecrementExpression_lf_postfixExpressionContext postDecrementExpression_lf_postfixExpression() {
		PostDecrementExpression_lf_postfixExpressionContext _localctx = new PostDecrementExpression_lf_postfixExpressionContext(Context, State);
		EnterRule(_localctx, 470, RULE_postDecrementExpression_lf_postfixExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2826; Match(DEC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastExpressionContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public UnaryExpressionNotPlusMinusContext unaryExpressionNotPlusMinus() {
			return GetRuleContext<UnaryExpressionNotPlusMinusContext>(0);
		}
		public AdditionalBoundContext[] additionalBound() {
			return GetRuleContexts<AdditionalBoundContext>();
		}
		public AdditionalBoundContext additionalBound(int i) {
			return GetRuleContext<AdditionalBoundContext>(i);
		}
		public LambdaExpressionContext lambdaExpression() {
			return GetRuleContext<LambdaExpressionContext>(0);
		}
		public CastExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CastExpressionContext castExpression() {
		CastExpressionContext _localctx = new CastExpressionContext(Context, State);
		EnterRule(_localctx, 472, RULE_castExpression);
		int _la;
		try {
			State = 2855;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,323,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2828; Match(LPAREN);
				State = 2829; primitiveType();
				State = 2830; Match(RPAREN);
				State = 2831; unaryExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2833; Match(LPAREN);
				State = 2834; referenceType();
				State = 2838;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==BITAND) {
					{
					{
					State = 2835; additionalBound();
					}
					}
					State = 2840;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2841; Match(RPAREN);
				State = 2842; unaryExpressionNotPlusMinus();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2844; Match(LPAREN);
				State = 2845; referenceType();
				State = 2849;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==BITAND) {
					{
					{
					State = 2846; additionalBound();
					}
					}
					State = 2851;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2852; Match(RPAREN);
				State = 2853; lambdaExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 26: return packageName_sempred((PackageNameContext)_localctx, predIndex);
		case 28: return packageOrTypeName_sempred((PackageOrTypeNameContext)_localctx, predIndex);
		case 31: return ambiguousName_sempred((AmbiguousNameContext)_localctx, predIndex);
		case 217: return conditionalOrExpression_sempred((ConditionalOrExpressionContext)_localctx, predIndex);
		case 218: return conditionalAndExpression_sempred((ConditionalAndExpressionContext)_localctx, predIndex);
		case 219: return inclusiveOrExpression_sempred((InclusiveOrExpressionContext)_localctx, predIndex);
		case 220: return exclusiveOrExpression_sempred((ExclusiveOrExpressionContext)_localctx, predIndex);
		case 221: return andExpression_sempred((AndExpressionContext)_localctx, predIndex);
		case 222: return equalityExpression_sempred((EqualityExpressionContext)_localctx, predIndex);
		case 223: return relationalExpression_sempred((RelationalExpressionContext)_localctx, predIndex);
		case 224: return shiftExpression_sempred((ShiftExpressionContext)_localctx, predIndex);
		case 225: return additiveExpression_sempred((AdditiveExpressionContext)_localctx, predIndex);
		case 226: return multiplicativeExpression_sempred((MultiplicativeExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool packageName_sempred(PackageNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool packageOrTypeName_sempred(PackageOrTypeNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool ambiguousName_sempred(AmbiguousNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 1);
		}
		return true;
	}
	private bool conditionalOrExpression_sempred(ConditionalOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 1);
		}
		return true;
	}
	private bool conditionalAndExpression_sempred(ConditionalAndExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 1);
		}
		return true;
	}
	private bool inclusiveOrExpression_sempred(InclusiveOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 1);
		}
		return true;
	}
	private bool exclusiveOrExpression_sempred(ExclusiveOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 1);
		}
		return true;
	}
	private bool andExpression_sempred(AndExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 1);
		}
		return true;
	}
	private bool equalityExpression_sempred(EqualityExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(Context, 2);
		case 9: return Precpred(Context, 1);
		}
		return true;
	}
	private bool relationalExpression_sempred(RelationalExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return Precpred(Context, 5);
		case 11: return Precpred(Context, 4);
		case 12: return Precpred(Context, 3);
		case 13: return Precpred(Context, 2);
		case 14: return Precpred(Context, 1);
		}
		return true;
	}
	private bool shiftExpression_sempred(ShiftExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15: return Precpred(Context, 3);
		case 16: return Precpred(Context, 2);
		case 17: return Precpred(Context, 1);
		}
		return true;
	}
	private bool additiveExpression_sempred(AdditiveExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 18: return Precpred(Context, 2);
		case 19: return Precpred(Context, 1);
		}
		return true;
	}
	private bool multiplicativeExpression_sempred(MultiplicativeExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 20: return Precpred(Context, 3);
		case 21: return Precpred(Context, 2);
		case 22: return Precpred(Context, 1);
		}
		return true;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3m\xB2C");
		sb.Append("\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a");
		sb.Append("\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4");
		sb.Append("\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4");
		sb.Append("\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16\x4\x17\t\x17");
		sb.Append("\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B\t\x1B\x4\x1C");
		sb.Append("\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!\t!");
		sb.Append("\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t");
		sb.Append(")\x4*\t*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4");
		sb.Append("\x31\t\x31\x4\x32\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35");
		sb.Append("\x4\x36\t\x36\x4\x37\t\x37\x4\x38\t\x38\x4\x39\t\x39\x4:\t:");
		sb.Append("\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4@\t@\x4\x41\t\x41\x4\x42");
		sb.Append("\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45\x4\x46\t\x46\x4");
		sb.Append("G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN\x4O\t");
		sb.Append("O\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4");
		sb.Append("X\tX\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`");
		sb.Append("\t`\x4\x61\t\x61\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65");
		sb.Append("\t\x65\x4\x66\t\x66\x4g\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\t");
		sb.Append("l\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4q\tq\x4r\tr\x4s\ts\x4t\tt\x4");
		sb.Append("u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4{\t{\x4|\t|\x4}\t");
		sb.Append("}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82\t\x82");
		sb.Append("\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87");
		sb.Append("\t\x87\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4");
		sb.Append("\x8C\t\x8C\x4\x8D\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x4\x90\t\x90");
		sb.Append("\x4\x91\t\x91\x4\x92\t\x92\x4\x93\t\x93\x4\x94\t\x94\x4\x95");
		sb.Append("\t\x95\x4\x96\t\x96\x4\x97\t\x97\x4\x98\t\x98\x4\x99\t\x99\x4");
		sb.Append("\x9A\t\x9A\x4\x9B\t\x9B\x4\x9C\t\x9C\x4\x9D\t\x9D\x4\x9E\t\x9E");
		sb.Append("\x4\x9F\t\x9F\x4\xA0\t\xA0\x4\xA1\t\xA1\x4\xA2\t\xA2\x4\xA3");
		sb.Append("\t\xA3\x4\xA4\t\xA4\x4\xA5\t\xA5\x4\xA6\t\xA6\x4\xA7\t\xA7\x4");
		sb.Append("\xA8\t\xA8\x4\xA9\t\xA9\x4\xAA\t\xAA\x4\xAB\t\xAB\x4\xAC\t\xAC");
		sb.Append("\x4\xAD\t\xAD\x4\xAE\t\xAE\x4\xAF\t\xAF\x4\xB0\t\xB0\x4\xB1");
		sb.Append("\t\xB1\x4\xB2\t\xB2\x4\xB3\t\xB3\x4\xB4\t\xB4\x4\xB5\t\xB5\x4");
		sb.Append("\xB6\t\xB6\x4\xB7\t\xB7\x4\xB8\t\xB8\x4\xB9\t\xB9\x4\xBA\t\xBA");
		sb.Append("\x4\xBB\t\xBB\x4\xBC\t\xBC\x4\xBD\t\xBD\x4\xBE\t\xBE\x4\xBF");
		sb.Append("\t\xBF\x4\xC0\t\xC0\x4\xC1\t\xC1\x4\xC2\t\xC2\x4\xC3\t\xC3\x4");
		sb.Append("\xC4\t\xC4\x4\xC5\t\xC5\x4\xC6\t\xC6\x4\xC7\t\xC7\x4\xC8\t\xC8");
		sb.Append("\x4\xC9\t\xC9\x4\xCA\t\xCA\x4\xCB\t\xCB\x4\xCC\t\xCC\x4\xCD");
		sb.Append("\t\xCD\x4\xCE\t\xCE\x4\xCF\t\xCF\x4\xD0\t\xD0\x4\xD1\t\xD1\x4");
		sb.Append("\xD2\t\xD2\x4\xD3\t\xD3\x4\xD4\t\xD4\x4\xD5\t\xD5\x4\xD6\t\xD6");
		sb.Append("\x4\xD7\t\xD7\x4\xD8\t\xD8\x4\xD9\t\xD9\x4\xDA\t\xDA\x4\xDB");
		sb.Append("\t\xDB\x4\xDC\t\xDC\x4\xDD\t\xDD\x4\xDE\t\xDE\x4\xDF\t\xDF\x4");
		sb.Append("\xE0\t\xE0\x4\xE1\t\xE1\x4\xE2\t\xE2\x4\xE3\t\xE3\x4\xE4\t\xE4");
		sb.Append("\x4\xE5\t\xE5\x4\xE6\t\xE6\x4\xE7\t\xE7\x4\xE8\t\xE8\x4\xE9");
		sb.Append("\t\xE9\x4\xEA\t\xEA\x4\xEB\t\xEB\x4\xEC\t\xEC\x4\xED\t\xED\x4");
		sb.Append("\xEE\t\xEE\x3\x2\x3\x2\x3\x3\x3\x3\x5\x3\x1E1\n\x3\x3\x4\a\x4");
		sb.Append("\x1E4\n\x4\f\x4\xE\x4\x1E7\v\x4\x3\x4\x3\x4\a\x4\x1EB\n\x4\f");
		sb.Append("\x4\xE\x4\x1EE\v\x4\x3\x4\x5\x4\x1F1\n\x4\x3\x5\x3\x5\x5\x5");
		sb.Append("\x1F5\n\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\b\x5\b\x1FE\n");
		sb.Append("\b\x3\t\x3\t\x5\t\x202\n\t\x3\t\x3\t\a\t\x206\n\t\f\t\xE\t\x209");
		sb.Append("\v\t\x3\n\a\n\x20C\n\n\f\n\xE\n\x20F\v\n\x3\n\x3\n\x5\n\x213");
		sb.Append("\n\n\x3\n\x3\n\x3\n\a\n\x218\n\n\f\n\xE\n\x21B\v\n\x3\n\x3\n");
		sb.Append("\x5\n\x21F\n\n\x5\n\x221\n\n\x3\v\x3\v\a\v\x225\n\v\f\v\xE\v");
		sb.Append("\x228\v\v\x3\v\x3\v\x5\v\x22C\n\v\x3\f\a\f\x22F\n\f\f\f\xE\f");
		sb.Append("\x232\v\f\x3\f\x3\f\x5\f\x236\n\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF");
		sb.Append("\x3\xF\x3\x10\a\x10\x23F\n\x10\f\x10\xE\x10\x242\v\x10\x3\x10");
		sb.Append("\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3");
		sb.Append("\x11\x3\x11\x5\x11\x24F\n\x11\x3\x12\a\x12\x252\n\x12\f\x12");
		sb.Append("\xE\x12\x255\v\x12\x3\x12\x3\x12\x3\x12\a\x12\x25A\n\x12\f\x12");
		sb.Append("\xE\x12\x25D\v\x12\x3\x12\x3\x12\a\x12\x261\n\x12\f\x12\xE\x12");
		sb.Append("\x264\v\x12\x3\x13\a\x13\x267\n\x13\f\x13\xE\x13\x26A\v\x13");
		sb.Append("\x3\x13\x3\x13\x5\x13\x26E\n\x13\x3\x14\x3\x14\x3\x15\x3\x15");
		sb.Append("\x3\x15\x3\x15\x3\x15\a\x15\x277\n\x15\f\x15\xE\x15\x27A\v\x15");
		sb.Append("\x5\x15\x27C\n\x15\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17");
		sb.Append("\x3\x17\x3\x18\x3\x18\x3\x18\a\x18\x288\n\x18\f\x18\xE\x18\x28B");
		sb.Append("\v\x18\x3\x19\x3\x19\x5\x19\x28F\n\x19\x3\x1A\a\x1A\x292\n\x1A");
		sb.Append("\f\x1A\xE\x1A\x295\v\x1A\x3\x1A\x3\x1A\x5\x1A\x299\n\x1A\x3");
		sb.Append("\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x29F\n\x1B\x3\x1C\x3\x1C\x3");
		sb.Append("\x1C\x3\x1C\x3\x1C\x3\x1C\a\x1C\x2A7\n\x1C\f\x1C\xE\x1C\x2AA");
		sb.Append("\v\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x2B1\n\x1D");
		sb.Append("\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\a\x1E\x2B9\n\x1E");
		sb.Append("\f\x1E\xE\x1E\x2BC\v\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F");
		sb.Append("\x5\x1F\x2C3\n\x1F\x3 \x3 \x3!\x3!\x3!\x3!\x3!\x3!\a!\x2CD\n");
		sb.Append("!\f!\xE!\x2D0\v!\x3\"\x5\"\x2D3\n\"\x3\"\a\"\x2D6\n\"\f\"\xE");
		sb.Append("\"\x2D9\v\"\x3\"\a\"\x2DC\n\"\f\"\xE\"\x2DF\v\"\x3\"\x3\"\x3");
		sb.Append("#\a#\x2E4\n#\f#\xE#\x2E7\v#\x3#\x3#\x3#\x3#\a#\x2ED\n#\f#\xE");
		sb.Append("#\x2F0\v#\x3#\x3#\x3$\x3$\x3%\x3%\x3%\x3%\x5%\x2FA\n%\x3&\x3");
		sb.Append("&\x3&\x3&\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3(\x3(\x3(\x3(\x3(");
		sb.Append("\x3(\x3(\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3*\x3*\x3*\x5*\x317\n");
		sb.Append("*\x3+\x3+\x5+\x31B\n+\x3,\a,\x31E\n,\f,\xE,\x321\v,\x3,\x3,");
		sb.Append("\x3,\x5,\x326\n,\x3,\x5,\x329\n,\x3,\x5,\x32C\n,\x3,\x3,\x3");
		sb.Append("-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x5-\x338\n-\x3.\x3.\x3.\x3.\x3");
		sb.Append("/\x3/\x3/\a/\x341\n/\f/\xE/\x344\v/\x3\x30\x3\x30\x3\x30\x3");
		sb.Append("\x31\x3\x31\x3\x31\x3\x32\x3\x32\x3\x32\a\x32\x34F\n\x32\f\x32");
		sb.Append("\xE\x32\x352\v\x32\x3\x33\x3\x33\a\x33\x356\n\x33\f\x33\xE\x33");
		sb.Append("\x359\v\x33\x3\x33\x3\x33\x3\x34\x3\x34\x3\x34\x3\x34\x5\x34");
		sb.Append("\x361\n\x34\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x5\x35\x368\n");
		sb.Append("\x35\x3\x36\a\x36\x36B\n\x36\f\x36\xE\x36\x36E\v\x36\x3\x36");
		sb.Append("\x3\x36\x3\x36\x3\x36\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3");
		sb.Append("\x37\x3\x37\x3\x37\x5\x37\x37C\n\x37\x3\x38\x3\x38\x3\x38\a");
		sb.Append("\x38\x381\n\x38\f\x38\xE\x38\x384\v\x38\x3\x39\x3\x39\x3\x39");
		sb.Append("\x5\x39\x389\n\x39\x3:\x3:\x5:\x38D\n:\x3;\x3;\x5;\x391\n;\x3");
		sb.Append("<\x3<\x5<\x395\n<\x3=\x3=\x5=\x399\n=\x3>\x3>\x3>\x5>\x39E\n");
		sb.Append(">\x3?\x3?\x5?\x3A2\n?\x3?\x3?\a?\x3A6\n?\f?\xE?\x3A9\v?\x3@");
		sb.Append("\x3@\x5@\x3AD\n@\x3@\x3@\x3@\a@\x3B2\n@\f@\xE@\x3B5\v@\x3@\x3");
		sb.Append("@\x5@\x3B9\n@\x5@\x3BB\n@\x3\x41\x3\x41\a\x41\x3BF\n\x41\f\x41");
		sb.Append("\xE\x41\x3C2\v\x41\x3\x41\x3\x41\x5\x41\x3C6\n\x41\x3\x42\x3");
		sb.Append("\x42\x5\x42\x3CA\n\x42\x3\x43\x3\x43\x3\x44\x3\x44\x3\x45\x3");
		sb.Append("\x45\x3\x46\x3\x46\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x5G\x3DD");
		sb.Append("\nG\x3H\aH\x3E0\nH\fH\xEH\x3E3\vH\x3H\x3H\x3H\x3I\x3I\x3I\x3");
		sb.Append("I\x3I\x3I\x3I\x3I\x3I\x3I\x5I\x3F2\nI\x3J\x3J\x3J\x5J\x3F7\n");
		sb.Append("J\x3J\x3J\aJ\x3FB\nJ\fJ\xEJ\x3FE\vJ\x3J\x3J\x3J\x5J\x403\nJ");
		sb.Append("\x5J\x405\nJ\x3K\x3K\x5K\x409\nK\x3L\x3L\x3L\x5L\x40E\nL\x3");
		sb.Append("L\x3L\x5L\x412\nL\x3M\x3M\x3M\x3M\x3M\x5M\x419\nM\x3N\x3N\x3");
		sb.Append("N\aN\x41E\nN\fN\xEN\x421\vN\x3N\x3N\x3N\aN\x426\nN\fN\xEN\x429");
		sb.Append("\vN\x5N\x42B\nN\x3O\aO\x42E\nO\fO\xEO\x431\vO\x3O\x3O\x3O\x3");
		sb.Append("P\x3P\x5P\x438\nP\x3Q\aQ\x43B\nQ\fQ\xEQ\x43E\vQ\x3Q\x3Q\aQ\x442");
		sb.Append("\nQ\fQ\xEQ\x445\vQ\x3Q\x3Q\x3Q\x3Q\x5Q\x44B\nQ\x3R\aR\x44E\n");
		sb.Append("R\fR\xER\x451\vR\x3R\x3R\x3R\x5R\x456\nR\x3R\x3R\x3S\x3S\x3");
		sb.Append("S\x3T\x3T\x3T\aT\x460\nT\fT\xET\x463\vT\x3U\x3U\x5U\x467\nU");
		sb.Append("\x3V\x3V\x5V\x46B\nV\x3W\x3W\x3X\x3X\x3X\x3Y\aY\x473\nY\fY\xE");
		sb.Append("Y\x476\vY\x3Y\x3Y\x5Y\x47A\nY\x3Y\x3Y\x3Z\x3Z\x3Z\x3Z\x5Z\x482");
		sb.Append("\nZ\x3[\x5[\x485\n[\x3[\x3[\x3[\x5[\x48A\n[\x3[\x3[\x3\\\x3");
		sb.Append("\\\x3]\x3]\x5]\x492\n]\x3]\x5]\x495\n]\x3]\x3]\x3^\x5^\x49A");
		sb.Append("\n^\x3^\x3^\x3^\x5^\x49F\n^\x3^\x3^\x3^\x5^\x4A4\n^\x3^\x3^");
		sb.Append("\x3^\x5^\x4A9\n^\x3^\x3^\x3^\x3^\x3^\x5^\x4B0\n^\x3^\x3^\x3");
		sb.Append("^\x5^\x4B5\n^\x3^\x3^\x3^\x3^\x3^\x3^\x5^\x4BD\n^\x3^\x3^\x3");
		sb.Append("^\x5^\x4C2\n^\x3^\x3^\x3^\x5^\x4C7\n^\x3_\a_\x4CA\n_\f_\xE_");
		sb.Append("\x4CD\v_\x3_\x3_\x3_\x5_\x4D2\n_\x3_\x3_\x3`\x3`\x5`\x4D8\n");
		sb.Append("`\x3`\x5`\x4DB\n`\x3`\x5`\x4DE\n`\x3`\x3`\x3\x61\x3\x61\x3\x61");
		sb.Append("\a\x61\x4E5\n\x61\f\x61\xE\x61\x4E8\v\x61\x3\x62\a\x62\x4EB");
		sb.Append("\n\x62\f\x62\xE\x62\x4EE\v\x62\x3\x62\x3\x62\x3\x62\x5\x62\x4F3");
		sb.Append("\n\x62\x3\x62\x5\x62\x4F6\n\x62\x3\x62\x5\x62\x4F9\n\x62\x3");
		sb.Append("\x63\x3\x63\x3\x64\x3\x64\a\x64\x4FF\n\x64\f\x64\xE\x64\x502");
		sb.Append("\v\x64\x3\x65\x3\x65\x5\x65\x506\n\x65\x3\x66\a\x66\x509\n\x66");
		sb.Append("\f\x66\xE\x66\x50C\v\x66\x3\x66\x3\x66\x3\x66\x5\x66\x511\n");
		sb.Append("\x66\x3\x66\x5\x66\x514\n\x66\x3\x66\x3\x66\x3g\x3g\x3g\x3g");
		sb.Append("\x3g\x3g\x3g\x5g\x51F\ng\x3h\x3h\x3h\x3i\x3i\ai\x526\ni\fi\xE");
		sb.Append("i\x529\vi\x3i\x3i\x3j\x3j\x3j\x3j\x3j\x5j\x532\nj\x3k\ak\x535");
		sb.Append("\nk\fk\xEk\x538\vk\x3k\x3k\x3k\x3k\x3l\x3l\x3l\x3l\x5l\x542");
		sb.Append("\nl\x3m\am\x545\nm\fm\xEm\x548\vm\x3m\x3m\x3m\x3n\x3n\x3n\x3");
		sb.Append("n\x3n\x3n\x5n\x553\nn\x3o\ao\x556\no\fo\xEo\x559\vo\x3o\x3o");
		sb.Append("\x3o\x3o\x3o\x3p\x3p\ap\x562\np\fp\xEp\x565\vp\x3p\x3p\x3q\x3");
		sb.Append("q\x3q\x3q\x3q\x5q\x56E\nq\x3r\ar\x571\nr\fr\xEr\x574\vr\x3r");
		sb.Append("\x3r\x3r\x3r\x3r\x5r\x57B\nr\x3r\x5r\x57E\nr\x3r\x3r\x3s\x3");
		sb.Append("s\x3s\x5s\x585\ns\x3t\x3t\x3t\x3u\x3u\x3u\x5u\x58D\nu\x3v\x3");
		sb.Append("v\x3v\x3v\x5v\x593\nv\x3v\x3v\x3w\x3w\x3w\aw\x59A\nw\fw\xEw");
		sb.Append("\x59D\vw\x3x\x3x\x3x\x3x\x3y\x3y\x3y\x5y\x5A6\ny\x3z\x3z\x5");
		sb.Append("z\x5AA\nz\x3z\x5z\x5AD\nz\x3z\x3z\x3{\x3{\x3{\a{\x5B4\n{\f{");
		sb.Append("\xE{\x5B7\v{\x3|\x3|\x3|\x3}\x3}\x3}\x3}\x3}\x3}\x3~\x3~\x5");
		sb.Append("~\x5C4\n~\x3~\x5~\x5C7\n~\x3~\x3~\x3\x7F\x3\x7F\x3\x7F\a\x7F");
		sb.Append("\x5CE\n\x7F\f\x7F\xE\x7F\x5D1\v\x7F\x3\x80\x3\x80\x5\x80\x5D5");
		sb.Append("\n\x80\x3\x80\x3\x80\x3\x81\x3\x81\a\x81\x5DB\n\x81\f\x81\xE");
		sb.Append("\x81\x5DE\v\x81\x3\x82\x3\x82\x3\x82\x5\x82\x5E3\n\x82\x3\x83");
		sb.Append("\x3\x83\x3\x83\x3\x84\a\x84\x5E9\n\x84\f\x84\xE\x84\x5EC\v\x84");
		sb.Append("\x3\x84\x3\x84\x3\x84\x3\x85\x3\x85\x3\x85\x3\x85\x3\x85\x3");
		sb.Append("\x85\x5\x85\x5F7\n\x85\x3\x86\x3\x86\x3\x86\x3\x86\x3\x86\x5");
		sb.Append("\x86\x5FE\n\x86\x3\x87\x3\x87\x3\x87\x3\x87\x3\x87\x3\x87\x3");
		sb.Append("\x87\x3\x87\x3\x87\x3\x87\x3\x87\x3\x87\x5\x87\x60C\n\x87\x3");
		sb.Append("\x88\x3\x88\x3\x89\x3\x89\x3\x89\x3\x89\x3\x8A\x3\x8A\x3\x8A");
		sb.Append("\x3\x8A\x3\x8B\x3\x8B\x3\x8B\x3\x8C\x3\x8C\x3\x8C\x3\x8C\x3");
		sb.Append("\x8C\x3\x8C\x3\x8C\x5\x8C\x622\n\x8C\x3\x8D\x3\x8D\x3\x8D\x3");
		sb.Append("\x8D\x3\x8D\x3\x8D\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x3\x8E");
		sb.Append("\x3\x8E\x3\x8E\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3");
		sb.Append("\x8F\x3\x8F\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90");
		sb.Append("\x3\x90\x3\x90\x3\x90\x5\x90\x644\n\x90\x3\x91\x3\x91\x3\x91");
		sb.Append("\x3\x91\x3\x91\x3\x91\x3\x92\x3\x92\a\x92\x64E\n\x92\f\x92\xE");
		sb.Append("\x92\x651\v\x92\x3\x92\a\x92\x654\n\x92\f\x92\xE\x92\x657\v");
		sb.Append("\x92\x3\x92\x3\x92\x3\x93\x3\x93\x3\x93\x3\x94\x3\x94\a\x94");
		sb.Append("\x660\n\x94\f\x94\xE\x94\x663\v\x94\x3\x95\x3\x95\x3\x95\x3");
		sb.Append("\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x5\x95\x66F\n");
		sb.Append("\x95\x3\x96\x3\x96\x3\x97\x3\x97\x3\x97\x3\x97\x3\x97\x3\x97");
		sb.Append("\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98\x3\x99\x3\x99\x3");
		sb.Append("\x99\x3\x99\x3\x99\x3\x99\x3\x99\x3\x99\x3\x9A\x3\x9A\x5\x9A");
		sb.Append("\x689\n\x9A\x3\x9B\x3\x9B\x5\x9B\x68D\n\x9B\x3\x9C\x3\x9C\x3");
		sb.Append("\x9C\x5\x9C\x692\n\x9C\x3\x9C\x3\x9C\x5\x9C\x696\n\x9C\x3\x9C");
		sb.Append("\x3\x9C\x5\x9C\x69A\n\x9C\x3\x9C\x3\x9C\x3\x9C\x3\x9D\x3\x9D");
		sb.Append("\x3\x9D\x5\x9D\x6A2\n\x9D\x3\x9D\x3\x9D\x5\x9D\x6A6\n\x9D\x3");
		sb.Append("\x9D\x3\x9D\x5\x9D\x6AA\n\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9E\x3");
		sb.Append("\x9E\x5\x9E\x6B1\n\x9E\x3\x9F\x3\x9F\x3\xA0\x3\xA0\x3\xA0\a");
		sb.Append("\xA0\x6B8\n\xA0\f\xA0\xE\xA0\x6BB\v\xA0\x3\xA1\x3\xA1\x3\xA1");
		sb.Append("\a\xA1\x6C0\n\xA1\f\xA1\xE\xA1\x6C3\v\xA1\x3\xA1\x3\xA1\x3\xA1");
		sb.Append("\x3\xA1\x3\xA1\x3\xA1\x3\xA1\x3\xA2\x3\xA2\x3\xA2\a\xA2\x6CF");
		sb.Append("\n\xA2\f\xA2\xE\xA2\x6D2\v\xA2\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x3");
		sb.Append("\xA2\x3\xA2\x3\xA2\x3\xA3\x3\xA3\x5\xA3\x6DD\n\xA3\x3\xA3\x3");
		sb.Append("\xA3\x3\xA4\x3\xA4\x5\xA4\x6E3\n\xA4\x3\xA4\x3\xA4\x3\xA5\x3");
		sb.Append("\xA5\x5\xA5\x6E9\n\xA5\x3\xA5\x3\xA5\x3\xA6\x3\xA6\x3\xA6\x3");
		sb.Append("\xA6\x3\xA7\x3\xA7\x3\xA7\x3\xA7\x3\xA7\x3\xA7\x3\xA8\x3\xA8");
		sb.Append("\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x5\xA8\x6FE\n\xA8\x3\xA8");
		sb.Append("\x3\xA8\x3\xA8\x5\xA8\x703\n\xA8\x3\xA9\x3\xA9\a\xA9\x707\n");
		sb.Append("\xA9\f\xA9\xE\xA9\x70A\v\xA9\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x3");
		sb.Append("\xAA\x3\xAA\x3\xAB\a\xAB\x713\n\xAB\f\xAB\xE\xAB\x716\v\xAB");
		sb.Append("\x3\xAB\x3\xAB\x3\xAB\x3\xAC\x3\xAC\x3\xAC\a\xAC\x71E\n\xAC");
		sb.Append("\f\xAC\xE\xAC\x721\v\xAC\x3\xAD\x3\xAD\x3\xAD\x3\xAE\x3\xAE");
		sb.Append("\x3\xAE\x3\xAE\x5\xAE\x72A\n\xAE\x3\xAE\x5\xAE\x72D\n\xAE\x3");
		sb.Append("\xAF\x3\xAF\x3\xAF\x5\xAF\x732\n\xAF\x3\xAF\x3\xAF\x3\xB0\x3");
		sb.Append("\xB0\x3\xB0\a\xB0\x739\n\xB0\f\xB0\xE\xB0\x73C\v\xB0\x3\xB1");
		sb.Append("\a\xB1\x73F\n\xB1\f\xB1\xE\xB1\x742\v\xB1\x3\xB1\x3\xB1\x3\xB1");
		sb.Append("\x3\xB1\x3\xB1\x3\xB2\x3\xB2\x5\xB2\x74B\n\xB2\x3\xB2\a\xB2");
		sb.Append("\x74E\n\xB2\f\xB2\xE\xB2\x751\v\xB2\x3\xB3\x3\xB3\x3\xB3\x3");
		sb.Append("\xB3\a\xB3\x757\n\xB3\f\xB3\xE\xB3\x75A\v\xB3\x3\xB3\x3\xB3");
		sb.Append("\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3");
		sb.Append("\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3");
		sb.Append("\x3\xB3\x5\xB3\x770\n\xB3\x3\xB4\x3\xB4\x3\xB5\x3\xB5\x3\xB5");
		sb.Append("\x3\xB5\a\xB5\x778\n\xB5\f\xB5\xE\xB5\x77B\v\xB5\x3\xB5\x3\xB5");
		sb.Append("\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3");
		sb.Append("\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5");
		sb.Append("\x5\xB5\x790\n\xB5\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x5\xB6");
		sb.Append("\x797\n\xB6\x3\xB7\x3\xB7\x3\xB8\x3\xB8\x3\xB8\x3\xB8\x5\xB8");
		sb.Append("\x79F\n\xB8\x3\xB9\x3\xB9\x3\xB9\x3\xB9\a\xB9\x7A5\n\xB9\f\xB9");
		sb.Append("\xE\xB9\x7A8\v\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9");
		sb.Append("\a\xB9\x7B0\n\xB9\f\xB9\xE\xB9\x7B3\v\xB9\x3\xB9\x3\xB9\x3\xB9");
		sb.Append("\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3");
		sb.Append("\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9");
		sb.Append("\x5\xB9\x7C9\n\xB9\x3\xBA\x3\xBA\x3\xBB\x3\xBB\x3\xBB\x3\xBB");
		sb.Append("\a\xBB\x7D1\n\xBB\f\xBB\xE\xBB\x7D4\v\xBB\x3\xBB\x3\xBB\x3\xBB");
		sb.Append("\x3\xBB\x3\xBB\x3\xBB\a\xBB\x7DC\n\xBB\f\xBB\xE\xBB\x7DF\v\xBB");
		sb.Append("\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3");
		sb.Append("\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB");
		sb.Append("\x3\xBB\x3\xBB\x5\xBB\x7F4\n\xBB\x3\xBC\x3\xBC\x5\xBC\x7F8\n");
		sb.Append("\xBC\x3\xBC\a\xBC\x7FB\n\xBC\f\xBC\xE\xBC\x7FE\v\xBC\x3\xBC");
		sb.Append("\x3\xBC\x3\xBC\a\xBC\x803\n\xBC\f\xBC\xE\xBC\x806\v\xBC\x3\xBC");
		sb.Append("\a\xBC\x809\n\xBC\f\xBC\xE\xBC\x80C\v\xBC\x3\xBC\x5\xBC\x80F");
		sb.Append("\n\xBC\x3\xBC\x3\xBC\x5\xBC\x813\n\xBC\x3\xBC\x3\xBC\x5\xBC");
		sb.Append("\x817\n\xBC\x3\xBC\x3\xBC\x3\xBC\x3\xBC\x5\xBC\x81D\n\xBC\x3");
		sb.Append("\xBC\a\xBC\x820\n\xBC\f\xBC\xE\xBC\x823\v\xBC\x3\xBC\x3\xBC");
		sb.Append("\x5\xBC\x827\n\xBC\x3\xBC\x3\xBC\x5\xBC\x82B\n\xBC\x3\xBC\x3");
		sb.Append("\xBC\x5\xBC\x82F\n\xBC\x3\xBC\x3\xBC\x3\xBC\x3\xBC\x5\xBC\x835");
		sb.Append("\n\xBC\x3\xBC\a\xBC\x838\n\xBC\f\xBC\xE\xBC\x83B\v\xBC\x3\xBC");
		sb.Append("\x3\xBC\x5\xBC\x83F\n\xBC\x3\xBC\x3\xBC\x5\xBC\x843\n\xBC\x3");
		sb.Append("\xBC\x3\xBC\x5\xBC\x847\n\xBC\x5\xBC\x849\n\xBC\x3\xBD\x3\xBD");
		sb.Append("\x3\xBD\x5\xBD\x84E\n\xBD\x3\xBD\a\xBD\x851\n\xBD\f\xBD\xE\xBD");
		sb.Append("\x854\v\xBD\x3\xBD\x3\xBD\x5\xBD\x858\n\xBD\x3\xBD\x3\xBD\x5");
		sb.Append("\xBD\x85C\n\xBD\x3\xBD\x3\xBD\x5\xBD\x860\n\xBD\x3\xBE\x3\xBE");
		sb.Append("\x5\xBE\x864\n\xBE\x3\xBE\a\xBE\x867\n\xBE\f\xBE\xE\xBE\x86A");
		sb.Append("\v\xBE\x3\xBE\x3\xBE\x3\xBE\a\xBE\x86F\n\xBE\f\xBE\xE\xBE\x872");
		sb.Append("\v\xBE\x3\xBE\a\xBE\x875\n\xBE\f\xBE\xE\xBE\x878\v\xBE\x3\xBE");
		sb.Append("\x5\xBE\x87B\n\xBE\x3\xBE\x3\xBE\x5\xBE\x87F\n\xBE\x3\xBE\x3");
		sb.Append("\xBE\x5\xBE\x883\n\xBE\x3\xBE\x3\xBE\x3\xBE\x3\xBE\x5\xBE\x889");
		sb.Append("\n\xBE\x3\xBE\a\xBE\x88C\n\xBE\f\xBE\xE\xBE\x88F\v\xBE\x3\xBE");
		sb.Append("\x3\xBE\x5\xBE\x893\n\xBE\x3\xBE\x3\xBE\x5\xBE\x897\n\xBE\x3");
		sb.Append("\xBE\x3\xBE\x5\xBE\x89B\n\xBE\x5\xBE\x89D\n\xBE\x3\xBF\x3\xBF");
		sb.Append("\x3\xBF\x5\xBF\x8A2\n\xBF\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0");
		sb.Append("\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x5");
		sb.Append("\xC0\x8B1\n\xC0\x3\xC1\x3\xC1\x3\xC1\x3\xC2\x3\xC2\x3\xC2\x3");
		sb.Append("\xC2\x3\xC2\x3\xC2\x3\xC2\x3\xC2\x3\xC2\x5\xC2\x8BF\n\xC2\x3");
		sb.Append("\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3");
		sb.Append("\x3\xC3\x5\xC3\x8CB\n\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3");
		sb.Append("\a\xC3\x8D2\n\xC3\f\xC3\xE\xC3\x8D5\v\xC3\x3\xC4\x3\xC4\x3\xC4");
		sb.Append("\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\a\xC4\x8E1");
		sb.Append("\n\xC4\f\xC4\xE\xC4\x8E4\v\xC4\x3\xC5\x3\xC5\x3\xC5\x3\xC5\x3");
		sb.Append("\xC5\x3\xC5\x3\xC5\x3\xC5\x3\xC5\x3\xC5\x5\xC5\x8F0\n\xC5\x3");
		sb.Append("\xC5\x3\xC5\x3\xC5\x3\xC5\x3\xC5\a\xC5\x8F7\n\xC5\f\xC5\xE\xC5");
		sb.Append("\x8FA\v\xC5\x3\xC6\x3\xC6\x3\xC6\x5\xC6\x8FF\n\xC6\x3\xC6\x3");
		sb.Append("\xC6\x3\xC6\x3\xC6\x3\xC6\x5\xC6\x906\n\xC6\x3\xC6\x3\xC6\x3");
		sb.Append("\xC6\x5\xC6\x90B\n\xC6\x3\xC6\x3\xC6\x3\xC6\x3\xC6\x3\xC6\x5");
		sb.Append("\xC6\x912\n\xC6\x3\xC6\x3\xC6\x3\xC6\x5\xC6\x917\n\xC6\x3\xC6");
		sb.Append("\x3\xC6\x3\xC6\x3\xC6\x3\xC6\x5\xC6\x91E\n\xC6\x3\xC6\x3\xC6");
		sb.Append("\x3\xC6\x5\xC6\x923\n\xC6\x3\xC6\x3\xC6\x3\xC6\x3\xC6\x3\xC6");
		sb.Append("\x5\xC6\x92A\n\xC6\x3\xC6\x3\xC6\x3\xC6\x5\xC6\x92F\n\xC6\x3");
		sb.Append("\xC6\x3\xC6\x3\xC6\x3\xC6\x3\xC6\x3\xC6\x5\xC6\x937\n\xC6\x3");
		sb.Append("\xC6\x3\xC6\x3\xC6\x5\xC6\x93C\n\xC6\x3\xC6\x3\xC6\x5\xC6\x940");
		sb.Append("\n\xC6\x3\xC7\x3\xC7\x5\xC7\x944\n\xC7\x3\xC7\x3\xC7\x3\xC7");
		sb.Append("\x5\xC7\x949\n\xC7\x3\xC7\x3\xC7\x3\xC8\x3\xC8\x3\xC8\x5\xC8");
		sb.Append("\x950\n\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x5\xC8\x957\n");
		sb.Append("\xC8\x3\xC8\x3\xC8\x3\xC8\x5\xC8\x95C\n\xC8\x3\xC8\x3\xC8\x3");
		sb.Append("\xC8\x3\xC8\x3\xC8\x5\xC8\x963\n\xC8\x3\xC8\x3\xC8\x3\xC8\x5");
		sb.Append("\xC8\x968\n\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x5\xC8\x96F");
		sb.Append("\n\xC8\x3\xC8\x3\xC8\x3\xC8\x5\xC8\x974\n\xC8\x3\xC8\x3\xC8");
		sb.Append("\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x5\xC8\x97C\n\xC8\x3\xC8\x3\xC8");
		sb.Append("\x3\xC8\x5\xC8\x981\n\xC8\x3\xC8\x3\xC8\x5\xC8\x985\n\xC8\x3");
		sb.Append("\xC9\x3\xC9\x3\xC9\a\xC9\x98A\n\xC9\f\xC9\xE\xC9\x98D\v\xC9");
		sb.Append("\x3\xCA\x3\xCA\x3\xCA\x5\xCA\x992\n\xCA\x3\xCA\x3\xCA\x3\xCA");
		sb.Append("\x3\xCA\x3\xCA\x5\xCA\x999\n\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA");
		sb.Append("\x3\xCA\x5\xCA\x9A0\n\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA");
		sb.Append("\x5\xCA\x9A7\n\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA");
		sb.Append("\x5\xCA\x9AF\n\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x5\xCA");
		sb.Append("\x9B6\n\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x5\xCA");
		sb.Append("\x9BE\n\xCA\x3\xCB\x3\xCB\x5\xCB\x9C2\n\xCB\x3\xCB\x3\xCB\x3");
		sb.Append("\xCC\x3\xCC\x3\xCC\x5\xCC\x9C9\n\xCC\x3\xCC\x3\xCC\x3\xCC\x3");
		sb.Append("\xCC\x3\xCC\x5\xCC\x9D0\n\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3");
		sb.Append("\xCC\x5\xCC\x9D7\n\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3");
		sb.Append("\xCC\x5\xCC\x9DF\n\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x5");
		sb.Append("\xCC\x9E6\n\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x5");
		sb.Append("\xCC\x9EE\n\xCC\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x5\xCD\x9F4\n\xCD");
		sb.Append("\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x5\xCD\x9FA\n\xCD\x3\xCD\x3\xCD");
		sb.Append("\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x5");
		sb.Append("\xCD\xA06\n\xCD\x3\xCE\x3\xCE\a\xCE\xA0A\n\xCE\f\xCE\xE\xCE");
		sb.Append("\xA0D\v\xCE\x3\xCF\a\xCF\xA10\n\xCF\f\xCF\xE\xCF\xA13\v\xCF");
		sb.Append("\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xD0\x3\xD0\x3\xD1\x3\xD1\x5");
		sb.Append("\xD1\xA1D\n\xD1\x3\xD2\x3\xD2\x3\xD2\x3\xD2\x3\xD3\x3\xD3\x3");
		sb.Append("\xD3\x5\xD3\xA26\n\xD3\x3\xD3\x3\xD3\x3\xD3\x3\xD3\x3\xD3\x5");
		sb.Append("\xD3\xA2D\n\xD3\x3\xD4\x3\xD4\x3\xD4\a\xD4\xA32\n\xD4\f\xD4");
		sb.Append("\xE\xD4\xA35\v\xD4\x3\xD5\x3\xD5\x5\xD5\xA39\n\xD5\x3\xD6\x3");
		sb.Append("\xD6\x5\xD6\xA3D\n\xD6\x3\xD7\x3\xD7\x3\xD7\x3\xD7\x3\xD8\x3");
		sb.Append("\xD8\x3\xD8\x5\xD8\xA46\n\xD8\x3\xD9\x3\xD9\x3\xDA\x3\xDA\x3");
		sb.Append("\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x5\xDA\xA51\n\xDA\x3\xDB\x3");
		sb.Append("\xDB\x3\xDB\x3\xDB\x3\xDB\x3\xDB\a\xDB\xA59\n\xDB\f\xDB\xE\xDB");
		sb.Append("\xA5C\v\xDB\x3\xDC\x3\xDC\x3\xDC\x3\xDC\x3\xDC\x3\xDC\a\xDC");
		sb.Append("\xA64\n\xDC\f\xDC\xE\xDC\xA67\v\xDC\x3\xDD\x3\xDD\x3\xDD\x3");
		sb.Append("\xDD\x3\xDD\x3\xDD\a\xDD\xA6F\n\xDD\f\xDD\xE\xDD\xA72\v\xDD");
		sb.Append("\x3\xDE\x3\xDE\x3\xDE\x3\xDE\x3\xDE\x3\xDE\a\xDE\xA7A\n\xDE");
		sb.Append("\f\xDE\xE\xDE\xA7D\v\xDE\x3\xDF\x3\xDF\x3\xDF\x3\xDF\x3\xDF");
		sb.Append("\x3\xDF\a\xDF\xA85\n\xDF\f\xDF\xE\xDF\xA88\v\xDF\x3\xE0\x3\xE0");
		sb.Append("\x3\xE0\x3\xE0\x3\xE0\x3\xE0\x3\xE0\x3\xE0\x3\xE0\a\xE0\xA93");
		sb.Append("\n\xE0\f\xE0\xE\xE0\xA96\v\xE0\x3\xE1\x3\xE1\x3\xE1\x3\xE1\x3");
		sb.Append("\xE1\x3\xE1\x3\xE1\x3\xE1\x3\xE1\x3\xE1\x3\xE1\x3\xE1\x3\xE1");
		sb.Append("\x3\xE1\x3\xE1\x3\xE1\x3\xE1\x3\xE1\a\xE1\xAAA\n\xE1\f\xE1\xE");
		sb.Append("\xE1\xAAD\v\xE1\x3\xE2\x3\xE2\x3\xE2\x3\xE2\x3\xE2\x3\xE2\x3");
		sb.Append("\xE2\x3\xE2\x3\xE2\x3\xE2\x3\xE2\x3\xE2\x3\xE2\x3\xE2\x3\xE2");
		sb.Append("\x3\xE2\a\xE2\xABF\n\xE2\f\xE2\xE\xE2\xAC2\v\xE2\x3\xE3\x3\xE3");
		sb.Append("\x3\xE3\x3\xE3\x3\xE3\x3\xE3\x3\xE3\x3\xE3\x3\xE3\a\xE3\xACD");
		sb.Append("\n\xE3\f\xE3\xE\xE3\xAD0\v\xE3\x3\xE4\x3\xE4\x3\xE4\x3\xE4\x3");
		sb.Append("\xE4\x3\xE4\x3\xE4\x3\xE4\x3\xE4\x3\xE4\x3\xE4\x3\xE4\a\xE4");
		sb.Append("\xADE\n\xE4\f\xE4\xE\xE4\xAE1\v\xE4\x3\xE5\x3\xE5\x3\xE5\x3");
		sb.Append("\xE5\x3\xE5\x3\xE5\x3\xE5\x5\xE5\xAEA\n\xE5\x3\xE6\x3\xE6\x3");
		sb.Append("\xE6\x3\xE7\x3\xE7\x3\xE7\x3\xE8\x3\xE8\x3\xE8\x3\xE8\x3\xE8");
		sb.Append("\x3\xE8\x5\xE8\xAF8\n\xE8\x3\xE9\x3\xE9\x5\xE9\xAFC\n\xE9\x3");
		sb.Append("\xE9\x3\xE9\a\xE9\xB00\n\xE9\f\xE9\xE\xE9\xB03\v\xE9\x3\xEA");
		sb.Append("\x3\xEA\x3\xEA\x3\xEB\x3\xEB\x3\xEC\x3\xEC\x3\xEC\x3\xED\x3");
		sb.Append("\xED\x3\xEE\x3\xEE\x3\xEE\x3\xEE\x3\xEE\x3\xEE\x3\xEE\x3\xEE");
		sb.Append("\a\xEE\xB17\n\xEE\f\xEE\xE\xEE\xB1A\v\xEE\x3\xEE\x3\xEE\x3\xEE");
		sb.Append("\x3\xEE\x3\xEE\x3\xEE\a\xEE\xB22\n\xEE\f\xEE\xE\xEE\xB25\v\xEE");
		sb.Append("\x3\xEE\x3\xEE\x3\xEE\x5\xEE\xB2A\n\xEE\x3\xEE\x2\xF\x36:@\x1B4");
		sb.Append("\x1B6\x1B8\x1BA\x1BC\x1BE\x1C0\x1C2\x1C4\x1C6\xEF\x2\x4\x6\b");
		sb.Append("\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34");
		sb.Append("\x36\x38:<>@\x42\x44\x46HJLNPRTVXZ\\^`\x62\x64\x66hjlnprtvx");
		sb.Append("z|~\x80\x82\x84\x86\x88\x8A\x8C\x8E\x90\x92\x94\x96\x98\x9A");
		sb.Append("\x9C\x9E\xA0\xA2\xA4\xA6\xA8\xAA\xAC\xAE\xB0\xB2\xB4\xB6\xB8");
		sb.Append("\xBA\xBC\xBE\xC0\xC2\xC4\xC6\xC8\xCA\xCC\xCE\xD0\xD2\xD4\xD6");
		sb.Append("\xD8\xDA\xDC\xDE\xE0\xE2\xE4\xE6\xE8\xEA\xEC\xEE\xF0\xF2\xF4");
		sb.Append("\xF6\xF8\xFA\xFC\xFE\x100\x102\x104\x106\x108\x10A\x10C\x10E");
		sb.Append("\x110\x112\x114\x116\x118\x11A\x11C\x11E\x120\x122\x124\x126");
		sb.Append("\x128\x12A\x12C\x12E\x130\x132\x134\x136\x138\x13A\x13C\x13E");
		sb.Append("\x140\x142\x144\x146\x148\x14A\x14C\x14E\x150\x152\x154\x156");
		sb.Append("\x158\x15A\x15C\x15E\x160\x162\x164\x166\x168\x16A\x16C\x16E");
		sb.Append("\x170\x172\x174\x176\x178\x17A\x17C\x17E\x180\x182\x184\x186");
		sb.Append("\x188\x18A\x18C\x18E\x190\x192\x194\x196\x198\x19A\x19C\x19E");
		sb.Append("\x1A0\x1A2\x1A4\x1A6\x1A8\x1AA\x1AC\x1AE\x1B0\x1B2\x1B4\x1B6");
		sb.Append("\x1B8\x1BA\x1BC\x1BE\x1C0\x1C2\x1C4\x1C6\x1C8\x1CA\x1CC\x1CE");
		sb.Append("\x1D0\x1D2\x1D4\x1D6\x1D8\x1DA\x2\x6\x3\x2\x35:\a\x2\a\a\n\n");
		sb.Append("\x1D\x1D\x1F\x1F\'\'\x4\x2\x10\x10\x16\x16\x4\x2\x44\x44]g\xC1D");
		sb.Append("\x2\x1DC\x3\x2\x2\x2\x4\x1E0\x3\x2\x2\x2\x6\x1F0\x3\x2\x2\x2");
		sb.Append("\b\x1F4\x3\x2\x2\x2\n\x1F6\x3\x2\x2\x2\f\x1F8\x3\x2\x2\x2\xE");
		sb.Append("\x1FD\x3\x2\x2\x2\x10\x201\x3\x2\x2\x2\x12\x220\x3\x2\x2\x2");
		sb.Append("\x14\x222\x3\x2\x2\x2\x16\x230\x3\x2\x2\x2\x18\x237\x3\x2\x2");
		sb.Append("\x2\x1A\x239\x3\x2\x2\x2\x1C\x23B\x3\x2\x2\x2\x1E\x240\x3\x2");
		sb.Append("\x2\x2 \x24E\x3\x2\x2\x2\"\x253\x3\x2\x2\x2$\x268\x3\x2\x2\x2");
		sb.Append("&\x26F\x3\x2\x2\x2(\x27B\x3\x2\x2\x2*\x27D\x3\x2\x2\x2,\x280");
		sb.Append("\x3\x2\x2\x2.\x284\x3\x2\x2\x2\x30\x28E\x3\x2\x2\x2\x32\x293");
		sb.Append("\x3\x2\x2\x2\x34\x29E\x3\x2\x2\x2\x36\x2A0\x3\x2\x2\x2\x38\x2B0");
		sb.Append("\x3\x2\x2\x2:\x2B2\x3\x2\x2\x2<\x2C2\x3\x2\x2\x2>\x2C4\x3\x2");
		sb.Append("\x2\x2@\x2C6\x3\x2\x2\x2\x42\x2D2\x3\x2\x2\x2\x44\x2E5\x3\x2");
		sb.Append("\x2\x2\x46\x2F3\x3\x2\x2\x2H\x2F9\x3\x2\x2\x2J\x2FB\x3\x2\x2");
		sb.Append("\x2L\x2FF\x3\x2\x2\x2N\x305\x3\x2\x2\x2P\x30C\x3\x2\x2\x2R\x316");
		sb.Append("\x3\x2\x2\x2T\x31A\x3\x2\x2\x2V\x31F\x3\x2\x2\x2X\x337\x3\x2");
		sb.Append("\x2\x2Z\x339\x3\x2\x2\x2\\\x33D\x3\x2\x2\x2^\x345\x3\x2\x2\x2");
		sb.Append("`\x348\x3\x2\x2\x2\x62\x34B\x3\x2\x2\x2\x64\x353\x3\x2\x2\x2");
		sb.Append("\x66\x360\x3\x2\x2\x2h\x367\x3\x2\x2\x2j\x36C\x3\x2\x2\x2l\x37B");
		sb.Append("\x3\x2\x2\x2n\x37D\x3\x2\x2\x2p\x385\x3\x2\x2\x2r\x38A\x3\x2");
		sb.Append("\x2\x2t\x390\x3\x2\x2\x2v\x394\x3\x2\x2\x2x\x398\x3\x2\x2\x2");
		sb.Append("z\x39D\x3\x2\x2\x2|\x3A1\x3\x2\x2\x2~\x3BA\x3\x2\x2\x2\x80\x3BC");
		sb.Append("\x3\x2\x2\x2\x82\x3C7\x3\x2\x2\x2\x84\x3CB\x3\x2\x2\x2\x86\x3CD");
		sb.Append("\x3\x2\x2\x2\x88\x3CF\x3\x2\x2\x2\x8A\x3D1\x3\x2\x2\x2\x8C\x3DC");
		sb.Append("\x3\x2\x2\x2\x8E\x3E1\x3\x2\x2\x2\x90\x3F1\x3\x2\x2\x2\x92\x404");
		sb.Append("\x3\x2\x2\x2\x94\x408\x3\x2\x2\x2\x96\x40A\x3\x2\x2\x2\x98\x418");
		sb.Append("\x3\x2\x2\x2\x9A\x42A\x3\x2\x2\x2\x9C\x42F\x3\x2\x2\x2\x9E\x437");
		sb.Append("\x3\x2\x2\x2\xA0\x44A\x3\x2\x2\x2\xA2\x44F\x3\x2\x2\x2\xA4\x459");
		sb.Append("\x3\x2\x2\x2\xA6\x45C\x3\x2\x2\x2\xA8\x466\x3\x2\x2\x2\xAA\x46A");
		sb.Append("\x3\x2\x2\x2\xAC\x46C\x3\x2\x2\x2\xAE\x46E\x3\x2\x2\x2\xB0\x474");
		sb.Append("\x3\x2\x2\x2\xB2\x481\x3\x2\x2\x2\xB4\x484\x3\x2\x2\x2\xB6\x48D");
		sb.Append("\x3\x2\x2\x2\xB8\x48F\x3\x2\x2\x2\xBA\x4C6\x3\x2\x2\x2\xBC\x4CB");
		sb.Append("\x3\x2\x2\x2\xBE\x4D5\x3\x2\x2\x2\xC0\x4E1\x3\x2\x2\x2\xC2\x4EC");
		sb.Append("\x3\x2\x2\x2\xC4\x4FA\x3\x2\x2\x2\xC6\x4FC\x3\x2\x2\x2\xC8\x505");
		sb.Append("\x3\x2\x2\x2\xCA\x50A\x3\x2\x2\x2\xCC\x51E\x3\x2\x2\x2\xCE\x520");
		sb.Append("\x3\x2\x2\x2\xD0\x523\x3\x2\x2\x2\xD2\x531\x3\x2\x2\x2\xD4\x536");
		sb.Append("\x3\x2\x2\x2\xD6\x541\x3\x2\x2\x2\xD8\x546\x3\x2\x2\x2\xDA\x552");
		sb.Append("\x3\x2\x2\x2\xDC\x557\x3\x2\x2\x2\xDE\x55F\x3\x2\x2\x2\xE0\x56D");
		sb.Append("\x3\x2\x2\x2\xE2\x572\x3\x2\x2\x2\xE4\x584\x3\x2\x2\x2\xE6\x586");
		sb.Append("\x3\x2\x2\x2\xE8\x58C\x3\x2\x2\x2\xEA\x58E\x3\x2\x2\x2\xEC\x596");
		sb.Append("\x3\x2\x2\x2\xEE\x59E\x3\x2\x2\x2\xF0\x5A5\x3\x2\x2\x2\xF2\x5A7");
		sb.Append("\x3\x2\x2\x2\xF4\x5B0\x3\x2\x2\x2\xF6\x5B8\x3\x2\x2\x2\xF8\x5BB");
		sb.Append("\x3\x2\x2\x2\xFA\x5C1\x3\x2\x2\x2\xFC\x5CA\x3\x2\x2\x2\xFE\x5D2");
		sb.Append("\x3\x2\x2\x2\x100\x5D8\x3\x2\x2\x2\x102\x5E2\x3\x2\x2\x2\x104");
		sb.Append("\x5E4\x3\x2\x2\x2\x106\x5EA\x3\x2\x2\x2\x108\x5F6\x3\x2\x2\x2");
		sb.Append("\x10A\x5FD\x3\x2\x2\x2\x10C\x60B\x3\x2\x2\x2\x10E\x60D\x3\x2");
		sb.Append("\x2\x2\x110\x60F\x3\x2\x2\x2\x112\x613\x3\x2\x2\x2\x114\x617");
		sb.Append("\x3\x2\x2\x2\x116\x621\x3\x2\x2\x2\x118\x623\x3\x2\x2\x2\x11A");
		sb.Append("\x629\x3\x2\x2\x2\x11C\x631\x3\x2\x2\x2\x11E\x643\x3\x2\x2\x2");
		sb.Append("\x120\x645\x3\x2\x2\x2\x122\x64B\x3\x2\x2\x2\x124\x65A\x3\x2");
		sb.Append("\x2\x2\x126\x65D\x3\x2\x2\x2\x128\x66E\x3\x2\x2\x2\x12A\x670");
		sb.Append("\x3\x2\x2\x2\x12C\x672\x3\x2\x2\x2\x12E\x678\x3\x2\x2\x2\x130");
		sb.Append("\x67E\x3\x2\x2\x2\x132\x688\x3\x2\x2\x2\x134\x68C\x3\x2\x2\x2");
		sb.Append("\x136\x68E\x3\x2\x2\x2\x138\x69E\x3\x2\x2\x2\x13A\x6B0\x3\x2");
		sb.Append("\x2\x2\x13C\x6B2\x3\x2\x2\x2\x13E\x6B4\x3\x2\x2\x2\x140\x6BC");
		sb.Append("\x3\x2\x2\x2\x142\x6CB\x3\x2\x2\x2\x144\x6DA\x3\x2\x2\x2\x146");
		sb.Append("\x6E0\x3\x2\x2\x2\x148\x6E6\x3\x2\x2\x2\x14A\x6EC\x3\x2\x2\x2");
		sb.Append("\x14C\x6F0\x3\x2\x2\x2\x14E\x702\x3\x2\x2\x2\x150\x704\x3\x2");
		sb.Append("\x2\x2\x152\x70B\x3\x2\x2\x2\x154\x714\x3\x2\x2\x2\x156\x71A");
		sb.Append("\x3\x2\x2\x2\x158\x722\x3\x2\x2\x2\x15A\x725\x3\x2\x2\x2\x15C");
		sb.Append("\x72E\x3\x2\x2\x2\x15E\x735\x3\x2\x2\x2\x160\x740\x3\x2\x2\x2");
		sb.Append("\x162\x74A\x3\x2\x2\x2\x164\x76F\x3\x2\x2\x2\x166\x771\x3\x2");
		sb.Append("\x2\x2\x168\x78F\x3\x2\x2\x2\x16A\x796\x3\x2\x2\x2\x16C\x798");
		sb.Append("\x3\x2\x2\x2\x16E\x79E\x3\x2\x2\x2\x170\x7C8\x3\x2\x2\x2\x172");
		sb.Append("\x7CA\x3\x2\x2\x2\x174\x7F3\x3\x2\x2\x2\x176\x848\x3\x2\x2\x2");
		sb.Append("\x178\x84A\x3\x2\x2\x2\x17A\x89C\x3\x2\x2\x2\x17C\x8A1\x3\x2");
		sb.Append("\x2\x2\x17E\x8B0\x3\x2\x2\x2\x180\x8B2\x3\x2\x2\x2\x182\x8BE");
		sb.Append("\x3\x2\x2\x2\x184\x8CA\x3\x2\x2\x2\x186\x8D6\x3\x2\x2\x2\x188");
		sb.Append("\x8EF\x3\x2\x2\x2\x18A\x93F\x3\x2\x2\x2\x18C\x941\x3\x2\x2\x2");
		sb.Append("\x18E\x984\x3\x2\x2\x2\x190\x986\x3\x2\x2\x2\x192\x9BD\x3\x2");
		sb.Append("\x2\x2\x194\x9BF\x3\x2\x2\x2\x196\x9ED\x3\x2\x2\x2\x198\xA05");
		sb.Append("\x3\x2\x2\x2\x19A\xA07\x3\x2\x2\x2\x19C\xA11\x3\x2\x2\x2\x19E");
		sb.Append("\xA18\x3\x2\x2\x2\x1A0\xA1C\x3\x2\x2\x2\x1A2\xA1E\x3\x2\x2\x2");
		sb.Append("\x1A4\xA2C\x3\x2\x2\x2\x1A6\xA2E\x3\x2\x2\x2\x1A8\xA38\x3\x2");
		sb.Append("\x2\x2\x1AA\xA3C\x3\x2\x2\x2\x1AC\xA3E\x3\x2\x2\x2\x1AE\xA45");
		sb.Append("\x3\x2\x2\x2\x1B0\xA47\x3\x2\x2\x2\x1B2\xA50\x3\x2\x2\x2\x1B4");
		sb.Append("\xA52\x3\x2\x2\x2\x1B6\xA5D\x3\x2\x2\x2\x1B8\xA68\x3\x2\x2\x2");
		sb.Append("\x1BA\xA73\x3\x2\x2\x2\x1BC\xA7E\x3\x2\x2\x2\x1BE\xA89\x3\x2");
		sb.Append("\x2\x2\x1C0\xA97\x3\x2\x2\x2\x1C2\xAAE\x3\x2\x2\x2\x1C4\xAC3");
		sb.Append("\x3\x2\x2\x2\x1C6\xAD1\x3\x2\x2\x2\x1C8\xAE9\x3\x2\x2\x2\x1CA");
		sb.Append("\xAEB\x3\x2\x2\x2\x1CC\xAEE\x3\x2\x2\x2\x1CE\xAF7\x3\x2\x2\x2");
		sb.Append("\x1D0\xAFB\x3\x2\x2\x2\x1D2\xB04\x3\x2\x2\x2\x1D4\xB07\x3\x2");
		sb.Append("\x2\x2\x1D6\xB09\x3\x2\x2\x2\x1D8\xB0C\x3\x2\x2\x2\x1DA\xB29");
		sb.Append("\x3\x2\x2\x2\x1DC\x1DD\t\x2\x2\x2\x1DD\x3\x3\x2\x2\x2\x1DE\x1E1");
		sb.Append("\x5\x6\x4\x2\x1DF\x1E1\x5\xE\b\x2\x1E0\x1DE\x3\x2\x2\x2\x1E0");
		sb.Append("\x1DF\x3\x2\x2\x2\x1E1\x5\x3\x2\x2\x2\x1E2\x1E4\x5\xE8u\x2\x1E3");
		sb.Append("\x1E2\x3\x2\x2\x2\x1E4\x1E7\x3\x2\x2\x2\x1E5\x1E3\x3\x2\x2\x2");
		sb.Append("\x1E5\x1E6\x3\x2\x2\x2\x1E6\x1E8\x3\x2\x2\x2\x1E7\x1E5\x3\x2");
		sb.Append("\x2\x2\x1E8\x1F1\x5\b\x5\x2\x1E9\x1EB\x5\xE8u\x2\x1EA\x1E9\x3");
		sb.Append("\x2\x2\x2\x1EB\x1EE\x3\x2\x2\x2\x1EC\x1EA\x3\x2\x2\x2\x1EC\x1ED");
		sb.Append("\x3\x2\x2\x2\x1ED\x1EF\x3\x2\x2\x2\x1EE\x1EC\x3\x2\x2\x2\x1EF");
		sb.Append("\x1F1\a\x5\x2\x2\x1F0\x1E5\x3\x2\x2\x2\x1F0\x1EC\x3\x2\x2\x2");
		sb.Append("\x1F1\a\x3\x2\x2\x2\x1F2\x1F5\x5\n\x6\x2\x1F3\x1F5\x5\f\a\x2");
		sb.Append("\x1F4\x1F2\x3\x2\x2\x2\x1F4\x1F3\x3\x2\x2\x2\x1F5\t\x3\x2\x2");
		sb.Append("\x2\x1F6\x1F7\t\x3\x2\x2\x1F7\v\x3\x2\x2\x2\x1F8\x1F9\t\x4\x2");
		sb.Append("\x2\x1F9\r\x3\x2\x2\x2\x1FA\x1FE\x5\x10\t\x2\x1FB\x1FE\x5\x1E");
		sb.Append("\x10\x2\x1FC\x1FE\x5 \x11\x2\x1FD\x1FA\x3\x2\x2\x2\x1FD\x1FB");
		sb.Append("\x3\x2\x2\x2\x1FD\x1FC\x3\x2\x2\x2\x1FE\xF\x3\x2\x2\x2\x1FF");
		sb.Append("\x202\x5\x16\f\x2\x200\x202\x5\x1C\xF\x2\x201\x1FF\x3\x2\x2");
		sb.Append("\x2\x201\x200\x3\x2\x2\x2\x202\x207\x3\x2\x2\x2\x203\x206\x5");
		sb.Append("\x14\v\x2\x204\x206\x5\x1A\xE\x2\x205\x203\x3\x2\x2\x2\x205");
		sb.Append("\x204\x3\x2\x2\x2\x206\x209\x3\x2\x2\x2\x207\x205\x3\x2\x2\x2");
		sb.Append("\x207\x208\x3\x2\x2\x2\x208\x11\x3\x2\x2\x2\x209\x207\x3\x2");
		sb.Append("\x2\x2\x20A\x20C\x5\xE8u\x2\x20B\x20A\x3\x2\x2\x2\x20C\x20F");
		sb.Append("\x3\x2\x2\x2\x20D\x20B\x3\x2\x2\x2\x20D\x20E\x3\x2\x2\x2\x20E");
		sb.Append("\x210\x3\x2\x2\x2\x20F\x20D\x3\x2\x2\x2\x210\x212\ah\x2\x2\x211");
		sb.Append("\x213\x5,\x17\x2\x212\x211\x3\x2\x2\x2\x212\x213\x3\x2\x2\x2");
		sb.Append("\x213\x221\x3\x2\x2\x2\x214\x215\x5\x10\t\x2\x215\x219\a\x43");
		sb.Append("\x2\x2\x216\x218\x5\xE8u\x2\x217\x216\x3\x2\x2\x2\x218\x21B");
		sb.Append("\x3\x2\x2\x2\x219\x217\x3\x2\x2\x2\x219\x21A\x3\x2\x2\x2\x21A");
		sb.Append("\x21C\x3\x2\x2\x2\x21B\x219\x3\x2\x2\x2\x21C\x21E\ah\x2\x2\x21D");
		sb.Append("\x21F\x5,\x17\x2\x21E\x21D\x3\x2\x2\x2\x21E\x21F\x3\x2\x2\x2");
		sb.Append("\x21F\x221\x3\x2\x2\x2\x220\x20D\x3\x2\x2\x2\x220\x214\x3\x2");
		sb.Append("\x2\x2\x221\x13\x3\x2\x2\x2\x222\x226\a\x43\x2\x2\x223\x225");
		sb.Append("\x5\xE8u\x2\x224\x223\x3\x2\x2\x2\x225\x228\x3\x2\x2\x2\x226");
		sb.Append("\x224\x3\x2\x2\x2\x226\x227\x3\x2\x2\x2\x227\x229\x3\x2\x2\x2");
		sb.Append("\x228\x226\x3\x2\x2\x2\x229\x22B\ah\x2\x2\x22A\x22C\x5,\x17");
		sb.Append("\x2\x22B\x22A\x3\x2\x2\x2\x22B\x22C\x3\x2\x2\x2\x22C\x15\x3");
		sb.Append("\x2\x2\x2\x22D\x22F\x5\xE8u\x2\x22E\x22D\x3\x2\x2\x2\x22F\x232");
		sb.Append("\x3\x2\x2\x2\x230\x22E\x3\x2\x2\x2\x230\x231\x3\x2\x2\x2\x231");
		sb.Append("\x233\x3\x2\x2\x2\x232\x230\x3\x2\x2\x2\x233\x235\ah\x2\x2\x234");
		sb.Append("\x236\x5,\x17\x2\x235\x234\x3\x2\x2\x2\x235\x236\x3\x2\x2\x2");
		sb.Append("\x236\x17\x3\x2\x2\x2\x237\x238\x5\x12\n\x2\x238\x19\x3\x2\x2");
		sb.Append("\x2\x239\x23A\x5\x14\v\x2\x23A\x1B\x3\x2\x2\x2\x23B\x23C\x5");
		sb.Append("\x16\f\x2\x23C\x1D\x3\x2\x2\x2\x23D\x23F\x5\xE8u\x2\x23E\x23D");
		sb.Append("\x3\x2\x2\x2\x23F\x242\x3\x2\x2\x2\x240\x23E\x3\x2\x2\x2\x240");
		sb.Append("\x241\x3\x2\x2\x2\x241\x243\x3\x2\x2\x2\x242\x240\x3\x2\x2\x2");
		sb.Append("\x243\x244\ah\x2\x2\x244\x1F\x3\x2\x2\x2\x245\x246\x5\x6\x4");
		sb.Append("\x2\x246\x247\x5\"\x12\x2\x247\x24F\x3\x2\x2\x2\x248\x249\x5");
		sb.Append("\x10\t\x2\x249\x24A\x5\"\x12\x2\x24A\x24F\x3\x2\x2\x2\x24B\x24C");
		sb.Append("\x5\x1E\x10\x2\x24C\x24D\x5\"\x12\x2\x24D\x24F\x3\x2\x2\x2\x24E");
		sb.Append("\x245\x3\x2\x2\x2\x24E\x248\x3\x2\x2\x2\x24E\x24B\x3\x2\x2\x2");
		sb.Append("\x24F!\x3\x2\x2\x2\x250\x252\x5\xE8u\x2\x251\x250\x3\x2\x2\x2");
		sb.Append("\x252\x255\x3\x2\x2\x2\x253\x251\x3\x2\x2\x2\x253\x254\x3\x2");
		sb.Append("\x2\x2\x254\x256\x3\x2\x2\x2\x255\x253\x3\x2\x2\x2\x256\x257");
		sb.Append("\a?\x2\x2\x257\x262\a@\x2\x2\x258\x25A\x5\xE8u\x2\x259\x258");
		sb.Append("\x3\x2\x2\x2\x25A\x25D\x3\x2\x2\x2\x25B\x259\x3\x2\x2\x2\x25B");
		sb.Append("\x25C\x3\x2\x2\x2\x25C\x25E\x3\x2\x2\x2\x25D\x25B\x3\x2\x2\x2");
		sb.Append("\x25E\x25F\a?\x2\x2\x25F\x261\a@\x2\x2\x260\x25B\x3\x2\x2\x2");
		sb.Append("\x261\x264\x3\x2\x2\x2\x262\x260\x3\x2\x2\x2\x262\x263\x3\x2");
		sb.Append("\x2\x2\x263#\x3\x2\x2\x2\x264\x262\x3\x2\x2\x2\x265\x267\x5");
		sb.Append("&\x14\x2\x266\x265\x3\x2\x2\x2\x267\x26A\x3\x2\x2\x2\x268\x266");
		sb.Append("\x3\x2\x2\x2\x268\x269\x3\x2\x2\x2\x269\x26B\x3\x2\x2\x2\x26A");
		sb.Append("\x268\x3\x2\x2\x2\x26B\x26D\ah\x2\x2\x26C\x26E\x5(\x15\x2\x26D");
		sb.Append("\x26C\x3\x2\x2\x2\x26D\x26E\x3\x2\x2\x2\x26E%\x3\x2\x2\x2\x26F");
		sb.Append("\x270\x5\xE8u\x2\x270\'\x3\x2\x2\x2\x271\x272\a\x13\x2\x2\x272");
		sb.Append("\x27C\x5\x1E\x10\x2\x273\x274\a\x13\x2\x2\x274\x278\x5\x10\t");
		sb.Append("\x2\x275\x277\x5*\x16\x2\x276\x275\x3\x2\x2\x2\x277\x27A\x3");
		sb.Append("\x2\x2\x2\x278\x276\x3\x2\x2\x2\x278\x279\x3\x2\x2\x2\x279\x27C");
		sb.Append("\x3\x2\x2\x2\x27A\x278\x3\x2\x2\x2\x27B\x271\x3\x2\x2\x2\x27B");
		sb.Append("\x273\x3\x2\x2\x2\x27C)\x3\x2\x2\x2\x27D\x27E\aW\x2\x2\x27E");
		sb.Append("\x27F\x5\x18\r\x2\x27F+\x3\x2\x2\x2\x280\x281\a\x46\x2\x2\x281");
		sb.Append("\x282\x5.\x18\x2\x282\x283\a\x45\x2\x2\x283-\x3\x2\x2\x2\x284");
		sb.Append("\x289\x5\x30\x19\x2\x285\x286\a\x42\x2\x2\x286\x288\x5\x30\x19");
		sb.Append("\x2\x287\x285\x3\x2\x2\x2\x288\x28B\x3\x2\x2\x2\x289\x287\x3");
		sb.Append("\x2\x2\x2\x289\x28A\x3\x2\x2\x2\x28A/\x3\x2\x2\x2\x28B\x289");
		sb.Append("\x3\x2\x2\x2\x28C\x28F\x5\xE\b\x2\x28D\x28F\x5\x32\x1A\x2\x28E");
		sb.Append("\x28C\x3\x2\x2\x2\x28E\x28D\x3\x2\x2\x2\x28F\x31\x3\x2\x2\x2");
		sb.Append("\x290\x292\x5\xE8u\x2\x291\x290\x3\x2\x2\x2\x292\x295\x3\x2");
		sb.Append("\x2\x2\x293\x291\x3\x2\x2\x2\x293\x294\x3\x2\x2\x2\x294\x296");
		sb.Append("\x3\x2\x2\x2\x295\x293\x3\x2\x2\x2\x296\x298\aI\x2\x2\x297\x299");
		sb.Append("\x5\x34\x1B\x2\x298\x297\x3\x2\x2\x2\x298\x299\x3\x2\x2\x2\x299");
		sb.Append("\x33\x3\x2\x2\x2\x29A\x29B\a\x13\x2\x2\x29B\x29F\x5\xE\b\x2");
		sb.Append("\x29C\x29D\a*\x2\x2\x29D\x29F\x5\xE\b\x2\x29E\x29A\x3\x2\x2");
		sb.Append("\x2\x29E\x29C\x3\x2\x2\x2\x29F\x35\x3\x2\x2\x2\x2A0\x2A1\b\x1C");
		sb.Append("\x1\x2\x2A1\x2A2\ah\x2\x2\x2A2\x2A8\x3\x2\x2\x2\x2A3\x2A4\f");
		sb.Append("\x3\x2\x2\x2A4\x2A5\a\x43\x2\x2\x2A5\x2A7\ah\x2\x2\x2A6\x2A3");
		sb.Append("\x3\x2\x2\x2\x2A7\x2AA\x3\x2\x2\x2\x2A8\x2A6\x3\x2\x2\x2\x2A8");
		sb.Append("\x2A9\x3\x2\x2\x2\x2A9\x37\x3\x2\x2\x2\x2AA\x2A8\x3\x2\x2\x2");
		sb.Append("\x2AB\x2B1\ah\x2\x2\x2AC\x2AD\x5:\x1E\x2\x2AD\x2AE\a\x43\x2");
		sb.Append("\x2\x2AE\x2AF\ah\x2\x2\x2AF\x2B1\x3\x2\x2\x2\x2B0\x2AB\x3\x2");
		sb.Append("\x2\x2\x2B0\x2AC\x3\x2\x2\x2\x2B1\x39\x3\x2\x2\x2\x2B2\x2B3");
		sb.Append("\b\x1E\x1\x2\x2B3\x2B4\ah\x2\x2\x2B4\x2BA\x3\x2\x2\x2\x2B5\x2B6");
		sb.Append("\f\x3\x2\x2\x2B6\x2B7\a\x43\x2\x2\x2B7\x2B9\ah\x2\x2\x2B8\x2B5");
		sb.Append("\x3\x2\x2\x2\x2B9\x2BC\x3\x2\x2\x2\x2BA\x2B8\x3\x2\x2\x2\x2BA");
		sb.Append("\x2BB\x3\x2\x2\x2\x2BB;\x3\x2\x2\x2\x2BC\x2BA\x3\x2\x2\x2\x2BD");
		sb.Append("\x2C3\ah\x2\x2\x2BE\x2BF\x5@!\x2\x2BF\x2C0\a\x43\x2\x2\x2C0");
		sb.Append("\x2C1\ah\x2\x2\x2C1\x2C3\x3\x2\x2\x2\x2C2\x2BD\x3\x2\x2\x2\x2C2");
		sb.Append("\x2BE\x3\x2\x2\x2\x2C3=\x3\x2\x2\x2\x2C4\x2C5\ah\x2\x2\x2C5");
		sb.Append("?\x3\x2\x2\x2\x2C6\x2C7\b!\x1\x2\x2C7\x2C8\ah\x2\x2\x2C8\x2CE");
		sb.Append("\x3\x2\x2\x2\x2C9\x2CA\f\x3\x2\x2\x2CA\x2CB\a\x43\x2\x2\x2CB");
		sb.Append("\x2CD\ah\x2\x2\x2CC\x2C9\x3\x2\x2\x2\x2CD\x2D0\x3\x2\x2\x2\x2CE");
		sb.Append("\x2CC\x3\x2\x2\x2\x2CE\x2CF\x3\x2\x2\x2\x2CF\x41\x3\x2\x2\x2");
		sb.Append("\x2D0\x2CE\x3\x2\x2\x2\x2D1\x2D3\x5\x44#\x2\x2D2\x2D1\x3\x2");
		sb.Append("\x2\x2\x2D2\x2D3\x3\x2\x2\x2\x2D3\x2D7\x3\x2\x2\x2\x2D4\x2D6");
		sb.Append("\x5H%\x2\x2D5\x2D4\x3\x2\x2\x2\x2D6\x2D9\x3\x2\x2\x2\x2D7\x2D5");
		sb.Append("\x3\x2\x2\x2\x2D7\x2D8\x3\x2\x2\x2\x2D8\x2DD\x3\x2\x2\x2\x2D9");
		sb.Append("\x2D7\x3\x2\x2\x2\x2DA\x2DC\x5R*\x2\x2DB\x2DA\x3\x2\x2\x2\x2DC");
		sb.Append("\x2DF\x3\x2\x2\x2\x2DD\x2DB\x3\x2\x2\x2\x2DD\x2DE\x3\x2\x2\x2");
		sb.Append("\x2DE\x2E0\x3\x2\x2\x2\x2DF\x2DD\x3\x2\x2\x2\x2E0\x2E1\a\x2");
		sb.Append("\x2\x3\x2E1\x43\x3\x2\x2\x2\x2E2\x2E4\x5\x46$\x2\x2E3\x2E2\x3");
		sb.Append("\x2\x2\x2\x2E4\x2E7\x3\x2\x2\x2\x2E5\x2E3\x3\x2\x2\x2\x2E5\x2E6");
		sb.Append("\x3\x2\x2\x2\x2E6\x2E8\x3\x2\x2\x2\x2E7\x2E5\x3\x2\x2\x2\x2E8");
		sb.Append("\x2E9\a\"\x2\x2\x2E9\x2EE\ah\x2\x2\x2EA\x2EB\a\x43\x2\x2\x2EB");
		sb.Append("\x2ED\ah\x2\x2\x2EC\x2EA\x3\x2\x2\x2\x2ED\x2F0\x3\x2\x2\x2\x2EE");
		sb.Append("\x2EC\x3\x2\x2\x2\x2EE\x2EF\x3\x2\x2\x2\x2EF\x2F1\x3\x2\x2\x2");
		sb.Append("\x2F0\x2EE\x3\x2\x2\x2\x2F1\x2F2\a\x41\x2\x2\x2F2\x45\x3\x2");
		sb.Append("\x2\x2\x2F3\x2F4\x5\xE8u\x2\x2F4G\x3\x2\x2\x2\x2F5\x2FA\x5J");
		sb.Append("&\x2\x2F6\x2FA\x5L\'\x2\x2F7\x2FA\x5N(\x2\x2F8\x2FA\x5P)\x2");
		sb.Append("\x2F9\x2F5\x3\x2\x2\x2\x2F9\x2F6\x3\x2\x2\x2\x2F9\x2F7\x3\x2");
		sb.Append("\x2\x2\x2F9\x2F8\x3\x2\x2\x2\x2FAI\x3\x2\x2\x2\x2FB\x2FC\a\x1B");
		sb.Append("\x2\x2\x2FC\x2FD\x5\x38\x1D\x2\x2FD\x2FE\a\x41\x2\x2\x2FEK\x3");
		sb.Append("\x2\x2\x2\x2FF\x300\a\x1B\x2\x2\x300\x301\x5:\x1E\x2\x301\x302");
		sb.Append("\a\x43\x2\x2\x302\x303\aU\x2\x2\x303\x304\a\x41\x2\x2\x304M");
		sb.Append("\x3\x2\x2\x2\x305\x306\a\x1B\x2\x2\x306\x307\a(\x2\x2\x307\x308");
		sb.Append("\x5\x38\x1D\x2\x308\x309\a\x43\x2\x2\x309\x30A\ah\x2\x2\x30A");
		sb.Append("\x30B\a\x41\x2\x2\x30BO\x3\x2\x2\x2\x30C\x30D\a\x1B\x2\x2\x30D");
		sb.Append("\x30E\a(\x2\x2\x30E\x30F\x5\x38\x1D\x2\x30F\x310\a\x43\x2\x2");
		sb.Append("\x310\x311\aU\x2\x2\x311\x312\a\x41\x2\x2\x312Q\x3\x2\x2\x2");
		sb.Append("\x313\x317\x5T+\x2\x314\x317\x5\xC8\x65\x2\x315\x317\a\x41\x2");
		sb.Append("\x2\x316\x313\x3\x2\x2\x2\x316\x314\x3\x2\x2\x2\x316\x315\x3");
		sb.Append("\x2\x2\x2\x317S\x3\x2\x2\x2\x318\x31B\x5V,\x2\x319\x31B\x5\xBC");
		sb.Append("_\x2\x31A\x318\x3\x2\x2\x2\x31A\x319\x3\x2\x2\x2\x31BU\x3\x2");
		sb.Append("\x2\x2\x31C\x31E\x5X-\x2\x31D\x31C\x3\x2\x2\x2\x31E\x321\x3");
		sb.Append("\x2\x2\x2\x31F\x31D\x3\x2\x2\x2\x31F\x320\x3\x2\x2\x2\x320\x322");
		sb.Append("\x3\x2\x2\x2\x321\x31F\x3\x2\x2\x2\x322\x323\a\v\x2\x2\x323");
		sb.Append("\x325\ah\x2\x2\x324\x326\x5Z.\x2\x325\x324\x3\x2\x2\x2\x325");
		sb.Append("\x326\x3\x2\x2\x2\x326\x328\x3\x2\x2\x2\x327\x329\x5^\x30\x2");
		sb.Append("\x328\x327\x3\x2\x2\x2\x328\x329\x3\x2\x2\x2\x329\x32B\x3\x2");
		sb.Append("\x2\x2\x32A\x32C\x5`\x31\x2\x32B\x32A\x3\x2\x2\x2\x32B\x32C");
		sb.Append("\x3\x2\x2\x2\x32C\x32D\x3\x2\x2\x2\x32D\x32E\x5\x64\x33\x2\x32E");
		sb.Append("W\x3\x2\x2\x2\x32F\x338\x5\xE8u\x2\x330\x338\a%\x2\x2\x331\x338");
		sb.Append("\a$\x2\x2\x332\x338\a#\x2\x2\x333\x338\a\x3\x2\x2\x334\x338");
		sb.Append("\a(\x2\x2\x335\x338\a\x14\x2\x2\x336\x338\a)\x2\x2\x337\x32F");
		sb.Append("\x3\x2\x2\x2\x337\x330\x3\x2\x2\x2\x337\x331\x3\x2\x2\x2\x337");
		sb.Append("\x332\x3\x2\x2\x2\x337\x333\x3\x2\x2\x2\x337\x334\x3\x2\x2\x2");
		sb.Append("\x337\x335\x3\x2\x2\x2\x337\x336\x3\x2\x2\x2\x338Y\x3\x2\x2");
		sb.Append("\x2\x339\x33A\a\x46\x2\x2\x33A\x33B\x5\\/\x2\x33B\x33C\a\x45");
		sb.Append("\x2\x2\x33C[\x3\x2\x2\x2\x33D\x342\x5$\x13\x2\x33E\x33F\a\x42");
		sb.Append("\x2\x2\x33F\x341\x5$\x13\x2\x340\x33E\x3\x2\x2\x2\x341\x344");
		sb.Append("\x3\x2\x2\x2\x342\x340\x3\x2\x2\x2\x342\x343\x3\x2\x2\x2\x343");
		sb.Append("]\x3\x2\x2\x2\x344\x342\x3\x2\x2\x2\x345\x346\a\x13\x2\x2\x346");
		sb.Append("\x347\x5\x12\n\x2\x347_\x3\x2\x2\x2\x348\x349\a\x1A\x2\x2\x349");
		sb.Append("\x34A\x5\x62\x32\x2\x34A\x61\x3\x2\x2\x2\x34B\x350\x5\x18\r");
		sb.Append("\x2\x34C\x34D\a\x42\x2\x2\x34D\x34F\x5\x18\r\x2\x34E\x34C\x3");
		sb.Append("\x2\x2\x2\x34F\x352\x3\x2\x2\x2\x350\x34E\x3\x2\x2\x2\x350\x351");
		sb.Append("\x3\x2\x2\x2\x351\x63\x3\x2\x2\x2\x352\x350\x3\x2\x2\x2\x353");
		sb.Append("\x357\a=\x2\x2\x354\x356\x5\x66\x34\x2\x355\x354\x3\x2\x2\x2");
		sb.Append("\x356\x359\x3\x2\x2\x2\x357\x355\x3\x2\x2\x2\x357\x358\x3\x2");
		sb.Append("\x2\x2\x358\x35A\x3\x2\x2\x2\x359\x357\x3\x2\x2\x2\x35A\x35B");
		sb.Append("\a>\x2\x2\x35B\x65\x3\x2\x2\x2\x35C\x361\x5h\x35\x2\x35D\x361");
		sb.Append("\x5\xACW\x2\x35E\x361\x5\xAEX\x2\x35F\x361\x5\xB0Y\x2\x360\x35C");
		sb.Append("\x3\x2\x2\x2\x360\x35D\x3\x2\x2\x2\x360\x35E\x3\x2\x2\x2\x360");
		sb.Append("\x35F\x3\x2\x2\x2\x361g\x3\x2\x2\x2\x362\x368\x5j\x36\x2\x363");
		sb.Append("\x368\x5\x8EH\x2\x364\x368\x5T+\x2\x365\x368\x5\xC8\x65\x2\x366");
		sb.Append("\x368\a\x41\x2\x2\x367\x362\x3\x2\x2\x2\x367\x363\x3\x2\x2\x2");
		sb.Append("\x367\x364\x3\x2\x2\x2\x367\x365\x3\x2\x2\x2\x367\x366\x3\x2");
		sb.Append("\x2\x2\x368i\x3\x2\x2\x2\x369\x36B\x5l\x37\x2\x36A\x369\x3\x2");
		sb.Append("\x2\x2\x36B\x36E\x3\x2\x2\x2\x36C\x36A\x3\x2\x2\x2\x36C\x36D");
		sb.Append("\x3\x2\x2\x2\x36D\x36F\x3\x2\x2\x2\x36E\x36C\x3\x2\x2\x2\x36F");
		sb.Append("\x370\x5v<\x2\x370\x371\x5n\x38\x2\x371\x372\a\x41\x2\x2\x372");
		sb.Append("k\x3\x2\x2\x2\x373\x37C\x5\xE8u\x2\x374\x37C\a%\x2\x2\x375\x37C");
		sb.Append("\a$\x2\x2\x376\x37C\a#\x2\x2\x377\x37C\a(\x2\x2\x378\x37C\a");
		sb.Append("\x14\x2\x2\x379\x37C\a\x30\x2\x2\x37A\x37C\a\x33\x2\x2\x37B");
		sb.Append("\x373\x3\x2\x2\x2\x37B\x374\x3\x2\x2\x2\x37B\x375\x3\x2\x2\x2");
		sb.Append("\x37B\x376\x3\x2\x2\x2\x37B\x377\x3\x2\x2\x2\x37B\x378\x3\x2");
		sb.Append("\x2\x2\x37B\x379\x3\x2\x2\x2\x37B\x37A\x3\x2\x2\x2\x37Cm\x3");
		sb.Append("\x2\x2\x2\x37D\x382\x5p\x39\x2\x37E\x37F\a\x42\x2\x2\x37F\x381");
		sb.Append("\x5p\x39\x2\x380\x37E\x3\x2\x2\x2\x381\x384\x3\x2\x2\x2\x382");
		sb.Append("\x380\x3\x2\x2\x2\x382\x383\x3\x2\x2\x2\x383o\x3\x2\x2\x2\x384");
		sb.Append("\x382\x3\x2\x2\x2\x385\x388\x5r:\x2\x386\x387\a\x44\x2\x2\x387");
		sb.Append("\x389\x5t;\x2\x388\x386\x3\x2\x2\x2\x388\x389\x3\x2\x2\x2\x389");
		sb.Append("q\x3\x2\x2\x2\x38A\x38C\ah\x2\x2\x38B\x38D\x5\"\x12\x2\x38C");
		sb.Append("\x38B\x3\x2\x2\x2\x38C\x38D\x3\x2\x2\x2\x38Ds\x3\x2\x2\x2\x38E");
		sb.Append("\x391\x5\x1A0\xD1\x2\x38F\x391\x5\xFA~\x2\x390\x38E\x3\x2\x2");
		sb.Append("\x2\x390\x38F\x3\x2\x2\x2\x391u\x3\x2\x2\x2\x392\x395\x5x=\x2");
		sb.Append("\x393\x395\x5z>\x2\x394\x392\x3\x2\x2\x2\x394\x393\x3\x2\x2");
		sb.Append("\x2\x395w\x3\x2\x2\x2\x396\x399\x5\b\x5\x2\x397\x399\a\x5\x2");
		sb.Append("\x2\x398\x396\x3\x2\x2\x2\x398\x397\x3\x2\x2\x2\x399y\x3\x2");
		sb.Append("\x2\x2\x39A\x39E\x5|?\x2\x39B\x39E\x5\x8A\x46\x2\x39C\x39E\x5");
		sb.Append("\x8CG\x2\x39D\x39A\x3\x2\x2\x2\x39D\x39B\x3\x2\x2\x2\x39D\x39C");
		sb.Append("\x3\x2\x2\x2\x39E{\x3\x2\x2\x2\x39F\x3A2\x5\x82\x42\x2\x3A0");
		sb.Append("\x3A2\x5\x88\x45\x2\x3A1\x39F\x3\x2\x2\x2\x3A1\x3A0\x3\x2\x2");
		sb.Append("\x2\x3A2\x3A7\x3\x2\x2\x2\x3A3\x3A6\x5\x80\x41\x2\x3A4\x3A6");
		sb.Append("\x5\x86\x44\x2\x3A5\x3A3\x3\x2\x2\x2\x3A5\x3A4\x3\x2\x2\x2\x3A6");
		sb.Append("\x3A9\x3\x2\x2\x2\x3A7\x3A5\x3\x2\x2\x2\x3A7\x3A8\x3\x2\x2\x2");
		sb.Append("\x3A8}\x3\x2\x2\x2\x3A9\x3A7\x3\x2\x2\x2\x3AA\x3AC\ah\x2\x2");
		sb.Append("\x3AB\x3AD\x5,\x17\x2\x3AC\x3AB\x3\x2\x2\x2\x3AC\x3AD\x3\x2");
		sb.Append("\x2\x2\x3AD\x3BB\x3\x2\x2\x2\x3AE\x3AF\x5|?\x2\x3AF\x3B3\a\x43");
		sb.Append("\x2\x2\x3B0\x3B2\x5\xE8u\x2\x3B1\x3B0\x3\x2\x2\x2\x3B2\x3B5");
		sb.Append("\x3\x2\x2\x2\x3B3\x3B1\x3\x2\x2\x2\x3B3\x3B4\x3\x2\x2\x2\x3B4");
		sb.Append("\x3B6\x3\x2\x2\x2\x3B5\x3B3\x3\x2\x2\x2\x3B6\x3B8\ah\x2\x2\x3B7");
		sb.Append("\x3B9\x5,\x17\x2\x3B8\x3B7\x3\x2\x2\x2\x3B8\x3B9\x3\x2\x2\x2");
		sb.Append("\x3B9\x3BB\x3\x2\x2\x2\x3BA\x3AA\x3\x2\x2\x2\x3BA\x3AE\x3\x2");
		sb.Append("\x2\x2\x3BB\x7F\x3\x2\x2\x2\x3BC\x3C0\a\x43\x2\x2\x3BD\x3BF");
		sb.Append("\x5\xE8u\x2\x3BE\x3BD\x3\x2\x2\x2\x3BF\x3C2\x3\x2\x2\x2\x3C0");
		sb.Append("\x3BE\x3\x2\x2\x2\x3C0\x3C1\x3\x2\x2\x2\x3C1\x3C3\x3\x2\x2\x2");
		sb.Append("\x3C2\x3C0\x3\x2\x2\x2\x3C3\x3C5\ah\x2\x2\x3C4\x3C6\x5,\x17");
		sb.Append("\x2\x3C5\x3C4\x3\x2\x2\x2\x3C5\x3C6\x3\x2\x2\x2\x3C6\x81\x3");
		sb.Append("\x2\x2\x2\x3C7\x3C9\ah\x2\x2\x3C8\x3CA\x5,\x17\x2\x3C9\x3C8");
		sb.Append("\x3\x2\x2\x2\x3C9\x3CA\x3\x2\x2\x2\x3CA\x83\x3\x2\x2\x2\x3CB");
		sb.Append("\x3CC\x5~@\x2\x3CC\x85\x3\x2\x2\x2\x3CD\x3CE\x5\x80\x41\x2\x3CE");
		sb.Append("\x87\x3\x2\x2\x2\x3CF\x3D0\x5\x82\x42\x2\x3D0\x89\x3\x2\x2\x2");
		sb.Append("\x3D1\x3D2\ah\x2\x2\x3D2\x8B\x3\x2\x2\x2\x3D3\x3D4\x5x=\x2\x3D4");
		sb.Append("\x3D5\x5\"\x12\x2\x3D5\x3DD\x3\x2\x2\x2\x3D6\x3D7\x5|?\x2\x3D7");
		sb.Append("\x3D8\x5\"\x12\x2\x3D8\x3DD\x3\x2\x2\x2\x3D9\x3DA\x5\x8A\x46");
		sb.Append("\x2\x3DA\x3DB\x5\"\x12\x2\x3DB\x3DD\x3\x2\x2\x2\x3DC\x3D3\x3");
		sb.Append("\x2\x2\x2\x3DC\x3D6\x3\x2\x2\x2\x3DC\x3D9\x3\x2\x2\x2\x3DD\x8D");
		sb.Append("\x3\x2\x2\x2\x3DE\x3E0\x5\x90I\x2\x3DF\x3DE\x3\x2\x2\x2\x3E0");
		sb.Append("\x3E3\x3\x2\x2\x2\x3E1\x3DF\x3\x2\x2\x2\x3E1\x3E2\x3\x2\x2\x2");
		sb.Append("\x3E2\x3E4\x3\x2\x2\x2\x3E3\x3E1\x3\x2\x2\x2\x3E4\x3E5\x5\x92");
		sb.Append("J\x2\x3E5\x3E6\x5\xAAV\x2\x3E6\x8F\x3\x2\x2\x2\x3E7\x3F2\x5");
		sb.Append("\xE8u\x2\x3E8\x3F2\a%\x2\x2\x3E9\x3F2\a$\x2\x2\x3EA\x3F2\a#");
		sb.Append("\x2\x2\x3EB\x3F2\a\x3\x2\x2\x3EC\x3F2\a(\x2\x2\x3ED\x3F2\a\x14");
		sb.Append("\x2\x2\x3EE\x3F2\a,\x2\x2\x3EF\x3F2\a \x2\x2\x3F0\x3F2\a)\x2");
		sb.Append("\x2\x3F1\x3E7\x3\x2\x2\x2\x3F1\x3E8\x3\x2\x2\x2\x3F1\x3E9\x3");
		sb.Append("\x2\x2\x2\x3F1\x3EA\x3\x2\x2\x2\x3F1\x3EB\x3\x2\x2\x2\x3F1\x3EC");
		sb.Append("\x3\x2\x2\x2\x3F1\x3ED\x3\x2\x2\x2\x3F1\x3EE\x3\x2\x2\x2\x3F1");
		sb.Append("\x3EF\x3\x2\x2\x2\x3F1\x3F0\x3\x2\x2\x2\x3F2\x91\x3\x2\x2\x2");
		sb.Append("\x3F3\x3F4\x5\x94K\x2\x3F4\x3F6\x5\x96L\x2\x3F5\x3F7\x5\xA4");
		sb.Append("S\x2\x3F6\x3F5\x3\x2\x2\x2\x3F6\x3F7\x3\x2\x2\x2\x3F7\x405\x3");
		sb.Append("\x2\x2\x2\x3F8\x3FC\x5Z.\x2\x3F9\x3FB\x5\xE8u\x2\x3FA\x3F9\x3");
		sb.Append("\x2\x2\x2\x3FB\x3FE\x3\x2\x2\x2\x3FC\x3FA\x3\x2\x2\x2\x3FC\x3FD");
		sb.Append("\x3\x2\x2\x2\x3FD\x3FF\x3\x2\x2\x2\x3FE\x3FC\x3\x2\x2\x2\x3FF");
		sb.Append("\x400\x5\x94K\x2\x400\x402\x5\x96L\x2\x401\x403\x5\xA4S\x2\x402");
		sb.Append("\x401\x3\x2\x2\x2\x402\x403\x3\x2\x2\x2\x403\x405\x3\x2\x2\x2");
		sb.Append("\x404\x3F3\x3\x2\x2\x2\x404\x3F8\x3\x2\x2\x2\x405\x93\x3\x2");
		sb.Append("\x2\x2\x406\x409\x5v<\x2\x407\x409\a\x32\x2\x2\x408\x406\x3");
		sb.Append("\x2\x2\x2\x408\x407\x3\x2\x2\x2\x409\x95\x3\x2\x2\x2\x40A\x40B");
		sb.Append("\ah\x2\x2\x40B\x40D\a;\x2\x2\x40C\x40E\x5\x98M\x2\x40D\x40C");
		sb.Append("\x3\x2\x2\x2\x40D\x40E\x3\x2\x2\x2\x40E\x40F\x3\x2\x2\x2\x40F");
		sb.Append("\x411\a<\x2\x2\x410\x412\x5\"\x12\x2\x411\x410\x3\x2\x2\x2\x411");
		sb.Append("\x412\x3\x2\x2\x2\x412\x97\x3\x2\x2\x2\x413\x414\x5\x9AN\x2");
		sb.Append("\x414\x415\a\x42\x2\x2\x415\x416\x5\xA0Q\x2\x416\x419\x3\x2");
		sb.Append("\x2\x2\x417\x419\x5\xA0Q\x2\x418\x413\x3\x2\x2\x2\x418\x417");
		sb.Append("\x3\x2\x2\x2\x419\x99\x3\x2\x2\x2\x41A\x41F\x5\x9CO\x2\x41B");
		sb.Append("\x41C\a\x42\x2\x2\x41C\x41E\x5\x9CO\x2\x41D\x41B\x3\x2\x2\x2");
		sb.Append("\x41E\x421\x3\x2\x2\x2\x41F\x41D\x3\x2\x2\x2\x41F\x420\x3\x2");
		sb.Append("\x2\x2\x420\x42B\x3\x2\x2\x2\x421\x41F\x3\x2\x2\x2\x422\x427");
		sb.Append("\x5\xA2R\x2\x423\x424\a\x42\x2\x2\x424\x426\x5\x9CO\x2\x425");
		sb.Append("\x423\x3\x2\x2\x2\x426\x429\x3\x2\x2\x2\x427\x425\x3\x2\x2\x2");
		sb.Append("\x427\x428\x3\x2\x2\x2\x428\x42B\x3\x2\x2\x2\x429\x427\x3\x2");
		sb.Append("\x2\x2\x42A\x41A\x3\x2\x2\x2\x42A\x422\x3\x2\x2\x2\x42B\x9B");
		sb.Append("\x3\x2\x2\x2\x42C\x42E\x5\x9EP\x2\x42D\x42C\x3\x2\x2\x2\x42E");
		sb.Append("\x431\x3\x2\x2\x2\x42F\x42D\x3\x2\x2\x2\x42F\x430\x3\x2\x2\x2");
		sb.Append("\x430\x432\x3\x2\x2\x2\x431\x42F\x3\x2\x2\x2\x432\x433\x5v<");
		sb.Append("\x2\x433\x434\x5r:\x2\x434\x9D\x3\x2\x2\x2\x435\x438\x5\xE8");
		sb.Append("u\x2\x436\x438\a\x14\x2\x2\x437\x435\x3\x2\x2\x2\x437\x436\x3");
		sb.Append("\x2\x2\x2\x438\x9F\x3\x2\x2\x2\x439\x43B\x5\x9EP\x2\x43A\x439");
		sb.Append("\x3\x2\x2\x2\x43B\x43E\x3\x2\x2\x2\x43C\x43A\x3\x2\x2\x2\x43C");
		sb.Append("\x43D\x3\x2\x2\x2\x43D\x43F\x3\x2\x2\x2\x43E\x43C\x3\x2\x2\x2");
		sb.Append("\x43F\x443\x5v<\x2\x440\x442\x5\xE8u\x2\x441\x440\x3\x2\x2\x2");
		sb.Append("\x442\x445\x3\x2\x2\x2\x443\x441\x3\x2\x2\x2\x443\x444\x3\x2");
		sb.Append("\x2\x2\x444\x446\x3\x2\x2\x2\x445\x443\x3\x2\x2\x2\x446\x447");
		sb.Append("\aj\x2\x2\x447\x448\x5r:\x2\x448\x44B\x3\x2\x2\x2\x449\x44B");
		sb.Append("\x5\x9CO\x2\x44A\x43C\x3\x2\x2\x2\x44A\x449\x3\x2\x2\x2\x44B");
		sb.Append("\xA1\x3\x2\x2\x2\x44C\x44E\x5\xE8u\x2\x44D\x44C\x3\x2\x2\x2");
		sb.Append("\x44E\x451\x3\x2\x2\x2\x44F\x44D\x3\x2\x2\x2\x44F\x450\x3\x2");
		sb.Append("\x2\x2\x450\x452\x3\x2\x2\x2\x451\x44F\x3\x2\x2\x2\x452\x455");
		sb.Append("\x5v<\x2\x453\x454\ah\x2\x2\x454\x456\a\x43\x2\x2\x455\x453");
		sb.Append("\x3\x2\x2\x2\x455\x456\x3\x2\x2\x2\x456\x457\x3\x2\x2\x2\x457");
		sb.Append("\x458\a-\x2\x2\x458\xA3\x3\x2\x2\x2\x459\x45A\a/\x2\x2\x45A");
		sb.Append("\x45B\x5\xA6T\x2\x45B\xA5\x3\x2\x2\x2\x45C\x461\x5\xA8U\x2\x45D");
		sb.Append("\x45E\a\x42\x2\x2\x45E\x460\x5\xA8U\x2\x45F\x45D\x3\x2\x2\x2");
		sb.Append("\x460\x463\x3\x2\x2\x2\x461\x45F\x3\x2\x2\x2\x461\x462\x3\x2");
		sb.Append("\x2\x2\x462\xA7\x3\x2\x2\x2\x463\x461\x3\x2\x2\x2\x464\x467");
		sb.Append("\x5\x12\n\x2\x465\x467\x5\x1E\x10\x2\x466\x464\x3\x2\x2\x2\x466");
		sb.Append("\x465\x3\x2\x2\x2\x467\xA9\x3\x2\x2\x2\x468\x46B\x5\xFE\x80");
		sb.Append("\x2\x469\x46B\a\x41\x2\x2\x46A\x468\x3\x2\x2\x2\x46A\x469\x3");
		sb.Append("\x2\x2\x2\x46B\xAB\x3\x2\x2\x2\x46C\x46D\x5\xFE\x80\x2\x46D");
		sb.Append("\xAD\x3\x2\x2\x2\x46E\x46F\a(\x2\x2\x46F\x470\x5\xFE\x80\x2");
		sb.Append("\x470\xAF\x3\x2\x2\x2\x471\x473\x5\xB2Z\x2\x472\x471\x3\x2\x2");
		sb.Append("\x2\x473\x476\x3\x2\x2\x2\x474\x472\x3\x2\x2\x2\x474\x475\x3");
		sb.Append("\x2\x2\x2\x475\x477\x3\x2\x2\x2\x476\x474\x3\x2\x2\x2\x477\x479");
		sb.Append("\x5\xB4[\x2\x478\x47A\x5\xA4S\x2\x479\x478\x3\x2\x2\x2\x479");
		sb.Append("\x47A\x3\x2\x2\x2\x47A\x47B\x3\x2\x2\x2\x47B\x47C\x5\xB8]\x2");
		sb.Append("\x47C\xB1\x3\x2\x2\x2\x47D\x482\x5\xE8u\x2\x47E\x482\a%\x2\x2");
		sb.Append("\x47F\x482\a$\x2\x2\x480\x482\a#\x2\x2\x481\x47D\x3\x2\x2\x2");
		sb.Append("\x481\x47E\x3\x2\x2\x2\x481\x47F\x3\x2\x2\x2\x481\x480\x3\x2");
		sb.Append("\x2\x2\x482\xB3\x3\x2\x2\x2\x483\x485\x5Z.\x2\x484\x483\x3\x2");
		sb.Append("\x2\x2\x484\x485\x3\x2\x2\x2\x485\x486\x3\x2\x2\x2\x486\x487");
		sb.Append("\x5\xB6\\\x2\x487\x489\a;\x2\x2\x488\x48A\x5\x98M\x2\x489\x488");
		sb.Append("\x3\x2\x2\x2\x489\x48A\x3\x2\x2\x2\x48A\x48B\x3\x2\x2\x2\x48B");
		sb.Append("\x48C\a<\x2\x2\x48C\xB5\x3\x2\x2\x2\x48D\x48E\ah\x2\x2\x48E");
		sb.Append("\xB7\x3\x2\x2\x2\x48F\x491\a=\x2\x2\x490\x492\x5\xBA^\x2\x491");
		sb.Append("\x490\x3\x2\x2\x2\x491\x492\x3\x2\x2\x2\x492\x494\x3\x2\x2\x2");
		sb.Append("\x493\x495\x5\x100\x81\x2\x494\x493\x3\x2\x2\x2\x494\x495\x3");
		sb.Append("\x2\x2\x2\x495\x496\x3\x2\x2\x2\x496\x497\a>\x2\x2\x497\xB9");
		sb.Append("\x3\x2\x2\x2\x498\x49A\x5,\x17\x2\x499\x498\x3\x2\x2\x2\x499");
		sb.Append("\x49A\x3\x2\x2\x2\x49A\x49B\x3\x2\x2\x2\x49B\x49C\a-\x2\x2\x49C");
		sb.Append("\x49E\a;\x2\x2\x49D\x49F\x5\x190\xC9\x2\x49E\x49D\x3\x2\x2\x2");
		sb.Append("\x49E\x49F\x3\x2\x2\x2\x49F\x4A0\x3\x2\x2\x2\x4A0\x4A1\a<\x2");
		sb.Append("\x2\x4A1\x4C7\a\x41\x2\x2\x4A2\x4A4\x5,\x17\x2\x4A3\x4A2\x3");
		sb.Append("\x2\x2\x2\x4A3\x4A4\x3\x2\x2\x2\x4A4\x4A5\x3\x2\x2\x2\x4A5\x4A6");
		sb.Append("\a*\x2\x2\x4A6\x4A8\a;\x2\x2\x4A7\x4A9\x5\x190\xC9\x2\x4A8\x4A7");
		sb.Append("\x3\x2\x2\x2\x4A8\x4A9\x3\x2\x2\x2\x4A9\x4AA\x3\x2\x2\x2\x4AA");
		sb.Append("\x4AB\a<\x2\x2\x4AB\x4C7\a\x41\x2\x2\x4AC\x4AD\x5<\x1F\x2\x4AD");
		sb.Append("\x4AF\a\x43\x2\x2\x4AE\x4B0\x5,\x17\x2\x4AF\x4AE\x3\x2\x2\x2");
		sb.Append("\x4AF\x4B0\x3\x2\x2\x2\x4B0\x4B1\x3\x2\x2\x2\x4B1\x4B2\a*\x2");
		sb.Append("\x2\x4B2\x4B4\a;\x2\x2\x4B3\x4B5\x5\x190\xC9\x2\x4B4\x4B3\x3");
		sb.Append("\x2\x2\x2\x4B4\x4B5\x3\x2\x2\x2\x4B5\x4B6\x3\x2\x2\x2\x4B6\x4B7");
		sb.Append("\a<\x2\x2\x4B7\x4B8\a\x41\x2\x2\x4B8\x4C7\x3\x2\x2\x2\x4B9\x4BA");
		sb.Append("\x5\x162\xB2\x2\x4BA\x4BC\a\x43\x2\x2\x4BB\x4BD\x5,\x17\x2\x4BC");
		sb.Append("\x4BB\x3\x2\x2\x2\x4BC\x4BD\x3\x2\x2\x2\x4BD\x4BE\x3\x2\x2\x2");
		sb.Append("\x4BE\x4BF\a*\x2\x2\x4BF\x4C1\a;\x2\x2\x4C0\x4C2\x5\x190\xC9");
		sb.Append("\x2\x4C1\x4C0\x3\x2\x2\x2\x4C1\x4C2\x3\x2\x2\x2\x4C2\x4C3\x3");
		sb.Append("\x2\x2\x2\x4C3\x4C4\a<\x2\x2\x4C4\x4C5\a\x41\x2\x2\x4C5\x4C7");
		sb.Append("\x3\x2\x2\x2\x4C6\x499\x3\x2\x2\x2\x4C6\x4A3\x3\x2\x2\x2\x4C6");
		sb.Append("\x4AC\x3\x2\x2\x2\x4C6\x4B9\x3\x2\x2\x2\x4C7\xBB\x3\x2\x2\x2");
		sb.Append("\x4C8\x4CA\x5X-\x2\x4C9\x4C8\x3\x2\x2\x2\x4CA\x4CD\x3\x2\x2");
		sb.Append("\x2\x4CB\x4C9\x3\x2\x2\x2\x4CB\x4CC\x3\x2\x2\x2\x4CC\x4CE\x3");
		sb.Append("\x2\x2\x2\x4CD\x4CB\x3\x2\x2\x2\x4CE\x4CF\a\x12\x2\x2\x4CF\x4D1");
		sb.Append("\ah\x2\x2\x4D0\x4D2\x5`\x31\x2\x4D1\x4D0\x3\x2\x2\x2\x4D1\x4D2");
		sb.Append("\x3\x2\x2\x2\x4D2\x4D3\x3\x2\x2\x2\x4D3\x4D4\x5\xBE`\x2\x4D4");
		sb.Append("\xBD\x3\x2\x2\x2\x4D5\x4D7\a=\x2\x2\x4D6\x4D8\x5\xC0\x61\x2");
		sb.Append("\x4D7\x4D6\x3\x2\x2\x2\x4D7\x4D8\x3\x2\x2\x2\x4D8\x4DA\x3\x2");
		sb.Append("\x2\x2\x4D9\x4DB\a\x42\x2\x2\x4DA\x4D9\x3\x2\x2\x2\x4DA\x4DB");
		sb.Append("\x3\x2\x2\x2\x4DB\x4DD\x3\x2\x2\x2\x4DC\x4DE\x5\xC6\x64\x2\x4DD");
		sb.Append("\x4DC\x3\x2\x2\x2\x4DD\x4DE\x3\x2\x2\x2\x4DE\x4DF\x3\x2\x2\x2");
		sb.Append("\x4DF\x4E0\a>\x2\x2\x4E0\xBF\x3\x2\x2\x2\x4E1\x4E6\x5\xC2\x62");
		sb.Append("\x2\x4E2\x4E3\a\x42\x2\x2\x4E3\x4E5\x5\xC2\x62\x2\x4E4\x4E2");
		sb.Append("\x3\x2\x2\x2\x4E5\x4E8\x3\x2\x2\x2\x4E6\x4E4\x3\x2\x2\x2\x4E6");
		sb.Append("\x4E7\x3\x2\x2\x2\x4E7\xC1\x3\x2\x2\x2\x4E8\x4E6\x3\x2\x2\x2");
		sb.Append("\x4E9\x4EB\x5\xC4\x63\x2\x4EA\x4E9\x3\x2\x2\x2\x4EB\x4EE\x3");
		sb.Append("\x2\x2\x2\x4EC\x4EA\x3\x2\x2\x2\x4EC\x4ED\x3\x2\x2\x2\x4ED\x4EF");
		sb.Append("\x3\x2\x2\x2\x4EE\x4EC\x3\x2\x2\x2\x4EF\x4F5\ah\x2\x2\x4F0\x4F2");
		sb.Append("\a;\x2\x2\x4F1\x4F3\x5\x190\xC9\x2\x4F2\x4F1\x3\x2\x2\x2\x4F2");
		sb.Append("\x4F3\x3\x2\x2\x2\x4F3\x4F4\x3\x2\x2\x2\x4F4\x4F6\a<\x2\x2\x4F5");
		sb.Append("\x4F0\x3\x2\x2\x2\x4F5\x4F6\x3\x2\x2\x2\x4F6\x4F8\x3\x2\x2\x2");
		sb.Append("\x4F7\x4F9\x5\x64\x33\x2\x4F8\x4F7\x3\x2\x2\x2\x4F8\x4F9\x3");
		sb.Append("\x2\x2\x2\x4F9\xC3\x3\x2\x2\x2\x4FA\x4FB\x5\xE8u\x2\x4FB\xC5");
		sb.Append("\x3\x2\x2\x2\x4FC\x500\a\x41\x2\x2\x4FD\x4FF\x5\x66\x34\x2\x4FE");
		sb.Append("\x4FD\x3\x2\x2\x2\x4FF\x502\x3\x2\x2\x2\x500\x4FE\x3\x2\x2\x2");
		sb.Append("\x500\x501\x3\x2\x2\x2\x501\xC7\x3\x2\x2\x2\x502\x500\x3\x2");
		sb.Append("\x2\x2\x503\x506\x5\xCA\x66\x2\x504\x506\x5\xDCo\x2\x505\x503");
		sb.Append("\x3\x2\x2\x2\x505\x504\x3\x2\x2\x2\x506\xC9\x3\x2\x2\x2\x507");
		sb.Append("\x509\x5\xCCg\x2\x508\x507\x3\x2\x2\x2\x509\x50C\x3\x2\x2\x2");
		sb.Append("\x50A\x508\x3\x2\x2\x2\x50A\x50B\x3\x2\x2\x2\x50B\x50D\x3\x2");
		sb.Append("\x2\x2\x50C\x50A\x3\x2\x2\x2\x50D\x50E\a\x1E\x2\x2\x50E\x510");
		sb.Append("\ah\x2\x2\x50F\x511\x5Z.\x2\x510\x50F\x3\x2\x2\x2\x510\x511");
		sb.Append("\x3\x2\x2\x2\x511\x513\x3\x2\x2\x2\x512\x514\x5\xCEh\x2\x513");
		sb.Append("\x512\x3\x2\x2\x2\x513\x514\x3\x2\x2\x2\x514\x515\x3\x2\x2\x2");
		sb.Append("\x515\x516\x5\xD0i\x2\x516\xCB\x3\x2\x2\x2\x517\x51F\x5\xE8");
		sb.Append("u\x2\x518\x51F\a%\x2\x2\x519\x51F\a$\x2\x2\x51A\x51F\a#\x2\x2");
		sb.Append("\x51B\x51F\a\x3\x2\x2\x51C\x51F\a(\x2\x2\x51D\x51F\a)\x2\x2");
		sb.Append("\x51E\x517\x3\x2\x2\x2\x51E\x518\x3\x2\x2\x2\x51E\x519\x3\x2");
		sb.Append("\x2\x2\x51E\x51A\x3\x2\x2\x2\x51E\x51B\x3\x2\x2\x2\x51E\x51C");
		sb.Append("\x3\x2\x2\x2\x51E\x51D\x3\x2\x2\x2\x51F\xCD\x3\x2\x2\x2\x520");
		sb.Append("\x521\a\x13\x2\x2\x521\x522\x5\x62\x32\x2\x522\xCF\x3\x2\x2");
		sb.Append("\x2\x523\x527\a=\x2\x2\x524\x526\x5\xD2j\x2\x525\x524\x3\x2");
		sb.Append("\x2\x2\x526\x529\x3\x2\x2\x2\x527\x525\x3\x2\x2\x2\x527\x528");
		sb.Append("\x3\x2\x2\x2\x528\x52A\x3\x2\x2\x2\x529\x527\x3\x2\x2\x2\x52A");
		sb.Append("\x52B\a>\x2\x2\x52B\xD1\x3\x2\x2\x2\x52C\x532\x5\xD4k\x2\x52D");
		sb.Append("\x532\x5\xD8m\x2\x52E\x532\x5T+\x2\x52F\x532\x5\xC8\x65\x2\x530");
		sb.Append("\x532\a\x41\x2\x2\x531\x52C\x3\x2\x2\x2\x531\x52D\x3\x2\x2\x2");
		sb.Append("\x531\x52E\x3\x2\x2\x2\x531\x52F\x3\x2\x2\x2\x531\x530\x3\x2");
		sb.Append("\x2\x2\x532\xD3\x3\x2\x2\x2\x533\x535\x5\xD6l\x2\x534\x533\x3");
		sb.Append("\x2\x2\x2\x535\x538\x3\x2\x2\x2\x536\x534\x3\x2\x2\x2\x536\x537");
		sb.Append("\x3\x2\x2\x2\x537\x539\x3\x2\x2\x2\x538\x536\x3\x2\x2\x2\x539");
		sb.Append("\x53A\x5v<\x2\x53A\x53B\x5n\x38\x2\x53B\x53C\a\x41\x2\x2\x53C");
		sb.Append("\xD5\x3\x2\x2\x2\x53D\x542\x5\xE8u\x2\x53E\x542\a%\x2\x2\x53F");
		sb.Append("\x542\a(\x2\x2\x540\x542\a\x14\x2\x2\x541\x53D\x3\x2\x2\x2\x541");
		sb.Append("\x53E\x3\x2\x2\x2\x541\x53F\x3\x2\x2\x2\x541\x540\x3\x2\x2\x2");
		sb.Append("\x542\xD7\x3\x2\x2\x2\x543\x545\x5\xDAn\x2\x544\x543\x3\x2\x2");
		sb.Append("\x2\x545\x548\x3\x2\x2\x2\x546\x544\x3\x2\x2\x2\x546\x547\x3");
		sb.Append("\x2\x2\x2\x547\x549\x3\x2\x2\x2\x548\x546\x3\x2\x2\x2\x549\x54A");
		sb.Append("\x5\x92J\x2\x54A\x54B\x5\xAAV\x2\x54B\xD9\x3\x2\x2\x2\x54C\x553");
		sb.Append("\x5\xE8u\x2\x54D\x553\a%\x2\x2\x54E\x553\a\x3\x2\x2\x54F\x553");
		sb.Append("\a\xE\x2\x2\x550\x553\a(\x2\x2\x551\x553\a)\x2\x2\x552\x54C");
		sb.Append("\x3\x2\x2\x2\x552\x54D\x3\x2\x2\x2\x552\x54E\x3\x2\x2\x2\x552");
		sb.Append("\x54F\x3\x2\x2\x2\x552\x550\x3\x2\x2\x2\x552\x551\x3\x2\x2\x2");
		sb.Append("\x553\xDB\x3\x2\x2\x2\x554\x556\x5\xCCg\x2\x555\x554\x3\x2\x2");
		sb.Append("\x2\x556\x559\x3\x2\x2\x2\x557\x555\x3\x2\x2\x2\x557\x558\x3");
		sb.Append("\x2\x2\x2\x558\x55A\x3\x2\x2\x2\x559\x557\x3\x2\x2\x2\x55A\x55B");
		sb.Append("\ai\x2\x2\x55B\x55C\a\x1E\x2\x2\x55C\x55D\ah\x2\x2\x55D\x55E");
		sb.Append("\x5\xDEp\x2\x55E\xDD\x3\x2\x2\x2\x55F\x563\a=\x2\x2\x560\x562");
		sb.Append("\x5\xE0q\x2\x561\x560\x3\x2\x2\x2\x562\x565\x3\x2\x2\x2\x563");
		sb.Append("\x561\x3\x2\x2\x2\x563\x564\x3\x2\x2\x2\x564\x566\x3\x2\x2\x2");
		sb.Append("\x565\x563\x3\x2\x2\x2\x566\x567\a>\x2\x2\x567\xDF\x3\x2\x2");
		sb.Append("\x2\x568\x56E\x5\xE2r\x2\x569\x56E\x5\xD4k\x2\x56A\x56E\x5T");
		sb.Append("+\x2\x56B\x56E\x5\xC8\x65\x2\x56C\x56E\a\x41\x2\x2\x56D\x568");
		sb.Append("\x3\x2\x2\x2\x56D\x569\x3\x2\x2\x2\x56D\x56A\x3\x2\x2\x2\x56D");
		sb.Append("\x56B\x3\x2\x2\x2\x56D\x56C\x3\x2\x2\x2\x56E\xE1\x3\x2\x2\x2");
		sb.Append("\x56F\x571\x5\xE4s\x2\x570\x56F\x3\x2\x2\x2\x571\x574\x3\x2");
		sb.Append("\x2\x2\x572\x570\x3\x2\x2\x2\x572\x573\x3\x2\x2\x2\x573\x575");
		sb.Append("\x3\x2\x2\x2\x574\x572\x3\x2\x2\x2\x575\x576\x5v<\x2\x576\x577");
		sb.Append("\ah\x2\x2\x577\x578\a;\x2\x2\x578\x57A\a<\x2\x2\x579\x57B\x5");
		sb.Append("\"\x12\x2\x57A\x579\x3\x2\x2\x2\x57A\x57B\x3\x2\x2\x2\x57B\x57D");
		sb.Append("\x3\x2\x2\x2\x57C\x57E\x5\xE6t\x2\x57D\x57C\x3\x2\x2\x2\x57D");
		sb.Append("\x57E\x3\x2\x2\x2\x57E\x57F\x3\x2\x2\x2\x57F\x580\a\x41\x2\x2");
		sb.Append("\x580\xE3\x3\x2\x2\x2\x581\x585\x5\xE8u\x2\x582\x585\a%\x2\x2");
		sb.Append("\x583\x585\a\x3\x2\x2\x584\x581\x3\x2\x2\x2\x584\x582\x3\x2");
		sb.Append("\x2\x2\x584\x583\x3\x2\x2\x2\x585\xE5\x3\x2\x2\x2\x586\x587");
		sb.Append("\a\xE\x2\x2\x587\x588\x5\xF0y\x2\x588\xE7\x3\x2\x2\x2\x589\x58D");
		sb.Append("\x5\xEAv\x2\x58A\x58D\x5\xF6|\x2\x58B\x58D\x5\xF8}\x2\x58C\x589");
		sb.Append("\x3\x2\x2\x2\x58C\x58A\x3\x2\x2\x2\x58C\x58B\x3\x2\x2\x2\x58D");
		sb.Append("\xE9\x3\x2\x2\x2\x58E\x58F\ai\x2\x2\x58F\x590\x5\x38\x1D\x2");
		sb.Append("\x590\x592\a;\x2\x2\x591\x593\x5\xECw\x2\x592\x591\x3\x2\x2");
		sb.Append("\x2\x592\x593\x3\x2\x2\x2\x593\x594\x3\x2\x2\x2\x594\x595\a");
		sb.Append("<\x2\x2\x595\xEB\x3\x2\x2\x2\x596\x59B\x5\xEEx\x2\x597\x598");
		sb.Append("\a\x42\x2\x2\x598\x59A\x5\xEEx\x2\x599\x597\x3\x2\x2\x2\x59A");
		sb.Append("\x59D\x3\x2\x2\x2\x59B\x599\x3\x2\x2\x2\x59B\x59C\x3\x2\x2\x2");
		sb.Append("\x59C\xED\x3\x2\x2\x2\x59D\x59B\x3\x2\x2\x2\x59E\x59F\ah\x2");
		sb.Append("\x2\x59F\x5A0\a\x44\x2\x2\x5A0\x5A1\x5\xF0y\x2\x5A1\xEF\x3\x2");
		sb.Append("\x2\x2\x5A2\x5A6\x5\x1B2\xDA\x2\x5A3\x5A6\x5\xF2z\x2\x5A4\x5A6");
		sb.Append("\x5\xE8u\x2\x5A5\x5A2\x3\x2\x2\x2\x5A5\x5A3\x3\x2\x2\x2\x5A5");
		sb.Append("\x5A4\x3\x2\x2\x2\x5A6\xF1\x3\x2\x2\x2\x5A7\x5A9\a=\x2\x2\x5A8");
		sb.Append("\x5AA\x5\xF4{\x2\x5A9\x5A8\x3\x2\x2\x2\x5A9\x5AA\x3\x2\x2\x2");
		sb.Append("\x5AA\x5AC\x3\x2\x2\x2\x5AB\x5AD\a\x42\x2\x2\x5AC\x5AB\x3\x2");
		sb.Append("\x2\x2\x5AC\x5AD\x3\x2\x2\x2\x5AD\x5AE\x3\x2\x2\x2\x5AE\x5AF");
		sb.Append("\a>\x2\x2\x5AF\xF3\x3\x2\x2\x2\x5B0\x5B5\x5\xF0y\x2\x5B1\x5B2");
		sb.Append("\a\x42\x2\x2\x5B2\x5B4\x5\xF0y\x2\x5B3\x5B1\x3\x2\x2\x2\x5B4");
		sb.Append("\x5B7\x3\x2\x2\x2\x5B5\x5B3\x3\x2\x2\x2\x5B5\x5B6\x3\x2\x2\x2");
		sb.Append("\x5B6\xF5\x3\x2\x2\x2\x5B7\x5B5\x3\x2\x2\x2\x5B8\x5B9\ai\x2");
		sb.Append("\x2\x5B9\x5BA\x5\x38\x1D\x2\x5BA\xF7\x3\x2\x2\x2\x5BB\x5BC\a");
		sb.Append("i\x2\x2\x5BC\x5BD\x5\x38\x1D\x2\x5BD\x5BE\a;\x2\x2\x5BE\x5BF");
		sb.Append("\x5\xF0y\x2\x5BF\x5C0\a<\x2\x2\x5C0\xF9\x3\x2\x2\x2\x5C1\x5C3");
		sb.Append("\a=\x2\x2\x5C2\x5C4\x5\xFC\x7F\x2\x5C3\x5C2\x3\x2\x2\x2\x5C3");
		sb.Append("\x5C4\x3\x2\x2\x2\x5C4\x5C6\x3\x2\x2\x2\x5C5\x5C7\a\x42\x2\x2");
		sb.Append("\x5C6\x5C5\x3\x2\x2\x2\x5C6\x5C7\x3\x2\x2\x2\x5C7\x5C8\x3\x2");
		sb.Append("\x2\x2\x5C8\x5C9\a>\x2\x2\x5C9\xFB\x3\x2\x2\x2\x5CA\x5CF\x5");
		sb.Append("t;\x2\x5CB\x5CC\a\x42\x2\x2\x5CC\x5CE\x5t;\x2\x5CD\x5CB\x3\x2");
		sb.Append("\x2\x2\x5CE\x5D1\x3\x2\x2\x2\x5CF\x5CD\x3\x2\x2\x2\x5CF\x5D0");
		sb.Append("\x3\x2\x2\x2\x5D0\xFD\x3\x2\x2\x2\x5D1\x5CF\x3\x2\x2\x2\x5D2");
		sb.Append("\x5D4\a=\x2\x2\x5D3\x5D5\x5\x100\x81\x2\x5D4\x5D3\x3\x2\x2\x2");
		sb.Append("\x5D4\x5D5\x3\x2\x2\x2\x5D5\x5D6\x3\x2\x2\x2\x5D6\x5D7\a>\x2");
		sb.Append("\x2\x5D7\xFF\x3\x2\x2\x2\x5D8\x5DC\x5\x102\x82\x2\x5D9\x5DB");
		sb.Append("\x5\x102\x82\x2\x5DA\x5D9\x3\x2\x2\x2\x5DB\x5DE\x3\x2\x2\x2");
		sb.Append("\x5DC\x5DA\x3\x2\x2\x2\x5DC\x5DD\x3\x2\x2\x2\x5DD\x101\x3\x2");
		sb.Append("\x2\x2\x5DE\x5DC\x3\x2\x2\x2\x5DF\x5E3\x5\x104\x83\x2\x5E0\x5E3");
		sb.Append("\x5T+\x2\x5E1\x5E3\x5\x108\x85\x2\x5E2\x5DF\x3\x2\x2\x2\x5E2");
		sb.Append("\x5E0\x3\x2\x2\x2\x5E2\x5E1\x3\x2\x2\x2\x5E3\x103\x3\x2\x2\x2");
		sb.Append("\x5E4\x5E5\x5\x106\x84\x2\x5E5\x5E6\a\x41\x2\x2\x5E6\x105\x3");
		sb.Append("\x2\x2\x2\x5E7\x5E9\x5\x9EP\x2\x5E8\x5E7\x3\x2\x2\x2\x5E9\x5EC");
		sb.Append("\x3\x2\x2\x2\x5EA\x5E8\x3\x2\x2\x2\x5EA\x5EB\x3\x2\x2\x2\x5EB");
		sb.Append("\x5ED\x3\x2\x2\x2\x5EC\x5EA\x3\x2\x2\x2\x5ED\x5EE\x5v<\x2\x5EE");
		sb.Append("\x5EF\x5n\x38\x2\x5EF\x107\x3\x2\x2\x2\x5F0\x5F7\x5\x10C\x87");
		sb.Append("\x2\x5F1\x5F7\x5\x110\x89\x2\x5F2\x5F7\x5\x118\x8D\x2\x5F3\x5F7");
		sb.Append("\x5\x11A\x8E\x2\x5F4\x5F7\x5\x12C\x97\x2\x5F5\x5F7\x5\x132\x9A");
		sb.Append("\x2\x5F6\x5F0\x3\x2\x2\x2\x5F6\x5F1\x3\x2\x2\x2\x5F6\x5F2\x3");
		sb.Append("\x2\x2\x2\x5F6\x5F3\x3\x2\x2\x2\x5F6\x5F4\x3\x2\x2\x2\x5F6\x5F5");
		sb.Append("\x3\x2\x2\x2\x5F7\x109\x3\x2\x2\x2\x5F8\x5FE\x5\x10C\x87\x2");
		sb.Append("\x5F9\x5FE\x5\x112\x8A\x2\x5FA\x5FE\x5\x11C\x8F\x2\x5FB\x5FE");
		sb.Append("\x5\x12E\x98\x2\x5FC\x5FE\x5\x134\x9B\x2\x5FD\x5F8\x3\x2\x2");
		sb.Append("\x2\x5FD\x5F9\x3\x2\x2\x2\x5FD\x5FA\x3\x2\x2\x2\x5FD\x5FB\x3");
		sb.Append("\x2\x2\x2\x5FD\x5FC\x3\x2\x2\x2\x5FE\x10B\x3\x2\x2\x2\x5FF\x60C");
		sb.Append("\x5\xFE\x80\x2\x600\x60C\x5\x10E\x88\x2\x601\x60C\x5\x114\x8B");
		sb.Append("\x2\x602\x60C\x5\x11E\x90\x2\x603\x60C\x5\x120\x91\x2\x604\x60C");
		sb.Append("\x5\x130\x99\x2\x605\x60C\x5\x144\xA3\x2\x606\x60C\x5\x146\xA4");
		sb.Append("\x2\x607\x60C\x5\x148\xA5\x2\x608\x60C\x5\x14C\xA7\x2\x609\x60C");
		sb.Append("\x5\x14A\xA6\x2\x60A\x60C\x5\x14E\xA8\x2\x60B\x5FF\x3\x2\x2");
		sb.Append("\x2\x60B\x600\x3\x2\x2\x2\x60B\x601\x3\x2\x2\x2\x60B\x602\x3");
		sb.Append("\x2\x2\x2\x60B\x603\x3\x2\x2\x2\x60B\x604\x3\x2\x2\x2\x60B\x605");
		sb.Append("\x3\x2\x2\x2\x60B\x606\x3\x2\x2\x2\x60B\x607\x3\x2\x2\x2\x60B");
		sb.Append("\x608\x3\x2\x2\x2\x60B\x609\x3\x2\x2\x2\x60B\x60A\x3\x2\x2\x2");
		sb.Append("\x60C\x10D\x3\x2\x2\x2\x60D\x60E\a\x41\x2\x2\x60E\x10F\x3\x2");
		sb.Append("\x2\x2\x60F\x610\ah\x2\x2\x610\x611\aJ\x2\x2\x611\x612\x5\x108");
		sb.Append("\x85\x2\x612\x111\x3\x2\x2\x2\x613\x614\ah\x2\x2\x614\x615\a");
		sb.Append("J\x2\x2\x615\x616\x5\x10A\x86\x2\x616\x113\x3\x2\x2\x2\x617");
		sb.Append("\x618\x5\x116\x8C\x2\x618\x619\a\x41\x2\x2\x619\x115\x3\x2\x2");
		sb.Append("\x2\x61A\x622\x5\x1AC\xD7\x2\x61B\x622\x5\x1CA\xE6\x2\x61C\x622");
		sb.Append("\x5\x1CC\xE7\x2\x61D\x622\x5\x1D2\xEA\x2\x61E\x622\x5\x1D6\xEC");
		sb.Append("\x2\x61F\x622\x5\x18A\xC6\x2\x620\x622\x5\x176\xBC\x2\x621\x61A");
		sb.Append("\x3\x2\x2\x2\x621\x61B\x3\x2\x2\x2\x621\x61C\x3\x2\x2\x2\x621");
		sb.Append("\x61D\x3\x2\x2\x2\x621\x61E\x3\x2\x2\x2\x621\x61F\x3\x2\x2\x2");
		sb.Append("\x621\x620\x3\x2\x2\x2\x622\x117\x3\x2\x2\x2\x623\x624\a\x18");
		sb.Append("\x2\x2\x624\x625\a;\x2\x2\x625\x626\x5\x1A0\xD1\x2\x626\x627");
		sb.Append("\a<\x2\x2\x627\x628\x5\x108\x85\x2\x628\x119\x3\x2\x2\x2\x629");
		sb.Append("\x62A\a\x18\x2\x2\x62A\x62B\a;\x2\x2\x62B\x62C\x5\x1A0\xD1\x2");
		sb.Append("\x62C\x62D\a<\x2\x2\x62D\x62E\x5\x10A\x86\x2\x62E\x62F\a\x11");
		sb.Append("\x2\x2\x62F\x630\x5\x108\x85\x2\x630\x11B\x3\x2\x2\x2\x631\x632");
		sb.Append("\a\x18\x2\x2\x632\x633\a;\x2\x2\x633\x634\x5\x1A0\xD1\x2\x634");
		sb.Append("\x635\a<\x2\x2\x635\x636\x5\x10A\x86\x2\x636\x637\a\x11\x2\x2");
		sb.Append("\x637\x638\x5\x10A\x86\x2\x638\x11D\x3\x2\x2\x2\x639\x63A\a");
		sb.Append("\x4\x2\x2\x63A\x63B\x5\x1A0\xD1\x2\x63B\x63C\a\x41\x2\x2\x63C");
		sb.Append("\x644\x3\x2\x2\x2\x63D\x63E\a\x4\x2\x2\x63E\x63F\x5\x1A0\xD1");
		sb.Append("\x2\x63F\x640\aJ\x2\x2\x640\x641\x5\x1A0\xD1\x2\x641\x642\a");
		sb.Append("\x41\x2\x2\x642\x644\x3\x2\x2\x2\x643\x639\x3\x2\x2\x2\x643");
		sb.Append("\x63D\x3\x2\x2\x2\x644\x11F\x3\x2\x2\x2\x645\x646\a+\x2\x2\x646");
		sb.Append("\x647\a;\x2\x2\x647\x648\x5\x1A0\xD1\x2\x648\x649\a<\x2\x2\x649");
		sb.Append("\x64A\x5\x122\x92\x2\x64A\x121\x3\x2\x2\x2\x64B\x64F\a=\x2\x2");
		sb.Append("\x64C\x64E\x5\x124\x93\x2\x64D\x64C\x3\x2\x2\x2\x64E\x651\x3");
		sb.Append("\x2\x2\x2\x64F\x64D\x3\x2\x2\x2\x64F\x650\x3\x2\x2\x2\x650\x655");
		sb.Append("\x3\x2\x2\x2\x651\x64F\x3\x2\x2\x2\x652\x654\x5\x128\x95\x2");
		sb.Append("\x653\x652\x3\x2\x2\x2\x654\x657\x3\x2\x2\x2\x655\x653\x3\x2");
		sb.Append("\x2\x2\x655\x656\x3\x2\x2\x2\x656\x658\x3\x2\x2\x2\x657\x655");
		sb.Append("\x3\x2\x2\x2\x658\x659\a>\x2\x2\x659\x123\x3\x2\x2\x2\x65A\x65B");
		sb.Append("\x5\x126\x94\x2\x65B\x65C\x5\x100\x81\x2\x65C\x125\x3\x2\x2");
		sb.Append("\x2\x65D\x661\x5\x128\x95\x2\x65E\x660\x5\x128\x95\x2\x65F\x65E");
		sb.Append("\x3\x2\x2\x2\x660\x663\x3\x2\x2\x2\x661\x65F\x3\x2\x2\x2\x661");
		sb.Append("\x662\x3\x2\x2\x2\x662\x127\x3\x2\x2\x2\x663\x661\x3\x2\x2\x2");
		sb.Append("\x664\x665\a\b\x2\x2\x665\x666\x5\x19E\xD0\x2\x666\x667\aJ\x2");
		sb.Append("\x2\x667\x66F\x3\x2\x2\x2\x668\x669\a\b\x2\x2\x669\x66A\x5\x12A");
		sb.Append("\x96\x2\x66A\x66B\aJ\x2\x2\x66B\x66F\x3\x2\x2\x2\x66C\x66D\a");
		sb.Append("\xE\x2\x2\x66D\x66F\aJ\x2\x2\x66E\x664\x3\x2\x2\x2\x66E\x668");
		sb.Append("\x3\x2\x2\x2\x66E\x66C\x3\x2\x2\x2\x66F\x129\x3\x2\x2\x2\x670");
		sb.Append("\x671\ah\x2\x2\x671\x12B\x3\x2\x2\x2\x672\x673\a\x34\x2\x2\x673");
		sb.Append("\x674\a;\x2\x2\x674\x675\x5\x1A0\xD1\x2\x675\x676\a<\x2\x2\x676");
		sb.Append("\x677\x5\x108\x85\x2\x677\x12D\x3\x2\x2\x2\x678\x679\a\x34\x2");
		sb.Append("\x2\x679\x67A\a;\x2\x2\x67A\x67B\x5\x1A0\xD1\x2\x67B\x67C\a");
		sb.Append("<\x2\x2\x67C\x67D\x5\x10A\x86\x2\x67D\x12F\x3\x2\x2\x2\x67E");
		sb.Append("\x67F\a\xF\x2\x2\x67F\x680\x5\x108\x85\x2\x680\x681\a\x34\x2");
		sb.Append("\x2\x681\x682\a;\x2\x2\x682\x683\x5\x1A0\xD1\x2\x683\x684\a");
		sb.Append("<\x2\x2\x684\x685\a\x41\x2\x2\x685\x131\x3\x2\x2\x2\x686\x689");
		sb.Append("\x5\x136\x9C\x2\x687\x689\x5\x140\xA1\x2\x688\x686\x3\x2\x2");
		sb.Append("\x2\x688\x687\x3\x2\x2\x2\x689\x133\x3\x2\x2\x2\x68A\x68D\x5");
		sb.Append("\x138\x9D\x2\x68B\x68D\x5\x142\xA2\x2\x68C\x68A\x3\x2\x2\x2");
		sb.Append("\x68C\x68B\x3\x2\x2\x2\x68D\x135\x3\x2\x2\x2\x68E\x68F\a\x17");
		sb.Append("\x2\x2\x68F\x691\a;\x2\x2\x690\x692\x5\x13A\x9E\x2\x691\x690");
		sb.Append("\x3\x2\x2\x2\x691\x692\x3\x2\x2\x2\x692\x693\x3\x2\x2\x2\x693");
		sb.Append("\x695\a\x41\x2\x2\x694\x696\x5\x1A0\xD1\x2\x695\x694\x3\x2\x2");
		sb.Append("\x2\x695\x696\x3\x2\x2\x2\x696\x697\x3\x2\x2\x2\x697\x699\a");
		sb.Append("\x41\x2\x2\x698\x69A\x5\x13C\x9F\x2\x699\x698\x3\x2\x2\x2\x699");
		sb.Append("\x69A\x3\x2\x2\x2\x69A\x69B\x3\x2\x2\x2\x69B\x69C\a<\x2\x2\x69C");
		sb.Append("\x69D\x5\x108\x85\x2\x69D\x137\x3\x2\x2\x2\x69E\x69F\a\x17\x2");
		sb.Append("\x2\x69F\x6A1\a;\x2\x2\x6A0\x6A2\x5\x13A\x9E\x2\x6A1\x6A0\x3");
		sb.Append("\x2\x2\x2\x6A1\x6A2\x3\x2\x2\x2\x6A2\x6A3\x3\x2\x2\x2\x6A3\x6A5");
		sb.Append("\a\x41\x2\x2\x6A4\x6A6\x5\x1A0\xD1\x2\x6A5\x6A4\x3\x2\x2\x2");
		sb.Append("\x6A5\x6A6\x3\x2\x2\x2\x6A6\x6A7\x3\x2\x2\x2\x6A7\x6A9\a\x41");
		sb.Append("\x2\x2\x6A8\x6AA\x5\x13C\x9F\x2\x6A9\x6A8\x3\x2\x2\x2\x6A9\x6AA");
		sb.Append("\x3\x2\x2\x2\x6AA\x6AB\x3\x2\x2\x2\x6AB\x6AC\a<\x2\x2\x6AC\x6AD");
		sb.Append("\x5\x10A\x86\x2\x6AD\x139\x3\x2\x2\x2\x6AE\x6B1\x5\x13E\xA0");
		sb.Append("\x2\x6AF\x6B1\x5\x106\x84\x2\x6B0\x6AE\x3\x2\x2\x2\x6B0\x6AF");
		sb.Append("\x3\x2\x2\x2\x6B1\x13B\x3\x2\x2\x2\x6B2\x6B3\x5\x13E\xA0\x2");
		sb.Append("\x6B3\x13D\x3\x2\x2\x2\x6B4\x6B9\x5\x116\x8C\x2\x6B5\x6B6\a");
		sb.Append("\x42\x2\x2\x6B6\x6B8\x5\x116\x8C\x2\x6B7\x6B5\x3\x2\x2\x2\x6B8");
		sb.Append("\x6BB\x3\x2\x2\x2\x6B9\x6B7\x3\x2\x2\x2\x6B9\x6BA\x3\x2\x2\x2");
		sb.Append("\x6BA\x13F\x3\x2\x2\x2\x6BB\x6B9\x3\x2\x2\x2\x6BC\x6BD\a\x17");
		sb.Append("\x2\x2\x6BD\x6C1\a;\x2\x2\x6BE\x6C0\x5\x9EP\x2\x6BF\x6BE\x3");
		sb.Append("\x2\x2\x2\x6C0\x6C3\x3\x2\x2\x2\x6C1\x6BF\x3\x2\x2\x2\x6C1\x6C2");
		sb.Append("\x3\x2\x2\x2\x6C2\x6C4\x3\x2\x2\x2\x6C3\x6C1\x3\x2\x2\x2\x6C4");
		sb.Append("\x6C5\x5v<\x2\x6C5\x6C6\x5r:\x2\x6C6\x6C7\aJ\x2\x2\x6C7\x6C8");
		sb.Append("\x5\x1A0\xD1\x2\x6C8\x6C9\a<\x2\x2\x6C9\x6CA\x5\x108\x85\x2");
		sb.Append("\x6CA\x141\x3\x2\x2\x2\x6CB\x6CC\a\x17\x2\x2\x6CC\x6D0\a;\x2");
		sb.Append("\x2\x6CD\x6CF\x5\x9EP\x2\x6CE\x6CD\x3\x2\x2\x2\x6CF\x6D2\x3");
		sb.Append("\x2\x2\x2\x6D0\x6CE\x3\x2\x2\x2\x6D0\x6D1\x3\x2\x2\x2\x6D1\x6D3");
		sb.Append("\x3\x2\x2\x2\x6D2\x6D0\x3\x2\x2\x2\x6D3\x6D4\x5v<\x2\x6D4\x6D5");
		sb.Append("\x5r:\x2\x6D5\x6D6\aJ\x2\x2\x6D6\x6D7\x5\x1A0\xD1\x2\x6D7\x6D8");
		sb.Append("\a<\x2\x2\x6D8\x6D9\x5\x10A\x86\x2\x6D9\x143\x3\x2\x2\x2\x6DA");
		sb.Append("\x6DC\a\x6\x2\x2\x6DB\x6DD\ah\x2\x2\x6DC\x6DB\x3\x2\x2\x2\x6DC");
		sb.Append("\x6DD\x3\x2\x2\x2\x6DD\x6DE\x3\x2\x2\x2\x6DE\x6DF\a\x41\x2\x2");
		sb.Append("\x6DF\x145\x3\x2\x2\x2\x6E0\x6E2\a\r\x2\x2\x6E1\x6E3\ah\x2\x2");
		sb.Append("\x6E2\x6E1\x3\x2\x2\x2\x6E2\x6E3\x3\x2\x2\x2\x6E3\x6E4\x3\x2");
		sb.Append("\x2\x2\x6E4\x6E5\a\x41\x2\x2\x6E5\x147\x3\x2\x2\x2\x6E6\x6E8");
		sb.Append("\a&\x2\x2\x6E7\x6E9\x5\x1A0\xD1\x2\x6E8\x6E7\x3\x2\x2\x2\x6E8");
		sb.Append("\x6E9\x3\x2\x2\x2\x6E9\x6EA\x3\x2\x2\x2\x6EA\x6EB\a\x41\x2\x2");
		sb.Append("\x6EB\x149\x3\x2\x2\x2\x6EC\x6ED\a.\x2\x2\x6ED\x6EE\x5\x1A0");
		sb.Append("\xD1\x2\x6EE\x6EF\a\x41\x2\x2\x6EF\x14B\x3\x2\x2\x2\x6F0\x6F1");
		sb.Append("\a,\x2\x2\x6F1\x6F2\a;\x2\x2\x6F2\x6F3\x5\x1A0\xD1\x2\x6F3\x6F4");
		sb.Append("\a<\x2\x2\x6F4\x6F5\x5\xFE\x80\x2\x6F5\x14D\x3\x2\x2\x2\x6F6");
		sb.Append("\x6F7\a\x31\x2\x2\x6F7\x6F8\x5\xFE\x80\x2\x6F8\x6F9\x5\x150");
		sb.Append("\xA9\x2\x6F9\x703\x3\x2\x2\x2\x6FA\x6FB\a\x31\x2\x2\x6FB\x6FD");
		sb.Append("\x5\xFE\x80\x2\x6FC\x6FE\x5\x150\xA9\x2\x6FD\x6FC\x3\x2\x2\x2");
		sb.Append("\x6FD\x6FE\x3\x2\x2\x2\x6FE\x6FF\x3\x2\x2\x2\x6FF\x700\x5\x158");
		sb.Append("\xAD\x2\x700\x703\x3\x2\x2\x2\x701\x703\x5\x15A\xAE\x2\x702");
		sb.Append("\x6F6\x3\x2\x2\x2\x702\x6FA\x3\x2\x2\x2\x702\x701\x3\x2\x2\x2");
		sb.Append("\x703\x14F\x3\x2\x2\x2\x704\x708\x5\x152\xAA\x2\x705\x707\x5");
		sb.Append("\x152\xAA\x2\x706\x705\x3\x2\x2\x2\x707\x70A\x3\x2\x2\x2\x708");
		sb.Append("\x706\x3\x2\x2\x2\x708\x709\x3\x2\x2\x2\x709\x151\x3\x2\x2\x2");
		sb.Append("\x70A\x708\x3\x2\x2\x2\x70B\x70C\a\t\x2\x2\x70C\x70D\a;\x2\x2");
		sb.Append("\x70D\x70E\x5\x154\xAB\x2\x70E\x70F\a<\x2\x2\x70F\x710\x5\xFE");
		sb.Append("\x80\x2\x710\x153\x3\x2\x2\x2\x711\x713\x5\x9EP\x2\x712\x711");
		sb.Append("\x3\x2\x2\x2\x713\x716\x3\x2\x2\x2\x714\x712\x3\x2\x2\x2\x714");
		sb.Append("\x715\x3\x2\x2\x2\x715\x717\x3\x2\x2\x2\x716\x714\x3\x2\x2\x2");
		sb.Append("\x717\x718\x5\x156\xAC\x2\x718\x719\x5r:\x2\x719\x155\x3\x2");
		sb.Append("\x2\x2\x71A\x71F\x5~@\x2\x71B\x71C\aX\x2\x2\x71C\x71E\x5\x12");
		sb.Append("\n\x2\x71D\x71B\x3\x2\x2\x2\x71E\x721\x3\x2\x2\x2\x71F\x71D");
		sb.Append("\x3\x2\x2\x2\x71F\x720\x3\x2\x2\x2\x720\x157\x3\x2\x2\x2\x721");
		sb.Append("\x71F\x3\x2\x2\x2\x722\x723\a\x15\x2\x2\x723\x724\x5\xFE\x80");
		sb.Append("\x2\x724\x159\x3\x2\x2\x2\x725\x726\a\x31\x2\x2\x726\x727\x5");
		sb.Append("\x15C\xAF\x2\x727\x729\x5\xFE\x80\x2\x728\x72A\x5\x150\xA9\x2");
		sb.Append("\x729\x728\x3\x2\x2\x2\x729\x72A\x3\x2\x2\x2\x72A\x72C\x3\x2");
		sb.Append("\x2\x2\x72B\x72D\x5\x158\xAD\x2\x72C\x72B\x3\x2\x2\x2\x72C\x72D");
		sb.Append("\x3\x2\x2\x2\x72D\x15B\x3\x2\x2\x2\x72E\x72F\a;\x2\x2\x72F\x731");
		sb.Append("\x5\x15E\xB0\x2\x730\x732\a\x41\x2\x2\x731\x730\x3\x2\x2\x2");
		sb.Append("\x731\x732\x3\x2\x2\x2\x732\x733\x3\x2\x2\x2\x733\x734\a<\x2");
		sb.Append("\x2\x734\x15D\x3\x2\x2\x2\x735\x73A\x5\x160\xB1\x2\x736\x737");
		sb.Append("\a\x41\x2\x2\x737\x739\x5\x160\xB1\x2\x738\x736\x3\x2\x2\x2");
		sb.Append("\x739\x73C\x3\x2\x2\x2\x73A\x738\x3\x2\x2\x2\x73A\x73B\x3\x2");
		sb.Append("\x2\x2\x73B\x15F\x3\x2\x2\x2\x73C\x73A\x3\x2\x2\x2\x73D\x73F");
		sb.Append("\x5\x9EP\x2\x73E\x73D\x3\x2\x2\x2\x73F\x742\x3\x2\x2\x2\x740");
		sb.Append("\x73E\x3\x2\x2\x2\x740\x741\x3\x2\x2\x2\x741\x743\x3\x2\x2\x2");
		sb.Append("\x742\x740\x3\x2\x2\x2\x743\x744\x5v<\x2\x744\x745\x5r:\x2\x745");
		sb.Append("\x746\a\x44\x2\x2\x746\x747\x5\x1A0\xD1\x2\x747\x161\x3\x2\x2");
		sb.Append("\x2\x748\x74B\x5\x170\xB9\x2\x749\x74B\x5\x198\xCD\x2\x74A\x748");
		sb.Append("\x3\x2\x2\x2\x74A\x749\x3\x2\x2\x2\x74B\x74F\x3\x2\x2\x2\x74C");
		sb.Append("\x74E\x5\x16A\xB6\x2\x74D\x74C\x3\x2\x2\x2\x74E\x751\x3\x2\x2");
		sb.Append("\x2\x74F\x74D\x3\x2\x2\x2\x74F\x750\x3\x2\x2\x2\x750\x163\x3");
		sb.Append("\x2\x2\x2\x751\x74F\x3\x2\x2\x2\x752\x770\x5\x2\x2\x2\x753\x758");
		sb.Append("\x5\x38\x1D\x2\x754\x755\a?\x2\x2\x755\x757\a@\x2\x2\x756\x754");
		sb.Append("\x3\x2\x2\x2\x757\x75A\x3\x2\x2\x2\x758\x756\x3\x2\x2\x2\x758");
		sb.Append("\x759\x3\x2\x2\x2\x759\x75B\x3\x2\x2\x2\x75A\x758\x3\x2\x2\x2");
		sb.Append("\x75B\x75C\a\x43\x2\x2\x75C\x75D\a\v\x2\x2\x75D\x770\x3\x2\x2");
		sb.Append("\x2\x75E\x75F\a\x32\x2\x2\x75F\x760\a\x43\x2\x2\x760\x770\a");
		sb.Append("\v\x2\x2\x761\x770\a-\x2\x2\x762\x763\x5\x38\x1D\x2\x763\x764");
		sb.Append("\a\x43\x2\x2\x764\x765\a-\x2\x2\x765\x770\x3\x2\x2\x2\x766\x767");
		sb.Append("\a;\x2\x2\x767\x768\x5\x1A0\xD1\x2\x768\x769\a<\x2\x2\x769\x770");
		sb.Append("\x3\x2\x2\x2\x76A\x770\x5\x176\xBC\x2\x76B\x770\x5\x17E\xC0");
		sb.Append("\x2\x76C\x770\x5\x184\xC3\x2\x76D\x770\x5\x18A\xC6\x2\x76E\x770");
		sb.Append("\x5\x192\xCA\x2\x76F\x752\x3\x2\x2\x2\x76F\x753\x3\x2\x2\x2");
		sb.Append("\x76F\x75E\x3\x2\x2\x2\x76F\x761\x3\x2\x2\x2\x76F\x762\x3\x2");
		sb.Append("\x2\x2\x76F\x766\x3\x2\x2\x2\x76F\x76A\x3\x2\x2\x2\x76F\x76B");
		sb.Append("\x3\x2\x2\x2\x76F\x76C\x3\x2\x2\x2\x76F\x76D\x3\x2\x2\x2\x76F");
		sb.Append("\x76E\x3\x2\x2\x2\x770\x165\x3\x2\x2\x2\x771\x772\x3\x2\x2\x2");
		sb.Append("\x772\x167\x3\x2\x2\x2\x773\x790\x5\x2\x2\x2\x774\x779\x5\x38");
		sb.Append("\x1D\x2\x775\x776\a?\x2\x2\x776\x778\a@\x2\x2\x777\x775\x3\x2");
		sb.Append("\x2\x2\x778\x77B\x3\x2\x2\x2\x779\x777\x3\x2\x2\x2\x779\x77A");
		sb.Append("\x3\x2\x2\x2\x77A\x77C\x3\x2\x2\x2\x77B\x779\x3\x2\x2\x2\x77C");
		sb.Append("\x77D\a\x43\x2\x2\x77D\x77E\a\v\x2\x2\x77E\x790\x3\x2\x2\x2");
		sb.Append("\x77F\x780\a\x32\x2\x2\x780\x781\a\x43\x2\x2\x781\x790\a\v\x2");
		sb.Append("\x2\x782\x790\a-\x2\x2\x783\x784\x5\x38\x1D\x2\x784\x785\a\x43");
		sb.Append("\x2\x2\x785\x786\a-\x2\x2\x786\x790\x3\x2\x2\x2\x787\x788\a");
		sb.Append(";\x2\x2\x788\x789\x5\x1A0\xD1\x2\x789\x78A\a<\x2\x2\x78A\x790");
		sb.Append("\x3\x2\x2\x2\x78B\x790\x5\x176\xBC\x2\x78C\x790\x5\x17E\xC0");
		sb.Append("\x2\x78D\x790\x5\x18A\xC6\x2\x78E\x790\x5\x192\xCA\x2\x78F\x773");
		sb.Append("\x3\x2\x2\x2\x78F\x774\x3\x2\x2\x2\x78F\x77F\x3\x2\x2\x2\x78F");
		sb.Append("\x782\x3\x2\x2\x2\x78F\x783\x3\x2\x2\x2\x78F\x787\x3\x2\x2\x2");
		sb.Append("\x78F\x78B\x3\x2\x2\x2\x78F\x78C\x3\x2\x2\x2\x78F\x78D\x3\x2");
		sb.Append("\x2\x2\x78F\x78E\x3\x2\x2\x2\x790\x169\x3\x2\x2\x2\x791\x797");
		sb.Append("\x5\x178\xBD\x2\x792\x797\x5\x180\xC1\x2\x793\x797\x5\x186\xC4");
		sb.Append("\x2\x794\x797\x5\x18C\xC7\x2\x795\x797\x5\x194\xCB\x2\x796\x791");
		sb.Append("\x3\x2\x2\x2\x796\x792\x3\x2\x2\x2\x796\x793\x3\x2\x2\x2\x796");
		sb.Append("\x794\x3\x2\x2\x2\x796\x795\x3\x2\x2\x2\x797\x16B\x3\x2\x2\x2");
		sb.Append("\x798\x799\x3\x2\x2\x2\x799\x16D\x3\x2\x2\x2\x79A\x79F\x5\x178");
		sb.Append("\xBD\x2\x79B\x79F\x5\x180\xC1\x2\x79C\x79F\x5\x18C\xC7\x2\x79D");
		sb.Append("\x79F\x5\x194\xCB\x2\x79E\x79A\x3\x2\x2\x2\x79E\x79B\x3\x2\x2");
		sb.Append("\x2\x79E\x79C\x3\x2\x2\x2\x79E\x79D\x3\x2\x2\x2\x79F\x16F\x3");
		sb.Append("\x2\x2\x2\x7A0\x7C9\x5\x2\x2\x2\x7A1\x7A6\x5\x38\x1D\x2\x7A2");
		sb.Append("\x7A3\a?\x2\x2\x7A3\x7A5\a@\x2\x2\x7A4\x7A2\x3\x2\x2\x2\x7A5");
		sb.Append("\x7A8\x3\x2\x2\x2\x7A6\x7A4\x3\x2\x2\x2\x7A6\x7A7\x3\x2\x2\x2");
		sb.Append("\x7A7\x7A9\x3\x2\x2\x2\x7A8\x7A6\x3\x2\x2\x2\x7A9\x7AA\a\x43");
		sb.Append("\x2\x2\x7AA\x7AB\a\v\x2\x2\x7AB\x7C9\x3\x2\x2\x2\x7AC\x7B1\x5");
		sb.Append("x=\x2\x7AD\x7AE\a?\x2\x2\x7AE\x7B0\a@\x2\x2\x7AF\x7AD\x3\x2");
		sb.Append("\x2\x2\x7B0\x7B3\x3\x2\x2\x2\x7B1\x7AF\x3\x2\x2\x2\x7B1\x7B2");
		sb.Append("\x3\x2\x2\x2\x7B2\x7B4\x3\x2\x2\x2\x7B3\x7B1\x3\x2\x2\x2\x7B4");
		sb.Append("\x7B5\a\x43\x2\x2\x7B5\x7B6\a\v\x2\x2\x7B6\x7C9\x3\x2\x2\x2");
		sb.Append("\x7B7\x7B8\a\x32\x2\x2\x7B8\x7B9\a\x43\x2\x2\x7B9\x7C9\a\v\x2");
		sb.Append("\x2\x7BA\x7C9\a-\x2\x2\x7BB\x7BC\x5\x38\x1D\x2\x7BC\x7BD\a\x43");
		sb.Append("\x2\x2\x7BD\x7BE\a-\x2\x2\x7BE\x7C9\x3\x2\x2\x2\x7BF\x7C0\a");
		sb.Append(";\x2\x2\x7C0\x7C1\x5\x1A0\xD1\x2\x7C1\x7C2\a<\x2\x2\x7C2\x7C9");
		sb.Append("\x3\x2\x2\x2\x7C3\x7C9\x5\x17A\xBE\x2\x7C4\x7C9\x5\x182\xC2");
		sb.Append("\x2\x7C5\x7C9\x5\x188\xC5\x2\x7C6\x7C9\x5\x18E\xC8\x2\x7C7\x7C9");
		sb.Append("\x5\x196\xCC\x2\x7C8\x7A0\x3\x2\x2\x2\x7C8\x7A1\x3\x2\x2\x2");
		sb.Append("\x7C8\x7AC\x3\x2\x2\x2\x7C8\x7B7\x3\x2\x2\x2\x7C8\x7BA\x3\x2");
		sb.Append("\x2\x2\x7C8\x7BB\x3\x2\x2\x2\x7C8\x7BF\x3\x2\x2\x2\x7C8\x7C3");
		sb.Append("\x3\x2\x2\x2\x7C8\x7C4\x3\x2\x2\x2\x7C8\x7C5\x3\x2\x2\x2\x7C8");
		sb.Append("\x7C6\x3\x2\x2\x2\x7C8\x7C7\x3\x2\x2\x2\x7C9\x171\x3\x2\x2\x2");
		sb.Append("\x7CA\x7CB\x3\x2\x2\x2\x7CB\x173\x3\x2\x2\x2\x7CC\x7F4\x5\x2");
		sb.Append("\x2\x2\x7CD\x7D2\x5\x38\x1D\x2\x7CE\x7CF\a?\x2\x2\x7CF\x7D1");
		sb.Append("\a@\x2\x2\x7D0\x7CE\x3\x2\x2\x2\x7D1\x7D4\x3\x2\x2\x2\x7D2\x7D0");
		sb.Append("\x3\x2\x2\x2\x7D2\x7D3\x3\x2\x2\x2\x7D3\x7D5\x3\x2\x2\x2\x7D4");
		sb.Append("\x7D2\x3\x2\x2\x2\x7D5\x7D6\a\x43\x2\x2\x7D6\x7D7\a\v\x2\x2");
		sb.Append("\x7D7\x7F4\x3\x2\x2\x2\x7D8\x7DD\x5x=\x2\x7D9\x7DA\a?\x2\x2");
		sb.Append("\x7DA\x7DC\a@\x2\x2\x7DB\x7D9\x3\x2\x2\x2\x7DC\x7DF\x3\x2\x2");
		sb.Append("\x2\x7DD\x7DB\x3\x2\x2\x2\x7DD\x7DE\x3\x2\x2\x2\x7DE\x7E0\x3");
		sb.Append("\x2\x2\x2\x7DF\x7DD\x3\x2\x2\x2\x7E0\x7E1\a\x43\x2\x2\x7E1\x7E2");
		sb.Append("\a\v\x2\x2\x7E2\x7F4\x3\x2\x2\x2\x7E3\x7E4\a\x32\x2\x2\x7E4");
		sb.Append("\x7E5\a\x43\x2\x2\x7E5\x7F4\a\v\x2\x2\x7E6\x7F4\a-\x2\x2\x7E7");
		sb.Append("\x7E8\x5\x38\x1D\x2\x7E8\x7E9\a\x43\x2\x2\x7E9\x7EA\a-\x2\x2");
		sb.Append("\x7EA\x7F4\x3\x2\x2\x2\x7EB\x7EC\a;\x2\x2\x7EC\x7ED\x5\x1A0");
		sb.Append("\xD1\x2\x7ED\x7EE\a<\x2\x2\x7EE\x7F4\x3\x2\x2\x2\x7EF\x7F4\x5");
		sb.Append("\x17A\xBE\x2\x7F0\x7F4\x5\x182\xC2\x2\x7F1\x7F4\x5\x18E\xC8");
		sb.Append("\x2\x7F2\x7F4\x5\x196\xCC\x2\x7F3\x7CC\x3\x2\x2\x2\x7F3\x7CD");
		sb.Append("\x3\x2\x2\x2\x7F3\x7D8\x3\x2\x2\x2\x7F3\x7E3\x3\x2\x2\x2\x7F3");
		sb.Append("\x7E6\x3\x2\x2\x2\x7F3\x7E7\x3\x2\x2\x2\x7F3\x7EB\x3\x2\x2\x2");
		sb.Append("\x7F3\x7EF\x3\x2\x2\x2\x7F3\x7F0\x3\x2\x2\x2\x7F3\x7F1\x3\x2");
		sb.Append("\x2\x2\x7F3\x7F2\x3\x2\x2\x2\x7F4\x175\x3\x2\x2\x2\x7F5\x7F7");
		sb.Append("\a!\x2\x2\x7F6\x7F8\x5,\x17\x2\x7F7\x7F6\x3\x2\x2\x2\x7F7\x7F8");
		sb.Append("\x3\x2\x2\x2\x7F8\x7FC\x3\x2\x2\x2\x7F9\x7FB\x5\xE8u\x2\x7FA");
		sb.Append("\x7F9\x3\x2\x2\x2\x7FB\x7FE\x3\x2\x2\x2\x7FC\x7FA\x3\x2\x2\x2");
		sb.Append("\x7FC\x7FD\x3\x2\x2\x2\x7FD\x7FF\x3\x2\x2\x2\x7FE\x7FC\x3\x2");
		sb.Append("\x2\x2\x7FF\x80A\ah\x2\x2\x800\x804\a\x43\x2\x2\x801\x803\x5");
		sb.Append("\xE8u\x2\x802\x801\x3\x2\x2\x2\x803\x806\x3\x2\x2\x2\x804\x802");
		sb.Append("\x3\x2\x2\x2\x804\x805\x3\x2\x2\x2\x805\x807\x3\x2\x2\x2\x806");
		sb.Append("\x804\x3\x2\x2\x2\x807\x809\ah\x2\x2\x808\x800\x3\x2\x2\x2\x809");
		sb.Append("\x80C\x3\x2\x2\x2\x80A\x808\x3\x2\x2\x2\x80A\x80B\x3\x2\x2\x2");
		sb.Append("\x80B\x80E\x3\x2\x2\x2\x80C\x80A\x3\x2\x2\x2\x80D\x80F\x5\x17C");
		sb.Append("\xBF\x2\x80E\x80D\x3\x2\x2\x2\x80E\x80F\x3\x2\x2\x2\x80F\x810");
		sb.Append("\x3\x2\x2\x2\x810\x812\a;\x2\x2\x811\x813\x5\x190\xC9\x2\x812");
		sb.Append("\x811\x3\x2\x2\x2\x812\x813\x3\x2\x2\x2\x813\x814\x3\x2\x2\x2");
		sb.Append("\x814\x816\a<\x2\x2\x815\x817\x5\x64\x33\x2\x816\x815\x3\x2");
		sb.Append("\x2\x2\x816\x817\x3\x2\x2\x2\x817\x849\x3\x2\x2\x2\x818\x819");
		sb.Append("\x5<\x1F\x2\x819\x81A\a\x43\x2\x2\x81A\x81C\a!\x2\x2\x81B\x81D");
		sb.Append("\x5,\x17\x2\x81C\x81B\x3\x2\x2\x2\x81C\x81D\x3\x2\x2\x2\x81D");
		sb.Append("\x821\x3\x2\x2\x2\x81E\x820\x5\xE8u\x2\x81F\x81E\x3\x2\x2\x2");
		sb.Append("\x820\x823\x3\x2\x2\x2\x821\x81F\x3\x2\x2\x2\x821\x822\x3\x2");
		sb.Append("\x2\x2\x822\x824\x3\x2\x2\x2\x823\x821\x3\x2\x2\x2\x824\x826");
		sb.Append("\ah\x2\x2\x825\x827\x5\x17C\xBF\x2\x826\x825\x3\x2\x2\x2\x826");
		sb.Append("\x827\x3\x2\x2\x2\x827\x828\x3\x2\x2\x2\x828\x82A\a;\x2\x2\x829");
		sb.Append("\x82B\x5\x190\xC9\x2\x82A\x829\x3\x2\x2\x2\x82A\x82B\x3\x2\x2");
		sb.Append("\x2\x82B\x82C\x3\x2\x2\x2\x82C\x82E\a<\x2\x2\x82D\x82F\x5\x64");
		sb.Append("\x33\x2\x82E\x82D\x3\x2\x2\x2\x82E\x82F\x3\x2\x2\x2\x82F\x849");
		sb.Append("\x3\x2\x2\x2\x830\x831\x5\x162\xB2\x2\x831\x832\a\x43\x2\x2");
		sb.Append("\x832\x834\a!\x2\x2\x833\x835\x5,\x17\x2\x834\x833\x3\x2\x2");
		sb.Append("\x2\x834\x835\x3\x2\x2\x2\x835\x839\x3\x2\x2\x2\x836\x838\x5");
		sb.Append("\xE8u\x2\x837\x836\x3\x2\x2\x2\x838\x83B\x3\x2\x2\x2\x839\x837");
		sb.Append("\x3\x2\x2\x2\x839\x83A\x3\x2\x2\x2\x83A\x83C\x3\x2\x2\x2\x83B");
		sb.Append("\x839\x3\x2\x2\x2\x83C\x83E\ah\x2\x2\x83D\x83F\x5\x17C\xBF\x2");
		sb.Append("\x83E\x83D\x3\x2\x2\x2\x83E\x83F\x3\x2\x2\x2\x83F\x840\x3\x2");
		sb.Append("\x2\x2\x840\x842\a;\x2\x2\x841\x843\x5\x190\xC9\x2\x842\x841");
		sb.Append("\x3\x2\x2\x2\x842\x843\x3\x2\x2\x2\x843\x844\x3\x2\x2\x2\x844");
		sb.Append("\x846\a<\x2\x2\x845\x847\x5\x64\x33\x2\x846\x845\x3\x2\x2\x2");
		sb.Append("\x846\x847\x3\x2\x2\x2\x847\x849\x3\x2\x2\x2\x848\x7F5\x3\x2");
		sb.Append("\x2\x2\x848\x818\x3\x2\x2\x2\x848\x830\x3\x2\x2\x2\x849\x177");
		sb.Append("\x3\x2\x2\x2\x84A\x84B\a\x43\x2\x2\x84B\x84D\a!\x2\x2\x84C\x84E");
		sb.Append("\x5,\x17\x2\x84D\x84C\x3\x2\x2\x2\x84D\x84E\x3\x2\x2\x2\x84E");
		sb.Append("\x852\x3\x2\x2\x2\x84F\x851\x5\xE8u\x2\x850\x84F\x3\x2\x2\x2");
		sb.Append("\x851\x854\x3\x2\x2\x2\x852\x850\x3\x2\x2\x2\x852\x853\x3\x2");
		sb.Append("\x2\x2\x853\x855\x3\x2\x2\x2\x854\x852\x3\x2\x2\x2\x855\x857");
		sb.Append("\ah\x2\x2\x856\x858\x5\x17C\xBF\x2\x857\x856\x3\x2\x2\x2\x857");
		sb.Append("\x858\x3\x2\x2\x2\x858\x859\x3\x2\x2\x2\x859\x85B\a;\x2\x2\x85A");
		sb.Append("\x85C\x5\x190\xC9\x2\x85B\x85A\x3\x2\x2\x2\x85B\x85C\x3\x2\x2");
		sb.Append("\x2\x85C\x85D\x3\x2\x2\x2\x85D\x85F\a<\x2\x2\x85E\x860\x5\x64");
		sb.Append("\x33\x2\x85F\x85E\x3\x2\x2\x2\x85F\x860\x3\x2\x2\x2\x860\x179");
		sb.Append("\x3\x2\x2\x2\x861\x863\a!\x2\x2\x862\x864\x5,\x17\x2\x863\x862");
		sb.Append("\x3\x2\x2\x2\x863\x864\x3\x2\x2\x2\x864\x868\x3\x2\x2\x2\x865");
		sb.Append("\x867\x5\xE8u\x2\x866\x865\x3\x2\x2\x2\x867\x86A\x3\x2\x2\x2");
		sb.Append("\x868\x866\x3\x2\x2\x2\x868\x869\x3\x2\x2\x2\x869\x86B\x3\x2");
		sb.Append("\x2\x2\x86A\x868\x3\x2\x2\x2\x86B\x876\ah\x2\x2\x86C\x870\a");
		sb.Append("\x43\x2\x2\x86D\x86F\x5\xE8u\x2\x86E\x86D\x3\x2\x2\x2\x86F\x872");
		sb.Append("\x3\x2\x2\x2\x870\x86E\x3\x2\x2\x2\x870\x871\x3\x2\x2\x2\x871");
		sb.Append("\x873\x3\x2\x2\x2\x872\x870\x3\x2\x2\x2\x873\x875\ah\x2\x2\x874");
		sb.Append("\x86C\x3\x2\x2\x2\x875\x878\x3\x2\x2\x2\x876\x874\x3\x2\x2\x2");
		sb.Append("\x876\x877\x3\x2\x2\x2\x877\x87A\x3\x2\x2\x2\x878\x876\x3\x2");
		sb.Append("\x2\x2\x879\x87B\x5\x17C\xBF\x2\x87A\x879\x3\x2\x2\x2\x87A\x87B");
		sb.Append("\x3\x2\x2\x2\x87B\x87C\x3\x2\x2\x2\x87C\x87E\a;\x2\x2\x87D\x87F");
		sb.Append("\x5\x190\xC9\x2\x87E\x87D\x3\x2\x2\x2\x87E\x87F\x3\x2\x2\x2");
		sb.Append("\x87F\x880\x3\x2\x2\x2\x880\x882\a<\x2\x2\x881\x883\x5\x64\x33");
		sb.Append("\x2\x882\x881\x3\x2\x2\x2\x882\x883\x3\x2\x2\x2\x883\x89D\x3");
		sb.Append("\x2\x2\x2\x884\x885\x5<\x1F\x2\x885\x886\a\x43\x2\x2\x886\x888");
		sb.Append("\a!\x2\x2\x887\x889\x5,\x17\x2\x888\x887\x3\x2\x2\x2\x888\x889");
		sb.Append("\x3\x2\x2\x2\x889\x88D\x3\x2\x2\x2\x88A\x88C\x5\xE8u\x2\x88B");
		sb.Append("\x88A\x3\x2\x2\x2\x88C\x88F\x3\x2\x2\x2\x88D\x88B\x3\x2\x2\x2");
		sb.Append("\x88D\x88E\x3\x2\x2\x2\x88E\x890\x3\x2\x2\x2\x88F\x88D\x3\x2");
		sb.Append("\x2\x2\x890\x892\ah\x2\x2\x891\x893\x5\x17C\xBF\x2\x892\x891");
		sb.Append("\x3\x2\x2\x2\x892\x893\x3\x2\x2\x2\x893\x894\x3\x2\x2\x2\x894");
		sb.Append("\x896\a;\x2\x2\x895\x897\x5\x190\xC9\x2\x896\x895\x3\x2\x2\x2");
		sb.Append("\x896\x897\x3\x2\x2\x2\x897\x898\x3\x2\x2\x2\x898\x89A\a<\x2");
		sb.Append("\x2\x899\x89B\x5\x64\x33\x2\x89A\x899\x3\x2\x2\x2\x89A\x89B");
		sb.Append("\x3\x2\x2\x2\x89B\x89D\x3\x2\x2\x2\x89C\x861\x3\x2\x2\x2\x89C");
		sb.Append("\x884\x3\x2\x2\x2\x89D\x17B\x3\x2\x2\x2\x89E\x8A2\x5,\x17\x2");
		sb.Append("\x89F\x8A0\a\x46\x2\x2\x8A0\x8A2\a\x45\x2\x2\x8A1\x89E\x3\x2");
		sb.Append("\x2\x2\x8A1\x89F\x3\x2\x2\x2\x8A2\x17D\x3\x2\x2\x2\x8A3\x8A4");
		sb.Append("\x5\x162\xB2\x2\x8A4\x8A5\a\x43\x2\x2\x8A5\x8A6\ah\x2\x2\x8A6");
		sb.Append("\x8B1\x3\x2\x2\x2\x8A7\x8A8\a*\x2\x2\x8A8\x8A9\a\x43\x2\x2\x8A9");
		sb.Append("\x8B1\ah\x2\x2\x8AA\x8AB\x5\x38\x1D\x2\x8AB\x8AC\a\x43\x2\x2");
		sb.Append("\x8AC\x8AD\a*\x2\x2\x8AD\x8AE\a\x43\x2\x2\x8AE\x8AF\ah\x2\x2");
		sb.Append("\x8AF\x8B1\x3\x2\x2\x2\x8B0\x8A3\x3\x2\x2\x2\x8B0\x8A7\x3\x2");
		sb.Append("\x2\x2\x8B0\x8AA\x3\x2\x2\x2\x8B1\x17F\x3\x2\x2\x2\x8B2\x8B3");
		sb.Append("\a\x43\x2\x2\x8B3\x8B4\ah\x2\x2\x8B4\x181\x3\x2\x2\x2\x8B5\x8B6");
		sb.Append("\a*\x2\x2\x8B6\x8B7\a\x43\x2\x2\x8B7\x8BF\ah\x2\x2\x8B8\x8B9");
		sb.Append("\x5\x38\x1D\x2\x8B9\x8BA\a\x43\x2\x2\x8BA\x8BB\a*\x2\x2\x8BB");
		sb.Append("\x8BC\a\x43\x2\x2\x8BC\x8BD\ah\x2\x2\x8BD\x8BF\x3\x2\x2\x2\x8BE");
		sb.Append("\x8B5\x3\x2\x2\x2\x8BE\x8B8\x3\x2\x2\x2\x8BF\x183\x3\x2\x2\x2");
		sb.Append("\x8C0\x8C1\x5<\x1F\x2\x8C1\x8C2\a?\x2\x2\x8C2\x8C3\x5\x1A0\xD1");
		sb.Append("\x2\x8C3\x8C4\a@\x2\x2\x8C4\x8CB\x3\x2\x2\x2\x8C5\x8C6\x5\x168");
		sb.Append("\xB5\x2\x8C6\x8C7\a?\x2\x2\x8C7\x8C8\x5\x1A0\xD1\x2\x8C8\x8C9");
		sb.Append("\a@\x2\x2\x8C9\x8CB\x3\x2\x2\x2\x8CA\x8C0\x3\x2\x2\x2\x8CA\x8C5");
		sb.Append("\x3\x2\x2\x2\x8CB\x8D3\x3\x2\x2\x2\x8CC\x8CD\x5\x166\xB4\x2");
		sb.Append("\x8CD\x8CE\a?\x2\x2\x8CE\x8CF\x5\x1A0\xD1\x2\x8CF\x8D0\a@\x2");
		sb.Append("\x2\x8D0\x8D2\x3\x2\x2\x2\x8D1\x8CC\x3\x2\x2\x2\x8D2\x8D5\x3");
		sb.Append("\x2\x2\x2\x8D3\x8D1\x3\x2\x2\x2\x8D3\x8D4\x3\x2\x2\x2\x8D4\x185");
		sb.Append("\x3\x2\x2\x2\x8D5\x8D3\x3\x2\x2\x2\x8D6\x8D7\x5\x16E\xB8\x2");
		sb.Append("\x8D7\x8D8\a?\x2\x2\x8D8\x8D9\x5\x1A0\xD1\x2\x8D9\x8DA\a@\x2");
		sb.Append("\x2\x8DA\x8E2\x3\x2\x2\x2\x8DB\x8DC\x5\x16C\xB7\x2\x8DC\x8DD");
		sb.Append("\a?\x2\x2\x8DD\x8DE\x5\x1A0\xD1\x2\x8DE\x8DF\a@\x2\x2\x8DF\x8E1");
		sb.Append("\x3\x2\x2\x2\x8E0\x8DB\x3\x2\x2\x2\x8E1\x8E4\x3\x2\x2\x2\x8E2");
		sb.Append("\x8E0\x3\x2\x2\x2\x8E2\x8E3\x3\x2\x2\x2\x8E3\x187\x3\x2\x2\x2");
		sb.Append("\x8E4\x8E2\x3\x2\x2\x2\x8E5\x8E6\x5<\x1F\x2\x8E6\x8E7\a?\x2");
		sb.Append("\x2\x8E7\x8E8\x5\x1A0\xD1\x2\x8E8\x8E9\a@\x2\x2\x8E9\x8F0\x3");
		sb.Append("\x2\x2\x2\x8EA\x8EB\x5\x174\xBB\x2\x8EB\x8EC\a?\x2\x2\x8EC\x8ED");
		sb.Append("\x5\x1A0\xD1\x2\x8ED\x8EE\a@\x2\x2\x8EE\x8F0\x3\x2\x2\x2\x8EF");
		sb.Append("\x8E5\x3\x2\x2\x2\x8EF\x8EA\x3\x2\x2\x2\x8F0\x8F8\x3\x2\x2\x2");
		sb.Append("\x8F1\x8F2\x5\x172\xBA\x2\x8F2\x8F3\a?\x2\x2\x8F3\x8F4\x5\x1A0");
		sb.Append("\xD1\x2\x8F4\x8F5\a@\x2\x2\x8F5\x8F7\x3\x2\x2\x2\x8F6\x8F1\x3");
		sb.Append("\x2\x2\x2\x8F7\x8FA\x3\x2\x2\x2\x8F8\x8F6\x3\x2\x2\x2\x8F8\x8F9");
		sb.Append("\x3\x2\x2\x2\x8F9\x189\x3\x2\x2\x2\x8FA\x8F8\x3\x2\x2\x2\x8FB");
		sb.Append("\x8FC\x5> \x2\x8FC\x8FE\a;\x2\x2\x8FD\x8FF\x5\x190\xC9\x2\x8FE");
		sb.Append("\x8FD\x3\x2\x2\x2\x8FE\x8FF\x3\x2\x2\x2\x8FF\x900\x3\x2\x2\x2");
		sb.Append("\x900\x901\a<\x2\x2\x901\x940\x3\x2\x2\x2\x902\x903\x5\x38\x1D");
		sb.Append("\x2\x903\x905\a\x43\x2\x2\x904\x906\x5,\x17\x2\x905\x904\x3");
		sb.Append("\x2\x2\x2\x905\x906\x3\x2\x2\x2\x906\x907\x3\x2\x2\x2\x907\x908");
		sb.Append("\ah\x2\x2\x908\x90A\a;\x2\x2\x909\x90B\x5\x190\xC9\x2\x90A\x909");
		sb.Append("\x3\x2\x2\x2\x90A\x90B\x3\x2\x2\x2\x90B\x90C\x3\x2\x2\x2\x90C");
		sb.Append("\x90D\a<\x2\x2\x90D\x940\x3\x2\x2\x2\x90E\x90F\x5<\x1F\x2\x90F");
		sb.Append("\x911\a\x43\x2\x2\x910\x912\x5,\x17\x2\x911\x910\x3\x2\x2\x2");
		sb.Append("\x911\x912\x3\x2\x2\x2\x912\x913\x3\x2\x2\x2\x913\x914\ah\x2");
		sb.Append("\x2\x914\x916\a;\x2\x2\x915\x917\x5\x190\xC9\x2\x916\x915\x3");
		sb.Append("\x2\x2\x2\x916\x917\x3\x2\x2\x2\x917\x918\x3\x2\x2\x2\x918\x919");
		sb.Append("\a<\x2\x2\x919\x940\x3\x2\x2\x2\x91A\x91B\x5\x162\xB2\x2\x91B");
		sb.Append("\x91D\a\x43\x2\x2\x91C\x91E\x5,\x17\x2\x91D\x91C\x3\x2\x2\x2");
		sb.Append("\x91D\x91E\x3\x2\x2\x2\x91E\x91F\x3\x2\x2\x2\x91F\x920\ah\x2");
		sb.Append("\x2\x920\x922\a;\x2\x2\x921\x923\x5\x190\xC9\x2\x922\x921\x3");
		sb.Append("\x2\x2\x2\x922\x923\x3\x2\x2\x2\x923\x924\x3\x2\x2\x2\x924\x925");
		sb.Append("\a<\x2\x2\x925\x940\x3\x2\x2\x2\x926\x927\a*\x2\x2\x927\x929");
		sb.Append("\a\x43\x2\x2\x928\x92A\x5,\x17\x2\x929\x928\x3\x2\x2\x2\x929");
		sb.Append("\x92A\x3\x2\x2\x2\x92A\x92B\x3\x2\x2\x2\x92B\x92C\ah\x2\x2\x92C");
		sb.Append("\x92E\a;\x2\x2\x92D\x92F\x5\x190\xC9\x2\x92E\x92D\x3\x2\x2\x2");
		sb.Append("\x92E\x92F\x3\x2\x2\x2\x92F\x930\x3\x2\x2\x2\x930\x940\a<\x2");
		sb.Append("\x2\x931\x932\x5\x38\x1D\x2\x932\x933\a\x43\x2\x2\x933\x934");
		sb.Append("\a*\x2\x2\x934\x936\a\x43\x2\x2\x935\x937\x5,\x17\x2\x936\x935");
		sb.Append("\x3\x2\x2\x2\x936\x937\x3\x2\x2\x2\x937\x938\x3\x2\x2\x2\x938");
		sb.Append("\x939\ah\x2\x2\x939\x93B\a;\x2\x2\x93A\x93C\x5\x190\xC9\x2\x93B");
		sb.Append("\x93A\x3\x2\x2\x2\x93B\x93C\x3\x2\x2\x2\x93C\x93D\x3\x2\x2\x2");
		sb.Append("\x93D\x93E\a<\x2\x2\x93E\x940\x3\x2\x2\x2\x93F\x8FB\x3\x2\x2");
		sb.Append("\x2\x93F\x902\x3\x2\x2\x2\x93F\x90E\x3\x2\x2\x2\x93F\x91A\x3");
		sb.Append("\x2\x2\x2\x93F\x926\x3\x2\x2\x2\x93F\x931\x3\x2\x2\x2\x940\x18B");
		sb.Append("\x3\x2\x2\x2\x941\x943\a\x43\x2\x2\x942\x944\x5,\x17\x2\x943");
		sb.Append("\x942\x3\x2\x2\x2\x943\x944\x3\x2\x2\x2\x944\x945\x3\x2\x2\x2");
		sb.Append("\x945\x946\ah\x2\x2\x946\x948\a;\x2\x2\x947\x949\x5\x190\xC9");
		sb.Append("\x2\x948\x947\x3\x2\x2\x2\x948\x949\x3\x2\x2\x2\x949\x94A\x3");
		sb.Append("\x2\x2\x2\x94A\x94B\a<\x2\x2\x94B\x18D\x3\x2\x2\x2\x94C\x94D");
		sb.Append("\x5> \x2\x94D\x94F\a;\x2\x2\x94E\x950\x5\x190\xC9\x2\x94F\x94E");
		sb.Append("\x3\x2\x2\x2\x94F\x950\x3\x2\x2\x2\x950\x951\x3\x2\x2\x2\x951");
		sb.Append("\x952\a<\x2\x2\x952\x985\x3\x2\x2\x2\x953\x954\x5\x38\x1D\x2");
		sb.Append("\x954\x956\a\x43\x2\x2\x955\x957\x5,\x17\x2\x956\x955\x3\x2");
		sb.Append("\x2\x2\x956\x957\x3\x2\x2\x2\x957\x958\x3\x2\x2\x2\x958\x959");
		sb.Append("\ah\x2\x2\x959\x95B\a;\x2\x2\x95A\x95C\x5\x190\xC9\x2\x95B\x95A");
		sb.Append("\x3\x2\x2\x2\x95B\x95C\x3\x2\x2\x2\x95C\x95D\x3\x2\x2\x2\x95D");
		sb.Append("\x95E\a<\x2\x2\x95E\x985\x3\x2\x2\x2\x95F\x960\x5<\x1F\x2\x960");
		sb.Append("\x962\a\x43\x2\x2\x961\x963\x5,\x17\x2\x962\x961\x3\x2\x2\x2");
		sb.Append("\x962\x963\x3\x2\x2\x2\x963\x964\x3\x2\x2\x2\x964\x965\ah\x2");
		sb.Append("\x2\x965\x967\a;\x2\x2\x966\x968\x5\x190\xC9\x2\x967\x966\x3");
		sb.Append("\x2\x2\x2\x967\x968\x3\x2\x2\x2\x968\x969\x3\x2\x2\x2\x969\x96A");
		sb.Append("\a<\x2\x2\x96A\x985\x3\x2\x2\x2\x96B\x96C\a*\x2\x2\x96C\x96E");
		sb.Append("\a\x43\x2\x2\x96D\x96F\x5,\x17\x2\x96E\x96D\x3\x2\x2\x2\x96E");
		sb.Append("\x96F\x3\x2\x2\x2\x96F\x970\x3\x2\x2\x2\x970\x971\ah\x2\x2\x971");
		sb.Append("\x973\a;\x2\x2\x972\x974\x5\x190\xC9\x2\x973\x972\x3\x2\x2\x2");
		sb.Append("\x973\x974\x3\x2\x2\x2\x974\x975\x3\x2\x2\x2\x975\x985\a<\x2");
		sb.Append("\x2\x976\x977\x5\x38\x1D\x2\x977\x978\a\x43\x2\x2\x978\x979");
		sb.Append("\a*\x2\x2\x979\x97B\a\x43\x2\x2\x97A\x97C\x5,\x17\x2\x97B\x97A");
		sb.Append("\x3\x2\x2\x2\x97B\x97C\x3\x2\x2\x2\x97C\x97D\x3\x2\x2\x2\x97D");
		sb.Append("\x97E\ah\x2\x2\x97E\x980\a;\x2\x2\x97F\x981\x5\x190\xC9\x2\x980");
		sb.Append("\x97F\x3\x2\x2\x2\x980\x981\x3\x2\x2\x2\x981\x982\x3\x2\x2\x2");
		sb.Append("\x982\x983\a<\x2\x2\x983\x985\x3\x2\x2\x2\x984\x94C\x3\x2\x2");
		sb.Append("\x2\x984\x953\x3\x2\x2\x2\x984\x95F\x3\x2\x2\x2\x984\x96B\x3");
		sb.Append("\x2\x2\x2\x984\x976\x3\x2\x2\x2\x985\x18F\x3\x2\x2\x2\x986\x98B");
		sb.Append("\x5\x1A0\xD1\x2\x987\x988\a\x42\x2\x2\x988\x98A\x5\x1A0\xD1");
		sb.Append("\x2\x989\x987\x3\x2\x2\x2\x98A\x98D\x3\x2\x2\x2\x98B\x989\x3");
		sb.Append("\x2\x2\x2\x98B\x98C\x3\x2\x2\x2\x98C\x191\x3\x2\x2\x2\x98D\x98B");
		sb.Append("\x3\x2\x2\x2\x98E\x98F\x5<\x1F\x2\x98F\x991\a\\\x2\x2\x990\x992");
		sb.Append("\x5,\x17\x2\x991\x990\x3\x2\x2\x2\x991\x992\x3\x2\x2\x2\x992");
		sb.Append("\x993\x3\x2\x2\x2\x993\x994\ah\x2\x2\x994\x9BE\x3\x2\x2\x2\x995");
		sb.Append("\x996\x5\xE\b\x2\x996\x998\a\\\x2\x2\x997\x999\x5,\x17\x2\x998");
		sb.Append("\x997\x3\x2\x2\x2\x998\x999\x3\x2\x2\x2\x999\x99A\x3\x2\x2\x2");
		sb.Append("\x99A\x99B\ah\x2\x2\x99B\x9BE\x3\x2\x2\x2\x99C\x99D\x5\x162");
		sb.Append("\xB2\x2\x99D\x99F\a\\\x2\x2\x99E\x9A0\x5,\x17\x2\x99F\x99E\x3");
		sb.Append("\x2\x2\x2\x99F\x9A0\x3\x2\x2\x2\x9A0\x9A1\x3\x2\x2\x2\x9A1\x9A2");
		sb.Append("\ah\x2\x2\x9A2\x9BE\x3\x2\x2\x2\x9A3\x9A4\a*\x2\x2\x9A4\x9A6");
		sb.Append("\a\\\x2\x2\x9A5\x9A7\x5,\x17\x2\x9A6\x9A5\x3\x2\x2\x2\x9A6\x9A7");
		sb.Append("\x3\x2\x2\x2\x9A7\x9A8\x3\x2\x2\x2\x9A8\x9BE\ah\x2\x2\x9A9\x9AA");
		sb.Append("\x5\x38\x1D\x2\x9AA\x9AB\a\x43\x2\x2\x9AB\x9AC\a*\x2\x2\x9AC");
		sb.Append("\x9AE\a\\\x2\x2\x9AD\x9AF\x5,\x17\x2\x9AE\x9AD\x3\x2\x2\x2\x9AE");
		sb.Append("\x9AF\x3\x2\x2\x2\x9AF\x9B0\x3\x2\x2\x2\x9B0\x9B1\ah\x2\x2\x9B1");
		sb.Append("\x9BE\x3\x2\x2\x2\x9B2\x9B3\x5\x12\n\x2\x9B3\x9B5\a\\\x2\x2");
		sb.Append("\x9B4\x9B6\x5,\x17\x2\x9B5\x9B4\x3\x2\x2\x2\x9B5\x9B6\x3\x2");
		sb.Append("\x2\x2\x9B6\x9B7\x3\x2\x2\x2\x9B7\x9B8\a!\x2\x2\x9B8\x9BE\x3");
		sb.Append("\x2\x2\x2\x9B9\x9BA\x5 \x11\x2\x9BA\x9BB\a\\\x2\x2\x9BB\x9BC");
		sb.Append("\a!\x2\x2\x9BC\x9BE\x3\x2\x2\x2\x9BD\x98E\x3\x2\x2\x2\x9BD\x995");
		sb.Append("\x3\x2\x2\x2\x9BD\x99C\x3\x2\x2\x2\x9BD\x9A3\x3\x2\x2\x2\x9BD");
		sb.Append("\x9A9\x3\x2\x2\x2\x9BD\x9B2\x3\x2\x2\x2\x9BD\x9B9\x3\x2\x2\x2");
		sb.Append("\x9BE\x193\x3\x2\x2\x2\x9BF\x9C1\a\\\x2\x2\x9C0\x9C2\x5,\x17");
		sb.Append("\x2\x9C1\x9C0\x3\x2\x2\x2\x9C1\x9C2\x3\x2\x2\x2\x9C2\x9C3\x3");
		sb.Append("\x2\x2\x2\x9C3\x9C4\ah\x2\x2\x9C4\x195\x3\x2\x2\x2\x9C5\x9C6");
		sb.Append("\x5<\x1F\x2\x9C6\x9C8\a\\\x2\x2\x9C7\x9C9\x5,\x17\x2\x9C8\x9C7");
		sb.Append("\x3\x2\x2\x2\x9C8\x9C9\x3\x2\x2\x2\x9C9\x9CA\x3\x2\x2\x2\x9CA");
		sb.Append("\x9CB\ah\x2\x2\x9CB\x9EE\x3\x2\x2\x2\x9CC\x9CD\x5\xE\b\x2\x9CD");
		sb.Append("\x9CF\a\\\x2\x2\x9CE\x9D0\x5,\x17\x2\x9CF\x9CE\x3\x2\x2\x2\x9CF");
		sb.Append("\x9D0\x3\x2\x2\x2\x9D0\x9D1\x3\x2\x2\x2\x9D1\x9D2\ah\x2\x2\x9D2");
		sb.Append("\x9EE\x3\x2\x2\x2\x9D3\x9D4\a*\x2\x2\x9D4\x9D6\a\\\x2\x2\x9D5");
		sb.Append("\x9D7\x5,\x17\x2\x9D6\x9D5\x3\x2\x2\x2\x9D6\x9D7\x3\x2\x2\x2");
		sb.Append("\x9D7\x9D8\x3\x2\x2\x2\x9D8\x9EE\ah\x2\x2\x9D9\x9DA\x5\x38\x1D");
		sb.Append("\x2\x9DA\x9DB\a\x43\x2\x2\x9DB\x9DC\a*\x2\x2\x9DC\x9DE\a\\\x2");
		sb.Append("\x2\x9DD\x9DF\x5,\x17\x2\x9DE\x9DD\x3\x2\x2\x2\x9DE\x9DF\x3");
		sb.Append("\x2\x2\x2\x9DF\x9E0\x3\x2\x2\x2\x9E0\x9E1\ah\x2\x2\x9E1\x9EE");
		sb.Append("\x3\x2\x2\x2\x9E2\x9E3\x5\x12\n\x2\x9E3\x9E5\a\\\x2\x2\x9E4");
		sb.Append("\x9E6\x5,\x17\x2\x9E5\x9E4\x3\x2\x2\x2\x9E5\x9E6\x3\x2\x2\x2");
		sb.Append("\x9E6\x9E7\x3\x2\x2\x2\x9E7\x9E8\a!\x2\x2\x9E8\x9EE\x3\x2\x2");
		sb.Append("\x2\x9E9\x9EA\x5 \x11\x2\x9EA\x9EB\a\\\x2\x2\x9EB\x9EC\a!\x2");
		sb.Append("\x2\x9EC\x9EE\x3\x2\x2\x2\x9ED\x9C5\x3\x2\x2\x2\x9ED\x9CC\x3");
		sb.Append("\x2\x2\x2\x9ED\x9D3\x3\x2\x2\x2\x9ED\x9D9\x3\x2\x2\x2\x9ED\x9E2");
		sb.Append("\x3\x2\x2\x2\x9ED\x9E9\x3\x2\x2\x2\x9EE\x197\x3\x2\x2\x2\x9EF");
		sb.Append("\x9F0\a!\x2\x2\x9F0\x9F1\x5\x6\x4\x2\x9F1\x9F3\x5\x19A\xCE\x2");
		sb.Append("\x9F2\x9F4\x5\"\x12\x2\x9F3\x9F2\x3\x2\x2\x2\x9F3\x9F4\x3\x2");
		sb.Append("\x2\x2\x9F4\xA06\x3\x2\x2\x2\x9F5\x9F6\a!\x2\x2\x9F6\x9F7\x5");
		sb.Append("\x10\t\x2\x9F7\x9F9\x5\x19A\xCE\x2\x9F8\x9FA\x5\"\x12\x2\x9F9");
		sb.Append("\x9F8\x3\x2\x2\x2\x9F9\x9FA\x3\x2\x2\x2\x9FA\xA06\x3\x2\x2\x2");
		sb.Append("\x9FB\x9FC\a!\x2\x2\x9FC\x9FD\x5\x6\x4\x2\x9FD\x9FE\x5\"\x12");
		sb.Append("\x2\x9FE\x9FF\x5\xFA~\x2\x9FF\xA06\x3\x2\x2\x2\xA00\xA01\a!");
		sb.Append("\x2\x2\xA01\xA02\x5\x10\t\x2\xA02\xA03\x5\"\x12\x2\xA03\xA04");
		sb.Append("\x5\xFA~\x2\xA04\xA06\x3\x2\x2\x2\xA05\x9EF\x3\x2\x2\x2\xA05");
		sb.Append("\x9F5\x3\x2\x2\x2\xA05\x9FB\x3\x2\x2\x2\xA05\xA00\x3\x2\x2\x2");
		sb.Append("\xA06\x199\x3\x2\x2\x2\xA07\xA0B\x5\x19C\xCF\x2\xA08\xA0A\x5");
		sb.Append("\x19C\xCF\x2\xA09\xA08\x3\x2\x2\x2\xA0A\xA0D\x3\x2\x2\x2\xA0B");
		sb.Append("\xA09\x3\x2\x2\x2\xA0B\xA0C\x3\x2\x2\x2\xA0C\x19B\x3\x2\x2\x2");
		sb.Append("\xA0D\xA0B\x3\x2\x2\x2\xA0E\xA10\x5\xE8u\x2\xA0F\xA0E\x3\x2");
		sb.Append("\x2\x2\xA10\xA13\x3\x2\x2\x2\xA11\xA0F\x3\x2\x2\x2\xA11\xA12");
		sb.Append("\x3\x2\x2\x2\xA12\xA14\x3\x2\x2\x2\xA13\xA11\x3\x2\x2\x2\xA14");
		sb.Append("\xA15\a?\x2\x2\xA15\xA16\x5\x1A0\xD1\x2\xA16\xA17\a@\x2\x2\xA17");
		sb.Append("\x19D\x3\x2\x2\x2\xA18\xA19\x5\x1A0\xD1\x2\xA19\x19F\x3\x2\x2");
		sb.Append("\x2\xA1A\xA1D\x5\x1A2\xD2\x2\xA1B\xA1D\x5\x1AA\xD6\x2\xA1C\xA1A");
		sb.Append("\x3\x2\x2\x2\xA1C\xA1B\x3\x2\x2\x2\xA1D\x1A1\x3\x2\x2\x2\xA1E");
		sb.Append("\xA1F\x5\x1A4\xD3\x2\xA1F\xA20\a[\x2\x2\xA20\xA21\x5\x1A8\xD5");
		sb.Append("\x2\xA21\x1A3\x3\x2\x2\x2\xA22\xA2D\ah\x2\x2\xA23\xA25\a;\x2");
		sb.Append("\x2\xA24\xA26\x5\x98M\x2\xA25\xA24\x3\x2\x2\x2\xA25\xA26\x3");
		sb.Append("\x2\x2\x2\xA26\xA27\x3\x2\x2\x2\xA27\xA2D\a<\x2\x2\xA28\xA29");
		sb.Append("\a;\x2\x2\xA29\xA2A\x5\x1A6\xD4\x2\xA2A\xA2B\a<\x2\x2\xA2B\xA2D");
		sb.Append("\x3\x2\x2\x2\xA2C\xA22\x3\x2\x2\x2\xA2C\xA23\x3\x2\x2\x2\xA2C");
		sb.Append("\xA28\x3\x2\x2\x2\xA2D\x1A5\x3\x2\x2\x2\xA2E\xA33\ah\x2\x2\xA2F");
		sb.Append("\xA30\a\x42\x2\x2\xA30\xA32\ah\x2\x2\xA31\xA2F\x3\x2\x2\x2\xA32");
		sb.Append("\xA35\x3\x2\x2\x2\xA33\xA31\x3\x2\x2\x2\xA33\xA34\x3\x2\x2\x2");
		sb.Append("\xA34\x1A7\x3\x2\x2\x2\xA35\xA33\x3\x2\x2\x2\xA36\xA39\x5\x1A0");
		sb.Append("\xD1\x2\xA37\xA39\x5\xFE\x80\x2\xA38\xA36\x3\x2\x2\x2\xA38\xA37");
		sb.Append("\x3\x2\x2\x2\xA39\x1A9\x3\x2\x2\x2\xA3A\xA3D\x5\x1B2\xDA\x2");
		sb.Append("\xA3B\xA3D\x5\x1AC\xD7\x2\xA3C\xA3A\x3\x2\x2\x2\xA3C\xA3B\x3");
		sb.Append("\x2\x2\x2\xA3D\x1AB\x3\x2\x2\x2\xA3E\xA3F\x5\x1AE\xD8\x2\xA3F");
		sb.Append("\xA40\x5\x1B0\xD9\x2\xA40\xA41\x5\x1A0\xD1\x2\xA41\x1AD\x3\x2");
		sb.Append("\x2\x2\xA42\xA46\x5<\x1F\x2\xA43\xA46\x5\x17E\xC0\x2\xA44\xA46");
		sb.Append("\x5\x184\xC3\x2\xA45\xA42\x3\x2\x2\x2\xA45\xA43\x3\x2\x2\x2");
		sb.Append("\xA45\xA44\x3\x2\x2\x2\xA46\x1AF\x3\x2\x2\x2\xA47\xA48\t\x5");
		sb.Append("\x2\x2\xA48\x1B1\x3\x2\x2\x2\xA49\xA51\x5\x1B4\xDB\x2\xA4A\xA4B");
		sb.Append("\x5\x1B4\xDB\x2\xA4B\xA4C\aI\x2\x2\xA4C\xA4D\x5\x1A0\xD1\x2");
		sb.Append("\xA4D\xA4E\aJ\x2\x2\xA4E\xA4F\x5\x1B2\xDA\x2\xA4F\xA51\x3\x2");
		sb.Append("\x2\x2\xA50\xA49\x3\x2\x2\x2\xA50\xA4A\x3\x2\x2\x2\xA51\x1B3");
		sb.Append("\x3\x2\x2\x2\xA52\xA53\b\xDB\x1\x2\xA53\xA54\x5\x1B6\xDC\x2");
		sb.Append("\xA54\xA5A\x3\x2\x2\x2\xA55\xA56\f\x3\x2\x2\xA56\xA57\aP\x2");
		sb.Append("\x2\xA57\xA59\x5\x1B6\xDC\x2\xA58\xA55\x3\x2\x2\x2\xA59\xA5C");
		sb.Append("\x3\x2\x2\x2\xA5A\xA58\x3\x2\x2\x2\xA5A\xA5B\x3\x2\x2\x2\xA5B");
		sb.Append("\x1B5\x3\x2\x2\x2\xA5C\xA5A\x3\x2\x2\x2\xA5D\xA5E\b\xDC\x1\x2");
		sb.Append("\xA5E\xA5F\x5\x1B8\xDD\x2\xA5F\xA65\x3\x2\x2\x2\xA60\xA61\f");
		sb.Append("\x3\x2\x2\xA61\xA62\aO\x2\x2\xA62\xA64\x5\x1B8\xDD\x2\xA63\xA60");
		sb.Append("\x3\x2\x2\x2\xA64\xA67\x3\x2\x2\x2\xA65\xA63\x3\x2\x2\x2\xA65");
		sb.Append("\xA66\x3\x2\x2\x2\xA66\x1B7\x3\x2\x2\x2\xA67\xA65\x3\x2\x2\x2");
		sb.Append("\xA68\xA69\b\xDD\x1\x2\xA69\xA6A\x5\x1BA\xDE\x2\xA6A\xA70\x3");
		sb.Append("\x2\x2\x2\xA6B\xA6C\f\x3\x2\x2\xA6C\xA6D\aX\x2\x2\xA6D\xA6F");
		sb.Append("\x5\x1BA\xDE\x2\xA6E\xA6B\x3\x2\x2\x2\xA6F\xA72\x3\x2\x2\x2");
		sb.Append("\xA70\xA6E\x3\x2\x2\x2\xA70\xA71\x3\x2\x2\x2\xA71\x1B9\x3\x2");
		sb.Append("\x2\x2\xA72\xA70\x3\x2\x2\x2\xA73\xA74\b\xDE\x1\x2\xA74\xA75");
		sb.Append("\x5\x1BC\xDF\x2\xA75\xA7B\x3\x2\x2\x2\xA76\xA77\f\x3\x2\x2\xA77");
		sb.Append("\xA78\aY\x2\x2\xA78\xA7A\x5\x1BC\xDF\x2\xA79\xA76\x3\x2\x2\x2");
		sb.Append("\xA7A\xA7D\x3\x2\x2\x2\xA7B\xA79\x3\x2\x2\x2\xA7B\xA7C\x3\x2");
		sb.Append("\x2\x2\xA7C\x1BB\x3\x2\x2\x2\xA7D\xA7B\x3\x2\x2\x2\xA7E\xA7F");
		sb.Append("\b\xDF\x1\x2\xA7F\xA80\x5\x1BE\xE0\x2\xA80\xA86\x3\x2\x2\x2");
		sb.Append("\xA81\xA82\f\x3\x2\x2\xA82\xA83\aW\x2\x2\xA83\xA85\x5\x1BE\xE0");
		sb.Append("\x2\xA84\xA81\x3\x2\x2\x2\xA85\xA88\x3\x2\x2\x2\xA86\xA84\x3");
		sb.Append("\x2\x2\x2\xA86\xA87\x3\x2\x2\x2\xA87\x1BD\x3\x2\x2\x2\xA88\xA86");
		sb.Append("\x3\x2\x2\x2\xA89\xA8A\b\xE0\x1\x2\xA8A\xA8B\x5\x1C0\xE1\x2");
		sb.Append("\xA8B\xA94\x3\x2\x2\x2\xA8C\xA8D\f\x4\x2\x2\xA8D\xA8E\aK\x2");
		sb.Append("\x2\xA8E\xA93\x5\x1C0\xE1\x2\xA8F\xA90\f\x3\x2\x2\xA90\xA91");
		sb.Append("\aN\x2\x2\xA91\xA93\x5\x1C0\xE1\x2\xA92\xA8C\x3\x2\x2\x2\xA92");
		sb.Append("\xA8F\x3\x2\x2\x2\xA93\xA96\x3\x2\x2\x2\xA94\xA92\x3\x2\x2\x2");
		sb.Append("\xA94\xA95\x3\x2\x2\x2\xA95\x1BF\x3\x2\x2\x2\xA96\xA94\x3\x2");
		sb.Append("\x2\x2\xA97\xA98\b\xE1\x1\x2\xA98\xA99\x5\x1C2\xE2\x2\xA99\xAAB");
		sb.Append("\x3\x2\x2\x2\xA9A\xA9B\f\a\x2\x2\xA9B\xA9C\a\x46\x2\x2\xA9C");
		sb.Append("\xAAA\x5\x1C2\xE2\x2\xA9D\xA9E\f\x6\x2\x2\xA9E\xA9F\a\x45\x2");
		sb.Append("\x2\xA9F\xAAA\x5\x1C2\xE2\x2\xAA0\xAA1\f\x5\x2\x2\xAA1\xAA2");
		sb.Append("\aL\x2\x2\xAA2\xAAA\x5\x1C2\xE2\x2\xAA3\xAA4\f\x4\x2\x2\xAA4");
		sb.Append("\xAA5\aM\x2\x2\xAA5\xAAA\x5\x1C2\xE2\x2\xAA6\xAA7\f\x3\x2\x2");
		sb.Append("\xAA7\xAA8\a\x1C\x2\x2\xAA8\xAAA\x5\xE\b\x2\xAA9\xA9A\x3\x2");
		sb.Append("\x2\x2\xAA9\xA9D\x3\x2\x2\x2\xAA9\xAA0\x3\x2\x2\x2\xAA9\xAA3");
		sb.Append("\x3\x2\x2\x2\xAA9\xAA6\x3\x2\x2\x2\xAAA\xAAD\x3\x2\x2\x2\xAAB");
		sb.Append("\xAA9\x3\x2\x2\x2\xAAB\xAAC\x3\x2\x2\x2\xAAC\x1C1\x3\x2\x2\x2");
		sb.Append("\xAAD\xAAB\x3\x2\x2\x2\xAAE\xAAF\b\xE2\x1\x2\xAAF\xAB0\x5\x1C4");
		sb.Append("\xE3\x2\xAB0\xAC0\x3\x2\x2\x2\xAB1\xAB2\f\x5\x2\x2\xAB2\xAB3");
		sb.Append("\a\x46\x2\x2\xAB3\xAB4\a\x46\x2\x2\xAB4\xABF\x5\x1C4\xE3\x2");
		sb.Append("\xAB5\xAB6\f\x4\x2\x2\xAB6\xAB7\a\x45\x2\x2\xAB7\xAB8\a\x45");
		sb.Append("\x2\x2\xAB8\xABF\x5\x1C4\xE3\x2\xAB9\xABA\f\x3\x2\x2\xABA\xABB");
		sb.Append("\a\x45\x2\x2\xABB\xABC\a\x45\x2\x2\xABC\xABD\a\x45\x2\x2\xABD");
		sb.Append("\xABF\x5\x1C4\xE3\x2\xABE\xAB1\x3\x2\x2\x2\xABE\xAB5\x3\x2\x2");
		sb.Append("\x2\xABE\xAB9\x3\x2\x2\x2\xABF\xAC2\x3\x2\x2\x2\xAC0\xABE\x3");
		sb.Append("\x2\x2\x2\xAC0\xAC1\x3\x2\x2\x2\xAC1\x1C3\x3\x2\x2\x2\xAC2\xAC0");
		sb.Append("\x3\x2\x2\x2\xAC3\xAC4\b\xE3\x1\x2\xAC4\xAC5\x5\x1C6\xE4\x2");
		sb.Append("\xAC5\xACE\x3\x2\x2\x2\xAC6\xAC7\f\x4\x2\x2\xAC7\xAC8\aS\x2");
		sb.Append("\x2\xAC8\xACD\x5\x1C6\xE4\x2\xAC9\xACA\f\x3\x2\x2\xACA\xACB");
		sb.Append("\aT\x2\x2\xACB\xACD\x5\x1C6\xE4\x2\xACC\xAC6\x3\x2\x2\x2\xACC");
		sb.Append("\xAC9\x3\x2\x2\x2\xACD\xAD0\x3\x2\x2\x2\xACE\xACC\x3\x2\x2\x2");
		sb.Append("\xACE\xACF\x3\x2\x2\x2\xACF\x1C5\x3\x2\x2\x2\xAD0\xACE\x3\x2");
		sb.Append("\x2\x2\xAD1\xAD2\b\xE4\x1\x2\xAD2\xAD3\x5\x1C8\xE5\x2\xAD3\xADF");
		sb.Append("\x3\x2\x2\x2\xAD4\xAD5\f\x5\x2\x2\xAD5\xAD6\aU\x2\x2\xAD6\xADE");
		sb.Append("\x5\x1C8\xE5\x2\xAD7\xAD8\f\x4\x2\x2\xAD8\xAD9\aV\x2\x2\xAD9");
		sb.Append("\xADE\x5\x1C8\xE5\x2\xADA\xADB\f\x3\x2\x2\xADB\xADC\aZ\x2\x2");
		sb.Append("\xADC\xADE\x5\x1C8\xE5\x2\xADD\xAD4\x3\x2\x2\x2\xADD\xAD7\x3");
		sb.Append("\x2\x2\x2\xADD\xADA\x3\x2\x2\x2\xADE\xAE1\x3\x2\x2\x2\xADF\xADD");
		sb.Append("\x3\x2\x2\x2\xADF\xAE0\x3\x2\x2\x2\xAE0\x1C7\x3\x2\x2\x2\xAE1");
		sb.Append("\xADF\x3\x2\x2\x2\xAE2\xAEA\x5\x1CA\xE6\x2\xAE3\xAEA\x5\x1CC");
		sb.Append("\xE7\x2\xAE4\xAE5\aS\x2\x2\xAE5\xAEA\x5\x1C8\xE5\x2\xAE6\xAE7");
		sb.Append("\aT\x2\x2\xAE7\xAEA\x5\x1C8\xE5\x2\xAE8\xAEA\x5\x1CE\xE8\x2");
		sb.Append("\xAE9\xAE2\x3\x2\x2\x2\xAE9\xAE3\x3\x2\x2\x2\xAE9\xAE4\x3\x2");
		sb.Append("\x2\x2\xAE9\xAE6\x3\x2\x2\x2\xAE9\xAE8\x3\x2\x2\x2\xAEA\x1C9");
		sb.Append("\x3\x2\x2\x2\xAEB\xAEC\aQ\x2\x2\xAEC\xAED\x5\x1C8\xE5\x2\xAED");
		sb.Append("\x1CB\x3\x2\x2\x2\xAEE\xAEF\aR\x2\x2\xAEF\xAF0\x5\x1C8\xE5\x2");
		sb.Append("\xAF0\x1CD\x3\x2\x2\x2\xAF1\xAF8\x5\x1D0\xE9\x2\xAF2\xAF3\a");
		sb.Append("H\x2\x2\xAF3\xAF8\x5\x1C8\xE5\x2\xAF4\xAF5\aG\x2\x2\xAF5\xAF8");
		sb.Append("\x5\x1C8\xE5\x2\xAF6\xAF8\x5\x1DA\xEE\x2\xAF7\xAF1\x3\x2\x2");
		sb.Append("\x2\xAF7\xAF2\x3\x2\x2\x2\xAF7\xAF4\x3\x2\x2\x2\xAF7\xAF6\x3");
		sb.Append("\x2\x2\x2\xAF8\x1CF\x3\x2\x2\x2\xAF9\xAFC\x5\x162\xB2\x2\xAFA");
		sb.Append("\xAFC\x5<\x1F\x2\xAFB\xAF9\x3\x2\x2\x2\xAFB\xAFA\x3\x2\x2\x2");
		sb.Append("\xAFC\xB01\x3\x2\x2\x2\xAFD\xB00\x5\x1D4\xEB\x2\xAFE\xB00\x5");
		sb.Append("\x1D8\xED\x2\xAFF\xAFD\x3\x2\x2\x2\xAFF\xAFE\x3\x2\x2\x2\xB00");
		sb.Append("\xB03\x3\x2\x2\x2\xB01\xAFF\x3\x2\x2\x2\xB01\xB02\x3\x2\x2\x2");
		sb.Append("\xB02\x1D1\x3\x2\x2\x2\xB03\xB01\x3\x2\x2\x2\xB04\xB05\x5\x1D0");
		sb.Append("\xE9\x2\xB05\xB06\aQ\x2\x2\xB06\x1D3\x3\x2\x2\x2\xB07\xB08\a");
		sb.Append("Q\x2\x2\xB08\x1D5\x3\x2\x2\x2\xB09\xB0A\x5\x1D0\xE9\x2\xB0A");
		sb.Append("\xB0B\aR\x2\x2\xB0B\x1D7\x3\x2\x2\x2\xB0C\xB0D\aR\x2\x2\xB0D");
		sb.Append("\x1D9\x3\x2\x2\x2\xB0E\xB0F\a;\x2\x2\xB0F\xB10\x5\x6\x4\x2\xB10");
		sb.Append("\xB11\a<\x2\x2\xB11\xB12\x5\x1C8\xE5\x2\xB12\xB2A\x3\x2\x2\x2");
		sb.Append("\xB13\xB14\a;\x2\x2\xB14\xB18\x5\xE\b\x2\xB15\xB17\x5*\x16\x2");
		sb.Append("\xB16\xB15\x3\x2\x2\x2\xB17\xB1A\x3\x2\x2\x2\xB18\xB16\x3\x2");
		sb.Append("\x2\x2\xB18\xB19\x3\x2\x2\x2\xB19\xB1B\x3\x2\x2\x2\xB1A\xB18");
		sb.Append("\x3\x2\x2\x2\xB1B\xB1C\a<\x2\x2\xB1C\xB1D\x5\x1CE\xE8\x2\xB1D");
		sb.Append("\xB2A\x3\x2\x2\x2\xB1E\xB1F\a;\x2\x2\xB1F\xB23\x5\xE\b\x2\xB20");
		sb.Append("\xB22\x5*\x16\x2\xB21\xB20\x3\x2\x2\x2\xB22\xB25\x3\x2\x2\x2");
		sb.Append("\xB23\xB21\x3\x2\x2\x2\xB23\xB24\x3\x2\x2\x2\xB24\xB26\x3\x2");
		sb.Append("\x2\x2\xB25\xB23\x3\x2\x2\x2\xB26\xB27\a<\x2\x2\xB27\xB28\x5");
		sb.Append("\x1A2\xD2\x2\xB28\xB2A\x3\x2\x2\x2\xB29\xB0E\x3\x2\x2\x2\xB29");
		sb.Append("\xB13\x3\x2\x2\x2\xB29\xB1E\x3\x2\x2\x2\xB2A\x1DB\x3\x2\x2\x2");
		sb.Append("\x146\x1E0\x1E5\x1EC\x1F0\x1F4\x1FD\x201\x205\x207\x20D\x212");
		sb.Append("\x219\x21E\x220\x226\x22B\x230\x235\x240\x24E\x253\x25B\x262");
		sb.Append("\x268\x26D\x278\x27B\x289\x28E\x293\x298\x29E\x2A8\x2B0\x2BA");
		sb.Append("\x2C2\x2CE\x2D2\x2D7\x2DD\x2E5\x2EE\x2F9\x316\x31A\x31F\x325");
		sb.Append("\x328\x32B\x337\x342\x350\x357\x360\x367\x36C\x37B\x382\x388");
		sb.Append("\x38C\x390\x394\x398\x39D\x3A1\x3A5\x3A7\x3AC\x3B3\x3B8\x3BA");
		sb.Append("\x3C0\x3C5\x3C9\x3DC\x3E1\x3F1\x3F6\x3FC\x402\x404\x408\x40D");
		sb.Append("\x411\x418\x41F\x427\x42A\x42F\x437\x43C\x443\x44A\x44F\x455");
		sb.Append("\x461\x466\x46A\x474\x479\x481\x484\x489\x491\x494\x499\x49E");
		sb.Append("\x4A3\x4A8\x4AF\x4B4\x4BC\x4C1\x4C6\x4CB\x4D1\x4D7\x4DA\x4DD");
		sb.Append("\x4E6\x4EC\x4F2\x4F5\x4F8\x500\x505\x50A\x510\x513\x51E\x527");
		sb.Append("\x531\x536\x541\x546\x552\x557\x563\x56D\x572\x57A\x57D\x584");
		sb.Append("\x58C\x592\x59B\x5A5\x5A9\x5AC\x5B5\x5C3\x5C6\x5CF\x5D4\x5DC");
		sb.Append("\x5E2\x5EA\x5F6\x5FD\x60B\x621\x643\x64F\x655\x661\x66E\x688");
		sb.Append("\x68C\x691\x695\x699\x6A1\x6A5\x6A9\x6B0\x6B9\x6C1\x6D0\x6DC");
		sb.Append("\x6E2\x6E8\x6FD\x702\x708\x714\x71F\x729\x72C\x731\x73A\x740");
		sb.Append("\x74A\x74F\x758\x76F\x779\x78F\x796\x79E\x7A6\x7B1\x7C8\x7D2");
		sb.Append("\x7DD\x7F3\x7F7\x7FC\x804\x80A\x80E\x812\x816\x81C\x821\x826");
		sb.Append("\x82A\x82E\x834\x839\x83E\x842\x846\x848\x84D\x852\x857\x85B");
		sb.Append("\x85F\x863\x868\x870\x876\x87A\x87E\x882\x888\x88D\x892\x896");
		sb.Append("\x89A\x89C\x8A1\x8B0\x8BE\x8CA\x8D3\x8E2\x8EF\x8F8\x8FE\x905");
		sb.Append("\x90A\x911\x916\x91D\x922\x929\x92E\x936\x93B\x93F\x943\x948");
		sb.Append("\x94F\x956\x95B\x962\x967\x96E\x973\x97B\x980\x984\x98B\x991");
		sb.Append("\x998\x99F\x9A6\x9AE\x9B5\x9BD\x9C1\x9C8\x9CF\x9D6\x9DE\x9E5");
		sb.Append("\x9ED\x9F3\x9F9\xA05\xA0B\xA11\xA1C\xA25\xA2C\xA33\xA38\xA3C");
		sb.Append("\xA45\xA50\xA5A\xA65\xA70\xA7B\xA86\xA92\xA94\xAA9\xAAB\xABE");
		sb.Append("\xAC0\xACC\xACE\xADD\xADF\xAE9\xAF7\xAFB\xAFF\xB01\xB18\xB23");
		sb.Append("\xB29");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
